{"ast":null,"code":"import { CubeTexture, DataTexture, FileLoader, FloatType, HalfFloatType, LinearFilter, LinearSRGBColorSpace, Loader } from 'three';\nimport { RGBELoader } from '../loaders/RGBELoader.js';\n\n/**\n * A loader for loading HDR cube textures.\n *\n * ```js\n * const loader = new HDRCubeTextureLoader();\n * loader.setPath( 'textures/cube/pisaHDR/' );\n * const cubeTexture = await loader.loadAsync( [ 'px.hdr', 'nx.hdr', 'py.hdr', 'ny.hdr', 'pz.hdr', 'nz.hdr' ] );\n *\n * scene.background = cubeTexture;\n * scene.environment = cubeTexture;\n * ```\n *\n * @augments Loader\n * @three_import import { HDRCubeTextureLoader } from 'three/addons/loaders/HDRCubeTextureLoader.js';\n */\nclass HDRCubeTextureLoader extends Loader {\n  /**\n   * Constructs a new HDR cube texture loader.\n   *\n   * @param {LoadingManager} [manager] - The loading manager.\n   */\n  constructor(manager) {\n    super(manager);\n\n    /**\n     * The internal HDR loader that loads the\n     * individual textures for each cube face.\n     *\n     * @type {RGBELoader}\n     */\n    this.hdrLoader = new RGBELoader();\n\n    /**\n     * The texture type.\n     *\n     * @type {(HalfFloatType|FloatType)}\n     * @default HalfFloatType\n     */\n    this.type = HalfFloatType;\n  }\n\n  /**\n   * Starts loading from the given URLs and passes the loaded HDR cube texture\n   * to the `onLoad()` callback.\n   *\n   * @param {Array<string>} urls - The paths/URLs of the files to be loaded. This can also be a data URIs.\n   * @param {function(CubeTexture)} onLoad - Executed when the loading process has been finished.\n   * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n   * @param {onErrorCallback} onError - Executed when errors occur.\n   * @return {CubeTexture} The HDR cube texture.\n   */\n  load(urls, onLoad, onProgress, onError) {\n    const texture = new CubeTexture();\n    texture.type = this.type;\n    switch (texture.type) {\n      case FloatType:\n        texture.colorSpace = LinearSRGBColorSpace;\n        texture.minFilter = LinearFilter;\n        texture.magFilter = LinearFilter;\n        texture.generateMipmaps = false;\n        break;\n      case HalfFloatType:\n        texture.colorSpace = LinearSRGBColorSpace;\n        texture.minFilter = LinearFilter;\n        texture.magFilter = LinearFilter;\n        texture.generateMipmaps = false;\n        break;\n    }\n    const scope = this;\n    let loaded = 0;\n    function loadHDRData(i, onLoad, onProgress, onError) {\n      new FileLoader(scope.manager).setPath(scope.path).setResponseType('arraybuffer').setWithCredentials(scope.withCredentials).load(urls[i], function (buffer) {\n        loaded++;\n        const texData = scope.hdrLoader.parse(buffer);\n        if (!texData) return;\n        if (texData.data !== undefined) {\n          const dataTexture = new DataTexture(texData.data, texData.width, texData.height);\n          dataTexture.type = texture.type;\n          dataTexture.colorSpace = texture.colorSpace;\n          dataTexture.format = texture.format;\n          dataTexture.minFilter = texture.minFilter;\n          dataTexture.magFilter = texture.magFilter;\n          dataTexture.generateMipmaps = texture.generateMipmaps;\n          texture.images[i] = dataTexture;\n        }\n        if (loaded === 6) {\n          texture.needsUpdate = true;\n          if (onLoad) onLoad(texture);\n        }\n      }, onProgress, onError);\n    }\n    for (let i = 0; i < urls.length; i++) {\n      loadHDRData(i, onLoad, onProgress, onError);\n    }\n    return texture;\n  }\n\n  /**\n   * Sets the texture type.\n   *\n   * @param {(HalfFloatType|FloatType)} value - The texture type to set.\n   * @return {RGBELoader} A reference to this loader.\n   */\n  setDataType(value) {\n    this.type = value;\n    this.hdrLoader.setDataType(value);\n    return this;\n  }\n}\nexport { HDRCubeTextureLoader };","map":{"version":3,"names":["CubeTexture","DataTexture","FileLoader","FloatType","HalfFloatType","LinearFilter","LinearSRGBColorSpace","Loader","RGBELoader","HDRCubeTextureLoader","constructor","manager","hdrLoader","type","load","urls","onLoad","onProgress","onError","texture","colorSpace","minFilter","magFilter","generateMipmaps","scope","loaded","loadHDRData","i","setPath","path","setResponseType","setWithCredentials","withCredentials","buffer","texData","parse","data","undefined","dataTexture","width","height","format","images","needsUpdate","length","setDataType","value"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/loaders/HDRCubeTextureLoader.js"],"sourcesContent":["import {\n\tCubeTexture,\n\tDataTexture,\n\tFileLoader,\n\tFloatType,\n\tHalfFloatType,\n\tLinearFilter,\n\tLinearSRGBColorSpace,\n\tLoader\n} from 'three';\nimport { RGBELoader } from '../loaders/RGBELoader.js';\n\n/**\n * A loader for loading HDR cube textures.\n *\n * ```js\n * const loader = new HDRCubeTextureLoader();\n * loader.setPath( 'textures/cube/pisaHDR/' );\n * const cubeTexture = await loader.loadAsync( [ 'px.hdr', 'nx.hdr', 'py.hdr', 'ny.hdr', 'pz.hdr', 'nz.hdr' ] );\n *\n * scene.background = cubeTexture;\n * scene.environment = cubeTexture;\n * ```\n *\n * @augments Loader\n * @three_import import { HDRCubeTextureLoader } from 'three/addons/loaders/HDRCubeTextureLoader.js';\n */\nclass HDRCubeTextureLoader extends Loader {\n\n\t/**\n\t * Constructs a new HDR cube texture loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\t/**\n\t\t * The internal HDR loader that loads the\n\t\t * individual textures for each cube face.\n\t\t *\n\t\t * @type {RGBELoader}\n\t\t */\n\t\tthis.hdrLoader = new RGBELoader();\n\n\t\t/**\n\t\t * The texture type.\n\t\t *\n\t\t * @type {(HalfFloatType|FloatType)}\n\t\t * @default HalfFloatType\n\t\t */\n\t\tthis.type = HalfFloatType;\n\n\t}\n\n\t/**\n\t * Starts loading from the given URLs and passes the loaded HDR cube texture\n\t * to the `onLoad()` callback.\n\t *\n\t * @param {Array<string>} urls - The paths/URLs of the files to be loaded. This can also be a data URIs.\n\t * @param {function(CubeTexture)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t * @return {CubeTexture} The HDR cube texture.\n\t */\n\tload( urls, onLoad, onProgress, onError ) {\n\n\t\tconst texture = new CubeTexture();\n\n\t\ttexture.type = this.type;\n\n\t\tswitch ( texture.type ) {\n\n\t\t\tcase FloatType:\n\n\t\t\t\ttexture.colorSpace = LinearSRGBColorSpace;\n\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\ttexture.magFilter = LinearFilter;\n\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\tbreak;\n\n\t\t\tcase HalfFloatType:\n\n\t\t\t\ttexture.colorSpace = LinearSRGBColorSpace;\n\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\ttexture.magFilter = LinearFilter;\n\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tconst scope = this;\n\n\t\tlet loaded = 0;\n\n\t\tfunction loadHDRData( i, onLoad, onProgress, onError ) {\n\n\t\t\tnew FileLoader( scope.manager )\n\t\t\t\t.setPath( scope.path )\n\t\t\t\t.setResponseType( 'arraybuffer' )\n\t\t\t\t.setWithCredentials( scope.withCredentials )\n\t\t\t\t.load( urls[ i ], function ( buffer ) {\n\n\t\t\t\t\tloaded ++;\n\n\t\t\t\t\tconst texData = scope.hdrLoader.parse( buffer );\n\n\t\t\t\t\tif ( ! texData ) return;\n\n\t\t\t\t\tif ( texData.data !== undefined ) {\n\n\t\t\t\t\t\tconst dataTexture = new DataTexture( texData.data, texData.width, texData.height );\n\n\t\t\t\t\t\tdataTexture.type = texture.type;\n\t\t\t\t\t\tdataTexture.colorSpace = texture.colorSpace;\n\t\t\t\t\t\tdataTexture.format = texture.format;\n\t\t\t\t\t\tdataTexture.minFilter = texture.minFilter;\n\t\t\t\t\t\tdataTexture.magFilter = texture.magFilter;\n\t\t\t\t\t\tdataTexture.generateMipmaps = texture.generateMipmaps;\n\n\t\t\t\t\t\ttexture.images[ i ] = dataTexture;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t\t}\n\n\t\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t\tfor ( let i = 0; i < urls.length; i ++ ) {\n\n\t\t\tloadHDRData( i, onLoad, onProgress, onError );\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n\t/**\n\t * Sets the texture type.\n\t *\n\t * @param {(HalfFloatType|FloatType)} value - The texture type to set.\n\t * @return {RGBELoader} A reference to this loader.\n\t */\n\tsetDataType( value ) {\n\n\t\tthis.type = value;\n\t\tthis.hdrLoader.setDataType( value );\n\n\t\treturn this;\n\n\t}\n\n}\n\nexport { HDRCubeTextureLoader };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}