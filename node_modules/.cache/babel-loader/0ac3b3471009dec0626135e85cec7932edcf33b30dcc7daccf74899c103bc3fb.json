{"ast":null,"code":"import { Vector4 } from 'three';\nimport * as NURBSUtils from '../curves/NURBSUtils.js';\n\n/**\n * This class represents a NURBS surface.\n *\n * Implementation is based on `(x, y [, z=0 [, w=1]])` control points with `w=weight`.\n *\n * @three_import import { NURBSSurface } from 'three/addons/curves/NURBSSurface.js';\n */\nclass NURBSSurface {\n  /**\n   * Constructs a new NURBS surface.\n   *\n   * @param {number} degree1 - The first NURBS degree.\n   * @param {number} degree2 - The second NURBS degree.\n   * @param {Array<number>} knots1 - The first knots as a flat array of numbers.\n   * @param {Array<number>} knots2 - The second knots as a flat array of numbers.\n   * @param {Array<Array<Vector2|Vector3|Vector4>>} controlPoints - An array^2 holding control points.\n   */\n  constructor(degree1, degree2, knots1, knots2, controlPoints) {\n    /**\n     * The first NURBS degree.\n     *\n     * @type {number}\n     */\n    this.degree1 = degree1;\n\n    /**\n     * The second NURBS degree.\n     *\n     * @type {number}\n     */\n    this.degree2 = degree2;\n\n    /**\n     * The first knots as a flat array of numbers.\n     *\n     * @type {Array<number>}\n     */\n    this.knots1 = knots1;\n\n    /**\n     * The second knots as a flat array of numbers.\n     *\n     * @type {Array<number>}\n     */\n    this.knots2 = knots2;\n\n    /**\n     *  An array holding arrays of control points.\n     *\n     * @type {Array<Array<Vector2|Vector3|Vector4>>}\n     */\n    this.controlPoints = [];\n    const len1 = knots1.length - degree1 - 1;\n    const len2 = knots2.length - degree2 - 1;\n\n    // ensure Vector4 for control points\n    for (let i = 0; i < len1; ++i) {\n      this.controlPoints[i] = [];\n      for (let j = 0; j < len2; ++j) {\n        const point = controlPoints[i][j];\n        this.controlPoints[i][j] = new Vector4(point.x, point.y, point.z, point.w);\n      }\n    }\n  }\n\n  /**\n   * This method returns a vector in 3D space for the given interpolation factor. This vector lies on the NURBS surface.\n   *\n   * @param {number} t1 - The first interpolation factor representing the `u` position on the surface. Must be in the range `[0,1]`.\n   * @param {number} t2 - The second interpolation factor representing the `v` position on the surface. Must be in the range `[0,1]`.\n   * @param {Vector3} target - The target vector the result is written to.\n   */\n  getPoint(t1, t2, target) {\n    const u = this.knots1[0] + t1 * (this.knots1[this.knots1.length - 1] - this.knots1[0]); // linear mapping t1->u\n    const v = this.knots2[0] + t2 * (this.knots2[this.knots2.length - 1] - this.knots2[0]); // linear mapping t2->u\n\n    NURBSUtils.calcSurfacePoint(this.degree1, this.degree2, this.knots1, this.knots2, this.controlPoints, u, v, target);\n  }\n}\nexport { NURBSSurface };","map":{"version":3,"names":["Vector4","NURBSUtils","NURBSSurface","constructor","degree1","degree2","knots1","knots2","controlPoints","len1","length","len2","i","j","point","x","y","z","w","getPoint","t1","t2","target","u","v","calcSurfacePoint"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/curves/NURBSSurface.js"],"sourcesContent":["import {\n\tVector4\n} from 'three';\nimport * as NURBSUtils from '../curves/NURBSUtils.js';\n\n/**\n * This class represents a NURBS surface.\n *\n * Implementation is based on `(x, y [, z=0 [, w=1]])` control points with `w=weight`.\n *\n * @three_import import { NURBSSurface } from 'three/addons/curves/NURBSSurface.js';\n */\nclass NURBSSurface {\n\n\t/**\n\t * Constructs a new NURBS surface.\n\t *\n\t * @param {number} degree1 - The first NURBS degree.\n\t * @param {number} degree2 - The second NURBS degree.\n\t * @param {Array<number>} knots1 - The first knots as a flat array of numbers.\n\t * @param {Array<number>} knots2 - The second knots as a flat array of numbers.\n\t * @param {Array<Array<Vector2|Vector3|Vector4>>} controlPoints - An array^2 holding control points.\n\t */\n\tconstructor( degree1, degree2, knots1, knots2, controlPoints ) {\n\n\t\t/**\n\t\t * The first NURBS degree.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.degree1 = degree1;\n\n\t\t/**\n\t\t * The second NURBS degree.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.degree2 = degree2;\n\n\t\t/**\n\t\t * The first knots as a flat array of numbers.\n\t\t *\n\t\t * @type {Array<number>}\n\t\t */\n\t\tthis.knots1 = knots1;\n\n\t\t/**\n\t\t * The second knots as a flat array of numbers.\n\t\t *\n\t\t * @type {Array<number>}\n\t\t */\n\t\tthis.knots2 = knots2;\n\n\t\t/**\n\t\t *  An array holding arrays of control points.\n\t\t *\n\t\t * @type {Array<Array<Vector2|Vector3|Vector4>>}\n\t\t */\n\t\tthis.controlPoints = [];\n\n\t\tconst len1 = knots1.length - degree1 - 1;\n\t\tconst len2 = knots2.length - degree2 - 1;\n\n\t\t// ensure Vector4 for control points\n\t\tfor ( let i = 0; i < len1; ++ i ) {\n\n\t\t\tthis.controlPoints[ i ] = [];\n\n\t\t\tfor ( let j = 0; j < len2; ++ j ) {\n\n\t\t\t\tconst point = controlPoints[ i ][ j ];\n\t\t\t\tthis.controlPoints[ i ][ j ] = new Vector4( point.x, point.y, point.z, point.w );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * This method returns a vector in 3D space for the given interpolation factor. This vector lies on the NURBS surface.\n\t *\n\t * @param {number} t1 - The first interpolation factor representing the `u` position on the surface. Must be in the range `[0,1]`.\n\t * @param {number} t2 - The second interpolation factor representing the `v` position on the surface. Must be in the range `[0,1]`.\n\t * @param {Vector3} target - The target vector the result is written to.\n\t */\n\tgetPoint( t1, t2, target ) {\n\n\t\tconst u = this.knots1[ 0 ] + t1 * ( this.knots1[ this.knots1.length - 1 ] - this.knots1[ 0 ] ); // linear mapping t1->u\n\t\tconst v = this.knots2[ 0 ] + t2 * ( this.knots2[ this.knots2.length - 1 ] - this.knots2[ 0 ] ); // linear mapping t2->u\n\n\t\tNURBSUtils.calcSurfacePoint( this.degree1, this.degree2, this.knots1, this.knots2, this.controlPoints, u, v, target );\n\n\t}\n\n}\n\nexport { NURBSSurface };\n"],"mappings":"AAAA,SACCA,OAAO,QACD,OAAO;AACd,OAAO,KAAKC,UAAU,MAAM,yBAAyB;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,CAAC;EAElB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCC,WAAWA,CAAEC,OAAO,EAAEC,OAAO,EAAEC,MAAM,EAAEC,MAAM,EAAEC,aAAa,EAAG;IAE9D;AACF;AACA;AACA;AACA;IACE,IAAI,CAACJ,OAAO,GAAGA,OAAO;;IAEtB;AACF;AACA;AACA;AACA;IACE,IAAI,CAACC,OAAO,GAAGA,OAAO;;IAEtB;AACF;AACA;AACA;AACA;IACE,IAAI,CAACC,MAAM,GAAGA,MAAM;;IAEpB;AACF;AACA;AACA;AACA;IACE,IAAI,CAACC,MAAM,GAAGA,MAAM;;IAEpB;AACF;AACA;AACA;AACA;IACE,IAAI,CAACC,aAAa,GAAG,EAAE;IAEvB,MAAMC,IAAI,GAAGH,MAAM,CAACI,MAAM,GAAGN,OAAO,GAAG,CAAC;IACxC,MAAMO,IAAI,GAAGJ,MAAM,CAACG,MAAM,GAAGL,OAAO,GAAG,CAAC;;IAExC;IACA,KAAM,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,IAAI,EAAE,EAAGG,CAAC,EAAG;MAEjC,IAAI,CAACJ,aAAa,CAAEI,CAAC,CAAE,GAAG,EAAE;MAE5B,KAAM,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,EAAE,EAAGE,CAAC,EAAG;QAEjC,MAAMC,KAAK,GAAGN,aAAa,CAAEI,CAAC,CAAE,CAAEC,CAAC,CAAE;QACrC,IAAI,CAACL,aAAa,CAAEI,CAAC,CAAE,CAAEC,CAAC,CAAE,GAAG,IAAIb,OAAO,CAAEc,KAAK,CAACC,CAAC,EAAED,KAAK,CAACE,CAAC,EAAEF,KAAK,CAACG,CAAC,EAAEH,KAAK,CAACI,CAAE,CAAC;MAEjF;IAED;EAED;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;EACCC,QAAQA,CAAEC,EAAE,EAAEC,EAAE,EAAEC,MAAM,EAAG;IAE1B,MAAMC,CAAC,GAAG,IAAI,CAACjB,MAAM,CAAE,CAAC,CAAE,GAAGc,EAAE,IAAK,IAAI,CAACd,MAAM,CAAE,IAAI,CAACA,MAAM,CAACI,MAAM,GAAG,CAAC,CAAE,GAAG,IAAI,CAACJ,MAAM,CAAE,CAAC,CAAE,CAAE,CAAC,CAAC;IAChG,MAAMkB,CAAC,GAAG,IAAI,CAACjB,MAAM,CAAE,CAAC,CAAE,GAAGc,EAAE,IAAK,IAAI,CAACd,MAAM,CAAE,IAAI,CAACA,MAAM,CAACG,MAAM,GAAG,CAAC,CAAE,GAAG,IAAI,CAACH,MAAM,CAAE,CAAC,CAAE,CAAE,CAAC,CAAC;;IAEhGN,UAAU,CAACwB,gBAAgB,CAAE,IAAI,CAACrB,OAAO,EAAE,IAAI,CAACC,OAAO,EAAE,IAAI,CAACC,MAAM,EAAE,IAAI,CAACC,MAAM,EAAE,IAAI,CAACC,aAAa,EAAEe,CAAC,EAAEC,CAAC,EAAEF,MAAO,CAAC;EAEtH;AAED;AAEA,SAASpB,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}