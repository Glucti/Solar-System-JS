{"ast":null,"code":"import { BufferGeometry, Float32BufferAttribute, LineSegments, LineBasicMaterial, Matrix3, Vector3 } from 'three';\nconst _v1 = new Vector3();\nconst _v2 = new Vector3();\nconst _normalMatrix = new Matrix3();\n\n/**\n * Visualizes an object's vertex normals.\n *\n * Requires that normals have been specified in the geometry as a buffer attribute or\n * have been calculated using {@link BufferGeometry#computeVertexNormals}.\n * ```js\n * const geometry = new THREE.BoxGeometry( 10, 10, 10, 2, 2, 2 );\n * const material = new THREE.MeshStandardMaterial();\n * const mesh = new THREE.Mesh( geometry, material );\n * scene.add( mesh );\n *\n * const helper = new VertexNormalsHelper( mesh, 1, 0xff0000 );\n * scene.add( helper );\n * ```\n *\n * @augments LineSegments\n * @three_import import { VertexNormalsHelper } from 'three/addons/helpers/VertexNormalsHelper.js';\n */\nclass VertexNormalsHelper extends LineSegments {\n  /**\n   * Constructs a new vertex normals helper.\n   *\n   * @param {Object3D} object - The object for which to visualize vertex normals.\n   * @param {number} [size=1] - The helper's size.\n   * @param {number|Color|string} [color=0xff0000] - The helper's color.\n   */\n  constructor(object, size = 1, color = 0xff0000) {\n    const geometry = new BufferGeometry();\n    const nNormals = object.geometry.attributes.normal.count;\n    const positions = new Float32BufferAttribute(nNormals * 2 * 3, 3);\n    geometry.setAttribute('position', positions);\n    super(geometry, new LineBasicMaterial({\n      color,\n      toneMapped: false\n    }));\n\n    /**\n     * The object for which to visualize vertex normals.\n     *\n     * @type {Object3D}\n     */\n    this.object = object;\n\n    /**\n     * The helper's size.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.size = size;\n    this.type = 'VertexNormalsHelper';\n\n    /**\n     * Overwritten and set to `false` since the object's world transformation\n     * is encoded in the helper's geometry data.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.matrixAutoUpdate = false;\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isVertexNormalsHelper = true;\n    this.update();\n  }\n\n  /**\n   * Updates the vertex normals preview based on the object's world transform.\n   */\n  update() {\n    this.object.updateMatrixWorld(true);\n    _normalMatrix.getNormalMatrix(this.object.matrixWorld);\n    const matrixWorld = this.object.matrixWorld;\n    const position = this.geometry.attributes.position;\n\n    //\n\n    const objGeometry = this.object.geometry;\n    if (objGeometry) {\n      const objPos = objGeometry.attributes.position;\n      const objNorm = objGeometry.attributes.normal;\n      let idx = 0;\n\n      // for simplicity, ignore index and drawcalls, and render every normal\n\n      for (let j = 0, jl = objPos.count; j < jl; j++) {\n        _v1.fromBufferAttribute(objPos, j).applyMatrix4(matrixWorld);\n        _v2.fromBufferAttribute(objNorm, j);\n        _v2.applyMatrix3(_normalMatrix).normalize().multiplyScalar(this.size).add(_v1);\n        position.setXYZ(idx, _v1.x, _v1.y, _v1.z);\n        idx = idx + 1;\n        position.setXYZ(idx, _v2.x, _v2.y, _v2.z);\n        idx = idx + 1;\n      }\n    }\n    position.needsUpdate = true;\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever this instance is no longer used in your app.\n   */\n  dispose() {\n    this.geometry.dispose();\n    this.material.dispose();\n  }\n}\nexport { VertexNormalsHelper };","map":{"version":3,"names":["BufferGeometry","Float32BufferAttribute","LineSegments","LineBasicMaterial","Matrix3","Vector3","_v1","_v2","_normalMatrix","VertexNormalsHelper","constructor","object","size","color","geometry","nNormals","attributes","normal","count","positions","setAttribute","toneMapped","type","matrixAutoUpdate","isVertexNormalsHelper","update","updateMatrixWorld","getNormalMatrix","matrixWorld","position","objGeometry","objPos","objNorm","idx","j","jl","fromBufferAttribute","applyMatrix4","applyMatrix3","normalize","multiplyScalar","add","setXYZ","x","y","z","needsUpdate","dispose","material"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/helpers/VertexNormalsHelper.js"],"sourcesContent":["import {\n\tBufferGeometry,\n\tFloat32BufferAttribute,\n\tLineSegments,\n\tLineBasicMaterial,\n\tMatrix3,\n\tVector3\n} from 'three';\n\nconst _v1 = new Vector3();\nconst _v2 = new Vector3();\nconst _normalMatrix = new Matrix3();\n\n/**\n * Visualizes an object's vertex normals.\n *\n * Requires that normals have been specified in the geometry as a buffer attribute or\n * have been calculated using {@link BufferGeometry#computeVertexNormals}.\n * ```js\n * const geometry = new THREE.BoxGeometry( 10, 10, 10, 2, 2, 2 );\n * const material = new THREE.MeshStandardMaterial();\n * const mesh = new THREE.Mesh( geometry, material );\n * scene.add( mesh );\n *\n * const helper = new VertexNormalsHelper( mesh, 1, 0xff0000 );\n * scene.add( helper );\n * ```\n *\n * @augments LineSegments\n * @three_import import { VertexNormalsHelper } from 'three/addons/helpers/VertexNormalsHelper.js';\n */\nclass VertexNormalsHelper extends LineSegments {\n\n\t/**\n\t * Constructs a new vertex normals helper.\n\t *\n\t * @param {Object3D} object - The object for which to visualize vertex normals.\n\t * @param {number} [size=1] - The helper's size.\n\t * @param {number|Color|string} [color=0xff0000] - The helper's color.\n\t */\n\tconstructor( object, size = 1, color = 0xff0000 ) {\n\n\t\tconst geometry = new BufferGeometry();\n\n\t\tconst nNormals = object.geometry.attributes.normal.count;\n\t\tconst positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );\n\n\t\tgeometry.setAttribute( 'position', positions );\n\n\t\tsuper( geometry, new LineBasicMaterial( { color, toneMapped: false } ) );\n\n\t\t/**\n\t\t * The object for which to visualize vertex normals.\n\t\t *\n\t\t * @type {Object3D}\n\t\t */\n\t\tthis.object = object;\n\n\t\t/**\n\t\t * The helper's size.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.size = size;\n\n\t\tthis.type = 'VertexNormalsHelper';\n\n\t\t/**\n\t\t * Overwritten and set to `false` since the object's world transformation\n\t\t * is encoded in the helper's geometry data.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.matrixAutoUpdate = false;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isVertexNormalsHelper = true;\n\n\t\tthis.update();\n\n\t}\n\n\t/**\n\t * Updates the vertex normals preview based on the object's world transform.\n\t */\n\tupdate() {\n\n\t\tthis.object.updateMatrixWorld( true );\n\n\t\t_normalMatrix.getNormalMatrix( this.object.matrixWorld );\n\n\t\tconst matrixWorld = this.object.matrixWorld;\n\n\t\tconst position = this.geometry.attributes.position;\n\n\t\t//\n\n\t\tconst objGeometry = this.object.geometry;\n\n\t\tif ( objGeometry ) {\n\n\t\t\tconst objPos = objGeometry.attributes.position;\n\n\t\t\tconst objNorm = objGeometry.attributes.normal;\n\n\t\t\tlet idx = 0;\n\n\t\t\t// for simplicity, ignore index and drawcalls, and render every normal\n\n\t\t\tfor ( let j = 0, jl = objPos.count; j < jl; j ++ ) {\n\n\t\t\t\t_v1.fromBufferAttribute( objPos, j ).applyMatrix4( matrixWorld );\n\n\t\t\t\t_v2.fromBufferAttribute( objNorm, j );\n\n\t\t\t\t_v2.applyMatrix3( _normalMatrix ).normalize().multiplyScalar( this.size ).add( _v1 );\n\n\t\t\t\tposition.setXYZ( idx, _v1.x, _v1.y, _v1.z );\n\n\t\t\t\tidx = idx + 1;\n\n\t\t\t\tposition.setXYZ( idx, _v2.x, _v2.y, _v2.z );\n\n\t\t\t\tidx = idx + 1;\n\n\t\t\t}\n\n\t\t}\n\n\t\tposition.needsUpdate = true;\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\nexport { VertexNormalsHelper };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}