{"ast":null,"code":"import { HalfFloatType, WebGLRenderTarget } from 'three';\nimport { SSAARenderPass } from './SSAARenderPass.js';\n\n/**\n *\n * Temporal Anti-Aliasing Render Pass.\n *\n * When there is no motion in the scene, the TAA render pass accumulates jittered camera\n * samples across frames to create a high quality anti-aliased result.\n *\n * Note: This effect uses no reprojection so it is no TRAA implementation.\n *\n * ```js\n * const taaRenderPass = new TAARenderPass( scene, camera );\n * taaRenderPass.unbiased = false;\n * composer.addPass( taaRenderPass );\n * ```\n *\n * @augments SSAARenderPass\n * @three_import import { TAARenderPass } from 'three/addons/postprocessing/TAARenderPass.js';\n */\nclass TAARenderPass extends SSAARenderPass {\n  /**\n   * Constructs a new TAA render pass.\n   *\n   * @param {Scene} scene - The scene to render.\n   * @param {Camera} camera - The camera.\n   * @param {?(number|Color|string)} [clearColor=0x000000] - The clear color of the render pass.\n   * @param {?number} [clearAlpha=0] - The clear alpha of the render pass.\n   */\n  constructor(scene, camera, clearColor, clearAlpha) {\n    super(scene, camera, clearColor, clearAlpha);\n\n    /**\n     * Overwritten and set to 0 by default.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.sampleLevel = 0;\n\n    /**\n     * Whether to accumulate frames or not. This enables\n     * the TAA.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.accumulate = false;\n\n    /**\n     * The accumulation index.\n     *\n     * @type {number}\n     * @default -1\n     */\n    this.accumulateIndex = -1;\n\n    // internals\n\n    this._sampleRenderTarget = null;\n    this._holdRenderTarget = null;\n  }\n\n  /**\n   * Performs the TAA render pass.\n   *\n   * @param {WebGLRenderer} renderer - The renderer.\n   * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\n   * destination for the pass.\n   * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\n   * previous pass from this buffer.\n   * @param {number} deltaTime - The delta time in seconds.\n   * @param {boolean} maskActive - Whether masking is active or not.\n   */\n  render(renderer, writeBuffer, readBuffer, deltaTime /*, maskActive*/) {\n    if (this.accumulate === false) {\n      super.render(renderer, writeBuffer, readBuffer, deltaTime);\n      this.accumulateIndex = -1;\n      return;\n    }\n    const jitterOffsets = _JitterVectors[5];\n    if (this._sampleRenderTarget === null) {\n      this._sampleRenderTarget = new WebGLRenderTarget(readBuffer.width, readBuffer.height, {\n        type: HalfFloatType\n      });\n      this._sampleRenderTarget.texture.name = 'TAARenderPass.sample';\n    }\n    if (this._holdRenderTarget === null) {\n      this._holdRenderTarget = new WebGLRenderTarget(readBuffer.width, readBuffer.height, {\n        type: HalfFloatType\n      });\n      this._holdRenderTarget.texture.name = 'TAARenderPass.hold';\n    }\n    if (this.accumulateIndex === -1) {\n      super.render(renderer, this._holdRenderTarget, readBuffer, deltaTime);\n      this.accumulateIndex = 0;\n    }\n    const autoClear = renderer.autoClear;\n    renderer.autoClear = false;\n    renderer.getClearColor(this._oldClearColor);\n    const oldClearAlpha = renderer.getClearAlpha();\n    const sampleWeight = 1.0 / jitterOffsets.length;\n    if (this.accumulateIndex >= 0 && this.accumulateIndex < jitterOffsets.length) {\n      this._copyUniforms['opacity'].value = sampleWeight;\n      this._copyUniforms['tDiffuse'].value = writeBuffer.texture;\n\n      // render the scene multiple times, each slightly jitter offset from the last and accumulate the results.\n      const numSamplesPerFrame = Math.pow(2, this.sampleLevel);\n      for (let i = 0; i < numSamplesPerFrame; i++) {\n        const j = this.accumulateIndex;\n        const jitterOffset = jitterOffsets[j];\n        if (this.camera.setViewOffset) {\n          this.camera.setViewOffset(readBuffer.width, readBuffer.height, jitterOffset[0] * 0.0625, jitterOffset[1] * 0.0625,\n          // 0.0625 = 1 / 16\n          readBuffer.width, readBuffer.height);\n        }\n        renderer.setRenderTarget(writeBuffer);\n        renderer.setClearColor(this.clearColor, this.clearAlpha);\n        renderer.clear();\n        renderer.render(this.scene, this.camera);\n        renderer.setRenderTarget(this._sampleRenderTarget);\n        if (this.accumulateIndex === 0) {\n          renderer.setClearColor(0x000000, 0.0);\n          renderer.clear();\n        }\n        this._fsQuad.render(renderer);\n        this.accumulateIndex++;\n        if (this.accumulateIndex >= jitterOffsets.length) break;\n      }\n      if (this.camera.clearViewOffset) this.camera.clearViewOffset();\n    }\n    renderer.setClearColor(this.clearColor, this.clearAlpha);\n    const accumulationWeight = this.accumulateIndex * sampleWeight;\n    if (accumulationWeight > 0) {\n      this._copyUniforms['opacity'].value = 1.0;\n      this._copyUniforms['tDiffuse'].value = this._sampleRenderTarget.texture;\n      renderer.setRenderTarget(writeBuffer);\n      renderer.clear();\n      this._fsQuad.render(renderer);\n    }\n    if (accumulationWeight < 1.0) {\n      this._copyUniforms['opacity'].value = 1.0 - accumulationWeight;\n      this._copyUniforms['tDiffuse'].value = this._holdRenderTarget.texture;\n      renderer.setRenderTarget(writeBuffer);\n      this._fsQuad.render(renderer);\n    }\n    renderer.autoClear = autoClear;\n    renderer.setClearColor(this._oldClearColor, oldClearAlpha);\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever the pass is no longer used in your app.\n   */\n  dispose() {\n    super.dispose();\n    if (this._holdRenderTarget) this._holdRenderTarget.dispose();\n  }\n}\nconst _JitterVectors = [[[0, 0]], [[4, 4], [-4, -4]], [[-2, -6], [6, -2], [-6, 2], [2, 6]], [[1, -3], [-1, 3], [5, 1], [-3, -5], [-5, 5], [-7, -1], [3, 7], [7, -7]], [[1, 1], [-1, -3], [-3, 2], [4, -1], [-5, -2], [2, 5], [5, 3], [3, -5], [-2, 6], [0, -7], [-4, -6], [-6, 4], [-8, 0], [7, -4], [6, 7], [-7, -8]], [[-4, -7], [-7, -5], [-3, -5], [-5, -4], [-1, -4], [-2, -2], [-6, -1], [-4, 0], [-7, 1], [-1, 2], [-6, 3], [-3, 3], [-7, 6], [-3, 6], [-5, 7], [-1, 7], [5, -7], [1, -6], [6, -5], [4, -4], [2, -3], [7, -2], [1, -1], [4, -1], [2, 1], [6, 2], [0, 4], [4, 4], [2, 5], [7, 5], [5, 6], [3, 7]]];\nexport { TAARenderPass };","map":{"version":3,"names":["HalfFloatType","WebGLRenderTarget","SSAARenderPass","TAARenderPass","constructor","scene","camera","clearColor","clearAlpha","sampleLevel","accumulate","accumulateIndex","_sampleRenderTarget","_holdRenderTarget","render","renderer","writeBuffer","readBuffer","deltaTime","jitterOffsets","_JitterVectors","width","height","type","texture","name","autoClear","getClearColor","_oldClearColor","oldClearAlpha","getClearAlpha","sampleWeight","length","_copyUniforms","value","numSamplesPerFrame","Math","pow","i","j","jitterOffset","setViewOffset","setRenderTarget","setClearColor","clear","_fsQuad","clearViewOffset","accumulationWeight","dispose"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/postprocessing/TAARenderPass.js"],"sourcesContent":["import {\n\tHalfFloatType,\n\tWebGLRenderTarget\n} from 'three';\nimport { SSAARenderPass } from './SSAARenderPass.js';\n\n/**\n *\n * Temporal Anti-Aliasing Render Pass.\n *\n * When there is no motion in the scene, the TAA render pass accumulates jittered camera\n * samples across frames to create a high quality anti-aliased result.\n *\n * Note: This effect uses no reprojection so it is no TRAA implementation.\n *\n * ```js\n * const taaRenderPass = new TAARenderPass( scene, camera );\n * taaRenderPass.unbiased = false;\n * composer.addPass( taaRenderPass );\n * ```\n *\n * @augments SSAARenderPass\n * @three_import import { TAARenderPass } from 'three/addons/postprocessing/TAARenderPass.js';\n */\nclass TAARenderPass extends SSAARenderPass {\n\n\t/**\n\t * Constructs a new TAA render pass.\n\t *\n\t * @param {Scene} scene - The scene to render.\n\t * @param {Camera} camera - The camera.\n\t * @param {?(number|Color|string)} [clearColor=0x000000] - The clear color of the render pass.\n\t * @param {?number} [clearAlpha=0] - The clear alpha of the render pass.\n\t */\n\tconstructor( scene, camera, clearColor, clearAlpha ) {\n\n\t\tsuper( scene, camera, clearColor, clearAlpha );\n\n\t\t/**\n\t\t * Overwritten and set to 0 by default.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.sampleLevel = 0;\n\n\t\t/**\n\t\t * Whether to accumulate frames or not. This enables\n\t\t * the TAA.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.accumulate = false;\n\n\t\t/**\n\t\t * The accumulation index.\n\t\t *\n\t\t * @type {number}\n\t\t * @default -1\n\t\t */\n\t\tthis.accumulateIndex = - 1;\n\n\t\t// internals\n\n\t\tthis._sampleRenderTarget = null;\n\t\tthis._holdRenderTarget = null;\n\n\t}\n\n\t/**\n\t * Performs the TAA render pass.\n\t *\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\n\t * destination for the pass.\n\t * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\n\t * previous pass from this buffer.\n\t * @param {number} deltaTime - The delta time in seconds.\n\t * @param {boolean} maskActive - Whether masking is active or not.\n\t */\n\trender( renderer, writeBuffer, readBuffer, deltaTime/*, maskActive*/ ) {\n\n\t\tif ( this.accumulate === false ) {\n\n\t\t\tsuper.render( renderer, writeBuffer, readBuffer, deltaTime );\n\n\t\t\tthis.accumulateIndex = - 1;\n\t\t\treturn;\n\n\t\t}\n\n\t\tconst jitterOffsets = _JitterVectors[ 5 ];\n\n\t\tif ( this._sampleRenderTarget === null ) {\n\n\t\t\tthis._sampleRenderTarget = new WebGLRenderTarget( readBuffer.width, readBuffer.height, { type: HalfFloatType } );\n\t\t\tthis._sampleRenderTarget.texture.name = 'TAARenderPass.sample';\n\n\t\t}\n\n\t\tif ( this._holdRenderTarget === null ) {\n\n\t\t\tthis._holdRenderTarget = new WebGLRenderTarget( readBuffer.width, readBuffer.height, { type: HalfFloatType } );\n\t\t\tthis._holdRenderTarget.texture.name = 'TAARenderPass.hold';\n\n\t\t}\n\n\t\tif ( this.accumulateIndex === - 1 ) {\n\n\t\t\tsuper.render( renderer, this._holdRenderTarget, readBuffer, deltaTime );\n\n\t\t\tthis.accumulateIndex = 0;\n\n\t\t}\n\n\t\tconst autoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\trenderer.getClearColor( this._oldClearColor );\n\t\tconst oldClearAlpha = renderer.getClearAlpha();\n\n\t\tconst sampleWeight = 1.0 / ( jitterOffsets.length );\n\n\t\tif ( this.accumulateIndex >= 0 && this.accumulateIndex < jitterOffsets.length ) {\n\n\t\t\tthis._copyUniforms[ 'opacity' ].value = sampleWeight;\n\t\t\tthis._copyUniforms[ 'tDiffuse' ].value = writeBuffer.texture;\n\n\t\t\t// render the scene multiple times, each slightly jitter offset from the last and accumulate the results.\n\t\t\tconst numSamplesPerFrame = Math.pow( 2, this.sampleLevel );\n\t\t\tfor ( let i = 0; i < numSamplesPerFrame; i ++ ) {\n\n\t\t\t\tconst j = this.accumulateIndex;\n\t\t\t\tconst jitterOffset = jitterOffsets[ j ];\n\n\t\t\t\tif ( this.camera.setViewOffset ) {\n\n\t\t\t\t\tthis.camera.setViewOffset( readBuffer.width, readBuffer.height,\n\t\t\t\t\t\tjitterOffset[ 0 ] * 0.0625, jitterOffset[ 1 ] * 0.0625, // 0.0625 = 1 / 16\n\t\t\t\t\t\treadBuffer.width, readBuffer.height );\n\n\t\t\t\t}\n\n\t\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\t\trenderer.setClearColor( this.clearColor, this.clearAlpha );\n\t\t\t\trenderer.clear();\n\t\t\t\trenderer.render( this.scene, this.camera );\n\n\t\t\t\trenderer.setRenderTarget( this._sampleRenderTarget );\n\t\t\t\tif ( this.accumulateIndex === 0 ) {\n\n\t\t\t\t\trenderer.setClearColor( 0x000000, 0.0 );\n\t\t\t\t\trenderer.clear();\n\n\t\t\t\t}\n\n\t\t\t\tthis._fsQuad.render( renderer );\n\n\t\t\t\tthis.accumulateIndex ++;\n\n\t\t\t\tif ( this.accumulateIndex >= jitterOffsets.length ) break;\n\n\t\t\t}\n\n\t\t\tif ( this.camera.clearViewOffset ) this.camera.clearViewOffset();\n\n\t\t}\n\n\t\trenderer.setClearColor( this.clearColor, this.clearAlpha );\n\t\tconst accumulationWeight = this.accumulateIndex * sampleWeight;\n\n\t\tif ( accumulationWeight > 0 ) {\n\n\t\t\tthis._copyUniforms[ 'opacity' ].value = 1.0;\n\t\t\tthis._copyUniforms[ 'tDiffuse' ].value = this._sampleRenderTarget.texture;\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\trenderer.clear();\n\t\t\tthis._fsQuad.render( renderer );\n\n\t\t}\n\n\t\tif ( accumulationWeight < 1.0 ) {\n\n\t\t\tthis._copyUniforms[ 'opacity' ].value = 1.0 - accumulationWeight;\n\t\t\tthis._copyUniforms[ 'tDiffuse' ].value = this._holdRenderTarget.texture;\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\tthis._fsQuad.render( renderer );\n\n\t\t}\n\n\t\trenderer.autoClear = autoClear;\n\t\trenderer.setClearColor( this._oldClearColor, oldClearAlpha );\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever the pass is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tsuper.dispose();\n\n\t\tif ( this._holdRenderTarget ) this._holdRenderTarget.dispose();\n\n\t}\n\n}\n\nconst _JitterVectors = [\n\t[\n\t\t[ 0, 0 ]\n\t],\n\t[\n\t\t[ 4, 4 ], [ - 4, - 4 ]\n\t],\n\t[\n\t\t[ - 2, - 6 ], [ 6, - 2 ], [ - 6, 2 ], [ 2, 6 ]\n\t],\n\t[\n\t\t[ 1, - 3 ], [ - 1, 3 ], [ 5, 1 ], [ - 3, - 5 ],\n\t\t[ - 5, 5 ], [ - 7, - 1 ], [ 3, 7 ], [ 7, - 7 ]\n\t],\n\t[\n\t\t[ 1, 1 ], [ - 1, - 3 ], [ - 3, 2 ], [ 4, - 1 ],\n\t\t[ - 5, - 2 ], [ 2, 5 ], [ 5, 3 ], [ 3, - 5 ],\n\t\t[ - 2, 6 ], [ 0, - 7 ], [ - 4, - 6 ], [ - 6, 4 ],\n\t\t[ - 8, 0 ], [ 7, - 4 ], [ 6, 7 ], [ - 7, - 8 ]\n\t],\n\t[\n\t\t[ - 4, - 7 ], [ - 7, - 5 ], [ - 3, - 5 ], [ - 5, - 4 ],\n\t\t[ - 1, - 4 ], [ - 2, - 2 ], [ - 6, - 1 ], [ - 4, 0 ],\n\t\t[ - 7, 1 ], [ - 1, 2 ], [ - 6, 3 ], [ - 3, 3 ],\n\t\t[ - 7, 6 ], [ - 3, 6 ], [ - 5, 7 ], [ - 1, 7 ],\n\t\t[ 5, - 7 ], [ 1, - 6 ], [ 6, - 5 ], [ 4, - 4 ],\n\t\t[ 2, - 3 ], [ 7, - 2 ], [ 1, - 1 ], [ 4, - 1 ],\n\t\t[ 2, 1 ], [ 6, 2 ], [ 0, 4 ], [ 4, 4 ],\n\t\t[ 2, 5 ], [ 7, 5 ], [ 5, 6 ], [ 3, 7 ]\n\t]\n];\n\nexport { TAARenderPass };\n"],"mappings":"AAAA,SACCA,aAAa,EACbC,iBAAiB,QACX,OAAO;AACd,SAASC,cAAc,QAAQ,qBAAqB;;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,aAAa,SAASD,cAAc,CAAC;EAE1C;AACD;AACA;AACA;AACA;AACA;AACA;AACA;EACCE,WAAWA,CAAEC,KAAK,EAAEC,MAAM,EAAEC,UAAU,EAAEC,UAAU,EAAG;IAEpD,KAAK,CAAEH,KAAK,EAAEC,MAAM,EAAEC,UAAU,EAAEC,UAAW,CAAC;;IAE9C;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,WAAW,GAAG,CAAC;;IAEpB;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,UAAU,GAAG,KAAK;;IAEvB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,eAAe,GAAG,CAAE,CAAC;;IAE1B;;IAEA,IAAI,CAACC,mBAAmB,GAAG,IAAI;IAC/B,IAAI,CAACC,iBAAiB,GAAG,IAAI;EAE9B;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCC,MAAMA,CAAEC,QAAQ,EAAEC,WAAW,EAAEC,UAAU,EAAEC,SAAS,mBAAmB;IAEtE,IAAK,IAAI,CAACR,UAAU,KAAK,KAAK,EAAG;MAEhC,KAAK,CAACI,MAAM,CAAEC,QAAQ,EAAEC,WAAW,EAAEC,UAAU,EAAEC,SAAU,CAAC;MAE5D,IAAI,CAACP,eAAe,GAAG,CAAE,CAAC;MAC1B;IAED;IAEA,MAAMQ,aAAa,GAAGC,cAAc,CAAE,CAAC,CAAE;IAEzC,IAAK,IAAI,CAACR,mBAAmB,KAAK,IAAI,EAAG;MAExC,IAAI,CAACA,mBAAmB,GAAG,IAAIX,iBAAiB,CAAEgB,UAAU,CAACI,KAAK,EAAEJ,UAAU,CAACK,MAAM,EAAE;QAAEC,IAAI,EAAEvB;MAAc,CAAE,CAAC;MAChH,IAAI,CAACY,mBAAmB,CAACY,OAAO,CAACC,IAAI,GAAG,sBAAsB;IAE/D;IAEA,IAAK,IAAI,CAACZ,iBAAiB,KAAK,IAAI,EAAG;MAEtC,IAAI,CAACA,iBAAiB,GAAG,IAAIZ,iBAAiB,CAAEgB,UAAU,CAACI,KAAK,EAAEJ,UAAU,CAACK,MAAM,EAAE;QAAEC,IAAI,EAAEvB;MAAc,CAAE,CAAC;MAC9G,IAAI,CAACa,iBAAiB,CAACW,OAAO,CAACC,IAAI,GAAG,oBAAoB;IAE3D;IAEA,IAAK,IAAI,CAACd,eAAe,KAAK,CAAE,CAAC,EAAG;MAEnC,KAAK,CAACG,MAAM,CAAEC,QAAQ,EAAE,IAAI,CAACF,iBAAiB,EAAEI,UAAU,EAAEC,SAAU,CAAC;MAEvE,IAAI,CAACP,eAAe,GAAG,CAAC;IAEzB;IAEA,MAAMe,SAAS,GAAGX,QAAQ,CAACW,SAAS;IACpCX,QAAQ,CAACW,SAAS,GAAG,KAAK;IAE1BX,QAAQ,CAACY,aAAa,CAAE,IAAI,CAACC,cAAe,CAAC;IAC7C,MAAMC,aAAa,GAAGd,QAAQ,CAACe,aAAa,CAAC,CAAC;IAE9C,MAAMC,YAAY,GAAG,GAAG,GAAKZ,aAAa,CAACa,MAAQ;IAEnD,IAAK,IAAI,CAACrB,eAAe,IAAI,CAAC,IAAI,IAAI,CAACA,eAAe,GAAGQ,aAAa,CAACa,MAAM,EAAG;MAE/E,IAAI,CAACC,aAAa,CAAE,SAAS,CAAE,CAACC,KAAK,GAAGH,YAAY;MACpD,IAAI,CAACE,aAAa,CAAE,UAAU,CAAE,CAACC,KAAK,GAAGlB,WAAW,CAACQ,OAAO;;MAE5D;MACA,MAAMW,kBAAkB,GAAGC,IAAI,CAACC,GAAG,CAAE,CAAC,EAAE,IAAI,CAAC5B,WAAY,CAAC;MAC1D,KAAM,IAAI6B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,kBAAkB,EAAEG,CAAC,EAAG,EAAG;QAE/C,MAAMC,CAAC,GAAG,IAAI,CAAC5B,eAAe;QAC9B,MAAM6B,YAAY,GAAGrB,aAAa,CAAEoB,CAAC,CAAE;QAEvC,IAAK,IAAI,CAACjC,MAAM,CAACmC,aAAa,EAAG;UAEhC,IAAI,CAACnC,MAAM,CAACmC,aAAa,CAAExB,UAAU,CAACI,KAAK,EAAEJ,UAAU,CAACK,MAAM,EAC7DkB,YAAY,CAAE,CAAC,CAAE,GAAG,MAAM,EAAEA,YAAY,CAAE,CAAC,CAAE,GAAG,MAAM;UAAE;UACxDvB,UAAU,CAACI,KAAK,EAAEJ,UAAU,CAACK,MAAO,CAAC;QAEvC;QAEAP,QAAQ,CAAC2B,eAAe,CAAE1B,WAAY,CAAC;QACvCD,QAAQ,CAAC4B,aAAa,CAAE,IAAI,CAACpC,UAAU,EAAE,IAAI,CAACC,UAAW,CAAC;QAC1DO,QAAQ,CAAC6B,KAAK,CAAC,CAAC;QAChB7B,QAAQ,CAACD,MAAM,CAAE,IAAI,CAACT,KAAK,EAAE,IAAI,CAACC,MAAO,CAAC;QAE1CS,QAAQ,CAAC2B,eAAe,CAAE,IAAI,CAAC9B,mBAAoB,CAAC;QACpD,IAAK,IAAI,CAACD,eAAe,KAAK,CAAC,EAAG;UAEjCI,QAAQ,CAAC4B,aAAa,CAAE,QAAQ,EAAE,GAAI,CAAC;UACvC5B,QAAQ,CAAC6B,KAAK,CAAC,CAAC;QAEjB;QAEA,IAAI,CAACC,OAAO,CAAC/B,MAAM,CAAEC,QAAS,CAAC;QAE/B,IAAI,CAACJ,eAAe,EAAG;QAEvB,IAAK,IAAI,CAACA,eAAe,IAAIQ,aAAa,CAACa,MAAM,EAAG;MAErD;MAEA,IAAK,IAAI,CAAC1B,MAAM,CAACwC,eAAe,EAAG,IAAI,CAACxC,MAAM,CAACwC,eAAe,CAAC,CAAC;IAEjE;IAEA/B,QAAQ,CAAC4B,aAAa,CAAE,IAAI,CAACpC,UAAU,EAAE,IAAI,CAACC,UAAW,CAAC;IAC1D,MAAMuC,kBAAkB,GAAG,IAAI,CAACpC,eAAe,GAAGoB,YAAY;IAE9D,IAAKgB,kBAAkB,GAAG,CAAC,EAAG;MAE7B,IAAI,CAACd,aAAa,CAAE,SAAS,CAAE,CAACC,KAAK,GAAG,GAAG;MAC3C,IAAI,CAACD,aAAa,CAAE,UAAU,CAAE,CAACC,KAAK,GAAG,IAAI,CAACtB,mBAAmB,CAACY,OAAO;MACzET,QAAQ,CAAC2B,eAAe,CAAE1B,WAAY,CAAC;MACvCD,QAAQ,CAAC6B,KAAK,CAAC,CAAC;MAChB,IAAI,CAACC,OAAO,CAAC/B,MAAM,CAAEC,QAAS,CAAC;IAEhC;IAEA,IAAKgC,kBAAkB,GAAG,GAAG,EAAG;MAE/B,IAAI,CAACd,aAAa,CAAE,SAAS,CAAE,CAACC,KAAK,GAAG,GAAG,GAAGa,kBAAkB;MAChE,IAAI,CAACd,aAAa,CAAE,UAAU,CAAE,CAACC,KAAK,GAAG,IAAI,CAACrB,iBAAiB,CAACW,OAAO;MACvET,QAAQ,CAAC2B,eAAe,CAAE1B,WAAY,CAAC;MACvC,IAAI,CAAC6B,OAAO,CAAC/B,MAAM,CAAEC,QAAS,CAAC;IAEhC;IAEAA,QAAQ,CAACW,SAAS,GAAGA,SAAS;IAC9BX,QAAQ,CAAC4B,aAAa,CAAE,IAAI,CAACf,cAAc,EAAEC,aAAc,CAAC;EAE7D;;EAEA;AACD;AACA;AACA;EACCmB,OAAOA,CAAA,EAAG;IAET,KAAK,CAACA,OAAO,CAAC,CAAC;IAEf,IAAK,IAAI,CAACnC,iBAAiB,EAAG,IAAI,CAACA,iBAAiB,CAACmC,OAAO,CAAC,CAAC;EAE/D;AAED;AAEA,MAAM5B,cAAc,GAAG,CACtB,CACC,CAAE,CAAC,EAAE,CAAC,CAAE,CACR,EACD,CACC,CAAE,CAAC,EAAE,CAAC,CAAE,EAAE,CAAE,CAAE,CAAC,EAAE,CAAE,CAAC,CAAE,CACtB,EACD,CACC,CAAE,CAAE,CAAC,EAAE,CAAE,CAAC,CAAE,EAAE,CAAE,CAAC,EAAE,CAAE,CAAC,CAAE,EAAE,CAAE,CAAE,CAAC,EAAE,CAAC,CAAE,EAAE,CAAE,CAAC,EAAE,CAAC,CAAE,CAC9C,EACD,CACC,CAAE,CAAC,EAAE,CAAE,CAAC,CAAE,EAAE,CAAE,CAAE,CAAC,EAAE,CAAC,CAAE,EAAE,CAAE,CAAC,EAAE,CAAC,CAAE,EAAE,CAAE,CAAE,CAAC,EAAE,CAAE,CAAC,CAAE,EAC9C,CAAE,CAAE,CAAC,EAAE,CAAC,CAAE,EAAE,CAAE,CAAE,CAAC,EAAE,CAAE,CAAC,CAAE,EAAE,CAAE,CAAC,EAAE,CAAC,CAAE,EAAE,CAAE,CAAC,EAAE,CAAE,CAAC,CAAE,CAC9C,EACD,CACC,CAAE,CAAC,EAAE,CAAC,CAAE,EAAE,CAAE,CAAE,CAAC,EAAE,CAAE,CAAC,CAAE,EAAE,CAAE,CAAE,CAAC,EAAE,CAAC,CAAE,EAAE,CAAE,CAAC,EAAE,CAAE,CAAC,CAAE,EAC9C,CAAE,CAAE,CAAC,EAAE,CAAE,CAAC,CAAE,EAAE,CAAE,CAAC,EAAE,CAAC,CAAE,EAAE,CAAE,CAAC,EAAE,CAAC,CAAE,EAAE,CAAE,CAAC,EAAE,CAAE,CAAC,CAAE,EAC5C,CAAE,CAAE,CAAC,EAAE,CAAC,CAAE,EAAE,CAAE,CAAC,EAAE,CAAE,CAAC,CAAE,EAAE,CAAE,CAAE,CAAC,EAAE,CAAE,CAAC,CAAE,EAAE,CAAE,CAAE,CAAC,EAAE,CAAC,CAAE,EAChD,CAAE,CAAE,CAAC,EAAE,CAAC,CAAE,EAAE,CAAE,CAAC,EAAE,CAAE,CAAC,CAAE,EAAE,CAAE,CAAC,EAAE,CAAC,CAAE,EAAE,CAAE,CAAE,CAAC,EAAE,CAAE,CAAC,CAAE,CAC9C,EACD,CACC,CAAE,CAAE,CAAC,EAAE,CAAE,CAAC,CAAE,EAAE,CAAE,CAAE,CAAC,EAAE,CAAE,CAAC,CAAE,EAAE,CAAE,CAAE,CAAC,EAAE,CAAE,CAAC,CAAE,EAAE,CAAE,CAAE,CAAC,EAAE,CAAE,CAAC,CAAE,EACtD,CAAE,CAAE,CAAC,EAAE,CAAE,CAAC,CAAE,EAAE,CAAE,CAAE,CAAC,EAAE,CAAE,CAAC,CAAE,EAAE,CAAE,CAAE,CAAC,EAAE,CAAE,CAAC,CAAE,EAAE,CAAE,CAAE,CAAC,EAAE,CAAC,CAAE,EACpD,CAAE,CAAE,CAAC,EAAE,CAAC,CAAE,EAAE,CAAE,CAAE,CAAC,EAAE,CAAC,CAAE,EAAE,CAAE,CAAE,CAAC,EAAE,CAAC,CAAE,EAAE,CAAE,CAAE,CAAC,EAAE,CAAC,CAAE,EAC9C,CAAE,CAAE,CAAC,EAAE,CAAC,CAAE,EAAE,CAAE,CAAE,CAAC,EAAE,CAAC,CAAE,EAAE,CAAE,CAAE,CAAC,EAAE,CAAC,CAAE,EAAE,CAAE,CAAE,CAAC,EAAE,CAAC,CAAE,EAC9C,CAAE,CAAC,EAAE,CAAE,CAAC,CAAE,EAAE,CAAE,CAAC,EAAE,CAAE,CAAC,CAAE,EAAE,CAAE,CAAC,EAAE,CAAE,CAAC,CAAE,EAAE,CAAE,CAAC,EAAE,CAAE,CAAC,CAAE,EAC9C,CAAE,CAAC,EAAE,CAAE,CAAC,CAAE,EAAE,CAAE,CAAC,EAAE,CAAE,CAAC,CAAE,EAAE,CAAE,CAAC,EAAE,CAAE,CAAC,CAAE,EAAE,CAAE,CAAC,EAAE,CAAE,CAAC,CAAE,EAC9C,CAAE,CAAC,EAAE,CAAC,CAAE,EAAE,CAAE,CAAC,EAAE,CAAC,CAAE,EAAE,CAAE,CAAC,EAAE,CAAC,CAAE,EAAE,CAAE,CAAC,EAAE,CAAC,CAAE,EACtC,CAAE,CAAC,EAAE,CAAC,CAAE,EAAE,CAAE,CAAC,EAAE,CAAC,CAAE,EAAE,CAAE,CAAC,EAAE,CAAC,CAAE,EAAE,CAAE,CAAC,EAAE,CAAC,CAAE,CACtC,CACD;AAED,SAASjB,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}