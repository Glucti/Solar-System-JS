{"ast":null,"code":"/**\n * @module ParametricFunctions\n * @three_import import * as ParametricFunctions from 'three/addons/geometries/ParametricFunctions.js';\n */\n\n/**\n * A parametric function representing the Klein bottle.\n *\n * @param {number} v - The `v` coordinate on the surface in the range `[0,1]`.\n * @param {number} u - The `u` coordinate on the surface in the range `[0,1]`.\n * @param {Vector3} target - The target vector that is used to store the method's result.\n */\nfunction klein(v, u, target) {\n  u *= Math.PI;\n  v *= 2 * Math.PI;\n  u = u * 2;\n  let x, z;\n  if (u < Math.PI) {\n    x = 3 * Math.cos(u) * (1 + Math.sin(u)) + 2 * (1 - Math.cos(u) / 2) * Math.cos(u) * Math.cos(v);\n    z = -8 * Math.sin(u) - 2 * (1 - Math.cos(u) / 2) * Math.sin(u) * Math.cos(v);\n  } else {\n    x = 3 * Math.cos(u) * (1 + Math.sin(u)) + 2 * (1 - Math.cos(u) / 2) * Math.cos(v + Math.PI);\n    z = -8 * Math.sin(u);\n  }\n  const y = -2 * (1 - Math.cos(u) / 2) * Math.sin(v);\n  target.set(x, y, z);\n}\n\n/**\n * A parametric function representing a flat plane.\n *\n * @param {number} u - The `u` coordinate on the surface in the range `[0,1]`.\n * @param {number} v - The `v` coordinate on the surface in the range `[0,1]`.\n * @param {Vector3} target - The target vector that is used to store the method's result.\n */\nfunction plane(u, v, target) {\n  target.set(u, 0, v);\n}\n\n/**\n * A parametric function representing a flat mobius strip.\n *\n * @param {number} u - The `u` coordinate on the surface in the range `[0,1]`.\n * @param {number} t - The `v` coordinate on the surface in the range `[0,1]`.\n * @param {Vector3} target - The target vector that is used to store the method's result.\n */\nfunction mobius(u, t, target) {\n  // http://www.wolframalpha.com/input/?i=M%C3%B6bius+strip+parametric+equations&lk=1&a=ClashPrefs_*Surface.MoebiusStrip.SurfaceProperty.ParametricEquations-\n  u = u - 0.5;\n  const v = 2 * Math.PI * t;\n  const a = 2;\n  const x = Math.cos(v) * (a + u * Math.cos(v / 2));\n  const y = Math.sin(v) * (a + u * Math.cos(v / 2));\n  const z = u * Math.sin(v / 2);\n  target.set(x, y, z);\n}\n\n/**\n * A parametric function representing a volumetric mobius strip.\n *\n * @param {number} u - The `u` coordinate on the surface in the range `[0,1]`.\n * @param {number} t - The `v` coordinate on the surface in the range `[0,1]`.\n * @param {Vector3} target - The target vector that is used to store the method's result.\n */\nfunction mobius3d(u, t, target) {\n  u *= Math.PI;\n  t *= 2 * Math.PI;\n  u = u * 2;\n  const phi = u / 2;\n  const major = 2.25,\n    a = 0.125,\n    b = 0.65;\n  let x = a * Math.cos(t) * Math.cos(phi) - b * Math.sin(t) * Math.sin(phi);\n  const z = a * Math.cos(t) * Math.sin(phi) + b * Math.sin(t) * Math.cos(phi);\n  const y = (major + x) * Math.sin(u);\n  x = (major + x) * Math.cos(u);\n  target.set(x, y, z);\n}\nexport { klein, plane, mobius, mobius3d };","map":{"version":3,"names":["klein","v","u","target","Math","PI","x","z","cos","sin","y","set","plane","mobius","t","a","mobius3d","phi","major","b"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/geometries/ParametricFunctions.js"],"sourcesContent":["\n/**\n * @module ParametricFunctions\n * @three_import import * as ParametricFunctions from 'three/addons/geometries/ParametricFunctions.js';\n */\n\n/**\n * A parametric function representing the Klein bottle.\n *\n * @param {number} v - The `v` coordinate on the surface in the range `[0,1]`.\n * @param {number} u - The `u` coordinate on the surface in the range `[0,1]`.\n * @param {Vector3} target - The target vector that is used to store the method's result.\n */\nfunction klein( v, u, target ) {\n\n\tu *= Math.PI;\n\tv *= 2 * Math.PI;\n\n\tu = u * 2;\n\tlet x, z;\n\tif ( u < Math.PI ) {\n\n\t\tx = 3 * Math.cos( u ) * ( 1 + Math.sin( u ) ) + ( 2 * ( 1 - Math.cos( u ) / 2 ) ) * Math.cos( u ) * Math.cos( v );\n\t\tz = - 8 * Math.sin( u ) - 2 * ( 1 - Math.cos( u ) / 2 ) * Math.sin( u ) * Math.cos( v );\n\n\t} else {\n\n\t\tx = 3 * Math.cos( u ) * ( 1 + Math.sin( u ) ) + ( 2 * ( 1 - Math.cos( u ) / 2 ) ) * Math.cos( v + Math.PI );\n\t\tz = - 8 * Math.sin( u );\n\n\t}\n\n\tconst y = - 2 * ( 1 - Math.cos( u ) / 2 ) * Math.sin( v );\n\n\ttarget.set( x, y, z );\n\n}\n\n/**\n * A parametric function representing a flat plane.\n *\n * @param {number} u - The `u` coordinate on the surface in the range `[0,1]`.\n * @param {number} v - The `v` coordinate on the surface in the range `[0,1]`.\n * @param {Vector3} target - The target vector that is used to store the method's result.\n */\nfunction plane( u, v, target ) {\n\n\ttarget.set( u, 0, v );\n\n}\n\n/**\n * A parametric function representing a flat mobius strip.\n *\n * @param {number} u - The `u` coordinate on the surface in the range `[0,1]`.\n * @param {number} t - The `v` coordinate on the surface in the range `[0,1]`.\n * @param {Vector3} target - The target vector that is used to store the method's result.\n */\nfunction mobius( u, t, target ) {\n\n\t// http://www.wolframalpha.com/input/?i=M%C3%B6bius+strip+parametric+equations&lk=1&a=ClashPrefs_*Surface.MoebiusStrip.SurfaceProperty.ParametricEquations-\n\tu = u - 0.5;\n\tconst v = 2 * Math.PI * t;\n\n\tconst a = 2;\n\n\tconst x = Math.cos( v ) * ( a + u * Math.cos( v / 2 ) );\n\tconst y = Math.sin( v ) * ( a + u * Math.cos( v / 2 ) );\n\tconst z = u * Math.sin( v / 2 );\n\n\ttarget.set( x, y, z );\n\n}\n\n/**\n * A parametric function representing a volumetric mobius strip.\n *\n * @param {number} u - The `u` coordinate on the surface in the range `[0,1]`.\n * @param {number} t - The `v` coordinate on the surface in the range `[0,1]`.\n * @param {Vector3} target - The target vector that is used to store the method's result.\n */\nfunction mobius3d( u, t, target ) {\n\n\tu *= Math.PI;\n\tt *= 2 * Math.PI;\n\n\tu = u * 2;\n\tconst phi = u / 2;\n\tconst major = 2.25, a = 0.125, b = 0.65;\n\n\tlet x = a * Math.cos( t ) * Math.cos( phi ) - b * Math.sin( t ) * Math.sin( phi );\n\tconst z = a * Math.cos( t ) * Math.sin( phi ) + b * Math.sin( t ) * Math.cos( phi );\n\tconst y = ( major + x ) * Math.sin( u );\n\tx = ( major + x ) * Math.cos( u );\n\n\ttarget.set( x, y, z );\n\n}\n\nexport { klein, plane, mobius, mobius3d };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}