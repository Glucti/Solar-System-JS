{"ast":null,"code":"import { FileLoader, Loader } from 'three';\nimport opentype from '../libs/opentype.module.js';\n\n/**\n * A loader for the TTF format.\n *\n * Loads TTF files and converts them into typeface JSON that can be used directly\n * to create THREE.Font objects.\n *\n * ```js\n * const loader = new TTFLoader();\n * const json = await loader.loadAsync( 'fonts/ttf/kenpixel.ttf' );\n * const font = new Font( json );\n * ```\n *\n * @augments Loader\n * @three_import import { TTFLoader } from 'three/addons/loaders/TTFLoader.js';\n */\nclass TTFLoader extends Loader {\n  /**\n   * Constructs a new TTF loader.\n   *\n   * @param {LoadingManager} [manager] - The loading manager.\n   */\n  constructor(manager) {\n    super(manager);\n\n    /**\n     * Whether the TTF commands should be reversed or not.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.reversed = false;\n  }\n\n  /**\n   * Starts loading from the given URL and passes the loaded TTF asset\n   * to the `onLoad()` callback.\n   *\n   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n   * @param {function(Object)} onLoad - Executed when the loading process has been finished.\n   * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n   * @param {onErrorCallback} onError - Executed when errors occur.\n   */\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, function (buffer) {\n      try {\n        onLoad(scope.parse(buffer));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  /**\n   * Parses the given TTF data and returns a JSON for creating a font.\n   *\n   * @param {ArrayBuffer} arraybuffer - The raw TTF data as an array buffer.\n   * @return {Object} The result JSON.\n   */\n  parse(arraybuffer) {\n    function convert(font, reversed) {\n      const round = Math.round;\n      const glyphs = {};\n      const scale = 100000 / ((font.unitsPerEm || 2048) * 72);\n      const glyphIndexMap = font.encoding.cmap.glyphIndexMap;\n      const unicodes = Object.keys(glyphIndexMap);\n      for (let i = 0; i < unicodes.length; i++) {\n        const unicode = unicodes[i];\n        const glyph = font.glyphs.glyphs[glyphIndexMap[unicode]];\n        if (unicode !== undefined) {\n          const token = {\n            ha: round(glyph.advanceWidth * scale),\n            x_min: round(glyph.xMin * scale),\n            x_max: round(glyph.xMax * scale),\n            o: ''\n          };\n          if (reversed) {\n            glyph.path.commands = reverseCommands(glyph.path.commands);\n          }\n          glyph.path.commands.forEach(function (command) {\n            if (command.type.toLowerCase() === 'c') {\n              command.type = 'b';\n            }\n            token.o += command.type.toLowerCase() + ' ';\n            if (command.x !== undefined && command.y !== undefined) {\n              token.o += round(command.x * scale) + ' ' + round(command.y * scale) + ' ';\n            }\n            if (command.x1 !== undefined && command.y1 !== undefined) {\n              token.o += round(command.x1 * scale) + ' ' + round(command.y1 * scale) + ' ';\n            }\n            if (command.x2 !== undefined && command.y2 !== undefined) {\n              token.o += round(command.x2 * scale) + ' ' + round(command.y2 * scale) + ' ';\n            }\n          });\n          glyphs[String.fromCodePoint(glyph.unicode)] = token;\n        }\n      }\n      return {\n        glyphs: glyphs,\n        familyName: font.getEnglishName('fullName'),\n        ascender: round(font.ascender * scale),\n        descender: round(font.descender * scale),\n        underlinePosition: font.tables.post.underlinePosition,\n        underlineThickness: font.tables.post.underlineThickness,\n        boundingBox: {\n          xMin: font.tables.head.xMin,\n          xMax: font.tables.head.xMax,\n          yMin: font.tables.head.yMin,\n          yMax: font.tables.head.yMax\n        },\n        resolution: 1000,\n        original_font_information: font.tables.name\n      };\n    }\n    function reverseCommands(commands) {\n      const paths = [];\n      let path;\n      commands.forEach(function (c) {\n        if (c.type.toLowerCase() === 'm') {\n          path = [c];\n          paths.push(path);\n        } else if (c.type.toLowerCase() !== 'z') {\n          path.push(c);\n        }\n      });\n      const reversed = [];\n      paths.forEach(function (p) {\n        const result = {\n          type: 'm',\n          x: p[p.length - 1].x,\n          y: p[p.length - 1].y\n        };\n        reversed.push(result);\n        for (let i = p.length - 1; i > 0; i--) {\n          const command = p[i];\n          const result = {\n            type: command.type\n          };\n          if (command.x2 !== undefined && command.y2 !== undefined) {\n            result.x1 = command.x2;\n            result.y1 = command.y2;\n            result.x2 = command.x1;\n            result.y2 = command.y1;\n          } else if (command.x1 !== undefined && command.y1 !== undefined) {\n            result.x1 = command.x1;\n            result.y1 = command.y1;\n          }\n          result.x = p[i - 1].x;\n          result.y = p[i - 1].y;\n          reversed.push(result);\n        }\n      });\n      return reversed;\n    }\n    return convert(opentype.parse(arraybuffer), this.reversed);\n  }\n}\nexport { TTFLoader };","map":{"version":3,"names":["FileLoader","Loader","opentype","TTFLoader","constructor","manager","reversed","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","buffer","parse","e","console","error","itemError","arraybuffer","convert","font","round","Math","glyphs","scale","unitsPerEm","glyphIndexMap","encoding","cmap","unicodes","Object","keys","i","length","unicode","glyph","undefined","token","ha","advanceWidth","x_min","xMin","x_max","xMax","o","commands","reverseCommands","forEach","command","type","toLowerCase","x","y","x1","y1","x2","y2","String","fromCodePoint","familyName","getEnglishName","ascender","descender","underlinePosition","tables","post","underlineThickness","boundingBox","head","yMin","yMax","resolution","original_font_information","name","paths","c","push","p","result"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/loaders/TTFLoader.js"],"sourcesContent":["import {\n\tFileLoader,\n\tLoader\n} from 'three';\nimport opentype from '../libs/opentype.module.js';\n\n/**\n * A loader for the TTF format.\n *\n * Loads TTF files and converts them into typeface JSON that can be used directly\n * to create THREE.Font objects.\n *\n * ```js\n * const loader = new TTFLoader();\n * const json = await loader.loadAsync( 'fonts/ttf/kenpixel.ttf' );\n * const font = new Font( json );\n * ```\n *\n * @augments Loader\n * @three_import import { TTFLoader } from 'three/addons/loaders/TTFLoader.js';\n */\nclass TTFLoader extends Loader {\n\n\t/**\n\t * Constructs a new TTF loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\t/**\n\t\t * Whether the TTF commands should be reversed or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.reversed = false;\n\n\t}\n\n\t/**\n\t * Starts loading from the given URL and passes the loaded TTF asset\n\t * to the `onLoad()` callback.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(Object)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( buffer ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\t/**\n\t * Parses the given TTF data and returns a JSON for creating a font.\n\t *\n\t * @param {ArrayBuffer} arraybuffer - The raw TTF data as an array buffer.\n\t * @return {Object} The result JSON.\n\t */\n\tparse( arraybuffer ) {\n\n\t\tfunction convert( font, reversed ) {\n\n\t\t\tconst round = Math.round;\n\n\t\t\tconst glyphs = {};\n\t\t\tconst scale = ( 100000 ) / ( ( font.unitsPerEm || 2048 ) * 72 );\n\n\t\t\tconst glyphIndexMap = font.encoding.cmap.glyphIndexMap;\n\t\t\tconst unicodes = Object.keys( glyphIndexMap );\n\n\t\t\tfor ( let i = 0; i < unicodes.length; i ++ ) {\n\n\t\t\t\tconst unicode = unicodes[ i ];\n\t\t\t\tconst glyph = font.glyphs.glyphs[ glyphIndexMap[ unicode ] ];\n\n\t\t\t\tif ( unicode !== undefined ) {\n\n\t\t\t\t\tconst token = {\n\t\t\t\t\t\tha: round( glyph.advanceWidth * scale ),\n\t\t\t\t\t\tx_min: round( glyph.xMin * scale ),\n\t\t\t\t\t\tx_max: round( glyph.xMax * scale ),\n\t\t\t\t\t\to: ''\n\t\t\t\t\t};\n\n\t\t\t\t\tif ( reversed ) {\n\n\t\t\t\t\t\tglyph.path.commands = reverseCommands( glyph.path.commands );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tglyph.path.commands.forEach( function ( command ) {\n\n\t\t\t\t\t\tif ( command.type.toLowerCase() === 'c' ) {\n\n\t\t\t\t\t\t\tcommand.type = 'b';\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttoken.o += command.type.toLowerCase() + ' ';\n\n\t\t\t\t\t\tif ( command.x !== undefined && command.y !== undefined ) {\n\n\t\t\t\t\t\t\ttoken.o += round( command.x * scale ) + ' ' + round( command.y * scale ) + ' ';\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( command.x1 !== undefined && command.y1 !== undefined ) {\n\n\t\t\t\t\t\t\ttoken.o += round( command.x1 * scale ) + ' ' + round( command.y1 * scale ) + ' ';\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( command.x2 !== undefined && command.y2 !== undefined ) {\n\n\t\t\t\t\t\t\ttoken.o += round( command.x2 * scale ) + ' ' + round( command.y2 * scale ) + ' ';\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t\tglyphs[ String.fromCodePoint( glyph.unicode ) ] = token;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tglyphs: glyphs,\n\t\t\t\tfamilyName: font.getEnglishName( 'fullName' ),\n\t\t\t\tascender: round( font.ascender * scale ),\n\t\t\t\tdescender: round( font.descender * scale ),\n\t\t\t\tunderlinePosition: font.tables.post.underlinePosition,\n\t\t\t\tunderlineThickness: font.tables.post.underlineThickness,\n\t\t\t\tboundingBox: {\n\t\t\t\t\txMin: font.tables.head.xMin,\n\t\t\t\t\txMax: font.tables.head.xMax,\n\t\t\t\t\tyMin: font.tables.head.yMin,\n\t\t\t\t\tyMax: font.tables.head.yMax\n\t\t\t\t},\n\t\t\t\tresolution: 1000,\n\t\t\t\toriginal_font_information: font.tables.name\n\t\t\t};\n\n\t\t}\n\n\t\tfunction reverseCommands( commands ) {\n\n\t\t\tconst paths = [];\n\t\t\tlet path;\n\n\t\t\tcommands.forEach( function ( c ) {\n\n\t\t\t\tif ( c.type.toLowerCase() === 'm' ) {\n\n\t\t\t\t\tpath = [ c ];\n\t\t\t\t\tpaths.push( path );\n\n\t\t\t\t} else if ( c.type.toLowerCase() !== 'z' ) {\n\n\t\t\t\t\tpath.push( c );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tconst reversed = [];\n\n\t\t\tpaths.forEach( function ( p ) {\n\n\t\t\t\tconst result = {\n\t\t\t\t\ttype: 'm',\n\t\t\t\t\tx: p[ p.length - 1 ].x,\n\t\t\t\t\ty: p[ p.length - 1 ].y\n\t\t\t\t};\n\n\t\t\t\treversed.push( result );\n\n\t\t\t\tfor ( let i = p.length - 1; i > 0; i -- ) {\n\n\t\t\t\t\tconst command = p[ i ];\n\t\t\t\t\tconst result = { type: command.type };\n\n\t\t\t\t\tif ( command.x2 !== undefined && command.y2 !== undefined ) {\n\n\t\t\t\t\t\tresult.x1 = command.x2;\n\t\t\t\t\t\tresult.y1 = command.y2;\n\t\t\t\t\t\tresult.x2 = command.x1;\n\t\t\t\t\t\tresult.y2 = command.y1;\n\n\t\t\t\t\t} else if ( command.x1 !== undefined && command.y1 !== undefined ) {\n\n\t\t\t\t\t\tresult.x1 = command.x1;\n\t\t\t\t\t\tresult.y1 = command.y1;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tresult.x = p[ i - 1 ].x;\n\t\t\t\t\tresult.y = p[ i - 1 ].y;\n\t\t\t\t\treversed.push( result );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\treturn reversed;\n\n\t\t}\n\n\t\treturn convert( opentype.parse( arraybuffer ), this.reversed );\n\n\t}\n\n}\n\nexport { TTFLoader };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}