{"ast":null,"code":"import { Vector2 } from 'three';\n\n/**\n * @module NormalMapShader\n * @three_import import { NormalMapShader } from 'three/addons/shaders/NormalMapShader.js';\n */\n\n/**\n * Normal map shader, compute normals from heightmap.\n * @constant\n * @type {ShaderMaterial~Shader}\n */\nconst NormalMapShader = {\n  name: 'NormalMapShader',\n  uniforms: {\n    'heightMap': {\n      value: null\n    },\n    'resolution': {\n      value: new Vector2(512, 512)\n    },\n    'scale': {\n      value: new Vector2(1, 1)\n    },\n    'height': {\n      value: 0.05\n    }\n  },\n  vertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n  fragmentShader: /* glsl */`\n\n\t\tuniform float height;\n\t\tuniform vec2 resolution;\n\t\tuniform sampler2D heightMap;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tfloat val = texture2D( heightMap, vUv ).x;\n\n\t\t\tfloat valU = texture2D( heightMap, vUv + vec2( 1.0 / resolution.x, 0.0 ) ).x;\n\t\t\tfloat valV = texture2D( heightMap, vUv + vec2( 0.0, 1.0 / resolution.y ) ).x;\n\n\t\t\tgl_FragColor = vec4( ( 0.5 * normalize( vec3( val - valU, val - valV, height  ) ) + 0.5 ), 1.0 );\n\n\t\t}`\n};\nexport { NormalMapShader };","map":{"version":3,"names":["Vector2","NormalMapShader","name","uniforms","value","vertexShader","fragmentShader"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/shaders/NormalMapShader.js"],"sourcesContent":["import {\n\tVector2\n} from 'three';\n\n/**\n * @module NormalMapShader\n * @three_import import { NormalMapShader } from 'three/addons/shaders/NormalMapShader.js';\n */\n\n/**\n * Normal map shader, compute normals from heightmap.\n * @constant\n * @type {ShaderMaterial~Shader}\n */\nconst NormalMapShader = {\n\n\tname: 'NormalMapShader',\n\n\tuniforms: {\n\n\t\t'heightMap': { value: null },\n\t\t'resolution': { value: new Vector2( 512, 512 ) },\n\t\t'scale': { value: new Vector2( 1, 1 ) },\n\t\t'height': { value: 0.05 }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform float height;\n\t\tuniform vec2 resolution;\n\t\tuniform sampler2D heightMap;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tfloat val = texture2D( heightMap, vUv ).x;\n\n\t\t\tfloat valU = texture2D( heightMap, vUv + vec2( 1.0 / resolution.x, 0.0 ) ).x;\n\t\t\tfloat valV = texture2D( heightMap, vUv + vec2( 0.0, 1.0 / resolution.y ) ).x;\n\n\t\t\tgl_FragColor = vec4( ( 0.5 * normalize( vec3( val - valU, val - valV, height  ) ) + 0.5 ), 1.0 );\n\n\t\t}`\n\n};\n\nexport { NormalMapShader };\n"],"mappings":"AAAA,SACCA,OAAO,QACD,OAAO;;AAEd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAMC,eAAe,GAAG;EAEvBC,IAAI,EAAE,iBAAiB;EAEvBC,QAAQ,EAAE;IAET,WAAW,EAAE;MAAEC,KAAK,EAAE;IAAK,CAAC;IAC5B,YAAY,EAAE;MAAEA,KAAK,EAAE,IAAIJ,OAAO,CAAE,GAAG,EAAE,GAAI;IAAE,CAAC;IAChD,OAAO,EAAE;MAAEI,KAAK,EAAE,IAAIJ,OAAO,CAAE,CAAC,EAAE,CAAE;IAAE,CAAC;IACvC,QAAQ,EAAE;MAAEI,KAAK,EAAE;IAAK;EAEzB,CAAC;EAEDC,YAAY,EAAE,UAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;EAEHC,cAAc,EAAE,UAAU;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,CAAC;AAED,SAASL,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}