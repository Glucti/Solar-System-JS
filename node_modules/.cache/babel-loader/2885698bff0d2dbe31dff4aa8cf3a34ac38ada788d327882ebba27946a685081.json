{"ast":null,"code":"import { BufferAttribute, BufferGeometry, Color, Quaternion, Raycaster, SRGBColorSpace, Vector3 } from 'three';\n\n/**\n * A procedural roller coaster geometry.\n *\n * @augments BufferGeometry\n * @three_import import { RollerCoasterGeometry } from 'three/addons/misc/RollerCoaster.js';\n */\nclass RollerCoasterGeometry extends BufferGeometry {\n  /**\n   * Constructs a new geometry.\n   *\n   * @param {Curve} curve - The curve to generate the geometry along.\n  \t * @param {number} divisions - The number of divisions which defines the detail of the geometry.\n   */\n  constructor(curve, divisions) {\n    super();\n    const vertices = [];\n    const normals = [];\n    const colors = [];\n    const color1 = [1, 1, 1];\n    const color2 = [1, 1, 0];\n    const up = new Vector3(0, 1, 0);\n    const forward = new Vector3();\n    const right = new Vector3();\n    const quaternion = new Quaternion();\n    const prevQuaternion = new Quaternion();\n    prevQuaternion.setFromAxisAngle(up, Math.PI / 2);\n    const point = new Vector3();\n    const prevPoint = new Vector3();\n    prevPoint.copy(curve.getPointAt(0));\n\n    // shapes\n\n    const step = [new Vector3(-0.225, 0, 0), new Vector3(0, -0.050, 0), new Vector3(0, -0.175, 0), new Vector3(0, -0.050, 0), new Vector3(0.225, 0, 0), new Vector3(0, -0.175, 0)];\n    const PI2 = Math.PI * 2;\n    let sides = 5;\n    const tube1 = [];\n    for (let i = 0; i < sides; i++) {\n      const angle = i / sides * PI2;\n      tube1.push(new Vector3(Math.sin(angle) * 0.06, Math.cos(angle) * 0.06, 0));\n    }\n    sides = 6;\n    const tube2 = [];\n    for (let i = 0; i < sides; i++) {\n      const angle = i / sides * PI2;\n      tube2.push(new Vector3(Math.sin(angle) * 0.025, Math.cos(angle) * 0.025, 0));\n    }\n    const vector = new Vector3();\n    const normal = new Vector3();\n    function drawShape(shape, color) {\n      normal.set(0, 0, -1).applyQuaternion(quaternion);\n      for (let j = 0; j < shape.length; j++) {\n        vector.copy(shape[j]);\n        vector.applyQuaternion(quaternion);\n        vector.add(point);\n        vertices.push(vector.x, vector.y, vector.z);\n        normals.push(normal.x, normal.y, normal.z);\n        colors.push(color[0], color[1], color[2]);\n      }\n      normal.set(0, 0, 1).applyQuaternion(quaternion);\n      for (let j = shape.length - 1; j >= 0; j--) {\n        vector.copy(shape[j]);\n        vector.applyQuaternion(quaternion);\n        vector.add(point);\n        vertices.push(vector.x, vector.y, vector.z);\n        normals.push(normal.x, normal.y, normal.z);\n        colors.push(color[0], color[1], color[2]);\n      }\n    }\n    const vector1 = new Vector3();\n    const vector2 = new Vector3();\n    const vector3 = new Vector3();\n    const vector4 = new Vector3();\n    const normal1 = new Vector3();\n    const normal2 = new Vector3();\n    const normal3 = new Vector3();\n    const normal4 = new Vector3();\n    function extrudeShape(shape, offset, color) {\n      for (let j = 0, jl = shape.length; j < jl; j++) {\n        const point1 = shape[j];\n        const point2 = shape[(j + 1) % jl];\n        vector1.copy(point1).add(offset);\n        vector1.applyQuaternion(quaternion);\n        vector1.add(point);\n        vector2.copy(point2).add(offset);\n        vector2.applyQuaternion(quaternion);\n        vector2.add(point);\n        vector3.copy(point2).add(offset);\n        vector3.applyQuaternion(prevQuaternion);\n        vector3.add(prevPoint);\n        vector4.copy(point1).add(offset);\n        vector4.applyQuaternion(prevQuaternion);\n        vector4.add(prevPoint);\n        vertices.push(vector1.x, vector1.y, vector1.z);\n        vertices.push(vector2.x, vector2.y, vector2.z);\n        vertices.push(vector4.x, vector4.y, vector4.z);\n        vertices.push(vector2.x, vector2.y, vector2.z);\n        vertices.push(vector3.x, vector3.y, vector3.z);\n        vertices.push(vector4.x, vector4.y, vector4.z);\n\n        //\n\n        normal1.copy(point1);\n        normal1.applyQuaternion(quaternion);\n        normal1.normalize();\n        normal2.copy(point2);\n        normal2.applyQuaternion(quaternion);\n        normal2.normalize();\n        normal3.copy(point2);\n        normal3.applyQuaternion(prevQuaternion);\n        normal3.normalize();\n        normal4.copy(point1);\n        normal4.applyQuaternion(prevQuaternion);\n        normal4.normalize();\n        normals.push(normal1.x, normal1.y, normal1.z);\n        normals.push(normal2.x, normal2.y, normal2.z);\n        normals.push(normal4.x, normal4.y, normal4.z);\n        normals.push(normal2.x, normal2.y, normal2.z);\n        normals.push(normal3.x, normal3.y, normal3.z);\n        normals.push(normal4.x, normal4.y, normal4.z);\n        colors.push(color[0], color[1], color[2]);\n        colors.push(color[0], color[1], color[2]);\n        colors.push(color[0], color[1], color[2]);\n        colors.push(color[0], color[1], color[2]);\n        colors.push(color[0], color[1], color[2]);\n        colors.push(color[0], color[1], color[2]);\n      }\n    }\n    const offset = new Vector3();\n    for (let i = 1; i <= divisions; i++) {\n      point.copy(curve.getPointAt(i / divisions));\n      up.set(0, 1, 0);\n      forward.subVectors(point, prevPoint).normalize();\n      right.crossVectors(up, forward).normalize();\n      up.crossVectors(forward, right);\n      const angle = Math.atan2(forward.x, forward.z);\n      quaternion.setFromAxisAngle(up, angle);\n      if (i % 2 === 0) {\n        drawShape(step, color2);\n      }\n      extrudeShape(tube1, offset.set(0, -0.125, 0), color2);\n      extrudeShape(tube2, offset.set(0.2, 0, 0), color1);\n      extrudeShape(tube2, offset.set(-0.2, 0, 0), color1);\n      prevPoint.copy(point);\n      prevQuaternion.copy(quaternion);\n    }\n\n    // console.log( vertices.length );\n\n    this.setAttribute('position', new BufferAttribute(new Float32Array(vertices), 3));\n    this.setAttribute('normal', new BufferAttribute(new Float32Array(normals), 3));\n    this.setAttribute('color', new BufferAttribute(new Float32Array(colors), 3));\n  }\n}\n\n/**\n * A procedural roller coaster lifters geometry.\n *\n * @augments BufferGeometry\n * @three_import import { RollerCoasterLiftersGeometry } from 'three/addons/misc/RollerCoaster.js';\n */\nclass RollerCoasterLiftersGeometry extends BufferGeometry {\n  /**\n   * Constructs a new geometry.\n   *\n   * @param {Curve} curve - The curve to generate the geometry along.\n  \t * @param {number} divisions - The number of divisions which defines the detail of the geometry.\n   */\n  constructor(curve, divisions) {\n    super();\n    const vertices = [];\n    const normals = [];\n    const quaternion = new Quaternion();\n    const up = new Vector3(0, 1, 0);\n    const point = new Vector3();\n    const tangent = new Vector3();\n\n    // shapes\n\n    const tube1 = [new Vector3(0, 0.05, -0.05), new Vector3(0, 0.05, 0.05), new Vector3(0, -0.05, 0)];\n    const tube2 = [new Vector3(-0.05, 0, 0.05), new Vector3(-0.05, 0, -0.05), new Vector3(0.05, 0, 0)];\n    const tube3 = [new Vector3(0.05, 0, -0.05), new Vector3(0.05, 0, 0.05), new Vector3(-0.05, 0, 0)];\n    const vector1 = new Vector3();\n    const vector2 = new Vector3();\n    const vector3 = new Vector3();\n    const vector4 = new Vector3();\n    const normal1 = new Vector3();\n    const normal2 = new Vector3();\n    const normal3 = new Vector3();\n    const normal4 = new Vector3();\n    function extrudeShape(shape, fromPoint, toPoint) {\n      for (let j = 0, jl = shape.length; j < jl; j++) {\n        const point1 = shape[j];\n        const point2 = shape[(j + 1) % jl];\n        vector1.copy(point1);\n        vector1.applyQuaternion(quaternion);\n        vector1.add(fromPoint);\n        vector2.copy(point2);\n        vector2.applyQuaternion(quaternion);\n        vector2.add(fromPoint);\n        vector3.copy(point2);\n        vector3.applyQuaternion(quaternion);\n        vector3.add(toPoint);\n        vector4.copy(point1);\n        vector4.applyQuaternion(quaternion);\n        vector4.add(toPoint);\n        vertices.push(vector1.x, vector1.y, vector1.z);\n        vertices.push(vector2.x, vector2.y, vector2.z);\n        vertices.push(vector4.x, vector4.y, vector4.z);\n        vertices.push(vector2.x, vector2.y, vector2.z);\n        vertices.push(vector3.x, vector3.y, vector3.z);\n        vertices.push(vector4.x, vector4.y, vector4.z);\n\n        //\n\n        normal1.copy(point1);\n        normal1.applyQuaternion(quaternion);\n        normal1.normalize();\n        normal2.copy(point2);\n        normal2.applyQuaternion(quaternion);\n        normal2.normalize();\n        normal3.copy(point2);\n        normal3.applyQuaternion(quaternion);\n        normal3.normalize();\n        normal4.copy(point1);\n        normal4.applyQuaternion(quaternion);\n        normal4.normalize();\n        normals.push(normal1.x, normal1.y, normal1.z);\n        normals.push(normal2.x, normal2.y, normal2.z);\n        normals.push(normal4.x, normal4.y, normal4.z);\n        normals.push(normal2.x, normal2.y, normal2.z);\n        normals.push(normal3.x, normal3.y, normal3.z);\n        normals.push(normal4.x, normal4.y, normal4.z);\n      }\n    }\n    const fromPoint = new Vector3();\n    const toPoint = new Vector3();\n    for (let i = 1; i <= divisions; i++) {\n      point.copy(curve.getPointAt(i / divisions));\n      tangent.copy(curve.getTangentAt(i / divisions));\n      const angle = Math.atan2(tangent.x, tangent.z);\n      quaternion.setFromAxisAngle(up, angle);\n\n      //\n\n      if (point.y > 10) {\n        fromPoint.set(-0.75, -0.35, 0);\n        fromPoint.applyQuaternion(quaternion);\n        fromPoint.add(point);\n        toPoint.set(0.75, -0.35, 0);\n        toPoint.applyQuaternion(quaternion);\n        toPoint.add(point);\n        extrudeShape(tube1, fromPoint, toPoint);\n        fromPoint.set(-0.7, -0.3, 0);\n        fromPoint.applyQuaternion(quaternion);\n        fromPoint.add(point);\n        toPoint.set(-0.7, -point.y, 0);\n        toPoint.applyQuaternion(quaternion);\n        toPoint.add(point);\n        extrudeShape(tube2, fromPoint, toPoint);\n        fromPoint.set(0.7, -0.3, 0);\n        fromPoint.applyQuaternion(quaternion);\n        fromPoint.add(point);\n        toPoint.set(0.7, -point.y, 0);\n        toPoint.applyQuaternion(quaternion);\n        toPoint.add(point);\n        extrudeShape(tube3, fromPoint, toPoint);\n      } else {\n        fromPoint.set(0, -0.2, 0);\n        fromPoint.applyQuaternion(quaternion);\n        fromPoint.add(point);\n        toPoint.set(0, -point.y, 0);\n        toPoint.applyQuaternion(quaternion);\n        toPoint.add(point);\n        extrudeShape(tube3, fromPoint, toPoint);\n      }\n    }\n    this.setAttribute('position', new BufferAttribute(new Float32Array(vertices), 3));\n    this.setAttribute('normal', new BufferAttribute(new Float32Array(normals), 3));\n  }\n}\n\n/**\n * A procedural roller coaster shadow geometry.\n *\n * @augments BufferGeometry\n * @three_import import { RollerCoasterShadowGeometry } from 'three/addons/misc/RollerCoaster.js';\n */\nclass RollerCoasterShadowGeometry extends BufferGeometry {\n  /**\n   * Constructs a new geometry.\n   *\n   * @param {Curve} curve - The curve to generate the geometry along.\n  \t * @param {number} divisions - The number of divisions which defines the detail of the geometry.\n   */\n  constructor(curve, divisions) {\n    super();\n    const vertices = [];\n    const up = new Vector3(0, 1, 0);\n    const forward = new Vector3();\n    const quaternion = new Quaternion();\n    const prevQuaternion = new Quaternion();\n    prevQuaternion.setFromAxisAngle(up, Math.PI / 2);\n    const point = new Vector3();\n    const prevPoint = new Vector3();\n    prevPoint.copy(curve.getPointAt(0));\n    prevPoint.y = 0;\n    const vector1 = new Vector3();\n    const vector2 = new Vector3();\n    const vector3 = new Vector3();\n    const vector4 = new Vector3();\n    for (let i = 1; i <= divisions; i++) {\n      point.copy(curve.getPointAt(i / divisions));\n      point.y = 0;\n      forward.subVectors(point, prevPoint);\n      const angle = Math.atan2(forward.x, forward.z);\n      quaternion.setFromAxisAngle(up, angle);\n      vector1.set(-0.3, 0, 0);\n      vector1.applyQuaternion(quaternion);\n      vector1.add(point);\n      vector2.set(0.3, 0, 0);\n      vector2.applyQuaternion(quaternion);\n      vector2.add(point);\n      vector3.set(0.3, 0, 0);\n      vector3.applyQuaternion(prevQuaternion);\n      vector3.add(prevPoint);\n      vector4.set(-0.3, 0, 0);\n      vector4.applyQuaternion(prevQuaternion);\n      vector4.add(prevPoint);\n      vertices.push(vector1.x, vector1.y, vector1.z);\n      vertices.push(vector2.x, vector2.y, vector2.z);\n      vertices.push(vector4.x, vector4.y, vector4.z);\n      vertices.push(vector2.x, vector2.y, vector2.z);\n      vertices.push(vector3.x, vector3.y, vector3.z);\n      vertices.push(vector4.x, vector4.y, vector4.z);\n      prevPoint.copy(point);\n      prevQuaternion.copy(quaternion);\n    }\n    this.setAttribute('position', new BufferAttribute(new Float32Array(vertices), 3));\n  }\n}\n\n/**\n * A procedural sky geometry.\n *\n * @augments BufferGeometry\n * @three_import import { SkyGeometry } from 'three/addons/misc/RollerCoaster.js';\n */\nclass SkyGeometry extends BufferGeometry {\n  /**\n   * Constructs a new geometry.\n   */\n  constructor() {\n    super();\n    const vertices = [];\n    for (let i = 0; i < 100; i++) {\n      const x = Math.random() * 800 - 400;\n      const y = Math.random() * 50 + 50;\n      const z = Math.random() * 800 - 400;\n      const size = Math.random() * 40 + 20;\n      vertices.push(x - size, y, z - size);\n      vertices.push(x + size, y, z - size);\n      vertices.push(x - size, y, z + size);\n      vertices.push(x + size, y, z - size);\n      vertices.push(x + size, y, z + size);\n      vertices.push(x - size, y, z + size);\n    }\n    this.setAttribute('position', new BufferAttribute(new Float32Array(vertices), 3));\n  }\n}\n\n/**\n * A procedural trees geometry.\n *\n * @augments BufferGeometry\n * @three_import import { TreesGeometry } from 'three/addons/misc/RollerCoaster.js';\n */\nclass TreesGeometry extends BufferGeometry {\n  /**\n   * Constructs a new geometry.\n   *\n   * @param {Mesh} landscape - A mesh representing the landscape. Trees will be positioned\n   * randomly on the landscape's surface.\n   */\n  constructor(landscape) {\n    super();\n    const vertices = [];\n    const colors = [];\n    const raycaster = new Raycaster();\n    raycaster.ray.direction.set(0, -1, 0);\n    const _color = new Color();\n    for (let i = 0; i < 2000; i++) {\n      const x = Math.random() * 500 - 250;\n      const z = Math.random() * 500 - 250;\n      raycaster.ray.origin.set(x, 50, z);\n      const intersections = raycaster.intersectObject(landscape);\n      if (intersections.length === 0) continue;\n      const y = intersections[0].point.y;\n      const height = Math.random() * 5 + 0.5;\n      let angle = Math.random() * Math.PI * 2;\n      vertices.push(x + Math.sin(angle), y, z + Math.cos(angle));\n      vertices.push(x, y + height, z);\n      vertices.push(x + Math.sin(angle + Math.PI), y, z + Math.cos(angle + Math.PI));\n      angle += Math.PI / 2;\n      vertices.push(x + Math.sin(angle), y, z + Math.cos(angle));\n      vertices.push(x, y + height, z);\n      vertices.push(x + Math.sin(angle + Math.PI), y, z + Math.cos(angle + Math.PI));\n      const random = Math.random() * 0.1;\n      for (let j = 0; j < 6; j++) {\n        _color.setRGB(0.2 + random, 0.4 + random, 0, SRGBColorSpace);\n        colors.push(_color.r, _color.g, _color.b);\n      }\n    }\n    this.setAttribute('position', new BufferAttribute(new Float32Array(vertices), 3));\n    this.setAttribute('color', new BufferAttribute(new Float32Array(colors), 3));\n  }\n}\nexport { RollerCoasterGeometry, RollerCoasterLiftersGeometry, RollerCoasterShadowGeometry, SkyGeometry, TreesGeometry };","map":{"version":3,"names":["BufferAttribute","BufferGeometry","Color","Quaternion","Raycaster","SRGBColorSpace","Vector3","RollerCoasterGeometry","constructor","curve","divisions","vertices","normals","colors","color1","color2","up","forward","right","quaternion","prevQuaternion","setFromAxisAngle","Math","PI","point","prevPoint","copy","getPointAt","step","PI2","sides","tube1","i","angle","push","sin","cos","tube2","vector","normal","drawShape","shape","color","set","applyQuaternion","j","length","add","x","y","z","vector1","vector2","vector3","vector4","normal1","normal2","normal3","normal4","extrudeShape","offset","jl","point1","point2","normalize","subVectors","crossVectors","atan2","setAttribute","Float32Array","RollerCoasterLiftersGeometry","tangent","tube3","fromPoint","toPoint","getTangentAt","RollerCoasterShadowGeometry","SkyGeometry","random","size","TreesGeometry","landscape","raycaster","ray","direction","_color","origin","intersections","intersectObject","height","setRGB","r","g","b"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/misc/RollerCoaster.js"],"sourcesContent":["import {\n\tBufferAttribute,\n\tBufferGeometry,\n\tColor,\n\tQuaternion,\n\tRaycaster,\n\tSRGBColorSpace,\n\tVector3\n} from 'three';\n\n/**\n * A procedural roller coaster geometry.\n *\n * @augments BufferGeometry\n * @three_import import { RollerCoasterGeometry } from 'three/addons/misc/RollerCoaster.js';\n */\nclass RollerCoasterGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new geometry.\n\t *\n\t * @param {Curve} curve - The curve to generate the geometry along.\n \t * @param {number} divisions - The number of divisions which defines the detail of the geometry.\n\t */\n\tconstructor( curve, divisions ) {\n\n\t\tsuper();\n\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst colors = [];\n\n\t\tconst color1 = [ 1, 1, 1 ];\n\t\tconst color2 = [ 1, 1, 0 ];\n\n\t\tconst up = new Vector3( 0, 1, 0 );\n\t\tconst forward = new Vector3();\n\t\tconst right = new Vector3();\n\n\t\tconst quaternion = new Quaternion();\n\t\tconst prevQuaternion = new Quaternion();\n\t\tprevQuaternion.setFromAxisAngle( up, Math.PI / 2 );\n\n\t\tconst point = new Vector3();\n\t\tconst prevPoint = new Vector3();\n\t\tprevPoint.copy( curve.getPointAt( 0 ) );\n\n\t\t// shapes\n\n\t\tconst step = [\n\t\t\tnew Vector3( - 0.225, 0, 0 ),\n\t\t\tnew Vector3( 0, - 0.050, 0 ),\n\t\t\tnew Vector3( 0, - 0.175, 0 ),\n\n\t\t\tnew Vector3( 0, - 0.050, 0 ),\n\t\t\tnew Vector3( 0.225, 0, 0 ),\n\t\t\tnew Vector3( 0, - 0.175, 0 )\n\t\t];\n\n\t\tconst PI2 = Math.PI * 2;\n\n\t\tlet sides = 5;\n\t\tconst tube1 = [];\n\n\t\tfor ( let i = 0; i < sides; i ++ ) {\n\n\t\t\tconst angle = ( i / sides ) * PI2;\n\t\t\ttube1.push( new Vector3( Math.sin( angle ) * 0.06, Math.cos( angle ) * 0.06, 0 ) );\n\n\t\t}\n\n\t\tsides = 6;\n\t\tconst tube2 = [];\n\n\t\tfor ( let i = 0; i < sides; i ++ ) {\n\n\t\t\tconst angle = ( i / sides ) * PI2;\n\t\t\ttube2.push( new Vector3( Math.sin( angle ) * 0.025, Math.cos( angle ) * 0.025, 0 ) );\n\n\t\t}\n\n\t\tconst vector = new Vector3();\n\t\tconst normal = new Vector3();\n\n\t\tfunction drawShape( shape, color ) {\n\n\t\t\tnormal.set( 0, 0, - 1 ).applyQuaternion( quaternion );\n\n\t\t\tfor ( let j = 0; j < shape.length; j ++ ) {\n\n\t\t\t\tvector.copy( shape[ j ] );\n\t\t\t\tvector.applyQuaternion( quaternion );\n\t\t\t\tvector.add( point );\n\n\t\t\t\tvertices.push( vector.x, vector.y, vector.z );\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\t\t\t\tcolors.push( color[ 0 ], color[ 1 ], color[ 2 ] );\n\n\t\t\t}\n\n\t\t\tnormal.set( 0, 0, 1 ).applyQuaternion( quaternion );\n\n\t\t\tfor ( let j = shape.length - 1; j >= 0; j -- ) {\n\n\t\t\t\tvector.copy( shape[ j ] );\n\t\t\t\tvector.applyQuaternion( quaternion );\n\t\t\t\tvector.add( point );\n\n\t\t\t\tvertices.push( vector.x, vector.y, vector.z );\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\t\t\t\tcolors.push( color[ 0 ], color[ 1 ], color[ 2 ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst vector1 = new Vector3();\n\t\tconst vector2 = new Vector3();\n\t\tconst vector3 = new Vector3();\n\t\tconst vector4 = new Vector3();\n\n\t\tconst normal1 = new Vector3();\n\t\tconst normal2 = new Vector3();\n\t\tconst normal3 = new Vector3();\n\t\tconst normal4 = new Vector3();\n\n\t\tfunction extrudeShape( shape, offset, color ) {\n\n\t\t\tfor ( let j = 0, jl = shape.length; j < jl; j ++ ) {\n\n\t\t\t\tconst point1 = shape[ j ];\n\t\t\t\tconst point2 = shape[ ( j + 1 ) % jl ];\n\n\t\t\t\tvector1.copy( point1 ).add( offset );\n\t\t\t\tvector1.applyQuaternion( quaternion );\n\t\t\t\tvector1.add( point );\n\n\t\t\t\tvector2.copy( point2 ).add( offset );\n\t\t\t\tvector2.applyQuaternion( quaternion );\n\t\t\t\tvector2.add( point );\n\n\t\t\t\tvector3.copy( point2 ).add( offset );\n\t\t\t\tvector3.applyQuaternion( prevQuaternion );\n\t\t\t\tvector3.add( prevPoint );\n\n\t\t\t\tvector4.copy( point1 ).add( offset );\n\t\t\t\tvector4.applyQuaternion( prevQuaternion );\n\t\t\t\tvector4.add( prevPoint );\n\n\t\t\t\tvertices.push( vector1.x, vector1.y, vector1.z );\n\t\t\t\tvertices.push( vector2.x, vector2.y, vector2.z );\n\t\t\t\tvertices.push( vector4.x, vector4.y, vector4.z );\n\n\t\t\t\tvertices.push( vector2.x, vector2.y, vector2.z );\n\t\t\t\tvertices.push( vector3.x, vector3.y, vector3.z );\n\t\t\t\tvertices.push( vector4.x, vector4.y, vector4.z );\n\n\t\t\t\t//\n\n\t\t\t\tnormal1.copy( point1 );\n\t\t\t\tnormal1.applyQuaternion( quaternion );\n\t\t\t\tnormal1.normalize();\n\n\t\t\t\tnormal2.copy( point2 );\n\t\t\t\tnormal2.applyQuaternion( quaternion );\n\t\t\t\tnormal2.normalize();\n\n\t\t\t\tnormal3.copy( point2 );\n\t\t\t\tnormal3.applyQuaternion( prevQuaternion );\n\t\t\t\tnormal3.normalize();\n\n\t\t\t\tnormal4.copy( point1 );\n\t\t\t\tnormal4.applyQuaternion( prevQuaternion );\n\t\t\t\tnormal4.normalize();\n\n\t\t\t\tnormals.push( normal1.x, normal1.y, normal1.z );\n\t\t\t\tnormals.push( normal2.x, normal2.y, normal2.z );\n\t\t\t\tnormals.push( normal4.x, normal4.y, normal4.z );\n\n\t\t\t\tnormals.push( normal2.x, normal2.y, normal2.z );\n\t\t\t\tnormals.push( normal3.x, normal3.y, normal3.z );\n\t\t\t\tnormals.push( normal4.x, normal4.y, normal4.z );\n\n\t\t\t\tcolors.push( color[ 0 ], color[ 1 ], color[ 2 ] );\n\t\t\t\tcolors.push( color[ 0 ], color[ 1 ], color[ 2 ] );\n\t\t\t\tcolors.push( color[ 0 ], color[ 1 ], color[ 2 ] );\n\n\t\t\t\tcolors.push( color[ 0 ], color[ 1 ], color[ 2 ] );\n\t\t\t\tcolors.push( color[ 0 ], color[ 1 ], color[ 2 ] );\n\t\t\t\tcolors.push( color[ 0 ], color[ 1 ], color[ 2 ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst offset = new Vector3();\n\n\t\tfor ( let i = 1; i <= divisions; i ++ ) {\n\n\t\t\tpoint.copy( curve.getPointAt( i / divisions ) );\n\n\t\t\tup.set( 0, 1, 0 );\n\n\t\t\tforward.subVectors( point, prevPoint ).normalize();\n\t\t\tright.crossVectors( up, forward ).normalize();\n\t\t\tup.crossVectors( forward, right );\n\n\t\t\tconst angle = Math.atan2( forward.x, forward.z );\n\n\t\t\tquaternion.setFromAxisAngle( up, angle );\n\n\t\t\tif ( i % 2 === 0 ) {\n\n\t\t\t\tdrawShape( step, color2 );\n\n\t\t\t}\n\n\t\t\textrudeShape( tube1, offset.set( 0, - 0.125, 0 ), color2 );\n\t\t\textrudeShape( tube2, offset.set( 0.2, 0, 0 ), color1 );\n\t\t\textrudeShape( tube2, offset.set( - 0.2, 0, 0 ), color1 );\n\n\t\t\tprevPoint.copy( point );\n\t\t\tprevQuaternion.copy( quaternion );\n\n\t\t}\n\n\t\t// console.log( vertices.length );\n\n\t\tthis.setAttribute( 'position', new BufferAttribute( new Float32Array( vertices ), 3 ) );\n\t\tthis.setAttribute( 'normal', new BufferAttribute( new Float32Array( normals ), 3 ) );\n\t\tthis.setAttribute( 'color', new BufferAttribute( new Float32Array( colors ), 3 ) );\n\n\t}\n\n}\n\n/**\n * A procedural roller coaster lifters geometry.\n *\n * @augments BufferGeometry\n * @three_import import { RollerCoasterLiftersGeometry } from 'three/addons/misc/RollerCoaster.js';\n */\nclass RollerCoasterLiftersGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new geometry.\n\t *\n\t * @param {Curve} curve - The curve to generate the geometry along.\n \t * @param {number} divisions - The number of divisions which defines the detail of the geometry.\n\t */\n\tconstructor( curve, divisions ) {\n\n\t\tsuper();\n\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\n\t\tconst quaternion = new Quaternion();\n\n\t\tconst up = new Vector3( 0, 1, 0 );\n\n\t\tconst point = new Vector3();\n\t\tconst tangent = new Vector3();\n\n\t\t// shapes\n\n\t\tconst tube1 = [\n\t\t\tnew Vector3( 0, 0.05, - 0.05 ),\n\t\t\tnew Vector3( 0, 0.05, 0.05 ),\n\t\t\tnew Vector3( 0, - 0.05, 0 )\n\t\t];\n\n\t\tconst tube2 = [\n\t\t\tnew Vector3( - 0.05, 0, 0.05 ),\n\t\t\tnew Vector3( - 0.05, 0, - 0.05 ),\n\t\t\tnew Vector3( 0.05, 0, 0 )\n\t\t];\n\n\t\tconst tube3 = [\n\t\t\tnew Vector3( 0.05, 0, - 0.05 ),\n\t\t\tnew Vector3( 0.05, 0, 0.05 ),\n\t\t\tnew Vector3( - 0.05, 0, 0 )\n\t\t];\n\n\t\tconst vector1 = new Vector3();\n\t\tconst vector2 = new Vector3();\n\t\tconst vector3 = new Vector3();\n\t\tconst vector4 = new Vector3();\n\n\t\tconst normal1 = new Vector3();\n\t\tconst normal2 = new Vector3();\n\t\tconst normal3 = new Vector3();\n\t\tconst normal4 = new Vector3();\n\n\t\tfunction extrudeShape( shape, fromPoint, toPoint ) {\n\n\t\t\tfor ( let j = 0, jl = shape.length; j < jl; j ++ ) {\n\n\t\t\t\tconst point1 = shape[ j ];\n\t\t\t\tconst point2 = shape[ ( j + 1 ) % jl ];\n\n\t\t\t\tvector1.copy( point1 );\n\t\t\t\tvector1.applyQuaternion( quaternion );\n\t\t\t\tvector1.add( fromPoint );\n\n\t\t\t\tvector2.copy( point2 );\n\t\t\t\tvector2.applyQuaternion( quaternion );\n\t\t\t\tvector2.add( fromPoint );\n\n\t\t\t\tvector3.copy( point2 );\n\t\t\t\tvector3.applyQuaternion( quaternion );\n\t\t\t\tvector3.add( toPoint );\n\n\t\t\t\tvector4.copy( point1 );\n\t\t\t\tvector4.applyQuaternion( quaternion );\n\t\t\t\tvector4.add( toPoint );\n\n\t\t\t\tvertices.push( vector1.x, vector1.y, vector1.z );\n\t\t\t\tvertices.push( vector2.x, vector2.y, vector2.z );\n\t\t\t\tvertices.push( vector4.x, vector4.y, vector4.z );\n\n\t\t\t\tvertices.push( vector2.x, vector2.y, vector2.z );\n\t\t\t\tvertices.push( vector3.x, vector3.y, vector3.z );\n\t\t\t\tvertices.push( vector4.x, vector4.y, vector4.z );\n\n\t\t\t\t//\n\n\t\t\t\tnormal1.copy( point1 );\n\t\t\t\tnormal1.applyQuaternion( quaternion );\n\t\t\t\tnormal1.normalize();\n\n\t\t\t\tnormal2.copy( point2 );\n\t\t\t\tnormal2.applyQuaternion( quaternion );\n\t\t\t\tnormal2.normalize();\n\n\t\t\t\tnormal3.copy( point2 );\n\t\t\t\tnormal3.applyQuaternion( quaternion );\n\t\t\t\tnormal3.normalize();\n\n\t\t\t\tnormal4.copy( point1 );\n\t\t\t\tnormal4.applyQuaternion( quaternion );\n\t\t\t\tnormal4.normalize();\n\n\t\t\t\tnormals.push( normal1.x, normal1.y, normal1.z );\n\t\t\t\tnormals.push( normal2.x, normal2.y, normal2.z );\n\t\t\t\tnormals.push( normal4.x, normal4.y, normal4.z );\n\n\t\t\t\tnormals.push( normal2.x, normal2.y, normal2.z );\n\t\t\t\tnormals.push( normal3.x, normal3.y, normal3.z );\n\t\t\t\tnormals.push( normal4.x, normal4.y, normal4.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst fromPoint = new Vector3();\n\t\tconst toPoint = new Vector3();\n\n\t\tfor ( let i = 1; i <= divisions; i ++ ) {\n\n\t\t\tpoint.copy( curve.getPointAt( i / divisions ) );\n\t\t\ttangent.copy( curve.getTangentAt( i / divisions ) );\n\n\t\t\tconst angle = Math.atan2( tangent.x, tangent.z );\n\n\t\t\tquaternion.setFromAxisAngle( up, angle );\n\n\t\t\t//\n\n\t\t\tif ( point.y > 10 ) {\n\n\t\t\t\tfromPoint.set( - 0.75, - 0.35, 0 );\n\t\t\t\tfromPoint.applyQuaternion( quaternion );\n\t\t\t\tfromPoint.add( point );\n\n\t\t\t\ttoPoint.set( 0.75, - 0.35, 0 );\n\t\t\t\ttoPoint.applyQuaternion( quaternion );\n\t\t\t\ttoPoint.add( point );\n\n\t\t\t\textrudeShape( tube1, fromPoint, toPoint );\n\n\t\t\t\tfromPoint.set( - 0.7, - 0.3, 0 );\n\t\t\t\tfromPoint.applyQuaternion( quaternion );\n\t\t\t\tfromPoint.add( point );\n\n\t\t\t\ttoPoint.set( - 0.7, - point.y, 0 );\n\t\t\t\ttoPoint.applyQuaternion( quaternion );\n\t\t\t\ttoPoint.add( point );\n\n\t\t\t\textrudeShape( tube2, fromPoint, toPoint );\n\n\t\t\t\tfromPoint.set( 0.7, - 0.3, 0 );\n\t\t\t\tfromPoint.applyQuaternion( quaternion );\n\t\t\t\tfromPoint.add( point );\n\n\t\t\t\ttoPoint.set( 0.7, - point.y, 0 );\n\t\t\t\ttoPoint.applyQuaternion( quaternion );\n\t\t\t\ttoPoint.add( point );\n\n\t\t\t\textrudeShape( tube3, fromPoint, toPoint );\n\n\t\t\t} else {\n\n\t\t\t\tfromPoint.set( 0, - 0.2, 0 );\n\t\t\t\tfromPoint.applyQuaternion( quaternion );\n\t\t\t\tfromPoint.add( point );\n\n\t\t\t\ttoPoint.set( 0, - point.y, 0 );\n\t\t\t\ttoPoint.applyQuaternion( quaternion );\n\t\t\t\ttoPoint.add( point );\n\n\t\t\t\textrudeShape( tube3, fromPoint, toPoint );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.setAttribute( 'position', new BufferAttribute( new Float32Array( vertices ), 3 ) );\n\t\tthis.setAttribute( 'normal', new BufferAttribute( new Float32Array( normals ), 3 ) );\n\n\t}\n\n}\n\n/**\n * A procedural roller coaster shadow geometry.\n *\n * @augments BufferGeometry\n * @three_import import { RollerCoasterShadowGeometry } from 'three/addons/misc/RollerCoaster.js';\n */\nclass RollerCoasterShadowGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new geometry.\n\t *\n\t * @param {Curve} curve - The curve to generate the geometry along.\n \t * @param {number} divisions - The number of divisions which defines the detail of the geometry.\n\t */\n\tconstructor( curve, divisions ) {\n\n\t\tsuper();\n\n\t\tconst vertices = [];\n\n\t\tconst up = new Vector3( 0, 1, 0 );\n\t\tconst forward = new Vector3();\n\n\t\tconst quaternion = new Quaternion();\n\t\tconst prevQuaternion = new Quaternion();\n\t\tprevQuaternion.setFromAxisAngle( up, Math.PI / 2 );\n\n\t\tconst point = new Vector3();\n\n\t\tconst prevPoint = new Vector3();\n\t\tprevPoint.copy( curve.getPointAt( 0 ) );\n\t\tprevPoint.y = 0;\n\n\t\tconst vector1 = new Vector3();\n\t\tconst vector2 = new Vector3();\n\t\tconst vector3 = new Vector3();\n\t\tconst vector4 = new Vector3();\n\n\t\tfor ( let i = 1; i <= divisions; i ++ ) {\n\n\t\t\tpoint.copy( curve.getPointAt( i / divisions ) );\n\t\t\tpoint.y = 0;\n\n\t\t\tforward.subVectors( point, prevPoint );\n\n\t\t\tconst angle = Math.atan2( forward.x, forward.z );\n\n\t\t\tquaternion.setFromAxisAngle( up, angle );\n\n\t\t\tvector1.set( - 0.3, 0, 0 );\n\t\t\tvector1.applyQuaternion( quaternion );\n\t\t\tvector1.add( point );\n\n\t\t\tvector2.set( 0.3, 0, 0 );\n\t\t\tvector2.applyQuaternion( quaternion );\n\t\t\tvector2.add( point );\n\n\t\t\tvector3.set( 0.3, 0, 0 );\n\t\t\tvector3.applyQuaternion( prevQuaternion );\n\t\t\tvector3.add( prevPoint );\n\n\t\t\tvector4.set( - 0.3, 0, 0 );\n\t\t\tvector4.applyQuaternion( prevQuaternion );\n\t\t\tvector4.add( prevPoint );\n\n\t\t\tvertices.push( vector1.x, vector1.y, vector1.z );\n\t\t\tvertices.push( vector2.x, vector2.y, vector2.z );\n\t\t\tvertices.push( vector4.x, vector4.y, vector4.z );\n\n\t\t\tvertices.push( vector2.x, vector2.y, vector2.z );\n\t\t\tvertices.push( vector3.x, vector3.y, vector3.z );\n\t\t\tvertices.push( vector4.x, vector4.y, vector4.z );\n\n\t\t\tprevPoint.copy( point );\n\t\t\tprevQuaternion.copy( quaternion );\n\n\t\t}\n\n\t\tthis.setAttribute( 'position', new BufferAttribute( new Float32Array( vertices ), 3 ) );\n\n\t}\n\n}\n\n/**\n * A procedural sky geometry.\n *\n * @augments BufferGeometry\n * @three_import import { SkyGeometry } from 'three/addons/misc/RollerCoaster.js';\n */\nclass SkyGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new geometry.\n\t */\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tconst vertices = [];\n\n\t\tfor ( let i = 0; i < 100; i ++ ) {\n\n\t\t\tconst x = Math.random() * 800 - 400;\n\t\t\tconst y = Math.random() * 50 + 50;\n\t\t\tconst z = Math.random() * 800 - 400;\n\n\t\t\tconst size = Math.random() * 40 + 20;\n\n\t\t\tvertices.push( x - size, y, z - size );\n\t\t\tvertices.push( x + size, y, z - size );\n\t\t\tvertices.push( x - size, y, z + size );\n\n\t\t\tvertices.push( x + size, y, z - size );\n\t\t\tvertices.push( x + size, y, z + size );\n\t\t\tvertices.push( x - size, y, z + size );\n\n\t\t}\n\n\n\t\tthis.setAttribute( 'position', new BufferAttribute( new Float32Array( vertices ), 3 ) );\n\n\t}\n\n}\n\n/**\n * A procedural trees geometry.\n *\n * @augments BufferGeometry\n * @three_import import { TreesGeometry } from 'three/addons/misc/RollerCoaster.js';\n */\nclass TreesGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new geometry.\n\t *\n\t * @param {Mesh} landscape - A mesh representing the landscape. Trees will be positioned\n\t * randomly on the landscape's surface.\n\t */\n\tconstructor( landscape ) {\n\n\t\tsuper();\n\n\t\tconst vertices = [];\n\t\tconst colors = [];\n\n\t\tconst raycaster = new Raycaster();\n\t\traycaster.ray.direction.set( 0, - 1, 0 );\n\n\t\tconst _color = new Color();\n\n\t\tfor ( let i = 0; i < 2000; i ++ ) {\n\n\t\t\tconst x = Math.random() * 500 - 250;\n\t\t\tconst z = Math.random() * 500 - 250;\n\n\t\t\traycaster.ray.origin.set( x, 50, z );\n\n\t\t\tconst intersections = raycaster.intersectObject( landscape );\n\n\t\t\tif ( intersections.length === 0 ) continue;\n\n\t\t\tconst y = intersections[ 0 ].point.y;\n\n\t\t\tconst height = Math.random() * 5 + 0.5;\n\n\t\t\tlet angle = Math.random() * Math.PI * 2;\n\n\t\t\tvertices.push( x + Math.sin( angle ), y, z + Math.cos( angle ) );\n\t\t\tvertices.push( x, y + height, z );\n\t\t\tvertices.push( x + Math.sin( angle + Math.PI ), y, z + Math.cos( angle + Math.PI ) );\n\n\t\t\tangle += Math.PI / 2;\n\n\t\t\tvertices.push( x + Math.sin( angle ), y, z + Math.cos( angle ) );\n\t\t\tvertices.push( x, y + height, z );\n\t\t\tvertices.push( x + Math.sin( angle + Math.PI ), y, z + Math.cos( angle + Math.PI ) );\n\n\t\t\tconst random = Math.random() * 0.1;\n\n\t\t\tfor ( let j = 0; j < 6; j ++ ) {\n\n\t\t\t\t_color.setRGB( 0.2 + random, 0.4 + random, 0, SRGBColorSpace );\n\n\t\t\t\tcolors.push( _color.r, _color.g, _color.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.setAttribute( 'position', new BufferAttribute( new Float32Array( vertices ), 3 ) );\n\t\tthis.setAttribute( 'color', new BufferAttribute( new Float32Array( colors ), 3 ) );\n\n\t}\n\n}\n\nexport { RollerCoasterGeometry, RollerCoasterLiftersGeometry, RollerCoasterShadowGeometry, SkyGeometry, TreesGeometry };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}