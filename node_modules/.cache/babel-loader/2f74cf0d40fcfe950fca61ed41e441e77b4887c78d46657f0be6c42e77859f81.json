{"ast":null,"code":"import { InstancedInterleavedBuffer, InterleavedBufferAttribute, Mesh, Vector3, Vector4 } from 'three';\nimport { LineSegmentsGeometry } from '../lines/LineSegmentsGeometry.js';\nimport { LineMaterial } from '../lines/LineMaterial.js';\nconst _start = new Vector3();\nconst _end = new Vector3();\nconst _viewport = new Vector4();\n\n/**\n * A class for creating wireframes based on wide lines.\n *\n * This module can only be used with {@link WebGLRenderer}. When using {@link WebGPURenderer},\n * import the class from `lines/webgpu/Wireframe.js`.\n *\n * ```js\n * const geometry = new THREE.IcosahedronGeometry();\n * const wireframeGeometry = new WireframeGeometry2( geo );\n *\n * const wireframe = new Wireframe( wireframeGeometry, material );\n * scene.add( wireframe );\n * ```\n *\n * @augments Mesh\n * @three_import import { Wireframe } from 'three/addons/lines/Wireframe.js';\n */\nclass Wireframe extends Mesh {\n  /**\n   * Constructs a new wireframe.\n   *\n   * @param {LineSegmentsGeometry} [geometry] - The line geometry.\n   * @param {LineMaterial} [material] - The line material.\n   */\n  constructor(geometry = new LineSegmentsGeometry(), material = new LineMaterial({\n    color: Math.random() * 0xffffff\n  })) {\n    super(geometry, material);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isWireframe = true;\n    this.type = 'Wireframe';\n  }\n\n  /**\n   * Computes an array of distance values which are necessary for rendering dashed lines.\n   * For each vertex in the geometry, the method calculates the cumulative length from the\n   * current point to the very beginning of the line.\n   *\n   * @return {Wireframe} A reference to this instance.\n   */\n  computeLineDistances() {\n    // for backwards-compatibility, but could be a method of LineSegmentsGeometry...\n\n    const geometry = this.geometry;\n    const instanceStart = geometry.attributes.instanceStart;\n    const instanceEnd = geometry.attributes.instanceEnd;\n    const lineDistances = new Float32Array(2 * instanceStart.count);\n    for (let i = 0, j = 0, l = instanceStart.count; i < l; i++, j += 2) {\n      _start.fromBufferAttribute(instanceStart, i);\n      _end.fromBufferAttribute(instanceEnd, i);\n      lineDistances[j] = j === 0 ? 0 : lineDistances[j - 1];\n      lineDistances[j + 1] = lineDistances[j] + _start.distanceTo(_end);\n    }\n    const instanceDistanceBuffer = new InstancedInterleavedBuffer(lineDistances, 2, 1); // d0, d1\n\n    geometry.setAttribute('instanceDistanceStart', new InterleavedBufferAttribute(instanceDistanceBuffer, 1, 0)); // d0\n    geometry.setAttribute('instanceDistanceEnd', new InterleavedBufferAttribute(instanceDistanceBuffer, 1, 1)); // d1\n\n    return this;\n  }\n  onBeforeRender(renderer) {\n    const uniforms = this.material.uniforms;\n    if (uniforms && uniforms.resolution) {\n      renderer.getViewport(_viewport);\n      this.material.uniforms.resolution.value.set(_viewport.z, _viewport.w);\n    }\n  }\n}\nexport { Wireframe };","map":{"version":3,"names":["InstancedInterleavedBuffer","InterleavedBufferAttribute","Mesh","Vector3","Vector4","LineSegmentsGeometry","LineMaterial","_start","_end","_viewport","Wireframe","constructor","geometry","material","color","Math","random","isWireframe","type","computeLineDistances","instanceStart","attributes","instanceEnd","lineDistances","Float32Array","count","i","j","l","fromBufferAttribute","distanceTo","instanceDistanceBuffer","setAttribute","onBeforeRender","renderer","uniforms","resolution","getViewport","value","set","z","w"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/lines/Wireframe.js"],"sourcesContent":["import {\n\tInstancedInterleavedBuffer,\n\tInterleavedBufferAttribute,\n\tMesh,\n\tVector3,\n\tVector4\n} from 'three';\nimport { LineSegmentsGeometry } from '../lines/LineSegmentsGeometry.js';\nimport { LineMaterial } from '../lines/LineMaterial.js';\n\nconst _start = new Vector3();\nconst _end = new Vector3();\nconst _viewport = new Vector4();\n\n/**\n * A class for creating wireframes based on wide lines.\n *\n * This module can only be used with {@link WebGLRenderer}. When using {@link WebGPURenderer},\n * import the class from `lines/webgpu/Wireframe.js`.\n *\n * ```js\n * const geometry = new THREE.IcosahedronGeometry();\n * const wireframeGeometry = new WireframeGeometry2( geo );\n *\n * const wireframe = new Wireframe( wireframeGeometry, material );\n * scene.add( wireframe );\n * ```\n *\n * @augments Mesh\n * @three_import import { Wireframe } from 'three/addons/lines/Wireframe.js';\n */\nclass Wireframe extends Mesh {\n\n\t/**\n\t * Constructs a new wireframe.\n\t *\n\t * @param {LineSegmentsGeometry} [geometry] - The line geometry.\n\t * @param {LineMaterial} [material] - The line material.\n\t */\n\tconstructor( geometry = new LineSegmentsGeometry(), material = new LineMaterial( { color: Math.random() * 0xffffff } ) ) {\n\n\t\tsuper( geometry, material );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isWireframe = true;\n\n\t\tthis.type = 'Wireframe';\n\n\t}\n\n\t/**\n\t * Computes an array of distance values which are necessary for rendering dashed lines.\n\t * For each vertex in the geometry, the method calculates the cumulative length from the\n\t * current point to the very beginning of the line.\n\t *\n\t * @return {Wireframe} A reference to this instance.\n\t */\n\tcomputeLineDistances() {\n\n\t\t// for backwards-compatibility, but could be a method of LineSegmentsGeometry...\n\n\t\tconst geometry = this.geometry;\n\n\t\tconst instanceStart = geometry.attributes.instanceStart;\n\t\tconst instanceEnd = geometry.attributes.instanceEnd;\n\t\tconst lineDistances = new Float32Array( 2 * instanceStart.count );\n\n\t\tfor ( let i = 0, j = 0, l = instanceStart.count; i < l; i ++, j += 2 ) {\n\n\t\t\t_start.fromBufferAttribute( instanceStart, i );\n\t\t\t_end.fromBufferAttribute( instanceEnd, i );\n\n\t\t\tlineDistances[ j ] = ( j === 0 ) ? 0 : lineDistances[ j - 1 ];\n\t\t\tlineDistances[ j + 1 ] = lineDistances[ j ] + _start.distanceTo( _end );\n\n\t\t}\n\n\t\tconst instanceDistanceBuffer = new InstancedInterleavedBuffer( lineDistances, 2, 1 ); // d0, d1\n\n\t\tgeometry.setAttribute( 'instanceDistanceStart', new InterleavedBufferAttribute( instanceDistanceBuffer, 1, 0 ) ); // d0\n\t\tgeometry.setAttribute( 'instanceDistanceEnd', new InterleavedBufferAttribute( instanceDistanceBuffer, 1, 1 ) ); // d1\n\n\t\treturn this;\n\n\t}\n\n\tonBeforeRender( renderer ) {\n\n\t\tconst uniforms = this.material.uniforms;\n\n\t\tif ( uniforms && uniforms.resolution ) {\n\n\t\t\trenderer.getViewport( _viewport );\n\t\t\tthis.material.uniforms.resolution.value.set( _viewport.z, _viewport.w );\n\n\t\t}\n\n\t}\n\n}\n\nexport { Wireframe };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}