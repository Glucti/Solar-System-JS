{"ast":null,"code":"import { CompressedArrayTexture, CompressedCubeTexture, CompressedTexture, Data3DTexture, DataTexture, FileLoader, FloatType, HalfFloatType, LinearFilter, LinearMipmapLinearFilter, LinearSRGBColorSpace, Loader, NoColorSpace, RGBAFormat, RGBA_ASTC_4x4_Format, RGBA_ASTC_6x6_Format, RGBA_BPTC_Format, RGBA_S3TC_DXT3_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT1_Format, RGBA_S3TC_DXT5_Format, RGB_BPTC_UNSIGNED_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format, RGFormat, RedFormat, SRGBColorSpace, UnsignedByteType } from 'three';\nimport { WorkerPool } from '../utils/WorkerPool.js';\nimport { read, KHR_DF_FLAG_ALPHA_PREMULTIPLIED, KHR_DF_PRIMARIES_BT709, KHR_DF_PRIMARIES_DISPLAYP3, KHR_DF_PRIMARIES_UNSPECIFIED, KHR_DF_TRANSFER_SRGB, KHR_SUPERCOMPRESSION_NONE, KHR_SUPERCOMPRESSION_ZSTD, VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT, VK_FORMAT_ASTC_4x4_SRGB_BLOCK, VK_FORMAT_ASTC_4x4_UNORM_BLOCK, VK_FORMAT_ASTC_6x6_SRGB_BLOCK, VK_FORMAT_ASTC_6x6_UNORM_BLOCK, VK_FORMAT_BC1_RGBA_SRGB_BLOCK, VK_FORMAT_BC1_RGBA_UNORM_BLOCK, VK_FORMAT_BC1_RGB_SRGB_BLOCK, VK_FORMAT_BC1_RGB_UNORM_BLOCK, VK_FORMAT_BC3_SRGB_BLOCK, VK_FORMAT_BC3_UNORM_BLOCK, VK_FORMAT_BC5_SNORM_BLOCK, VK_FORMAT_BC5_UNORM_BLOCK, VK_FORMAT_BC7_SRGB_BLOCK, VK_FORMAT_BC7_UNORM_BLOCK, VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK, VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK, VK_FORMAT_R16G16B16A16_SFLOAT, VK_FORMAT_R16G16_SFLOAT, VK_FORMAT_R16_SFLOAT, VK_FORMAT_R32G32B32A32_SFLOAT, VK_FORMAT_R32G32_SFLOAT, VK_FORMAT_R32_SFLOAT, VK_FORMAT_R8G8B8A8_SRGB, VK_FORMAT_R8G8B8A8_UNORM, VK_FORMAT_R8G8_SRGB, VK_FORMAT_R8G8_UNORM, VK_FORMAT_R8_SRGB, VK_FORMAT_R8_UNORM, VK_FORMAT_UNDEFINED } from '../libs/ktx-parse.module.js';\nimport { ZSTDDecoder } from '../libs/zstddec.module.js';\nimport { DisplayP3ColorSpace, LinearDisplayP3ColorSpace } from '../math/ColorSpaces.js';\nconst _taskCache = new WeakMap();\nlet _activeLoaders = 0;\nlet _zstd;\n\n/**\n * A loader for KTX 2.0 GPU Texture containers.\n *\n * KTX 2.0 is a container format for various GPU texture formats. The loader supports Basis Universal GPU textures,\n * which can be quickly transcoded to a wide variety of GPU texture compression formats. While KTX 2.0 also allows\n * other hardware-specific formats, this loader does not yet parse them.\n *\n * This loader parses the KTX 2.0 container and transcodes to a supported GPU compressed texture format.\n * The required WASM transcoder and JS wrapper are available from the `examples/jsm/libs/basis` directory.\n *\n * This loader relies on Web Assembly which is not supported in older browsers.\n *\n * References:\n * - [KTX specification]{@link http://github.khronos.org/KTX-Specification/}\n * - [DFD]{@link https://www.khronos.org/registry/DataFormat/specs/1.3/dataformat.1.3.html#basicdescriptor}\n * - [BasisU HDR]{@link https://github.com/BinomialLLC/basis_universal/wiki/UASTC-HDR-Texture-Specification-v1.0}\n *\n * ```js\n * const loader = new KTX2Loader();\n * loader.setTranscoderPath( 'examples/jsm/libs/basis/' );\n * loader.detectSupport( renderer );\n * const texture = loader.loadAsync( 'diffuse.ktx2' );\n * ```\n *\n * @augments Loader\n * @three_import import { KTX2Loader } from 'three/addons/loaders/KTX2Loader.js';\n */\nclass KTX2Loader extends Loader {\n  /**\n   * Constructs a new KTX2 loader.\n   *\n   * @param {LoadingManager} [manager] - The loading manager.\n   */\n  constructor(manager) {\n    super(manager);\n    this.transcoderPath = '';\n    this.transcoderBinary = null;\n    this.transcoderPending = null;\n    this.workerPool = new WorkerPool();\n    this.workerSourceURL = '';\n    this.workerConfig = null;\n    if (typeof MSC_TRANSCODER !== 'undefined') {\n      console.warn('THREE.KTX2Loader: Please update to latest \"basis_transcoder\".' + ' \"msc_basis_transcoder\" is no longer supported in three.js r125+.');\n    }\n  }\n\n  /**\n   * Sets the transcoder path.\n   *\n   * The WASM transcoder and JS wrapper are available from the `examples/jsm/libs/basis` directory.\n   *\n   * @param {string} path - The transcoder path to set.\n   * @return {KTX2Loader} A reference to this loader.\n   */\n  setTranscoderPath(path) {\n    this.transcoderPath = path;\n    return this;\n  }\n\n  /**\n   * Sets the maximum number of Web Workers to be allocated by this instance.\n   *\n   * @param {number} workerLimit - The worker limit.\n   * @return {KTX2Loader} A reference to this loader.\n   */\n  setWorkerLimit(workerLimit) {\n    this.workerPool.setWorkerLimit(workerLimit);\n    return this;\n  }\n\n  /**\n   * Async version of {@link KTX2Loader#detectSupport}.\n   *\n   * @async\n   * @param {WebGPURenderer|WebGLRenderer} renderer - The renderer.\n   * @return {Promise} A Promise that resolves when the support has been detected.\n   */\n  async detectSupportAsync(renderer) {\n    this.workerConfig = {\n      astcSupported: await renderer.hasFeatureAsync('texture-compression-astc'),\n      astcHDRSupported: false,\n      // https://github.com/gpuweb/gpuweb/issues/3856\n      etc1Supported: await renderer.hasFeatureAsync('texture-compression-etc1'),\n      etc2Supported: await renderer.hasFeatureAsync('texture-compression-etc2'),\n      dxtSupported: await renderer.hasFeatureAsync('texture-compression-bc'),\n      bptcSupported: await renderer.hasFeatureAsync('texture-compression-bptc'),\n      pvrtcSupported: await renderer.hasFeatureAsync('texture-compression-pvrtc')\n    };\n    return this;\n  }\n\n  /**\n   * Detects hardware support for available compressed texture formats, to determine\n   * the output format for the transcoder. Must be called before loading a texture.\n   *\n   * @param {WebGPURenderer|WebGLRenderer} renderer - The renderer.\n   * @return {KTX2Loader} A reference to this loader.\n   */\n  detectSupport(renderer) {\n    if (renderer.isWebGPURenderer === true) {\n      this.workerConfig = {\n        astcSupported: renderer.hasFeature('texture-compression-astc'),\n        astcHDRSupported: false,\n        // https://github.com/gpuweb/gpuweb/issues/3856\n        etc1Supported: renderer.hasFeature('texture-compression-etc1'),\n        etc2Supported: renderer.hasFeature('texture-compression-etc2'),\n        dxtSupported: renderer.hasFeature('texture-compression-bc'),\n        bptcSupported: renderer.hasFeature('texture-compression-bptc'),\n        pvrtcSupported: renderer.hasFeature('texture-compression-pvrtc')\n      };\n    } else {\n      this.workerConfig = {\n        astcSupported: renderer.extensions.has('WEBGL_compressed_texture_astc'),\n        astcHDRSupported: renderer.extensions.has('WEBGL_compressed_texture_astc') && renderer.extensions.get('WEBGL_compressed_texture_astc').getSupportedProfiles().includes('hdr'),\n        etc1Supported: renderer.extensions.has('WEBGL_compressed_texture_etc1'),\n        etc2Supported: renderer.extensions.has('WEBGL_compressed_texture_etc'),\n        dxtSupported: renderer.extensions.has('WEBGL_compressed_texture_s3tc'),\n        bptcSupported: renderer.extensions.has('EXT_texture_compression_bptc'),\n        pvrtcSupported: renderer.extensions.has('WEBGL_compressed_texture_pvrtc') || renderer.extensions.has('WEBKIT_WEBGL_compressed_texture_pvrtc')\n      };\n    }\n    return this;\n  }\n\n  // TODO: Make this method private\n\n  init() {\n    if (!this.transcoderPending) {\n      // Load transcoder wrapper.\n      const jsLoader = new FileLoader(this.manager);\n      jsLoader.setPath(this.transcoderPath);\n      jsLoader.setWithCredentials(this.withCredentials);\n      const jsContent = jsLoader.loadAsync('basis_transcoder.js');\n\n      // Load transcoder WASM binary.\n      const binaryLoader = new FileLoader(this.manager);\n      binaryLoader.setPath(this.transcoderPath);\n      binaryLoader.setResponseType('arraybuffer');\n      binaryLoader.setWithCredentials(this.withCredentials);\n      const binaryContent = binaryLoader.loadAsync('basis_transcoder.wasm');\n      this.transcoderPending = Promise.all([jsContent, binaryContent]).then(([jsContent, binaryContent]) => {\n        const fn = KTX2Loader.BasisWorker.toString();\n        const body = ['/* constants */', 'let _EngineFormat = ' + JSON.stringify(KTX2Loader.EngineFormat), 'let _EngineType = ' + JSON.stringify(KTX2Loader.EngineType), 'let _TranscoderFormat = ' + JSON.stringify(KTX2Loader.TranscoderFormat), 'let _BasisFormat = ' + JSON.stringify(KTX2Loader.BasisFormat), '/* basis_transcoder.js */', jsContent, '/* worker */', fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))].join('\\n');\n        this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n        this.transcoderBinary = binaryContent;\n        this.workerPool.setWorkerCreator(() => {\n          const worker = new Worker(this.workerSourceURL);\n          const transcoderBinary = this.transcoderBinary.slice(0);\n          worker.postMessage({\n            type: 'init',\n            config: this.workerConfig,\n            transcoderBinary\n          }, [transcoderBinary]);\n          return worker;\n        });\n      });\n      if (_activeLoaders > 0) {\n        // Each instance loads a transcoder and allocates workers, increasing network and memory cost.\n\n        console.warn('THREE.KTX2Loader: Multiple active KTX2 loaders may cause performance issues.' + ' Use a single KTX2Loader instance, or call .dispose() on old instances.');\n      }\n      _activeLoaders++;\n    }\n    return this.transcoderPending;\n  }\n\n  /**\n   * Starts loading from the given URL and passes the loaded KTX2 texture\n   * to the `onLoad()` callback.\n   *\n   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n   * @param {function(CompressedTexture)} onLoad - Executed when the loading process has been finished.\n   * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n   * @param {onErrorCallback} onError - Executed when errors occur.\n   */\n  load(url, onLoad, onProgress, onError) {\n    if (this.workerConfig === null) {\n      throw new Error('THREE.KTX2Loader: Missing initialization with `.detectSupport( renderer )`.');\n    }\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setCrossOrigin(this.crossOrigin);\n    loader.setWithCredentials(this.withCredentials);\n    loader.setResponseType('arraybuffer');\n    loader.load(url, buffer => {\n      this.parse(buffer, onLoad, onError);\n    }, onProgress, onError);\n  }\n\n  /**\n   * Parses the given KTX2 data.\n   *\n   * @param {ArrayBuffer} buffer - The raw KTX2 data as an array buffer.\n   * @param {function(CompressedTexture)} onLoad - Executed when the loading/parsing process has been finished.\n   * @param {onErrorCallback} onError - Executed when errors occur.\n   * @returns {Promise} A Promise that resolves when the parsing has been finished.\n   */\n  parse(buffer, onLoad, onError) {\n    if (this.workerConfig === null) {\n      throw new Error('THREE.KTX2Loader: Missing initialization with `.detectSupport( renderer )`.');\n    }\n\n    // Check for an existing task using this buffer. A transferred buffer cannot be transferred\n    // again from this thread.\n    if (_taskCache.has(buffer)) {\n      const cachedTask = _taskCache.get(buffer);\n      return cachedTask.promise.then(onLoad).catch(onError);\n    }\n    this._createTexture(buffer).then(texture => onLoad ? onLoad(texture) : null).catch(onError);\n  }\n  _createTextureFrom(transcodeResult, container) {\n    const {\n      type: messageType,\n      error,\n      data: {\n        faces,\n        width,\n        height,\n        format,\n        type,\n        dfdFlags\n      }\n    } = transcodeResult;\n    if (messageType === 'error') return Promise.reject(error);\n    let texture;\n    if (container.faceCount === 6) {\n      texture = new CompressedCubeTexture(faces, format, type);\n    } else {\n      const mipmaps = faces[0].mipmaps;\n      texture = container.layerCount > 1 ? new CompressedArrayTexture(mipmaps, width, height, container.layerCount, format, type) : new CompressedTexture(mipmaps, width, height, format, type);\n    }\n    texture.minFilter = faces[0].mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n    texture.magFilter = LinearFilter;\n    texture.generateMipmaps = false;\n    texture.needsUpdate = true;\n    texture.colorSpace = parseColorSpace(container);\n    texture.premultiplyAlpha = !!(dfdFlags & KHR_DF_FLAG_ALPHA_PREMULTIPLIED);\n    return texture;\n  }\n\n  /**\n   * @private\n   * @param {ArrayBuffer} buffer\n   * @param {?Object} config\n   * @return {Promise<CompressedTexture|CompressedArrayTexture|DataTexture|Data3DTexture>}\n   */\n  async _createTexture(buffer, config = {}) {\n    const container = read(new Uint8Array(buffer));\n\n    // Basis UASTC HDR is a subset of ASTC, which can be transcoded efficiently\n    // to BC6H. To detect whether a KTX2 file uses Basis UASTC HDR, or default\n    // ASTC, inspect the DFD color model.\n    //\n    // Source: https://github.com/BinomialLLC/basis_universal/issues/381\n    const isBasisHDR = container.vkFormat === VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT && container.dataFormatDescriptor[0].colorModel === 0xA7;\n\n    // If the device supports ASTC, Basis UASTC HDR requires no transcoder.\n    const needsTranscoder = container.vkFormat === VK_FORMAT_UNDEFINED || isBasisHDR && !this.workerConfig.astcHDRSupported;\n    if (!needsTranscoder) {\n      return createRawTexture(container);\n    }\n\n    //\n    const taskConfig = config;\n    const texturePending = this.init().then(() => {\n      return this.workerPool.postMessage({\n        type: 'transcode',\n        buffer,\n        taskConfig: taskConfig\n      }, [buffer]);\n    }).then(e => this._createTextureFrom(e.data, container));\n\n    // Cache the task result.\n    _taskCache.set(buffer, {\n      promise: texturePending\n    });\n    return texturePending;\n  }\n\n  /**\n   * Frees internal resources. This method should be called\n   * when the loader is no longer required.\n   */\n  dispose() {\n    this.workerPool.dispose();\n    if (this.workerSourceURL) URL.revokeObjectURL(this.workerSourceURL);\n    _activeLoaders--;\n  }\n}\n\n/* CONSTANTS */\n\nKTX2Loader.BasisFormat = {\n  ETC1S: 0,\n  UASTC: 1,\n  UASTC_HDR: 2\n};\n\n// Source: https://github.com/BinomialLLC/basis_universal/blob/master/webgl/texture_test/index.html\nKTX2Loader.TranscoderFormat = {\n  ETC1: 0,\n  ETC2: 1,\n  BC1: 2,\n  BC3: 3,\n  BC4: 4,\n  BC5: 5,\n  BC7_M6_OPAQUE_ONLY: 6,\n  BC7_M5: 7,\n  PVRTC1_4_RGB: 8,\n  PVRTC1_4_RGBA: 9,\n  ASTC_4x4: 10,\n  ATC_RGB: 11,\n  ATC_RGBA_INTERPOLATED_ALPHA: 12,\n  RGBA32: 13,\n  RGB565: 14,\n  BGR565: 15,\n  RGBA4444: 16,\n  BC6H: 22,\n  RGB_HALF: 24,\n  RGBA_HALF: 25\n};\nKTX2Loader.EngineFormat = {\n  RGBAFormat: RGBAFormat,\n  RGBA_ASTC_4x4_Format: RGBA_ASTC_4x4_Format,\n  RGB_BPTC_UNSIGNED_Format: RGB_BPTC_UNSIGNED_Format,\n  RGBA_BPTC_Format: RGBA_BPTC_Format,\n  RGBA_ETC2_EAC_Format: RGBA_ETC2_EAC_Format,\n  RGBA_PVRTC_4BPPV1_Format: RGBA_PVRTC_4BPPV1_Format,\n  RGBA_S3TC_DXT5_Format: RGBA_S3TC_DXT5_Format,\n  RGB_ETC1_Format: RGB_ETC1_Format,\n  RGB_ETC2_Format: RGB_ETC2_Format,\n  RGB_PVRTC_4BPPV1_Format: RGB_PVRTC_4BPPV1_Format,\n  RGBA_S3TC_DXT1_Format: RGBA_S3TC_DXT1_Format\n};\nKTX2Loader.EngineType = {\n  UnsignedByteType: UnsignedByteType,\n  HalfFloatType: HalfFloatType,\n  FloatType: FloatType\n};\n\n/* WEB WORKER */\n\nKTX2Loader.BasisWorker = function () {\n  let config;\n  let transcoderPending;\n  let BasisModule;\n  const EngineFormat = _EngineFormat; // eslint-disable-line no-undef\n  const EngineType = _EngineType; // eslint-disable-line no-undef\n  const TranscoderFormat = _TranscoderFormat; // eslint-disable-line no-undef\n  const BasisFormat = _BasisFormat; // eslint-disable-line no-undef\n\n  self.addEventListener('message', function (e) {\n    const message = e.data;\n    switch (message.type) {\n      case 'init':\n        config = message.config;\n        init(message.transcoderBinary);\n        break;\n      case 'transcode':\n        transcoderPending.then(() => {\n          try {\n            const {\n              faces,\n              buffers,\n              width,\n              height,\n              hasAlpha,\n              format,\n              type,\n              dfdFlags\n            } = transcode(message.buffer);\n            self.postMessage({\n              type: 'transcode',\n              id: message.id,\n              data: {\n                faces,\n                width,\n                height,\n                hasAlpha,\n                format,\n                type,\n                dfdFlags\n              }\n            }, buffers);\n          } catch (error) {\n            console.error(error);\n            self.postMessage({\n              type: 'error',\n              id: message.id,\n              error: error.message\n            });\n          }\n        });\n        break;\n    }\n  });\n  function init(wasmBinary) {\n    transcoderPending = new Promise(resolve => {\n      BasisModule = {\n        wasmBinary,\n        onRuntimeInitialized: resolve\n      };\n      BASIS(BasisModule); // eslint-disable-line no-undef\n    }).then(() => {\n      BasisModule.initializeBasis();\n      if (BasisModule.KTX2File === undefined) {\n        console.warn('THREE.KTX2Loader: Please update Basis Universal transcoder.');\n      }\n    });\n  }\n  function transcode(buffer) {\n    const ktx2File = new BasisModule.KTX2File(new Uint8Array(buffer));\n    function cleanup() {\n      ktx2File.close();\n      ktx2File.delete();\n    }\n    if (!ktx2File.isValid()) {\n      cleanup();\n      throw new Error('THREE.KTX2Loader:\tInvalid or unsupported .ktx2 file');\n    }\n    let basisFormat;\n    if (ktx2File.isUASTC()) {\n      basisFormat = BasisFormat.UASTC;\n    } else if (ktx2File.isETC1S()) {\n      basisFormat = BasisFormat.ETC1S;\n    } else if (ktx2File.isHDR()) {\n      basisFormat = BasisFormat.UASTC_HDR;\n    } else {\n      throw new Error('THREE.KTX2Loader: Unknown Basis encoding');\n    }\n    const width = ktx2File.getWidth();\n    const height = ktx2File.getHeight();\n    const layerCount = ktx2File.getLayers() || 1;\n    const levelCount = ktx2File.getLevels();\n    const faceCount = ktx2File.getFaces();\n    const hasAlpha = ktx2File.getHasAlpha();\n    const dfdFlags = ktx2File.getDFDFlags();\n    const {\n      transcoderFormat,\n      engineFormat,\n      engineType\n    } = getTranscoderFormat(basisFormat, width, height, hasAlpha);\n    if (!width || !height || !levelCount) {\n      cleanup();\n      throw new Error('THREE.KTX2Loader:\tInvalid texture');\n    }\n    if (!ktx2File.startTranscoding()) {\n      cleanup();\n      throw new Error('THREE.KTX2Loader: .startTranscoding failed');\n    }\n    const faces = [];\n    const buffers = [];\n    for (let face = 0; face < faceCount; face++) {\n      const mipmaps = [];\n      for (let mip = 0; mip < levelCount; mip++) {\n        const layerMips = [];\n        let mipWidth, mipHeight;\n        for (let layer = 0; layer < layerCount; layer++) {\n          const levelInfo = ktx2File.getImageLevelInfo(mip, layer, face);\n          if (face === 0 && mip === 0 && layer === 0 && (levelInfo.origWidth % 4 !== 0 || levelInfo.origHeight % 4 !== 0)) {\n            console.warn('THREE.KTX2Loader: ETC1S and UASTC textures should use multiple-of-four dimensions.');\n          }\n          if (levelCount > 1) {\n            mipWidth = levelInfo.origWidth;\n            mipHeight = levelInfo.origHeight;\n          } else {\n            // Handles non-multiple-of-four dimensions in textures without mipmaps. Textures with\n            // mipmaps must use multiple-of-four dimensions, for some texture formats and APIs.\n            // See mrdoob/three.js#25908.\n            mipWidth = levelInfo.width;\n            mipHeight = levelInfo.height;\n          }\n          let dst = new Uint8Array(ktx2File.getImageTranscodedSizeInBytes(mip, layer, 0, transcoderFormat));\n          const status = ktx2File.transcodeImage(dst, mip, layer, face, transcoderFormat, 0, -1, -1);\n          if (engineType === EngineType.HalfFloatType) {\n            dst = new Uint16Array(dst.buffer, dst.byteOffset, dst.byteLength / Uint16Array.BYTES_PER_ELEMENT);\n          }\n          if (!status) {\n            cleanup();\n            throw new Error('THREE.KTX2Loader: .transcodeImage failed.');\n          }\n          layerMips.push(dst);\n        }\n        const mipData = concat(layerMips);\n        mipmaps.push({\n          data: mipData,\n          width: mipWidth,\n          height: mipHeight\n        });\n        buffers.push(mipData.buffer);\n      }\n      faces.push({\n        mipmaps,\n        width,\n        height,\n        format: engineFormat,\n        type: engineType\n      });\n    }\n    cleanup();\n    return {\n      faces,\n      buffers,\n      width,\n      height,\n      hasAlpha,\n      dfdFlags,\n      format: engineFormat,\n      type: engineType\n    };\n  }\n\n  //\n\n  // Optimal choice of a transcoder target format depends on the Basis format (ETC1S, UASTC, or\n  // UASTC HDR), device capabilities, and texture dimensions. The list below ranks the formats\n  // separately for each format. Currently, priority is assigned based on:\n  //\n  //   high quality > low quality > uncompressed\n  //\n  // Prioritization may be revisited, or exposed for configuration, in the future.\n  //\n  // Reference: https://github.com/KhronosGroup/3D-Formats-Guidelines/blob/main/KTXDeveloperGuide.md\n  const FORMAT_OPTIONS = [{\n    if: 'astcSupported',\n    basisFormat: [BasisFormat.UASTC],\n    transcoderFormat: [TranscoderFormat.ASTC_4x4, TranscoderFormat.ASTC_4x4],\n    engineFormat: [EngineFormat.RGBA_ASTC_4x4_Format, EngineFormat.RGBA_ASTC_4x4_Format],\n    engineType: [EngineType.UnsignedByteType],\n    priorityETC1S: Infinity,\n    priorityUASTC: 1,\n    needsPowerOfTwo: false\n  }, {\n    if: 'bptcSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC],\n    transcoderFormat: [TranscoderFormat.BC7_M5, TranscoderFormat.BC7_M5],\n    engineFormat: [EngineFormat.RGBA_BPTC_Format, EngineFormat.RGBA_BPTC_Format],\n    engineType: [EngineType.UnsignedByteType],\n    priorityETC1S: 3,\n    priorityUASTC: 2,\n    needsPowerOfTwo: false\n  }, {\n    if: 'dxtSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC],\n    transcoderFormat: [TranscoderFormat.BC1, TranscoderFormat.BC3],\n    engineFormat: [EngineFormat.RGBA_S3TC_DXT1_Format, EngineFormat.RGBA_S3TC_DXT5_Format],\n    engineType: [EngineType.UnsignedByteType],\n    priorityETC1S: 4,\n    priorityUASTC: 5,\n    needsPowerOfTwo: false\n  }, {\n    if: 'etc2Supported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC],\n    transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC2],\n    engineFormat: [EngineFormat.RGB_ETC2_Format, EngineFormat.RGBA_ETC2_EAC_Format],\n    engineType: [EngineType.UnsignedByteType],\n    priorityETC1S: 1,\n    priorityUASTC: 3,\n    needsPowerOfTwo: false\n  }, {\n    if: 'etc1Supported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC],\n    transcoderFormat: [TranscoderFormat.ETC1],\n    engineFormat: [EngineFormat.RGB_ETC1_Format],\n    engineType: [EngineType.UnsignedByteType],\n    priorityETC1S: 2,\n    priorityUASTC: 4,\n    needsPowerOfTwo: false\n  }, {\n    if: 'pvrtcSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC],\n    transcoderFormat: [TranscoderFormat.PVRTC1_4_RGB, TranscoderFormat.PVRTC1_4_RGBA],\n    engineFormat: [EngineFormat.RGB_PVRTC_4BPPV1_Format, EngineFormat.RGBA_PVRTC_4BPPV1_Format],\n    engineType: [EngineType.UnsignedByteType],\n    priorityETC1S: 5,\n    priorityUASTC: 6,\n    needsPowerOfTwo: true\n  }, {\n    if: 'bptcSupported',\n    basisFormat: [BasisFormat.UASTC_HDR],\n    transcoderFormat: [TranscoderFormat.BC6H],\n    engineFormat: [EngineFormat.RGB_BPTC_UNSIGNED_Format],\n    engineType: [EngineType.HalfFloatType],\n    priorityHDR: 1,\n    needsPowerOfTwo: false\n  },\n  // Uncompressed fallbacks.\n\n  {\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC],\n    transcoderFormat: [TranscoderFormat.RGBA32, TranscoderFormat.RGBA32],\n    engineFormat: [EngineFormat.RGBAFormat, EngineFormat.RGBAFormat],\n    engineType: [EngineType.UnsignedByteType, EngineType.UnsignedByteType],\n    priorityETC1S: 100,\n    priorityUASTC: 100,\n    needsPowerOfTwo: false\n  }, {\n    basisFormat: [BasisFormat.UASTC_HDR],\n    transcoderFormat: [TranscoderFormat.RGBA_HALF],\n    engineFormat: [EngineFormat.RGBAFormat],\n    engineType: [EngineType.HalfFloatType],\n    priorityHDR: 100,\n    needsPowerOfTwo: false\n  }];\n  const OPTIONS = {\n    // TODO: For ETC1S we intentionally sort by _UASTC_ priority, preserving\n    // a historical accident shown to avoid performance pitfalls for Linux with\n    // Firefox & AMD GPU (RadeonSI). Further work needed.\n    // See https://github.com/mrdoob/three.js/pull/29730.\n    [BasisFormat.ETC1S]: FORMAT_OPTIONS.filter(opt => opt.basisFormat.includes(BasisFormat.ETC1S)).sort((a, b) => a.priorityUASTC - b.priorityUASTC),\n    [BasisFormat.UASTC]: FORMAT_OPTIONS.filter(opt => opt.basisFormat.includes(BasisFormat.UASTC)).sort((a, b) => a.priorityUASTC - b.priorityUASTC),\n    [BasisFormat.UASTC_HDR]: FORMAT_OPTIONS.filter(opt => opt.basisFormat.includes(BasisFormat.UASTC_HDR)).sort((a, b) => a.priorityHDR - b.priorityHDR)\n  };\n  function getTranscoderFormat(basisFormat, width, height, hasAlpha) {\n    const options = OPTIONS[basisFormat];\n    for (let i = 0; i < options.length; i++) {\n      const opt = options[i];\n      if (opt.if && !config[opt.if]) continue;\n      if (!opt.basisFormat.includes(basisFormat)) continue;\n      if (hasAlpha && opt.transcoderFormat.length < 2) continue;\n      if (opt.needsPowerOfTwo && !(isPowerOfTwo(width) && isPowerOfTwo(height))) continue;\n      const transcoderFormat = opt.transcoderFormat[hasAlpha ? 1 : 0];\n      const engineFormat = opt.engineFormat[hasAlpha ? 1 : 0];\n      const engineType = opt.engineType[0];\n      return {\n        transcoderFormat,\n        engineFormat,\n        engineType\n      };\n    }\n    throw new Error('THREE.KTX2Loader: Failed to identify transcoding target.');\n  }\n  function isPowerOfTwo(value) {\n    if (value <= 2) return true;\n    return (value & value - 1) === 0 && value !== 0;\n  }\n\n  /**\n   * Concatenates N byte arrays.\n   *\n   * @param {Uint8Array[]} arrays\n   * @return {Uint8Array}\n   */\n  function concat(arrays) {\n    if (arrays.length === 1) return arrays[0];\n    let totalByteLength = 0;\n    for (let i = 0; i < arrays.length; i++) {\n      const array = arrays[i];\n      totalByteLength += array.byteLength;\n    }\n    const result = new Uint8Array(totalByteLength);\n    let byteOffset = 0;\n    for (let i = 0; i < arrays.length; i++) {\n      const array = arrays[i];\n      result.set(array, byteOffset);\n      byteOffset += array.byteLength;\n    }\n    return result;\n  }\n};\n\n// Parsing for non-Basis textures. These textures may have supercompression\n// like Zstd, but they do not require transcoding.\n\nconst UNCOMPRESSED_FORMATS = new Set([RGBAFormat, RGFormat, RedFormat]);\nconst FORMAT_MAP = {\n  [VK_FORMAT_R32G32B32A32_SFLOAT]: RGBAFormat,\n  [VK_FORMAT_R16G16B16A16_SFLOAT]: RGBAFormat,\n  [VK_FORMAT_R8G8B8A8_UNORM]: RGBAFormat,\n  [VK_FORMAT_R8G8B8A8_SRGB]: RGBAFormat,\n  [VK_FORMAT_R32G32_SFLOAT]: RGFormat,\n  [VK_FORMAT_R16G16_SFLOAT]: RGFormat,\n  [VK_FORMAT_R8G8_UNORM]: RGFormat,\n  [VK_FORMAT_R8G8_SRGB]: RGFormat,\n  [VK_FORMAT_R32_SFLOAT]: RedFormat,\n  [VK_FORMAT_R16_SFLOAT]: RedFormat,\n  [VK_FORMAT_R8_SRGB]: RedFormat,\n  [VK_FORMAT_R8_UNORM]: RedFormat,\n  [VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK]: RGB_ETC2_Format,\n  [VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK]: RGBA_ETC2_EAC_Format,\n  [VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT]: RGBA_ASTC_4x4_Format,\n  [VK_FORMAT_ASTC_4x4_SRGB_BLOCK]: RGBA_ASTC_4x4_Format,\n  [VK_FORMAT_ASTC_4x4_UNORM_BLOCK]: RGBA_ASTC_4x4_Format,\n  [VK_FORMAT_ASTC_6x6_SRGB_BLOCK]: RGBA_ASTC_6x6_Format,\n  [VK_FORMAT_ASTC_6x6_UNORM_BLOCK]: RGBA_ASTC_6x6_Format,\n  [VK_FORMAT_BC1_RGBA_UNORM_BLOCK]: RGBA_S3TC_DXT1_Format,\n  [VK_FORMAT_BC1_RGBA_SRGB_BLOCK]: RGBA_S3TC_DXT1_Format,\n  [VK_FORMAT_BC1_RGB_UNORM_BLOCK]: RGB_S3TC_DXT1_Format,\n  [VK_FORMAT_BC1_RGB_SRGB_BLOCK]: RGB_S3TC_DXT1_Format,\n  [VK_FORMAT_BC3_SRGB_BLOCK]: RGBA_S3TC_DXT3_Format,\n  [VK_FORMAT_BC3_UNORM_BLOCK]: RGBA_S3TC_DXT3_Format,\n  [VK_FORMAT_BC5_SNORM_BLOCK]: RGBA_S3TC_DXT5_Format,\n  [VK_FORMAT_BC5_UNORM_BLOCK]: RGBA_S3TC_DXT5_Format,\n  [VK_FORMAT_BC7_SRGB_BLOCK]: RGBA_BPTC_Format,\n  [VK_FORMAT_BC7_UNORM_BLOCK]: RGBA_BPTC_Format\n};\nconst TYPE_MAP = {\n  [VK_FORMAT_R32G32B32A32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16G16B16A16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8G8B8A8_UNORM]: UnsignedByteType,\n  [VK_FORMAT_R8G8B8A8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R32G32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16G16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8G8_UNORM]: UnsignedByteType,\n  [VK_FORMAT_R8G8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R8_UNORM]: UnsignedByteType,\n  [VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK]: UnsignedByteType,\n  [VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK]: UnsignedByteType,\n  [VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT]: HalfFloatType,\n  [VK_FORMAT_ASTC_6x6_SRGB_BLOCK]: UnsignedByteType,\n  [VK_FORMAT_ASTC_6x6_UNORM_BLOCK]: UnsignedByteType\n};\nasync function createRawTexture(container) {\n  const {\n    vkFormat\n  } = container;\n  if (FORMAT_MAP[vkFormat] === undefined) {\n    throw new Error('THREE.KTX2Loader: Unsupported vkFormat.');\n  }\n\n  //\n\n  let zstd;\n  if (container.supercompressionScheme === KHR_SUPERCOMPRESSION_ZSTD) {\n    if (!_zstd) {\n      _zstd = new Promise(async resolve => {\n        const zstd = new ZSTDDecoder();\n        await zstd.init();\n        resolve(zstd);\n      });\n    }\n    zstd = await _zstd;\n  }\n\n  //\n\n  const mipmaps = [];\n  for (let levelIndex = 0; levelIndex < container.levels.length; levelIndex++) {\n    const levelWidth = Math.max(1, container.pixelWidth >> levelIndex);\n    const levelHeight = Math.max(1, container.pixelHeight >> levelIndex);\n    const levelDepth = container.pixelDepth ? Math.max(1, container.pixelDepth >> levelIndex) : 0;\n    const level = container.levels[levelIndex];\n    let levelData;\n    if (container.supercompressionScheme === KHR_SUPERCOMPRESSION_NONE) {\n      levelData = level.levelData;\n    } else if (container.supercompressionScheme === KHR_SUPERCOMPRESSION_ZSTD) {\n      levelData = zstd.decode(level.levelData, level.uncompressedByteLength);\n    } else {\n      throw new Error('THREE.KTX2Loader: Unsupported supercompressionScheme.');\n    }\n    let data;\n    if (TYPE_MAP[vkFormat] === FloatType) {\n      data = new Float32Array(levelData.buffer, levelData.byteOffset, levelData.byteLength / Float32Array.BYTES_PER_ELEMENT);\n    } else if (TYPE_MAP[vkFormat] === HalfFloatType) {\n      data = new Uint16Array(levelData.buffer, levelData.byteOffset, levelData.byteLength / Uint16Array.BYTES_PER_ELEMENT);\n    } else {\n      data = levelData;\n    }\n    mipmaps.push({\n      data: data,\n      width: levelWidth,\n      height: levelHeight,\n      depth: levelDepth\n    });\n  }\n  let texture;\n  if (UNCOMPRESSED_FORMATS.has(FORMAT_MAP[vkFormat])) {\n    texture = container.pixelDepth === 0 ? new DataTexture(mipmaps[0].data, container.pixelWidth, container.pixelHeight) : new Data3DTexture(mipmaps[0].data, container.pixelWidth, container.pixelHeight, container.pixelDepth);\n  } else {\n    if (container.pixelDepth > 0) throw new Error('THREE.KTX2Loader: Unsupported pixelDepth.');\n    texture = new CompressedTexture(mipmaps, container.pixelWidth, container.pixelHeight);\n    texture.minFilter = mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n    texture.magFilter = LinearFilter;\n  }\n  texture.mipmaps = mipmaps;\n  texture.type = TYPE_MAP[vkFormat];\n  texture.format = FORMAT_MAP[vkFormat];\n  texture.colorSpace = parseColorSpace(container);\n  texture.needsUpdate = true;\n\n  //\n\n  return Promise.resolve(texture);\n}\nfunction parseColorSpace(container) {\n  const dfd = container.dataFormatDescriptor[0];\n  if (dfd.colorPrimaries === KHR_DF_PRIMARIES_BT709) {\n    return dfd.transferFunction === KHR_DF_TRANSFER_SRGB ? SRGBColorSpace : LinearSRGBColorSpace;\n  } else if (dfd.colorPrimaries === KHR_DF_PRIMARIES_DISPLAYP3) {\n    return dfd.transferFunction === KHR_DF_TRANSFER_SRGB ? DisplayP3ColorSpace : LinearDisplayP3ColorSpace;\n  } else if (dfd.colorPrimaries === KHR_DF_PRIMARIES_UNSPECIFIED) {\n    return NoColorSpace;\n  } else {\n    console.warn(`THREE.KTX2Loader: Unsupported color primaries, \"${dfd.colorPrimaries}\"`);\n    return NoColorSpace;\n  }\n}\nexport { KTX2Loader };","map":{"version":3,"names":["CompressedArrayTexture","CompressedCubeTexture","CompressedTexture","Data3DTexture","DataTexture","FileLoader","FloatType","HalfFloatType","LinearFilter","LinearMipmapLinearFilter","LinearSRGBColorSpace","Loader","NoColorSpace","RGBAFormat","RGBA_ASTC_4x4_Format","RGBA_ASTC_6x6_Format","RGBA_BPTC_Format","RGBA_S3TC_DXT3_Format","RGBA_ETC2_EAC_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT5_Format","RGB_BPTC_UNSIGNED_Format","RGB_ETC1_Format","RGB_ETC2_Format","RGB_PVRTC_4BPPV1_Format","RGB_S3TC_DXT1_Format","RGFormat","RedFormat","SRGBColorSpace","UnsignedByteType","WorkerPool","read","KHR_DF_FLAG_ALPHA_PREMULTIPLIED","KHR_DF_PRIMARIES_BT709","KHR_DF_PRIMARIES_DISPLAYP3","KHR_DF_PRIMARIES_UNSPECIFIED","KHR_DF_TRANSFER_SRGB","KHR_SUPERCOMPRESSION_NONE","KHR_SUPERCOMPRESSION_ZSTD","VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT","VK_FORMAT_ASTC_4x4_SRGB_BLOCK","VK_FORMAT_ASTC_4x4_UNORM_BLOCK","VK_FORMAT_ASTC_6x6_SRGB_BLOCK","VK_FORMAT_ASTC_6x6_UNORM_BLOCK","VK_FORMAT_BC1_RGBA_SRGB_BLOCK","VK_FORMAT_BC1_RGBA_UNORM_BLOCK","VK_FORMAT_BC1_RGB_SRGB_BLOCK","VK_FORMAT_BC1_RGB_UNORM_BLOCK","VK_FORMAT_BC3_SRGB_BLOCK","VK_FORMAT_BC3_UNORM_BLOCK","VK_FORMAT_BC5_SNORM_BLOCK","VK_FORMAT_BC5_UNORM_BLOCK","VK_FORMAT_BC7_SRGB_BLOCK","VK_FORMAT_BC7_UNORM_BLOCK","VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK","VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK","VK_FORMAT_R16G16B16A16_SFLOAT","VK_FORMAT_R16G16_SFLOAT","VK_FORMAT_R16_SFLOAT","VK_FORMAT_R32G32B32A32_SFLOAT","VK_FORMAT_R32G32_SFLOAT","VK_FORMAT_R32_SFLOAT","VK_FORMAT_R8G8B8A8_SRGB","VK_FORMAT_R8G8B8A8_UNORM","VK_FORMAT_R8G8_SRGB","VK_FORMAT_R8G8_UNORM","VK_FORMAT_R8_SRGB","VK_FORMAT_R8_UNORM","VK_FORMAT_UNDEFINED","ZSTDDecoder","DisplayP3ColorSpace","LinearDisplayP3ColorSpace","_taskCache","WeakMap","_activeLoaders","_zstd","KTX2Loader","constructor","manager","transcoderPath","transcoderBinary","transcoderPending","workerPool","workerSourceURL","workerConfig","MSC_TRANSCODER","console","warn","setTranscoderPath","path","setWorkerLimit","workerLimit","detectSupportAsync","renderer","astcSupported","hasFeatureAsync","astcHDRSupported","etc1Supported","etc2Supported","dxtSupported","bptcSupported","pvrtcSupported","detectSupport","isWebGPURenderer","hasFeature","extensions","has","get","getSupportedProfiles","includes","init","jsLoader","setPath","setWithCredentials","withCredentials","jsContent","loadAsync","binaryLoader","setResponseType","binaryContent","Promise","all","then","fn","BasisWorker","toString","body","JSON","stringify","EngineFormat","EngineType","TranscoderFormat","BasisFormat","substring","indexOf","lastIndexOf","join","URL","createObjectURL","Blob","setWorkerCreator","worker","Worker","slice","postMessage","type","config","load","url","onLoad","onProgress","onError","Error","loader","setCrossOrigin","crossOrigin","buffer","parse","cachedTask","promise","catch","_createTexture","texture","_createTextureFrom","transcodeResult","container","messageType","error","data","faces","width","height","format","dfdFlags","reject","faceCount","mipmaps","layerCount","minFilter","length","magFilter","generateMipmaps","needsUpdate","colorSpace","parseColorSpace","premultiplyAlpha","Uint8Array","isBasisHDR","vkFormat","dataFormatDescriptor","colorModel","needsTranscoder","createRawTexture","taskConfig","texturePending","e","set","dispose","revokeObjectURL","ETC1S","UASTC","UASTC_HDR","ETC1","ETC2","BC1","BC3","BC4","BC5","BC7_M6_OPAQUE_ONLY","BC7_M5","PVRTC1_4_RGB","PVRTC1_4_RGBA","ASTC_4x4","ATC_RGB","ATC_RGBA_INTERPOLATED_ALPHA","RGBA32","RGB565","BGR565","RGBA4444","BC6H","RGB_HALF","RGBA_HALF","BasisModule","_EngineFormat","_EngineType","_TranscoderFormat","_BasisFormat","self","addEventListener","message","buffers","hasAlpha","transcode","id","wasmBinary","resolve","onRuntimeInitialized","BASIS","initializeBasis","KTX2File","undefined","ktx2File","cleanup","close","delete","isValid","basisFormat","isUASTC","isETC1S","isHDR","getWidth","getHeight","getLayers","levelCount","getLevels","getFaces","getHasAlpha","getDFDFlags","transcoderFormat","engineFormat","engineType","getTranscoderFormat","startTranscoding","face","mip","layerMips","mipWidth","mipHeight","layer","levelInfo","getImageLevelInfo","origWidth","origHeight","dst","getImageTranscodedSizeInBytes","status","transcodeImage","Uint16Array","byteOffset","byteLength","BYTES_PER_ELEMENT","push","mipData","concat","FORMAT_OPTIONS","if","priorityETC1S","Infinity","priorityUASTC","needsPowerOfTwo","priorityHDR","OPTIONS","filter","opt","sort","a","b","options","i","isPowerOfTwo","value","arrays","totalByteLength","array","result","UNCOMPRESSED_FORMATS","Set","FORMAT_MAP","TYPE_MAP","zstd","supercompressionScheme","levelIndex","levels","levelWidth","Math","max","pixelWidth","levelHeight","pixelHeight","levelDepth","pixelDepth","level","levelData","decode","uncompressedByteLength","Float32Array","depth","dfd","colorPrimaries","transferFunction"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/loaders/KTX2Loader.js"],"sourcesContent":["import {\n\tCompressedArrayTexture,\n\tCompressedCubeTexture,\n\tCompressedTexture,\n\tData3DTexture,\n\tDataTexture,\n\tFileLoader,\n\tFloatType,\n\tHalfFloatType,\n\tLinearFilter,\n\tLinearMipmapLinearFilter,\n\tLinearSRGBColorSpace,\n\tLoader,\n\tNoColorSpace,\n\tRGBAFormat,\n\tRGBA_ASTC_4x4_Format,\n\tRGBA_ASTC_6x6_Format,\n\tRGBA_BPTC_Format,\n\tRGBA_S3TC_DXT3_Format,\n\tRGBA_ETC2_EAC_Format,\n\tRGBA_PVRTC_4BPPV1_Format,\n\tRGBA_S3TC_DXT1_Format,\n\tRGBA_S3TC_DXT5_Format,\n\tRGB_BPTC_UNSIGNED_Format,\n\tRGB_ETC1_Format,\n\tRGB_ETC2_Format,\n\tRGB_PVRTC_4BPPV1_Format,\n\tRGB_S3TC_DXT1_Format,\n\tRGFormat,\n\tRedFormat,\n\tSRGBColorSpace,\n\tUnsignedByteType\n} from 'three';\nimport { WorkerPool } from '../utils/WorkerPool.js';\nimport {\n\tread,\n\tKHR_DF_FLAG_ALPHA_PREMULTIPLIED,\n\tKHR_DF_PRIMARIES_BT709,\n\tKHR_DF_PRIMARIES_DISPLAYP3,\n\tKHR_DF_PRIMARIES_UNSPECIFIED,\n\tKHR_DF_TRANSFER_SRGB,\n\tKHR_SUPERCOMPRESSION_NONE,\n\tKHR_SUPERCOMPRESSION_ZSTD,\n\tVK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT,\n\tVK_FORMAT_ASTC_4x4_SRGB_BLOCK,\n\tVK_FORMAT_ASTC_4x4_UNORM_BLOCK,\n\tVK_FORMAT_ASTC_6x6_SRGB_BLOCK,\n\tVK_FORMAT_ASTC_6x6_UNORM_BLOCK,\n\tVK_FORMAT_BC1_RGBA_SRGB_BLOCK,\n\tVK_FORMAT_BC1_RGBA_UNORM_BLOCK,\n\tVK_FORMAT_BC1_RGB_SRGB_BLOCK,\n\tVK_FORMAT_BC1_RGB_UNORM_BLOCK,\n\tVK_FORMAT_BC3_SRGB_BLOCK,\n\tVK_FORMAT_BC3_UNORM_BLOCK,\n\tVK_FORMAT_BC5_SNORM_BLOCK,\n\tVK_FORMAT_BC5_UNORM_BLOCK,\n\tVK_FORMAT_BC7_SRGB_BLOCK,\n\tVK_FORMAT_BC7_UNORM_BLOCK,\n\tVK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK,\n\tVK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK,\n\tVK_FORMAT_R16G16B16A16_SFLOAT,\n\tVK_FORMAT_R16G16_SFLOAT,\n\tVK_FORMAT_R16_SFLOAT,\n\tVK_FORMAT_R32G32B32A32_SFLOAT,\n\tVK_FORMAT_R32G32_SFLOAT,\n\tVK_FORMAT_R32_SFLOAT,\n\tVK_FORMAT_R8G8B8A8_SRGB,\n\tVK_FORMAT_R8G8B8A8_UNORM,\n\tVK_FORMAT_R8G8_SRGB,\n\tVK_FORMAT_R8G8_UNORM,\n\tVK_FORMAT_R8_SRGB,\n\tVK_FORMAT_R8_UNORM,\n\tVK_FORMAT_UNDEFINED\n} from '../libs/ktx-parse.module.js';\nimport { ZSTDDecoder } from '../libs/zstddec.module.js';\nimport { DisplayP3ColorSpace, LinearDisplayP3ColorSpace } from '../math/ColorSpaces.js';\n\nconst _taskCache = new WeakMap();\n\nlet _activeLoaders = 0;\n\nlet _zstd;\n\n/**\n * A loader for KTX 2.0 GPU Texture containers.\n *\n * KTX 2.0 is a container format for various GPU texture formats. The loader supports Basis Universal GPU textures,\n * which can be quickly transcoded to a wide variety of GPU texture compression formats. While KTX 2.0 also allows\n * other hardware-specific formats, this loader does not yet parse them.\n *\n * This loader parses the KTX 2.0 container and transcodes to a supported GPU compressed texture format.\n * The required WASM transcoder and JS wrapper are available from the `examples/jsm/libs/basis` directory.\n *\n * This loader relies on Web Assembly which is not supported in older browsers.\n *\n * References:\n * - [KTX specification]{@link http://github.khronos.org/KTX-Specification/}\n * - [DFD]{@link https://www.khronos.org/registry/DataFormat/specs/1.3/dataformat.1.3.html#basicdescriptor}\n * - [BasisU HDR]{@link https://github.com/BinomialLLC/basis_universal/wiki/UASTC-HDR-Texture-Specification-v1.0}\n *\n * ```js\n * const loader = new KTX2Loader();\n * loader.setTranscoderPath( 'examples/jsm/libs/basis/' );\n * loader.detectSupport( renderer );\n * const texture = loader.loadAsync( 'diffuse.ktx2' );\n * ```\n *\n * @augments Loader\n * @three_import import { KTX2Loader } from 'three/addons/loaders/KTX2Loader.js';\n */\nclass KTX2Loader extends Loader {\n\n\t/**\n\t * Constructs a new KTX2 loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\tthis.transcoderPath = '';\n\t\tthis.transcoderBinary = null;\n\t\tthis.transcoderPending = null;\n\n\t\tthis.workerPool = new WorkerPool();\n\t\tthis.workerSourceURL = '';\n\t\tthis.workerConfig = null;\n\n\t\tif ( typeof MSC_TRANSCODER !== 'undefined' ) {\n\n\t\t\tconsole.warn(\n\n\t\t\t\t'THREE.KTX2Loader: Please update to latest \"basis_transcoder\".'\n\t\t\t\t+ ' \"msc_basis_transcoder\" is no longer supported in three.js r125+.'\n\n\t\t\t);\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Sets the transcoder path.\n\t *\n\t * The WASM transcoder and JS wrapper are available from the `examples/jsm/libs/basis` directory.\n\t *\n\t * @param {string} path - The transcoder path to set.\n\t * @return {KTX2Loader} A reference to this loader.\n\t */\n\tsetTranscoderPath( path ) {\n\n\t\tthis.transcoderPath = path;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the maximum number of Web Workers to be allocated by this instance.\n\t *\n\t * @param {number} workerLimit - The worker limit.\n\t * @return {KTX2Loader} A reference to this loader.\n\t */\n\tsetWorkerLimit( workerLimit ) {\n\n\t\tthis.workerPool.setWorkerLimit( workerLimit );\n\n\t\treturn this;\n\n\t}\n\n\n\t/**\n\t * Async version of {@link KTX2Loader#detectSupport}.\n\t *\n\t * @async\n\t * @param {WebGPURenderer|WebGLRenderer} renderer - The renderer.\n\t * @return {Promise} A Promise that resolves when the support has been detected.\n\t */\n\tasync detectSupportAsync( renderer ) {\n\n\t\tthis.workerConfig = {\n\t\t\tastcSupported: await renderer.hasFeatureAsync( 'texture-compression-astc' ),\n\t\t\tastcHDRSupported: false, // https://github.com/gpuweb/gpuweb/issues/3856\n\t\t\tetc1Supported: await renderer.hasFeatureAsync( 'texture-compression-etc1' ),\n\t\t\tetc2Supported: await renderer.hasFeatureAsync( 'texture-compression-etc2' ),\n\t\t\tdxtSupported: await renderer.hasFeatureAsync( 'texture-compression-bc' ),\n\t\t\tbptcSupported: await renderer.hasFeatureAsync( 'texture-compression-bptc' ),\n\t\t\tpvrtcSupported: await renderer.hasFeatureAsync( 'texture-compression-pvrtc' )\n\t\t};\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Detects hardware support for available compressed texture formats, to determine\n\t * the output format for the transcoder. Must be called before loading a texture.\n\t *\n\t * @param {WebGPURenderer|WebGLRenderer} renderer - The renderer.\n\t * @return {KTX2Loader} A reference to this loader.\n\t */\n\tdetectSupport( renderer ) {\n\n\t\tif ( renderer.isWebGPURenderer === true ) {\n\n\t\t\tthis.workerConfig = {\n\t\t\t\tastcSupported: renderer.hasFeature( 'texture-compression-astc' ),\n\t\t\t\tastcHDRSupported: false, // https://github.com/gpuweb/gpuweb/issues/3856\n\t\t\t\tetc1Supported: renderer.hasFeature( 'texture-compression-etc1' ),\n\t\t\t\tetc2Supported: renderer.hasFeature( 'texture-compression-etc2' ),\n\t\t\t\tdxtSupported: renderer.hasFeature( 'texture-compression-bc' ),\n\t\t\t\tbptcSupported: renderer.hasFeature( 'texture-compression-bptc' ),\n\t\t\t\tpvrtcSupported: renderer.hasFeature( 'texture-compression-pvrtc' )\n\t\t\t};\n\n\t\t} else {\n\n\t\t\tthis.workerConfig = {\n\t\t\t\tastcSupported: renderer.extensions.has( 'WEBGL_compressed_texture_astc' ),\n\t\t\t\tastcHDRSupported: renderer.extensions.has( 'WEBGL_compressed_texture_astc' )\n\t\t\t\t\t&& renderer.extensions.get( 'WEBGL_compressed_texture_astc' ).getSupportedProfiles().includes( 'hdr' ),\n\t\t\t\tetc1Supported: renderer.extensions.has( 'WEBGL_compressed_texture_etc1' ),\n\t\t\t\tetc2Supported: renderer.extensions.has( 'WEBGL_compressed_texture_etc' ),\n\t\t\t\tdxtSupported: renderer.extensions.has( 'WEBGL_compressed_texture_s3tc' ),\n\t\t\t\tbptcSupported: renderer.extensions.has( 'EXT_texture_compression_bptc' ),\n\t\t\t\tpvrtcSupported: renderer.extensions.has( 'WEBGL_compressed_texture_pvrtc' )\n\t\t\t\t\t|| renderer.extensions.has( 'WEBKIT_WEBGL_compressed_texture_pvrtc' )\n\t\t\t};\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// TODO: Make this method private\n\n\tinit() {\n\n\t\tif ( ! this.transcoderPending ) {\n\n\t\t\t// Load transcoder wrapper.\n\t\t\tconst jsLoader = new FileLoader( this.manager );\n\t\t\tjsLoader.setPath( this.transcoderPath );\n\t\t\tjsLoader.setWithCredentials( this.withCredentials );\n\t\t\tconst jsContent = jsLoader.loadAsync( 'basis_transcoder.js' );\n\n\t\t\t// Load transcoder WASM binary.\n\t\t\tconst binaryLoader = new FileLoader( this.manager );\n\t\t\tbinaryLoader.setPath( this.transcoderPath );\n\t\t\tbinaryLoader.setResponseType( 'arraybuffer' );\n\t\t\tbinaryLoader.setWithCredentials( this.withCredentials );\n\t\t\tconst binaryContent = binaryLoader.loadAsync( 'basis_transcoder.wasm' );\n\n\t\t\tthis.transcoderPending = Promise.all( [ jsContent, binaryContent ] )\n\t\t\t\t.then( ( [ jsContent, binaryContent ] ) => {\n\n\t\t\t\t\tconst fn = KTX2Loader.BasisWorker.toString();\n\n\t\t\t\t\tconst body = [\n\t\t\t\t\t\t'/* constants */',\n\t\t\t\t\t\t'let _EngineFormat = ' + JSON.stringify( KTX2Loader.EngineFormat ),\n\t\t\t\t\t\t'let _EngineType = ' + JSON.stringify( KTX2Loader.EngineType ),\n\t\t\t\t\t\t'let _TranscoderFormat = ' + JSON.stringify( KTX2Loader.TranscoderFormat ),\n\t\t\t\t\t\t'let _BasisFormat = ' + JSON.stringify( KTX2Loader.BasisFormat ),\n\t\t\t\t\t\t'/* basis_transcoder.js */',\n\t\t\t\t\t\tjsContent,\n\t\t\t\t\t\t'/* worker */',\n\t\t\t\t\t\tfn.substring( fn.indexOf( '{' ) + 1, fn.lastIndexOf( '}' ) )\n\t\t\t\t\t].join( '\\n' );\n\n\t\t\t\t\tthis.workerSourceURL = URL.createObjectURL( new Blob( [ body ] ) );\n\t\t\t\t\tthis.transcoderBinary = binaryContent;\n\n\t\t\t\t\tthis.workerPool.setWorkerCreator( () => {\n\n\t\t\t\t\t\tconst worker = new Worker( this.workerSourceURL );\n\t\t\t\t\t\tconst transcoderBinary = this.transcoderBinary.slice( 0 );\n\n\t\t\t\t\t\tworker.postMessage( { type: 'init', config: this.workerConfig, transcoderBinary }, [ transcoderBinary ] );\n\n\t\t\t\t\t\treturn worker;\n\n\t\t\t\t\t} );\n\n\t\t\t\t} );\n\n\t\t\tif ( _activeLoaders > 0 ) {\n\n\t\t\t\t// Each instance loads a transcoder and allocates workers, increasing network and memory cost.\n\n\t\t\t\tconsole.warn(\n\n\t\t\t\t\t'THREE.KTX2Loader: Multiple active KTX2 loaders may cause performance issues.'\n\t\t\t\t\t+ ' Use a single KTX2Loader instance, or call .dispose() on old instances.'\n\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\t_activeLoaders ++;\n\n\t\t}\n\n\t\treturn this.transcoderPending;\n\n\t}\n\n\t/**\n\t * Starts loading from the given URL and passes the loaded KTX2 texture\n\t * to the `onLoad()` callback.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(CompressedTexture)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tif ( this.workerConfig === null ) {\n\n\t\t\tthrow new Error( 'THREE.KTX2Loader: Missing initialization with `.detectSupport( renderer )`.' );\n\n\t\t}\n\n\t\tconst loader = new FileLoader( this.manager );\n\n\t\tloader.setPath( this.path );\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\tloader.load( url, ( buffer ) => {\n\n\t\t\tthis.parse( buffer, onLoad, onError );\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\t/**\n\t * Parses the given KTX2 data.\n\t *\n\t * @param {ArrayBuffer} buffer - The raw KTX2 data as an array buffer.\n\t * @param {function(CompressedTexture)} onLoad - Executed when the loading/parsing process has been finished.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t * @returns {Promise} A Promise that resolves when the parsing has been finished.\n\t */\n\tparse( buffer, onLoad, onError ) {\n\n\t\tif ( this.workerConfig === null ) {\n\n\t\t\tthrow new Error( 'THREE.KTX2Loader: Missing initialization with `.detectSupport( renderer )`.' );\n\n\t\t}\n\n\t\t// Check for an existing task using this buffer. A transferred buffer cannot be transferred\n\t\t// again from this thread.\n\t\tif ( _taskCache.has( buffer ) ) {\n\n\t\t\tconst cachedTask = _taskCache.get( buffer );\n\n\t\t\treturn cachedTask.promise.then( onLoad ).catch( onError );\n\n\t\t}\n\n\t\tthis._createTexture( buffer )\n\t\t\t.then( ( texture ) => onLoad ? onLoad( texture ) : null )\n\t\t\t.catch( onError );\n\n\t}\n\n\t_createTextureFrom( transcodeResult, container ) {\n\n\t\tconst { type: messageType, error, data: { faces, width, height, format, type, dfdFlags } } = transcodeResult;\n\n\t\tif ( messageType === 'error' ) return Promise.reject( error );\n\n\t\tlet texture;\n\n\t\tif ( container.faceCount === 6 ) {\n\n\t\t\ttexture = new CompressedCubeTexture( faces, format, type );\n\n\t\t} else {\n\n\t\t\tconst mipmaps = faces[ 0 ].mipmaps;\n\n\t\t\ttexture = container.layerCount > 1\n\t\t\t\t? new CompressedArrayTexture( mipmaps, width, height, container.layerCount, format, type )\n\t\t\t\t: new CompressedTexture( mipmaps, width, height, format, type );\n\n\t\t}\n\n\t\ttexture.minFilter = faces[ 0 ].mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n\t\ttexture.magFilter = LinearFilter;\n\t\ttexture.generateMipmaps = false;\n\n\t\ttexture.needsUpdate = true;\n\t\ttexture.colorSpace = parseColorSpace( container );\n\t\ttexture.premultiplyAlpha = !! ( dfdFlags & KHR_DF_FLAG_ALPHA_PREMULTIPLIED );\n\n\t\treturn texture;\n\n\t}\n\n\t/**\n\t * @private\n\t * @param {ArrayBuffer} buffer\n\t * @param {?Object} config\n\t * @return {Promise<CompressedTexture|CompressedArrayTexture|DataTexture|Data3DTexture>}\n\t */\n\tasync _createTexture( buffer, config = {} ) {\n\n\t\tconst container = read( new Uint8Array( buffer ) );\n\n\t\t// Basis UASTC HDR is a subset of ASTC, which can be transcoded efficiently\n\t\t// to BC6H. To detect whether a KTX2 file uses Basis UASTC HDR, or default\n\t\t// ASTC, inspect the DFD color model.\n\t\t//\n\t\t// Source: https://github.com/BinomialLLC/basis_universal/issues/381\n\t\tconst isBasisHDR = container.vkFormat === VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT\n\t\t\t&& container.dataFormatDescriptor[ 0 ].colorModel === 0xA7;\n\n\t\t// If the device supports ASTC, Basis UASTC HDR requires no transcoder.\n\t\tconst needsTranscoder = container.vkFormat === VK_FORMAT_UNDEFINED\n\t\t\t|| isBasisHDR && ! this.workerConfig.astcHDRSupported;\n\n\t\tif ( ! needsTranscoder ) {\n\n\t\t\treturn createRawTexture( container );\n\n\t\t}\n\n\t\t//\n\t\tconst taskConfig = config;\n\t\tconst texturePending = this.init().then( () => {\n\n\t\t\treturn this.workerPool.postMessage( { type: 'transcode', buffer, taskConfig: taskConfig }, [ buffer ] );\n\n\t\t} ).then( ( e ) => this._createTextureFrom( e.data, container ) );\n\n\t\t// Cache the task result.\n\t\t_taskCache.set( buffer, { promise: texturePending } );\n\n\t\treturn texturePending;\n\n\t}\n\n\t/**\n\t * Frees internal resources. This method should be called\n\t * when the loader is no longer required.\n\t */\n\tdispose() {\n\n\t\tthis.workerPool.dispose();\n\t\tif ( this.workerSourceURL ) URL.revokeObjectURL( this.workerSourceURL );\n\n\t\t_activeLoaders --;\n\n\t}\n\n}\n\n\n/* CONSTANTS */\n\nKTX2Loader.BasisFormat = {\n\tETC1S: 0,\n\tUASTC: 1,\n\tUASTC_HDR: 2,\n};\n\n// Source: https://github.com/BinomialLLC/basis_universal/blob/master/webgl/texture_test/index.html\nKTX2Loader.TranscoderFormat = {\n\tETC1: 0,\n\tETC2: 1,\n\tBC1: 2,\n\tBC3: 3,\n\tBC4: 4,\n\tBC5: 5,\n\tBC7_M6_OPAQUE_ONLY: 6,\n\tBC7_M5: 7,\n\tPVRTC1_4_RGB: 8,\n\tPVRTC1_4_RGBA: 9,\n\tASTC_4x4: 10,\n\tATC_RGB: 11,\n\tATC_RGBA_INTERPOLATED_ALPHA: 12,\n\tRGBA32: 13,\n\tRGB565: 14,\n\tBGR565: 15,\n\tRGBA4444: 16,\n\tBC6H: 22,\n\tRGB_HALF: 24,\n\tRGBA_HALF: 25,\n};\n\nKTX2Loader.EngineFormat = {\n\tRGBAFormat: RGBAFormat,\n\tRGBA_ASTC_4x4_Format: RGBA_ASTC_4x4_Format,\n\tRGB_BPTC_UNSIGNED_Format: RGB_BPTC_UNSIGNED_Format,\n\tRGBA_BPTC_Format: RGBA_BPTC_Format,\n\tRGBA_ETC2_EAC_Format: RGBA_ETC2_EAC_Format,\n\tRGBA_PVRTC_4BPPV1_Format: RGBA_PVRTC_4BPPV1_Format,\n\tRGBA_S3TC_DXT5_Format: RGBA_S3TC_DXT5_Format,\n\tRGB_ETC1_Format: RGB_ETC1_Format,\n\tRGB_ETC2_Format: RGB_ETC2_Format,\n\tRGB_PVRTC_4BPPV1_Format: RGB_PVRTC_4BPPV1_Format,\n\tRGBA_S3TC_DXT1_Format: RGBA_S3TC_DXT1_Format,\n};\n\nKTX2Loader.EngineType = {\n\tUnsignedByteType: UnsignedByteType,\n\tHalfFloatType: HalfFloatType,\n\tFloatType: FloatType,\n};\n\n/* WEB WORKER */\n\nKTX2Loader.BasisWorker = function () {\n\n\tlet config;\n\tlet transcoderPending;\n\tlet BasisModule;\n\n\tconst EngineFormat = _EngineFormat; // eslint-disable-line no-undef\n\tconst EngineType = _EngineType; // eslint-disable-line no-undef\n\tconst TranscoderFormat = _TranscoderFormat; // eslint-disable-line no-undef\n\tconst BasisFormat = _BasisFormat; // eslint-disable-line no-undef\n\n\tself.addEventListener( 'message', function ( e ) {\n\n\t\tconst message = e.data;\n\n\t\tswitch ( message.type ) {\n\n\t\t\tcase 'init':\n\t\t\t\tconfig = message.config;\n\t\t\t\tinit( message.transcoderBinary );\n\t\t\t\tbreak;\n\n\t\t\tcase 'transcode':\n\t\t\t\ttranscoderPending.then( () => {\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\tconst { faces, buffers, width, height, hasAlpha, format, type, dfdFlags } = transcode( message.buffer );\n\n\t\t\t\t\t\tself.postMessage( { type: 'transcode', id: message.id, data: { faces, width, height, hasAlpha, format, type, dfdFlags } }, buffers );\n\n\t\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t\tconsole.error( error );\n\n\t\t\t\t\t\tself.postMessage( { type: 'error', id: message.id, error: error.message } );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t} );\n\n\tfunction init( wasmBinary ) {\n\n\t\ttranscoderPending = new Promise( ( resolve ) => {\n\n\t\t\tBasisModule = { wasmBinary, onRuntimeInitialized: resolve };\n\t\t\tBASIS( BasisModule ); // eslint-disable-line no-undef\n\n\t\t} ).then( () => {\n\n\t\t\tBasisModule.initializeBasis();\n\n\t\t\tif ( BasisModule.KTX2File === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.KTX2Loader: Please update Basis Universal transcoder.' );\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n\tfunction transcode( buffer ) {\n\n\t\tconst ktx2File = new BasisModule.KTX2File( new Uint8Array( buffer ) );\n\n\t\tfunction cleanup() {\n\n\t\t\tktx2File.close();\n\t\t\tktx2File.delete();\n\n\t\t}\n\n\t\tif ( ! ktx2File.isValid() ) {\n\n\t\t\tcleanup();\n\t\t\tthrow new Error( 'THREE.KTX2Loader:\tInvalid or unsupported .ktx2 file' );\n\n\t\t}\n\n\t\tlet basisFormat;\n\n\t\tif ( ktx2File.isUASTC() ) {\n\n\t\t\tbasisFormat = BasisFormat.UASTC;\n\n\t\t} else if ( ktx2File.isETC1S() ) {\n\n\t\t\tbasisFormat = BasisFormat.ETC1S;\n\n\t\t} else if ( ktx2File.isHDR() ) {\n\n\t\t\tbasisFormat = BasisFormat.UASTC_HDR;\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.KTX2Loader: Unknown Basis encoding' );\n\n\t\t}\n\n\t\tconst width = ktx2File.getWidth();\n\t\tconst height = ktx2File.getHeight();\n\t\tconst layerCount = ktx2File.getLayers() || 1;\n\t\tconst levelCount = ktx2File.getLevels();\n\t\tconst faceCount = ktx2File.getFaces();\n\t\tconst hasAlpha = ktx2File.getHasAlpha();\n\t\tconst dfdFlags = ktx2File.getDFDFlags();\n\n\t\tconst { transcoderFormat, engineFormat, engineType } = getTranscoderFormat( basisFormat, width, height, hasAlpha );\n\n\t\tif ( ! width || ! height || ! levelCount ) {\n\n\t\t\tcleanup();\n\t\t\tthrow new Error( 'THREE.KTX2Loader:\tInvalid texture' );\n\n\t\t}\n\n\t\tif ( ! ktx2File.startTranscoding() ) {\n\n\t\t\tcleanup();\n\t\t\tthrow new Error( 'THREE.KTX2Loader: .startTranscoding failed' );\n\n\t\t}\n\n\t\tconst faces = [];\n\t\tconst buffers = [];\n\n\t\tfor ( let face = 0; face < faceCount; face ++ ) {\n\n\t\t\tconst mipmaps = [];\n\n\t\t\tfor ( let mip = 0; mip < levelCount; mip ++ ) {\n\n\t\t\t\tconst layerMips = [];\n\n\t\t\t\tlet mipWidth, mipHeight;\n\n\t\t\t\tfor ( let layer = 0; layer < layerCount; layer ++ ) {\n\n\t\t\t\t\tconst levelInfo = ktx2File.getImageLevelInfo( mip, layer, face );\n\n\t\t\t\t\tif ( face === 0 && mip === 0 && layer === 0 && ( levelInfo.origWidth % 4 !== 0 || levelInfo.origHeight % 4 !== 0 ) ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.KTX2Loader: ETC1S and UASTC textures should use multiple-of-four dimensions.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( levelCount > 1 ) {\n\n\t\t\t\t\t\tmipWidth = levelInfo.origWidth;\n\t\t\t\t\t\tmipHeight = levelInfo.origHeight;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// Handles non-multiple-of-four dimensions in textures without mipmaps. Textures with\n\t\t\t\t\t\t// mipmaps must use multiple-of-four dimensions, for some texture formats and APIs.\n\t\t\t\t\t\t// See mrdoob/three.js#25908.\n\t\t\t\t\t\tmipWidth = levelInfo.width;\n\t\t\t\t\t\tmipHeight = levelInfo.height;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tlet dst = new Uint8Array( ktx2File.getImageTranscodedSizeInBytes( mip, layer, 0, transcoderFormat ) );\n\t\t\t\t\tconst status = ktx2File.transcodeImage( dst, mip, layer, face, transcoderFormat, 0, - 1, - 1 );\n\n\t\t\t\t\tif ( engineType === EngineType.HalfFloatType ) {\n\n\t\t\t\t\t\tdst = new Uint16Array( dst.buffer, dst.byteOffset, dst.byteLength / Uint16Array.BYTES_PER_ELEMENT );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! status ) {\n\n\t\t\t\t\t\tcleanup();\n\t\t\t\t\t\tthrow new Error( 'THREE.KTX2Loader: .transcodeImage failed.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tlayerMips.push( dst );\n\n\t\t\t\t}\n\n\t\t\t\tconst mipData = concat( layerMips );\n\n\t\t\t\tmipmaps.push( { data: mipData, width: mipWidth, height: mipHeight } );\n\t\t\t\tbuffers.push( mipData.buffer );\n\n\t\t\t}\n\n\t\t\tfaces.push( { mipmaps, width, height, format: engineFormat, type: engineType } );\n\n\t\t}\n\n\t\tcleanup();\n\n\t\treturn { faces, buffers, width, height, hasAlpha, dfdFlags, format: engineFormat, type: engineType };\n\n\t}\n\n\t//\n\n\t// Optimal choice of a transcoder target format depends on the Basis format (ETC1S, UASTC, or\n\t// UASTC HDR), device capabilities, and texture dimensions. The list below ranks the formats\n\t// separately for each format. Currently, priority is assigned based on:\n\t//\n\t//   high quality > low quality > uncompressed\n\t//\n\t// Prioritization may be revisited, or exposed for configuration, in the future.\n\t//\n\t// Reference: https://github.com/KhronosGroup/3D-Formats-Guidelines/blob/main/KTXDeveloperGuide.md\n\tconst FORMAT_OPTIONS = [\n\t\t{\n\t\t\tif: 'astcSupported',\n\t\t\tbasisFormat: [ BasisFormat.UASTC ],\n\t\t\ttranscoderFormat: [ TranscoderFormat.ASTC_4x4, TranscoderFormat.ASTC_4x4 ],\n\t\t\tengineFormat: [ EngineFormat.RGBA_ASTC_4x4_Format, EngineFormat.RGBA_ASTC_4x4_Format ],\n\t\t\tengineType: [ EngineType.UnsignedByteType ],\n\t\t\tpriorityETC1S: Infinity,\n\t\t\tpriorityUASTC: 1,\n\t\t\tneedsPowerOfTwo: false,\n\t\t},\n\t\t{\n\t\t\tif: 'bptcSupported',\n\t\t\tbasisFormat: [ BasisFormat.ETC1S, BasisFormat.UASTC ],\n\t\t\ttranscoderFormat: [ TranscoderFormat.BC7_M5, TranscoderFormat.BC7_M5 ],\n\t\t\tengineFormat: [ EngineFormat.RGBA_BPTC_Format, EngineFormat.RGBA_BPTC_Format ],\n\t\t\tengineType: [ EngineType.UnsignedByteType ],\n\t\t\tpriorityETC1S: 3,\n\t\t\tpriorityUASTC: 2,\n\t\t\tneedsPowerOfTwo: false,\n\t\t},\n\t\t{\n\t\t\tif: 'dxtSupported',\n\t\t\tbasisFormat: [ BasisFormat.ETC1S, BasisFormat.UASTC ],\n\t\t\ttranscoderFormat: [ TranscoderFormat.BC1, TranscoderFormat.BC3 ],\n\t\t\tengineFormat: [ EngineFormat.RGBA_S3TC_DXT1_Format, EngineFormat.RGBA_S3TC_DXT5_Format ],\n\t\t\tengineType: [ EngineType.UnsignedByteType ],\n\t\t\tpriorityETC1S: 4,\n\t\t\tpriorityUASTC: 5,\n\t\t\tneedsPowerOfTwo: false,\n\t\t},\n\t\t{\n\t\t\tif: 'etc2Supported',\n\t\t\tbasisFormat: [ BasisFormat.ETC1S, BasisFormat.UASTC ],\n\t\t\ttranscoderFormat: [ TranscoderFormat.ETC1, TranscoderFormat.ETC2 ],\n\t\t\tengineFormat: [ EngineFormat.RGB_ETC2_Format, EngineFormat.RGBA_ETC2_EAC_Format ],\n\t\t\tengineType: [ EngineType.UnsignedByteType ],\n\t\t\tpriorityETC1S: 1,\n\t\t\tpriorityUASTC: 3,\n\t\t\tneedsPowerOfTwo: false,\n\t\t},\n\t\t{\n\t\t\tif: 'etc1Supported',\n\t\t\tbasisFormat: [ BasisFormat.ETC1S, BasisFormat.UASTC ],\n\t\t\ttranscoderFormat: [ TranscoderFormat.ETC1 ],\n\t\t\tengineFormat: [ EngineFormat.RGB_ETC1_Format ],\n\t\t\tengineType: [ EngineType.UnsignedByteType ],\n\t\t\tpriorityETC1S: 2,\n\t\t\tpriorityUASTC: 4,\n\t\t\tneedsPowerOfTwo: false,\n\t\t},\n\t\t{\n\t\t\tif: 'pvrtcSupported',\n\t\t\tbasisFormat: [ BasisFormat.ETC1S, BasisFormat.UASTC ],\n\t\t\ttranscoderFormat: [ TranscoderFormat.PVRTC1_4_RGB, TranscoderFormat.PVRTC1_4_RGBA ],\n\t\t\tengineFormat: [ EngineFormat.RGB_PVRTC_4BPPV1_Format, EngineFormat.RGBA_PVRTC_4BPPV1_Format ],\n\t\t\tengineType: [ EngineType.UnsignedByteType ],\n\t\t\tpriorityETC1S: 5,\n\t\t\tpriorityUASTC: 6,\n\t\t\tneedsPowerOfTwo: true,\n\t\t},\n\t\t{\n\t\t\tif: 'bptcSupported',\n\t\t\tbasisFormat: [ BasisFormat.UASTC_HDR ],\n\t\t\ttranscoderFormat: [ TranscoderFormat.BC6H ],\n\t\t\tengineFormat: [ EngineFormat.RGB_BPTC_UNSIGNED_Format ],\n\t\t\tengineType: [ EngineType.HalfFloatType ],\n\t\t\tpriorityHDR: 1,\n\t\t\tneedsPowerOfTwo: false,\n\t\t},\n\n\t\t// Uncompressed fallbacks.\n\n\t\t{\n\t\t\tbasisFormat: [ BasisFormat.ETC1S, BasisFormat.UASTC ],\n\t\t\ttranscoderFormat: [ TranscoderFormat.RGBA32, TranscoderFormat.RGBA32 ],\n\t\t\tengineFormat: [ EngineFormat.RGBAFormat, EngineFormat.RGBAFormat ],\n\t\t\tengineType: [ EngineType.UnsignedByteType, EngineType.UnsignedByteType ],\n\t\t\tpriorityETC1S: 100,\n\t\t\tpriorityUASTC: 100,\n\t\t\tneedsPowerOfTwo: false,\n\t\t},\n\t\t{\n\t\t\tbasisFormat: [ BasisFormat.UASTC_HDR ],\n\t\t\ttranscoderFormat: [ TranscoderFormat.RGBA_HALF ],\n\t\t\tengineFormat: [ EngineFormat.RGBAFormat ],\n\t\t\tengineType: [ EngineType.HalfFloatType ],\n\t\t\tpriorityHDR: 100,\n\t\t\tneedsPowerOfTwo: false,\n\t\t}\n\t];\n\n\tconst OPTIONS = {\n\t\t// TODO: For ETC1S we intentionally sort by _UASTC_ priority, preserving\n\t\t// a historical accident shown to avoid performance pitfalls for Linux with\n\t\t// Firefox & AMD GPU (RadeonSI). Further work needed.\n\t\t// See https://github.com/mrdoob/three.js/pull/29730.\n\t\t[ BasisFormat.ETC1S ]: FORMAT_OPTIONS\n\t\t\t.filter( ( opt ) => opt.basisFormat.includes( BasisFormat.ETC1S ) )\n\t\t\t.sort( ( a, b ) => a.priorityUASTC - b.priorityUASTC ),\n\n\t\t[ BasisFormat.UASTC ]: FORMAT_OPTIONS\n\t\t\t.filter( ( opt ) => opt.basisFormat.includes( BasisFormat.UASTC ) )\n\t\t\t.sort( ( a, b ) => a.priorityUASTC - b.priorityUASTC ),\n\n\t\t[ BasisFormat.UASTC_HDR ]: FORMAT_OPTIONS\n\t\t\t.filter( ( opt ) => opt.basisFormat.includes( BasisFormat.UASTC_HDR ) )\n\t\t\t.sort( ( a, b ) => a.priorityHDR - b.priorityHDR ),\n\t};\n\n\tfunction getTranscoderFormat( basisFormat, width, height, hasAlpha ) {\n\n\t\tconst options = OPTIONS[ basisFormat ];\n\n\t\tfor ( let i = 0; i < options.length; i ++ ) {\n\n\t\t\tconst opt = options[ i ];\n\n\t\t\tif ( opt.if && ! config[ opt.if ] ) continue;\n\t\t\tif ( ! opt.basisFormat.includes( basisFormat ) ) continue;\n\t\t\tif ( hasAlpha && opt.transcoderFormat.length < 2 ) continue;\n\t\t\tif ( opt.needsPowerOfTwo && ! ( isPowerOfTwo( width ) && isPowerOfTwo( height ) ) ) continue;\n\n\t\t\tconst transcoderFormat = opt.transcoderFormat[ hasAlpha ? 1 : 0 ];\n\t\t\tconst engineFormat = opt.engineFormat[ hasAlpha ? 1 : 0 ];\n\t\t\tconst engineType = opt.engineType[ 0 ];\n\n\t\t\treturn { transcoderFormat, engineFormat, engineType };\n\n\t\t}\n\n\t\tthrow new Error( 'THREE.KTX2Loader: Failed to identify transcoding target.' );\n\n\t}\n\n\tfunction isPowerOfTwo( value ) {\n\n\t\tif ( value <= 2 ) return true;\n\n\t\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\n\t}\n\n\t/**\n\t * Concatenates N byte arrays.\n\t *\n\t * @param {Uint8Array[]} arrays\n\t * @return {Uint8Array}\n\t */\n\tfunction concat( arrays ) {\n\n\t\tif ( arrays.length === 1 ) return arrays[ 0 ];\n\n\t\tlet totalByteLength = 0;\n\n\t\tfor ( let i = 0; i < arrays.length; i ++ ) {\n\n\t\t\tconst array = arrays[ i ];\n\t\t\ttotalByteLength += array.byteLength;\n\n\t\t}\n\n\t\tconst result = new Uint8Array( totalByteLength );\n\n\t\tlet byteOffset = 0;\n\n\t\tfor ( let i = 0; i < arrays.length; i ++ ) {\n\n\t\t\tconst array = arrays[ i ];\n\t\t\tresult.set( array, byteOffset );\n\n\t\t\tbyteOffset += array.byteLength;\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n};\n\n// Parsing for non-Basis textures. These textures may have supercompression\n// like Zstd, but they do not require transcoding.\n\nconst UNCOMPRESSED_FORMATS = new Set( [ RGBAFormat, RGFormat, RedFormat ] );\n\nconst FORMAT_MAP = {\n\n\t[ VK_FORMAT_R32G32B32A32_SFLOAT ]: RGBAFormat,\n\t[ VK_FORMAT_R16G16B16A16_SFLOAT ]: RGBAFormat,\n\t[ VK_FORMAT_R8G8B8A8_UNORM ]: RGBAFormat,\n\t[ VK_FORMAT_R8G8B8A8_SRGB ]: RGBAFormat,\n\n\t[ VK_FORMAT_R32G32_SFLOAT ]: RGFormat,\n\t[ VK_FORMAT_R16G16_SFLOAT ]: RGFormat,\n\t[ VK_FORMAT_R8G8_UNORM ]: RGFormat,\n\t[ VK_FORMAT_R8G8_SRGB ]: RGFormat,\n\n\t[ VK_FORMAT_R32_SFLOAT ]: RedFormat,\n\t[ VK_FORMAT_R16_SFLOAT ]: RedFormat,\n\t[ VK_FORMAT_R8_SRGB ]: RedFormat,\n\t[ VK_FORMAT_R8_UNORM ]: RedFormat,\n\n\t[ VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK ]: RGB_ETC2_Format,\n\t[ VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK ]: RGBA_ETC2_EAC_Format,\n\n\t[ VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT ]: RGBA_ASTC_4x4_Format,\n\t[ VK_FORMAT_ASTC_4x4_SRGB_BLOCK ]: RGBA_ASTC_4x4_Format,\n\t[ VK_FORMAT_ASTC_4x4_UNORM_BLOCK ]: RGBA_ASTC_4x4_Format,\n\t[ VK_FORMAT_ASTC_6x6_SRGB_BLOCK ]: RGBA_ASTC_6x6_Format,\n\t[ VK_FORMAT_ASTC_6x6_UNORM_BLOCK ]: RGBA_ASTC_6x6_Format,\n\n\t[ VK_FORMAT_BC1_RGBA_UNORM_BLOCK ]: RGBA_S3TC_DXT1_Format,\n\t[ VK_FORMAT_BC1_RGBA_SRGB_BLOCK ]: RGBA_S3TC_DXT1_Format,\n\t[ VK_FORMAT_BC1_RGB_UNORM_BLOCK ]: RGB_S3TC_DXT1_Format,\n\t[ VK_FORMAT_BC1_RGB_SRGB_BLOCK ]: RGB_S3TC_DXT1_Format,\n\n\t[ VK_FORMAT_BC3_SRGB_BLOCK ]: RGBA_S3TC_DXT3_Format,\n\t[ VK_FORMAT_BC3_UNORM_BLOCK ]: RGBA_S3TC_DXT3_Format,\n\n\t[ VK_FORMAT_BC5_SNORM_BLOCK ]: RGBA_S3TC_DXT5_Format,\n\t[ VK_FORMAT_BC5_UNORM_BLOCK ]: RGBA_S3TC_DXT5_Format,\n\n\t[ VK_FORMAT_BC7_SRGB_BLOCK ]: RGBA_BPTC_Format,\n\t[ VK_FORMAT_BC7_UNORM_BLOCK ]: RGBA_BPTC_Format,\n\n};\n\nconst TYPE_MAP = {\n\n\t[ VK_FORMAT_R32G32B32A32_SFLOAT ]: FloatType,\n\t[ VK_FORMAT_R16G16B16A16_SFLOAT ]: HalfFloatType,\n\t[ VK_FORMAT_R8G8B8A8_UNORM ]: UnsignedByteType,\n\t[ VK_FORMAT_R8G8B8A8_SRGB ]: UnsignedByteType,\n\n\t[ VK_FORMAT_R32G32_SFLOAT ]: FloatType,\n\t[ VK_FORMAT_R16G16_SFLOAT ]: HalfFloatType,\n\t[ VK_FORMAT_R8G8_UNORM ]: UnsignedByteType,\n\t[ VK_FORMAT_R8G8_SRGB ]: UnsignedByteType,\n\n\t[ VK_FORMAT_R32_SFLOAT ]: FloatType,\n\t[ VK_FORMAT_R16_SFLOAT ]: HalfFloatType,\n\t[ VK_FORMAT_R8_SRGB ]: UnsignedByteType,\n\t[ VK_FORMAT_R8_UNORM ]: UnsignedByteType,\n\n\t[ VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK ]: UnsignedByteType,\n\t[ VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK ]: UnsignedByteType,\n\n\t[ VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT ]: HalfFloatType,\n\t[ VK_FORMAT_ASTC_6x6_SRGB_BLOCK ]: UnsignedByteType,\n\t[ VK_FORMAT_ASTC_6x6_UNORM_BLOCK ]: UnsignedByteType,\n\n};\n\nasync function createRawTexture( container ) {\n\n\tconst { vkFormat } = container;\n\n\tif ( FORMAT_MAP[ vkFormat ] === undefined ) {\n\n\t\tthrow new Error( 'THREE.KTX2Loader: Unsupported vkFormat.' );\n\n\t}\n\n\t//\n\n\tlet zstd;\n\n\tif ( container.supercompressionScheme === KHR_SUPERCOMPRESSION_ZSTD ) {\n\n\t\tif ( ! _zstd ) {\n\n\t\t\t_zstd = new Promise( async ( resolve ) => {\n\n\t\t\t\tconst zstd = new ZSTDDecoder();\n\t\t\t\tawait zstd.init();\n\t\t\t\tresolve( zstd );\n\n\t\t\t} );\n\n\t\t}\n\n\t\tzstd = await _zstd;\n\n\t}\n\n\t//\n\n\tconst mipmaps = [];\n\n\n\tfor ( let levelIndex = 0; levelIndex < container.levels.length; levelIndex ++ ) {\n\n\t\tconst levelWidth = Math.max( 1, container.pixelWidth >> levelIndex );\n\t\tconst levelHeight = Math.max( 1, container.pixelHeight >> levelIndex );\n\t\tconst levelDepth = container.pixelDepth ? Math.max( 1, container.pixelDepth >> levelIndex ) : 0;\n\n\t\tconst level = container.levels[ levelIndex ];\n\n\t\tlet levelData;\n\n\t\tif ( container.supercompressionScheme === KHR_SUPERCOMPRESSION_NONE ) {\n\n\t\t\tlevelData = level.levelData;\n\n\t\t} else if ( container.supercompressionScheme === KHR_SUPERCOMPRESSION_ZSTD ) {\n\n\t\t\tlevelData = zstd.decode( level.levelData, level.uncompressedByteLength );\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.KTX2Loader: Unsupported supercompressionScheme.' );\n\n\t\t}\n\n\t\tlet data;\n\n\t\tif ( TYPE_MAP[ vkFormat ] === FloatType ) {\n\n\t\t\tdata = new Float32Array(\n\n\t\t\t\tlevelData.buffer,\n\t\t\t\tlevelData.byteOffset,\n\t\t\t\tlevelData.byteLength / Float32Array.BYTES_PER_ELEMENT\n\n\t\t\t);\n\n\t\t} else if ( TYPE_MAP[ vkFormat ] === HalfFloatType ) {\n\n\t\t\tdata = new Uint16Array(\n\n\t\t\t\tlevelData.buffer,\n\t\t\t\tlevelData.byteOffset,\n\t\t\t\tlevelData.byteLength / Uint16Array.BYTES_PER_ELEMENT\n\n\t\t\t);\n\n\t\t} else {\n\n\t\t\tdata = levelData;\n\n\t\t}\n\n\t\tmipmaps.push( {\n\n\t\t\tdata: data,\n\t\t\twidth: levelWidth,\n\t\t\theight: levelHeight,\n\t\t\tdepth: levelDepth,\n\n\t\t} );\n\n\t}\n\n\tlet texture;\n\n\tif ( UNCOMPRESSED_FORMATS.has( FORMAT_MAP[ vkFormat ] ) ) {\n\n\t\ttexture = container.pixelDepth === 0\n\t\t\t? new DataTexture( mipmaps[ 0 ].data, container.pixelWidth, container.pixelHeight )\n\t\t\t: new Data3DTexture( mipmaps[ 0 ].data, container.pixelWidth, container.pixelHeight, container.pixelDepth );\n\n\t} else {\n\n\t\tif ( container.pixelDepth > 0 ) throw new Error( 'THREE.KTX2Loader: Unsupported pixelDepth.' );\n\n\t\ttexture = new CompressedTexture( mipmaps, container.pixelWidth, container.pixelHeight );\n\n\t\ttexture.minFilter = mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n\t\ttexture.magFilter = LinearFilter;\n\n\t}\n\n\ttexture.mipmaps = mipmaps;\n\n\ttexture.type = TYPE_MAP[ vkFormat ];\n\ttexture.format = FORMAT_MAP[ vkFormat ];\n\ttexture.colorSpace = parseColorSpace( container );\n\ttexture.needsUpdate = true;\n\n\t//\n\n\treturn Promise.resolve( texture );\n\n}\n\nfunction parseColorSpace( container ) {\n\n\tconst dfd = container.dataFormatDescriptor[ 0 ];\n\n\tif ( dfd.colorPrimaries === KHR_DF_PRIMARIES_BT709 ) {\n\n\t\treturn dfd.transferFunction === KHR_DF_TRANSFER_SRGB ? SRGBColorSpace : LinearSRGBColorSpace;\n\n\t} else if ( dfd.colorPrimaries === KHR_DF_PRIMARIES_DISPLAYP3 ) {\n\n\t\treturn dfd.transferFunction === KHR_DF_TRANSFER_SRGB ? DisplayP3ColorSpace : LinearDisplayP3ColorSpace;\n\n\t} else if ( dfd.colorPrimaries === KHR_DF_PRIMARIES_UNSPECIFIED ) {\n\n\t\treturn NoColorSpace;\n\n\t} else {\n\n\t\tconsole.warn( `THREE.KTX2Loader: Unsupported color primaries, \"${ dfd.colorPrimaries }\"` );\n\t\treturn NoColorSpace;\n\n\t}\n\n}\n\nexport { KTX2Loader };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}