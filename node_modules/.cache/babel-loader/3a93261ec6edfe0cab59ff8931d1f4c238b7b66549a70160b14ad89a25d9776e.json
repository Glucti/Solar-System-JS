{"ast":null,"code":"import { DataTexture, FileLoader, FloatType, RedFormat, MathUtils, Loader, UnsignedByteType, LinearFilter, HalfFloatType, DataUtils } from 'three';\n\n/**\n * A loader for the IES format.\n *\n * The loaded texture should be assigned to {@link IESSpotLight#map}.\n *\n * ```js\n * const loader = new IESLoader();\n * const texture = await loader.loadAsync( 'ies/007cfb11e343e2f42e3b476be4ab684e.ies' );\n *\n * const spotLight = new THREE.IESSpotLight( 0xff0000, 500 );\n * spotLight.iesMap = texture;\n * ```\n *\n * @augments Loader\n * @three_import import { IESLoader } from 'three/addons/loaders/IESLoader.js';\n */\nclass IESLoader extends Loader {\n  /**\n   * Constructs a new IES loader.\n   *\n   * @param {LoadingManager} [manager] - The loading manager.\n   */\n  constructor(manager) {\n    super(manager);\n\n    /**\n     * The texture type.\n     *\n     * @type {(HalfFloatType|FloatType)}\n     * @default HalfFloatType\n     */\n    this.type = HalfFloatType;\n  }\n  _getIESValues(iesLamp, type) {\n    const width = 360;\n    const height = 180;\n    const size = width * height;\n    const data = new Array(size);\n    function interpolateCandelaValues(phi, theta) {\n      let phiIndex = 0,\n        thetaIndex = 0;\n      let startTheta = 0,\n        endTheta = 0,\n        startPhi = 0,\n        endPhi = 0;\n      for (let i = 0; i < iesLamp.numHorAngles - 1; ++i) {\n        // numHorAngles = horAngles.length-1 because of extra padding, so this wont cause an out of bounds error\n\n        if (theta < iesLamp.horAngles[i + 1] || i == iesLamp.numHorAngles - 2) {\n          thetaIndex = i;\n          startTheta = iesLamp.horAngles[i];\n          endTheta = iesLamp.horAngles[i + 1];\n          break;\n        }\n      }\n      for (let i = 0; i < iesLamp.numVerAngles - 1; ++i) {\n        if (phi < iesLamp.verAngles[i + 1] || i == iesLamp.numVerAngles - 2) {\n          phiIndex = i;\n          startPhi = iesLamp.verAngles[i];\n          endPhi = iesLamp.verAngles[i + 1];\n          break;\n        }\n      }\n      const deltaTheta = endTheta - startTheta;\n      const deltaPhi = endPhi - startPhi;\n      if (deltaPhi === 0)\n        // Outside range\n        return 0;\n      const t1 = deltaTheta === 0 ? 0 : (theta - startTheta) / deltaTheta;\n      const t2 = (phi - startPhi) / deltaPhi;\n      const nextThetaIndex = deltaTheta === 0 ? thetaIndex : thetaIndex + 1;\n      const v1 = MathUtils.lerp(iesLamp.candelaValues[thetaIndex][phiIndex], iesLamp.candelaValues[nextThetaIndex][phiIndex], t1);\n      const v2 = MathUtils.lerp(iesLamp.candelaValues[thetaIndex][phiIndex + 1], iesLamp.candelaValues[nextThetaIndex][phiIndex + 1], t1);\n      const v = MathUtils.lerp(v1, v2, t2);\n      return v;\n    }\n    const startTheta = iesLamp.horAngles[0],\n      endTheta = iesLamp.horAngles[iesLamp.numHorAngles - 1];\n    for (let i = 0; i < size; ++i) {\n      let theta = i % width;\n      const phi = Math.floor(i / width);\n      if (endTheta - startTheta !== 0 && (theta < startTheta || theta >= endTheta)) {\n        // Handle symmetry for hor angles\n\n        theta %= endTheta * 2;\n        if (theta > endTheta) theta = endTheta * 2 - theta;\n      }\n      data[phi + theta * height] = interpolateCandelaValues(phi, theta);\n    }\n    let result = null;\n    if (type === UnsignedByteType) result = Uint8Array.from(data.map(v => Math.min(v * 0xFF, 0xFF)));else if (type === HalfFloatType) result = Uint16Array.from(data.map(v => DataUtils.toHalfFloat(v)));else if (type === FloatType) result = Float32Array.from(data);else console.error('IESLoader: Unsupported type:', type);\n    return result;\n  }\n\n  /**\n   * Starts loading from the given URL and passes the loaded IES texture\n   * to the `onLoad()` callback.\n   *\n   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n   * @param {function(DataTexture)} onLoad - Executed when the loading process has been finished.\n   * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n   * @param {onErrorCallback} onError - Executed when errors occur.\n   */\n  load(url, onLoad, onProgress, onError) {\n    const loader = new FileLoader(this.manager);\n    loader.setResponseType('text');\n    loader.setCrossOrigin(this.crossOrigin);\n    loader.setWithCredentials(this.withCredentials);\n    loader.setPath(this.path);\n    loader.setRequestHeader(this.requestHeader);\n    loader.load(url, text => {\n      onLoad(this.parse(text));\n    }, onProgress, onError);\n  }\n\n  /**\n   * Parses the given IES data.\n   *\n   * @param {string} text - The raw IES data.\n   * @return {DataTexture} THE IES data as a texture.\n   */\n  parse(text) {\n    const type = this.type;\n    const iesLamp = new IESLamp(text);\n    const data = this._getIESValues(iesLamp, type);\n    const texture = new DataTexture(data, 180, 1, RedFormat, type);\n    texture.minFilter = LinearFilter;\n    texture.magFilter = LinearFilter;\n    texture.needsUpdate = true;\n    return texture;\n  }\n}\nfunction IESLamp(text) {\n  const _self = this;\n  const textArray = text.split('\\n');\n  let lineNumber = 0;\n  let line;\n  _self.verAngles = [];\n  _self.horAngles = [];\n  _self.candelaValues = [];\n  _self.tiltData = {};\n  _self.tiltData.angles = [];\n  _self.tiltData.mulFactors = [];\n  function textToArray(text) {\n    text = text.replace(/^\\s+|\\s+$/g, ''); // remove leading or trailing spaces\n    text = text.replace(/,/g, ' '); // replace commas with spaces\n    text = text.replace(/\\s\\s+/g, ' '); // replace white space/tabs etc by single whitespace\n\n    const array = text.split(' ');\n    return array;\n  }\n  function readArray(count, array) {\n    while (true) {\n      const line = textArray[lineNumber++];\n      const lineData = textToArray(line);\n      for (let i = 0; i < lineData.length; ++i) {\n        array.push(Number(lineData[i]));\n      }\n      if (array.length === count) break;\n    }\n  }\n  function readTilt() {\n    let line = textArray[lineNumber++];\n    let lineData = textToArray(line);\n    _self.tiltData.lampToLumGeometry = Number(lineData[0]);\n    line = textArray[lineNumber++];\n    lineData = textToArray(line);\n    _self.tiltData.numAngles = Number(lineData[0]);\n    readArray(_self.tiltData.numAngles, _self.tiltData.angles);\n    readArray(_self.tiltData.numAngles, _self.tiltData.mulFactors);\n  }\n  function readLampValues() {\n    const values = [];\n    readArray(10, values);\n    _self.count = Number(values[0]);\n    _self.lumens = Number(values[1]);\n    _self.multiplier = Number(values[2]);\n    _self.numVerAngles = Number(values[3]);\n    _self.numHorAngles = Number(values[4]);\n    _self.gonioType = Number(values[5]);\n    _self.units = Number(values[6]);\n    _self.width = Number(values[7]);\n    _self.length = Number(values[8]);\n    _self.height = Number(values[9]);\n  }\n  function readLampFactors() {\n    const values = [];\n    readArray(3, values);\n    _self.ballFactor = Number(values[0]);\n    _self.blpFactor = Number(values[1]);\n    _self.inputWatts = Number(values[2]);\n  }\n  while (true) {\n    line = textArray[lineNumber++];\n    if (line.includes('TILT')) {\n      break;\n    }\n  }\n  if (!line.includes('NONE')) {\n    if (line.includes('INCLUDE')) {\n      readTilt();\n    } else {\n\n      // TODO:: Read tilt data from a file\n    }\n  }\n  readLampValues();\n  readLampFactors();\n\n  // Initialize candela value array\n  for (let i = 0; i < _self.numHorAngles; ++i) {\n    _self.candelaValues.push([]);\n  }\n\n  // Parse Angles\n  readArray(_self.numVerAngles, _self.verAngles);\n  readArray(_self.numHorAngles, _self.horAngles);\n\n  // Parse Candela values\n  for (let i = 0; i < _self.numHorAngles; ++i) {\n    readArray(_self.numVerAngles, _self.candelaValues[i]);\n  }\n\n  // Calculate actual candela values, and normalize.\n  for (let i = 0; i < _self.numHorAngles; ++i) {\n    for (let j = 0; j < _self.numVerAngles; ++j) {\n      _self.candelaValues[i][j] *= _self.candelaValues[i][j] * _self.multiplier * _self.ballFactor * _self.blpFactor;\n    }\n  }\n  let maxVal = -1;\n  for (let i = 0; i < _self.numHorAngles; ++i) {\n    for (let j = 0; j < _self.numVerAngles; ++j) {\n      const value = _self.candelaValues[i][j];\n      maxVal = maxVal < value ? value : maxVal;\n    }\n  }\n  const bNormalize = true;\n  if (bNormalize && maxVal > 0) {\n    for (let i = 0; i < _self.numHorAngles; ++i) {\n      for (let j = 0; j < _self.numVerAngles; ++j) {\n        _self.candelaValues[i][j] /= maxVal;\n      }\n    }\n  }\n}\nexport { IESLoader };","map":{"version":3,"names":["DataTexture","FileLoader","FloatType","RedFormat","MathUtils","Loader","UnsignedByteType","LinearFilter","HalfFloatType","DataUtils","IESLoader","constructor","manager","type","_getIESValues","iesLamp","width","height","size","data","Array","interpolateCandelaValues","phi","theta","phiIndex","thetaIndex","startTheta","endTheta","startPhi","endPhi","i","numHorAngles","horAngles","numVerAngles","verAngles","deltaTheta","deltaPhi","t1","t2","nextThetaIndex","v1","lerp","candelaValues","v2","v","Math","floor","result","Uint8Array","from","map","min","Uint16Array","toHalfFloat","Float32Array","console","error","load","url","onLoad","onProgress","onError","loader","setResponseType","setCrossOrigin","crossOrigin","setWithCredentials","withCredentials","setPath","path","setRequestHeader","requestHeader","text","parse","IESLamp","texture","minFilter","magFilter","needsUpdate","_self","textArray","split","lineNumber","line","tiltData","angles","mulFactors","textToArray","replace","array","readArray","count","lineData","length","push","Number","readTilt","lampToLumGeometry","numAngles","readLampValues","values","lumens","multiplier","gonioType","units","readLampFactors","ballFactor","blpFactor","inputWatts","includes","j","maxVal","value","bNormalize"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/loaders/IESLoader.js"],"sourcesContent":["import {\n\tDataTexture,\n\tFileLoader,\n\tFloatType,\n\tRedFormat,\n\tMathUtils,\n\tLoader,\n\tUnsignedByteType,\n\tLinearFilter,\n\tHalfFloatType,\n\tDataUtils\n} from 'three';\n\n/**\n * A loader for the IES format.\n *\n * The loaded texture should be assigned to {@link IESSpotLight#map}.\n *\n * ```js\n * const loader = new IESLoader();\n * const texture = await loader.loadAsync( 'ies/007cfb11e343e2f42e3b476be4ab684e.ies' );\n *\n * const spotLight = new THREE.IESSpotLight( 0xff0000, 500 );\n * spotLight.iesMap = texture;\n * ```\n *\n * @augments Loader\n * @three_import import { IESLoader } from 'three/addons/loaders/IESLoader.js';\n */\nclass IESLoader extends Loader {\n\n\t/**\n\t * Constructs a new IES loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\t/**\n\t\t * The texture type.\n\t\t *\n\t\t * @type {(HalfFloatType|FloatType)}\n\t\t * @default HalfFloatType\n\t\t */\n\t\tthis.type = HalfFloatType;\n\n\t}\n\n\t_getIESValues( iesLamp, type ) {\n\n\t\tconst width = 360;\n\t\tconst height = 180;\n\t\tconst size = width * height;\n\n\t\tconst data = new Array( size );\n\n\t\tfunction interpolateCandelaValues( phi, theta ) {\n\n\t\t\tlet phiIndex = 0, thetaIndex = 0;\n\t\t\tlet startTheta = 0, endTheta = 0, startPhi = 0, endPhi = 0;\n\n\t\t\tfor ( let i = 0; i < iesLamp.numHorAngles - 1; ++ i ) { // numHorAngles = horAngles.length-1 because of extra padding, so this wont cause an out of bounds error\n\n\t\t\t\tif ( theta < iesLamp.horAngles[ i + 1 ] || i == iesLamp.numHorAngles - 2 ) {\n\n\t\t\t\t\tthetaIndex = i;\n\t\t\t\t\tstartTheta = iesLamp.horAngles[ i ];\n\t\t\t\t\tendTheta = iesLamp.horAngles[ i + 1 ];\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( let i = 0; i < iesLamp.numVerAngles - 1; ++ i ) {\n\n\t\t\t\tif ( phi < iesLamp.verAngles[ i + 1 ] || i == iesLamp.numVerAngles - 2 ) {\n\n\t\t\t\t\tphiIndex = i;\n\t\t\t\t\tstartPhi = iesLamp.verAngles[ i ];\n\t\t\t\t\tendPhi = iesLamp.verAngles[ i + 1 ];\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst deltaTheta = endTheta - startTheta;\n\t\t\tconst deltaPhi = endPhi - startPhi;\n\n\t\t\tif ( deltaPhi === 0 ) // Outside range\n\t\t\t\treturn 0;\n\n\t\t\tconst t1 = deltaTheta === 0 ? 0 : ( theta - startTheta ) / deltaTheta;\n\t\t\tconst t2 = ( phi - startPhi ) / deltaPhi;\n\n\t\t\tconst nextThetaIndex = deltaTheta === 0 ? thetaIndex : thetaIndex + 1;\n\n\t\t\tconst v1 = MathUtils.lerp( iesLamp.candelaValues[ thetaIndex ][ phiIndex ], iesLamp.candelaValues[ nextThetaIndex ][ phiIndex ], t1 );\n\t\t\tconst v2 = MathUtils.lerp( iesLamp.candelaValues[ thetaIndex ][ phiIndex + 1 ], iesLamp.candelaValues[ nextThetaIndex ][ phiIndex + 1 ], t1 );\n\t\t\tconst v = MathUtils.lerp( v1, v2, t2 );\n\n\t\t\treturn v;\n\n\t\t}\n\n\t\tconst startTheta = iesLamp.horAngles[ 0 ], endTheta = iesLamp.horAngles[ iesLamp.numHorAngles - 1 ];\n\n\t\tfor ( let i = 0; i < size; ++ i ) {\n\n\t\t\tlet theta = i % width;\n\t\t\tconst phi = Math.floor( i / width );\n\n\t\t\tif ( endTheta - startTheta !== 0 && ( theta < startTheta || theta >= endTheta ) ) { // Handle symmetry for hor angles\n\n\t\t\t\ttheta %= endTheta * 2;\n\n\t\t\t\tif ( theta > endTheta )\n\t\t\t\t\ttheta = endTheta * 2 - theta;\n\n\t\t\t}\n\n\t\t\tdata[ phi + theta * height ] = interpolateCandelaValues( phi, theta );\n\n\t\t}\n\n\t\tlet result = null;\n\n\t\tif ( type === UnsignedByteType ) result = Uint8Array.from( data.map( v => Math.min( v * 0xFF, 0xFF ) ) );\n\t\telse if ( type === HalfFloatType ) result = Uint16Array.from( data.map( v => DataUtils.toHalfFloat( v ) ) );\n\t\telse if ( type === FloatType ) result = Float32Array.from( data );\n\t\telse console.error( 'IESLoader: Unsupported type:', type );\n\n\t\treturn result;\n\n\t}\n\n\t/**\n\t * Starts loading from the given URL and passes the loaded IES texture\n\t * to the `onLoad()` callback.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(DataTexture)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setResponseType( 'text' );\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\n\t\tloader.load( url, text => {\n\n\t\t\tonLoad( this.parse( text ) );\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\t/**\n\t * Parses the given IES data.\n\t *\n\t * @param {string} text - The raw IES data.\n\t * @return {DataTexture} THE IES data as a texture.\n\t */\n\tparse( text ) {\n\n\t\tconst type = this.type;\n\n\t\tconst iesLamp = new IESLamp( text );\n\t\tconst data = this._getIESValues( iesLamp, type );\n\n\t\tconst texture = new DataTexture( data, 180, 1, RedFormat, type );\n\t\ttexture.minFilter = LinearFilter;\n\t\ttexture.magFilter = LinearFilter;\n\t\ttexture.needsUpdate = true;\n\n\t\treturn texture;\n\n\t}\n\n}\n\n\nfunction IESLamp( text ) {\n\n\tconst _self = this;\n\n\tconst textArray = text.split( '\\n' );\n\n\tlet lineNumber = 0;\n\tlet line;\n\n\t_self.verAngles = [ ];\n\t_self.horAngles = [ ];\n\n\t_self.candelaValues = [ ];\n\n\t_self.tiltData = { };\n\t_self.tiltData.angles = [ ];\n\t_self.tiltData.mulFactors = [ ];\n\n\tfunction textToArray( text ) {\n\n\t\ttext = text.replace( /^\\s+|\\s+$/g, '' ); // remove leading or trailing spaces\n\t\ttext = text.replace( /,/g, ' ' ); // replace commas with spaces\n\t\ttext = text.replace( /\\s\\s+/g, ' ' ); // replace white space/tabs etc by single whitespace\n\n\t\tconst array = text.split( ' ' );\n\n\t\treturn array;\n\n\t}\n\n\tfunction readArray( count, array ) {\n\n\t\twhile ( true ) {\n\n\t\t\tconst line = textArray[ lineNumber ++ ];\n\t\t\tconst lineData = textToArray( line );\n\n\t\t\tfor ( let i = 0; i < lineData.length; ++ i ) {\n\n\t\t\t\tarray.push( Number( lineData[ i ] ) );\n\n\t\t\t}\n\n\t\t\tif ( array.length === count )\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tfunction readTilt() {\n\n\t\tlet line = textArray[ lineNumber ++ ];\n\t\tlet lineData = textToArray( line );\n\n\t\t_self.tiltData.lampToLumGeometry = Number( lineData[ 0 ] );\n\n\t\tline = textArray[ lineNumber ++ ];\n\t\tlineData = textToArray( line );\n\n\t\t_self.tiltData.numAngles = Number( lineData[ 0 ] );\n\n\t\treadArray( _self.tiltData.numAngles, _self.tiltData.angles );\n\t\treadArray( _self.tiltData.numAngles, _self.tiltData.mulFactors );\n\n\t}\n\n\tfunction readLampValues() {\n\n\t\tconst values = [ ];\n\t\treadArray( 10, values );\n\n\t\t_self.count = Number( values[ 0 ] );\n\t\t_self.lumens = Number( values[ 1 ] );\n\t\t_self.multiplier = Number( values[ 2 ] );\n\t\t_self.numVerAngles = Number( values[ 3 ] );\n\t\t_self.numHorAngles = Number( values[ 4 ] );\n\t\t_self.gonioType = Number( values[ 5 ] );\n\t\t_self.units = Number( values[ 6 ] );\n\t\t_self.width = Number( values[ 7 ] );\n\t\t_self.length = Number( values[ 8 ] );\n\t\t_self.height = Number( values[ 9 ] );\n\n\t}\n\n\tfunction readLampFactors() {\n\n\t\tconst values = [ ];\n\t\treadArray( 3, values );\n\n\t\t_self.ballFactor = Number( values[ 0 ] );\n\t\t_self.blpFactor = Number( values[ 1 ] );\n\t\t_self.inputWatts = Number( values[ 2 ] );\n\n\t}\n\n\twhile ( true ) {\n\n\t\tline = textArray[ lineNumber ++ ];\n\n\t\tif ( line.includes( 'TILT' ) ) {\n\n\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tif ( ! line.includes( 'NONE' ) ) {\n\n\t\tif ( line.includes( 'INCLUDE' ) ) {\n\n\t\t\treadTilt();\n\n\t\t} else {\n\n\t\t\t// TODO:: Read tilt data from a file\n\n\t\t}\n\n\t}\n\n\treadLampValues();\n\n\treadLampFactors();\n\n\t// Initialize candela value array\n\tfor ( let i = 0; i < _self.numHorAngles; ++ i ) {\n\n\t\t_self.candelaValues.push( [ ] );\n\n\t}\n\n\t// Parse Angles\n\treadArray( _self.numVerAngles, _self.verAngles );\n\treadArray( _self.numHorAngles, _self.horAngles );\n\n\t// Parse Candela values\n\tfor ( let i = 0; i < _self.numHorAngles; ++ i ) {\n\n\t\treadArray( _self.numVerAngles, _self.candelaValues[ i ] );\n\n\t}\n\n\t// Calculate actual candela values, and normalize.\n\tfor ( let i = 0; i < _self.numHorAngles; ++ i ) {\n\n\t\tfor ( let j = 0; j < _self.numVerAngles; ++ j ) {\n\n\t\t\t_self.candelaValues[ i ][ j ] *= _self.candelaValues[ i ][ j ] * _self.multiplier\n\t\t\t\t* _self.ballFactor * _self.blpFactor;\n\n\t\t}\n\n\t}\n\n\tlet maxVal = - 1;\n\tfor ( let i = 0; i < _self.numHorAngles; ++ i ) {\n\n\t\tfor ( let j = 0; j < _self.numVerAngles; ++ j ) {\n\n\t\t\tconst value = _self.candelaValues[ i ][ j ];\n\t\t\tmaxVal = maxVal < value ? value : maxVal;\n\n\t\t}\n\n\t}\n\n\tconst bNormalize = true;\n\tif ( bNormalize && maxVal > 0 ) {\n\n\t\tfor ( let i = 0; i < _self.numHorAngles; ++ i ) {\n\n\t\t\tfor ( let j = 0; j < _self.numVerAngles; ++ j ) {\n\n\t\t\t\t_self.candelaValues[ i ][ j ] /= maxVal;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\n\nexport { IESLoader };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}