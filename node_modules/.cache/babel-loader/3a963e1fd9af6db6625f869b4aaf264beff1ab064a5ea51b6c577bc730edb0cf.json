{"ast":null,"code":"import { DataTextureLoader, LinearFilter, LinearMipmapLinearFilter } from 'three';\nimport UTIF from '../libs/utif.module.js';\n\n/**\n * A loader for the TIFF texture format.\n *\n * ```js\n * const loader = new TIFFLoader();\n * const texture = await loader.loadAsync( 'textures/tiff/crate_lzw.tif' );\n * texture.colorSpace = THREE.SRGBColorSpace;\n * ```\n *\n * @augments DataTextureLoader\n * @three_import import { TIFFLoader } from 'three/addons/loaders/TIFFLoader.js';\n */\nclass TIFFLoader extends DataTextureLoader {\n  /**\n   * Constructs a new TIFF loader.\n   *\n   * @param {LoadingManager} [manager] - The loading manager.\n   */\n  constructor(manager) {\n    super(manager);\n  }\n\n  /**\n   * Parses the given TIFF texture data.\n   *\n   * @param {ArrayBuffer} buffer - The raw texture data.\n   * @return {DataTextureLoader~TexData} An object representing the parsed texture data.\n   */\n  parse(buffer) {\n    const ifds = UTIF.decode(buffer);\n    UTIF.decodeImage(buffer, ifds[0]);\n    const rgba = UTIF.toRGBA8(ifds[0]);\n    return {\n      width: ifds[0].width,\n      height: ifds[0].height,\n      data: rgba,\n      flipY: true,\n      magFilter: LinearFilter,\n      minFilter: LinearMipmapLinearFilter\n    };\n  }\n}\nexport { TIFFLoader };","map":{"version":3,"names":["DataTextureLoader","LinearFilter","LinearMipmapLinearFilter","UTIF","TIFFLoader","constructor","manager","parse","buffer","ifds","decode","decodeImage","rgba","toRGBA8","width","height","data","flipY","magFilter","minFilter"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/loaders/TIFFLoader.js"],"sourcesContent":["import {\n\tDataTextureLoader,\n\tLinearFilter,\n\tLinearMipmapLinearFilter\n} from 'three';\n\nimport UTIF from '../libs/utif.module.js';\n\n/**\n * A loader for the TIFF texture format.\n *\n * ```js\n * const loader = new TIFFLoader();\n * const texture = await loader.loadAsync( 'textures/tiff/crate_lzw.tif' );\n * texture.colorSpace = THREE.SRGBColorSpace;\n * ```\n *\n * @augments DataTextureLoader\n * @three_import import { TIFFLoader } from 'three/addons/loaders/TIFFLoader.js';\n */\nclass TIFFLoader extends DataTextureLoader {\n\n\t/**\n\t * Constructs a new TIFF loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\t/**\n\t * Parses the given TIFF texture data.\n\t *\n\t * @param {ArrayBuffer} buffer - The raw texture data.\n\t * @return {DataTextureLoader~TexData} An object representing the parsed texture data.\n\t */\n\tparse( buffer ) {\n\n\t\tconst ifds = UTIF.decode( buffer );\n\t\tUTIF.decodeImage( buffer, ifds[ 0 ] );\n\t\tconst rgba = UTIF.toRGBA8( ifds[ 0 ] );\n\n\t\treturn {\n\t\t\twidth: ifds[ 0 ].width,\n\t\t\theight: ifds[ 0 ].height,\n\t\t\tdata: rgba,\n\t\t\tflipY: true,\n\t\t\tmagFilter: LinearFilter,\n\t\t\tminFilter: LinearMipmapLinearFilter\n\t\t};\n\n\t}\n\n}\n\nexport { TIFFLoader };\n"],"mappings":"AAAA,SACCA,iBAAiB,EACjBC,YAAY,EACZC,wBAAwB,QAClB,OAAO;AAEd,OAAOC,IAAI,MAAM,wBAAwB;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,SAASJ,iBAAiB,CAAC;EAE1C;AACD;AACA;AACA;AACA;EACCK,WAAWA,CAAEC,OAAO,EAAG;IAEtB,KAAK,CAAEA,OAAQ,CAAC;EAEjB;;EAEA;AACD;AACA;AACA;AACA;AACA;EACCC,KAAKA,CAAEC,MAAM,EAAG;IAEf,MAAMC,IAAI,GAAGN,IAAI,CAACO,MAAM,CAAEF,MAAO,CAAC;IAClCL,IAAI,CAACQ,WAAW,CAAEH,MAAM,EAAEC,IAAI,CAAE,CAAC,CAAG,CAAC;IACrC,MAAMG,IAAI,GAAGT,IAAI,CAACU,OAAO,CAAEJ,IAAI,CAAE,CAAC,CAAG,CAAC;IAEtC,OAAO;MACNK,KAAK,EAAEL,IAAI,CAAE,CAAC,CAAE,CAACK,KAAK;MACtBC,MAAM,EAAEN,IAAI,CAAE,CAAC,CAAE,CAACM,MAAM;MACxBC,IAAI,EAAEJ,IAAI;MACVK,KAAK,EAAE,IAAI;MACXC,SAAS,EAAEjB,YAAY;MACvBkB,SAAS,EAAEjB;IACZ,CAAC;EAEF;AAED;AAEA,SAASE,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}