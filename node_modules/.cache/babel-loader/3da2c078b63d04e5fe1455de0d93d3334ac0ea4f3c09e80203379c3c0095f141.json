{"ast":null,"code":"/**\n * @module BrightnessContrastShader\n * @three_import import { BrightnessContrastShader } from 'three/addons/shaders/BrightnessContrastShader.js';\n */\n\n/**\n * Brightness and contrast adjustment {@link https://github.com/evanw/glfx.js}.\n * Brightness: -1 to 1 (-1 is solid black, 0 is no change, and 1 is solid white)\n * Contrast: -1 to 1 (-1 is solid gray, 0 is no change, and 1 is maximum contrast)\n *\n * @constant\n * @type {ShaderMaterial~Shader}\n */\nconst BrightnessContrastShader = {\n  name: 'BrightnessContrastShader',\n  uniforms: {\n    'tDiffuse': {\n      value: null\n    },\n    'brightness': {\n      value: 0\n    },\n    'contrast': {\n      value: 0\n    }\n  },\n  vertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n  fragmentShader: /* glsl */`\n\n\t\tuniform sampler2D tDiffuse;\n\t\tuniform float brightness;\n\t\tuniform float contrast;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tgl_FragColor = texture2D( tDiffuse, vUv );\n\n\t\t\tgl_FragColor.rgb += brightness;\n\n\t\t\tif (contrast > 0.0) {\n\t\t\t\tgl_FragColor.rgb = (gl_FragColor.rgb - 0.5) / (1.0 - contrast) + 0.5;\n\t\t\t} else {\n\t\t\t\tgl_FragColor.rgb = (gl_FragColor.rgb - 0.5) * (1.0 + contrast) + 0.5;\n\t\t\t}\n\n\t\t}`\n};\nexport { BrightnessContrastShader };","map":{"version":3,"names":["BrightnessContrastShader","name","uniforms","value","vertexShader","fragmentShader"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/shaders/BrightnessContrastShader.js"],"sourcesContent":["/**\n * @module BrightnessContrastShader\n * @three_import import { BrightnessContrastShader } from 'three/addons/shaders/BrightnessContrastShader.js';\n */\n\n/**\n * Brightness and contrast adjustment {@link https://github.com/evanw/glfx.js}.\n * Brightness: -1 to 1 (-1 is solid black, 0 is no change, and 1 is solid white)\n * Contrast: -1 to 1 (-1 is solid gray, 0 is no change, and 1 is maximum contrast)\n *\n * @constant\n * @type {ShaderMaterial~Shader}\n */\nconst BrightnessContrastShader = {\n\n\tname: 'BrightnessContrastShader',\n\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null },\n\t\t'brightness': { value: 0 },\n\t\t'contrast': { value: 0 }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform sampler2D tDiffuse;\n\t\tuniform float brightness;\n\t\tuniform float contrast;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tgl_FragColor = texture2D( tDiffuse, vUv );\n\n\t\t\tgl_FragColor.rgb += brightness;\n\n\t\t\tif (contrast > 0.0) {\n\t\t\t\tgl_FragColor.rgb = (gl_FragColor.rgb - 0.5) / (1.0 - contrast) + 0.5;\n\t\t\t} else {\n\t\t\t\tgl_FragColor.rgb = (gl_FragColor.rgb - 0.5) * (1.0 + contrast) + 0.5;\n\t\t\t}\n\n\t\t}`\n\n};\n\nexport { BrightnessContrastShader };\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,wBAAwB,GAAG;EAEhCC,IAAI,EAAE,0BAA0B;EAEhCC,QAAQ,EAAE;IAET,UAAU,EAAE;MAAEC,KAAK,EAAE;IAAK,CAAC;IAC3B,YAAY,EAAE;MAAEA,KAAK,EAAE;IAAE,CAAC;IAC1B,UAAU,EAAE;MAAEA,KAAK,EAAE;IAAE;EAExB,CAAC;EAEDC,YAAY,EAAE,UAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;EAEHC,cAAc,EAAE,UAAU;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,CAAC;AAED,SAASL,wBAAwB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}