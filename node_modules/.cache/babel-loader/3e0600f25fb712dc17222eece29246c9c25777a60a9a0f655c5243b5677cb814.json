{"ast":null,"code":"import { CompressedTextureLoader, RGBA_PVRTC_2BPPV1_Format, RGBA_PVRTC_4BPPV1_Format, RGB_PVRTC_2BPPV1_Format, RGB_PVRTC_4BPPV1_Format } from 'three';\n\n/**\n * A loader for the PVRTC texture compression format.\n *\n * ```js\n * const loader = new PVRLoader();\n *\n * const map = loader.load( 'textures/compressed/disturb_4bpp_rgb.pvr' );\n * map.colorSpace = THREE.SRGBColorSpace; // only for color textures\n * ```\n *\n * @augments CompressedTextureLoader\n * @three_import import { PVRLoader } from 'three/addons/loaders/PVRLoader.js';\n */\nclass PVRLoader extends CompressedTextureLoader {\n  /**\n   * Constructs a new PVR loader.\n   *\n   * @param {LoadingManager} [manager] - The loading manager.\n   */\n  constructor(manager) {\n    super(manager);\n  }\n\n  /**\n   * Parses the given PVRTC texture data.\n   *\n   * @param {ArrayBuffer} buffer - The raw texture data.\n   * @param {boolean} loadMipmaps - Whether to load mipmaps or not. This option is not yet supported by the loader.\n   * @return {CompressedTextureLoader~TexData} An object representing the parsed texture data.\n   */\n  parse(buffer, loadMipmaps) {\n    const headerLengthInt = 13;\n    const header = new Uint32Array(buffer, 0, headerLengthInt);\n    const pvrDatas = {\n      buffer: buffer,\n      header: header,\n      loadMipmaps: loadMipmaps\n    };\n    if (header[0] === 0x03525650) {\n      // PVR v3\n\n      return _parseV3(pvrDatas);\n    } else if (header[11] === 0x21525650) {\n      // PVR v2\n\n      return _parseV2(pvrDatas);\n    } else {\n      console.error('THREE.PVRLoader: Unknown PVR format.');\n    }\n  }\n}\nfunction _parseV3(pvrDatas) {\n  const header = pvrDatas.header;\n  let bpp, format;\n  const metaLen = header[12],\n    pixelFormat = header[2],\n    height = header[6],\n    width = header[7],\n    // numSurfs = header[ 9 ],\n    numFaces = header[10],\n    numMipmaps = header[11];\n  switch (pixelFormat) {\n    case 0:\n      // PVRTC 2bpp RGB\n      bpp = 2;\n      format = RGB_PVRTC_2BPPV1_Format;\n      break;\n    case 1:\n      // PVRTC 2bpp RGBA\n      bpp = 2;\n      format = RGBA_PVRTC_2BPPV1_Format;\n      break;\n    case 2:\n      // PVRTC 4bpp RGB\n      bpp = 4;\n      format = RGB_PVRTC_4BPPV1_Format;\n      break;\n    case 3:\n      // PVRTC 4bpp RGBA\n      bpp = 4;\n      format = RGBA_PVRTC_4BPPV1_Format;\n      break;\n    default:\n      console.error('THREE.PVRLoader: Unsupported PVR format:', pixelFormat);\n  }\n  pvrDatas.dataPtr = 52 + metaLen;\n  pvrDatas.bpp = bpp;\n  pvrDatas.format = format;\n  pvrDatas.width = width;\n  pvrDatas.height = height;\n  pvrDatas.numSurfaces = numFaces;\n  pvrDatas.numMipmaps = numMipmaps;\n  pvrDatas.isCubemap = numFaces === 6;\n  return _extract(pvrDatas);\n}\nfunction _parseV2(pvrDatas) {\n  const header = pvrDatas.header;\n  const headerLength = header[0],\n    height = header[1],\n    width = header[2],\n    numMipmaps = header[3],\n    flags = header[4],\n    // dataLength = header[ 5 ],\n    // bpp =  header[ 6 ],\n    // bitmaskRed = header[ 7 ],\n    // bitmaskGreen = header[ 8 ],\n    // bitmaskBlue = header[ 9 ],\n    bitmaskAlpha = header[10],\n    // pvrTag = header[ 11 ],\n    numSurfs = header[12];\n  const TYPE_MASK = 0xff;\n  const PVRTC_2 = 24,\n    PVRTC_4 = 25;\n  const formatFlags = flags & TYPE_MASK;\n  let bpp, format;\n  const _hasAlpha = bitmaskAlpha > 0;\n  if (formatFlags === PVRTC_4) {\n    format = _hasAlpha ? RGBA_PVRTC_4BPPV1_Format : RGB_PVRTC_4BPPV1_Format;\n    bpp = 4;\n  } else if (formatFlags === PVRTC_2) {\n    format = _hasAlpha ? RGBA_PVRTC_2BPPV1_Format : RGB_PVRTC_2BPPV1_Format;\n    bpp = 2;\n  } else {\n    console.error('THREE.PVRLoader: Unknown PVR format:', formatFlags);\n  }\n  pvrDatas.dataPtr = headerLength;\n  pvrDatas.bpp = bpp;\n  pvrDatas.format = format;\n  pvrDatas.width = width;\n  pvrDatas.height = height;\n  pvrDatas.numSurfaces = numSurfs;\n  pvrDatas.numMipmaps = numMipmaps + 1;\n\n  // guess cubemap type seems tricky in v2\n  // it's just a pvr containing 6 surface (no explicit cubemap type)\n  pvrDatas.isCubemap = numSurfs === 6;\n  return _extract(pvrDatas);\n}\nfunction _extract(pvrDatas) {\n  const pvr = {\n    mipmaps: [],\n    width: pvrDatas.width,\n    height: pvrDatas.height,\n    format: pvrDatas.format,\n    mipmapCount: pvrDatas.numMipmaps,\n    isCubemap: pvrDatas.isCubemap\n  };\n  const buffer = pvrDatas.buffer;\n  let dataOffset = pvrDatas.dataPtr,\n    dataSize = 0,\n    blockSize = 0,\n    blockWidth = 0,\n    blockHeight = 0,\n    widthBlocks = 0,\n    heightBlocks = 0;\n  const bpp = pvrDatas.bpp,\n    numSurfs = pvrDatas.numSurfaces;\n  if (bpp === 2) {\n    blockWidth = 8;\n    blockHeight = 4;\n  } else {\n    blockWidth = 4;\n    blockHeight = 4;\n  }\n  blockSize = blockWidth * blockHeight * bpp / 8;\n  pvr.mipmaps.length = pvrDatas.numMipmaps * numSurfs;\n  let mipLevel = 0;\n  while (mipLevel < pvrDatas.numMipmaps) {\n    const sWidth = pvrDatas.width >> mipLevel,\n      sHeight = pvrDatas.height >> mipLevel;\n    widthBlocks = sWidth / blockWidth;\n    heightBlocks = sHeight / blockHeight;\n\n    // Clamp to minimum number of blocks\n    if (widthBlocks < 2) widthBlocks = 2;\n    if (heightBlocks < 2) heightBlocks = 2;\n    dataSize = widthBlocks * heightBlocks * blockSize;\n    for (let surfIndex = 0; surfIndex < numSurfs; surfIndex++) {\n      const byteArray = new Uint8Array(buffer, dataOffset, dataSize);\n      const mipmap = {\n        data: byteArray,\n        width: sWidth,\n        height: sHeight\n      };\n      pvr.mipmaps[surfIndex * pvrDatas.numMipmaps + mipLevel] = mipmap;\n      dataOffset += dataSize;\n    }\n    mipLevel++;\n  }\n  return pvr;\n}\nexport { PVRLoader };","map":{"version":3,"names":["CompressedTextureLoader","RGBA_PVRTC_2BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGB_PVRTC_2BPPV1_Format","RGB_PVRTC_4BPPV1_Format","PVRLoader","constructor","manager","parse","buffer","loadMipmaps","headerLengthInt","header","Uint32Array","pvrDatas","_parseV3","_parseV2","console","error","bpp","format","metaLen","pixelFormat","height","width","numFaces","numMipmaps","dataPtr","numSurfaces","isCubemap","_extract","headerLength","flags","bitmaskAlpha","numSurfs","TYPE_MASK","PVRTC_2","PVRTC_4","formatFlags","_hasAlpha","pvr","mipmaps","mipmapCount","dataOffset","dataSize","blockSize","blockWidth","blockHeight","widthBlocks","heightBlocks","length","mipLevel","sWidth","sHeight","surfIndex","byteArray","Uint8Array","mipmap","data"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/loaders/PVRLoader.js"],"sourcesContent":["import {\n\tCompressedTextureLoader,\n\tRGBA_PVRTC_2BPPV1_Format,\n\tRGBA_PVRTC_4BPPV1_Format,\n\tRGB_PVRTC_2BPPV1_Format,\n\tRGB_PVRTC_4BPPV1_Format\n} from 'three';\n\n/**\n * A loader for the PVRTC texture compression format.\n *\n * ```js\n * const loader = new PVRLoader();\n *\n * const map = loader.load( 'textures/compressed/disturb_4bpp_rgb.pvr' );\n * map.colorSpace = THREE.SRGBColorSpace; // only for color textures\n * ```\n *\n * @augments CompressedTextureLoader\n * @three_import import { PVRLoader } from 'three/addons/loaders/PVRLoader.js';\n */\nclass PVRLoader extends CompressedTextureLoader {\n\n\t/**\n\t * Constructs a new PVR loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\t/**\n\t * Parses the given PVRTC texture data.\n\t *\n\t * @param {ArrayBuffer} buffer - The raw texture data.\n\t * @param {boolean} loadMipmaps - Whether to load mipmaps or not. This option is not yet supported by the loader.\n\t * @return {CompressedTextureLoader~TexData} An object representing the parsed texture data.\n\t */\n\tparse( buffer, loadMipmaps ) {\n\n\t\tconst headerLengthInt = 13;\n\t\tconst header = new Uint32Array( buffer, 0, headerLengthInt );\n\n\t\tconst pvrDatas = {\n\t\t\tbuffer: buffer,\n\t\t\theader: header,\n\t\t\tloadMipmaps: loadMipmaps\n\t\t};\n\n\t\tif ( header[ 0 ] === 0x03525650 ) {\n\n\t\t\t// PVR v3\n\n\t\t\treturn _parseV3( pvrDatas );\n\n\t\t} else if ( header[ 11 ] === 0x21525650 ) {\n\n\t\t\t// PVR v2\n\n\t\t\treturn _parseV2( pvrDatas );\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.PVRLoader: Unknown PVR format.' );\n\n\t\t}\n\n\t}\n\n}\n\nfunction _parseV3( pvrDatas ) {\n\n\tconst header = pvrDatas.header;\n\tlet bpp, format;\n\n\n\tconst metaLen = header[ 12 ],\n\t\tpixelFormat = header[ 2 ],\n\t\theight = header[ 6 ],\n\t\twidth = header[ 7 ],\n\t\t// numSurfs = header[ 9 ],\n\t\tnumFaces = header[ 10 ],\n\t\tnumMipmaps = header[ 11 ];\n\n\tswitch ( pixelFormat ) {\n\n\t\tcase 0 : // PVRTC 2bpp RGB\n\t\t\tbpp = 2;\n\t\t\tformat = RGB_PVRTC_2BPPV1_Format;\n\t\t\tbreak;\n\n\t\tcase 1 : // PVRTC 2bpp RGBA\n\t\t\tbpp = 2;\n\t\t\tformat = RGBA_PVRTC_2BPPV1_Format;\n\t\t\tbreak;\n\n\t\tcase 2 : // PVRTC 4bpp RGB\n\t\t\tbpp = 4;\n\t\t\tformat = RGB_PVRTC_4BPPV1_Format;\n\t\t\tbreak;\n\n\t\tcase 3 : // PVRTC 4bpp RGBA\n\t\t\tbpp = 4;\n\t\t\tformat = RGBA_PVRTC_4BPPV1_Format;\n\t\t\tbreak;\n\n\t\tdefault :\n\t\t\tconsole.error( 'THREE.PVRLoader: Unsupported PVR format:', pixelFormat );\n\n\t}\n\n\tpvrDatas.dataPtr = 52 + metaLen;\n\tpvrDatas.bpp = bpp;\n\tpvrDatas.format = format;\n\tpvrDatas.width = width;\n\tpvrDatas.height = height;\n\tpvrDatas.numSurfaces = numFaces;\n\tpvrDatas.numMipmaps = numMipmaps;\n\tpvrDatas.isCubemap \t= ( numFaces === 6 );\n\n\treturn _extract( pvrDatas );\n\n}\n\nfunction _parseV2( pvrDatas ) {\n\n\tconst header = pvrDatas.header;\n\n\tconst headerLength = header[ 0 ],\n\t\theight = header[ 1 ],\n\t\twidth = header[ 2 ],\n\t\tnumMipmaps = header[ 3 ],\n\t\tflags = header[ 4 ],\n\t\t// dataLength = header[ 5 ],\n\t\t// bpp =  header[ 6 ],\n\t\t// bitmaskRed = header[ 7 ],\n\t\t// bitmaskGreen = header[ 8 ],\n\t\t// bitmaskBlue = header[ 9 ],\n\t\tbitmaskAlpha = header[ 10 ],\n\t\t// pvrTag = header[ 11 ],\n\t\tnumSurfs = header[ 12 ];\n\n\n\tconst TYPE_MASK = 0xff;\n\tconst PVRTC_2 = 24,\n\t\tPVRTC_4 = 25;\n\n\tconst formatFlags = flags & TYPE_MASK;\n\n\tlet bpp, format;\n\tconst _hasAlpha = bitmaskAlpha > 0;\n\n\tif ( formatFlags === PVRTC_4 ) {\n\n\t\tformat = _hasAlpha ? RGBA_PVRTC_4BPPV1_Format : RGB_PVRTC_4BPPV1_Format;\n\t\tbpp = 4;\n\n\t} else if ( formatFlags === PVRTC_2 ) {\n\n\t\tformat = _hasAlpha ? RGBA_PVRTC_2BPPV1_Format : RGB_PVRTC_2BPPV1_Format;\n\t\tbpp = 2;\n\n\t} else {\n\n\t\tconsole.error( 'THREE.PVRLoader: Unknown PVR format:', formatFlags );\n\n\t}\n\n\tpvrDatas.dataPtr = headerLength;\n\tpvrDatas.bpp = bpp;\n\tpvrDatas.format = format;\n\tpvrDatas.width = width;\n\tpvrDatas.height = height;\n\tpvrDatas.numSurfaces = numSurfs;\n\tpvrDatas.numMipmaps = numMipmaps + 1;\n\n\t// guess cubemap type seems tricky in v2\n\t// it's just a pvr containing 6 surface (no explicit cubemap type)\n\tpvrDatas.isCubemap \t= ( numSurfs === 6 );\n\n\treturn _extract( pvrDatas );\n\n}\n\n\nfunction _extract( pvrDatas ) {\n\n\tconst pvr = {\n\t\tmipmaps: [],\n\t\twidth: pvrDatas.width,\n\t\theight: pvrDatas.height,\n\t\tformat: pvrDatas.format,\n\t\tmipmapCount: pvrDatas.numMipmaps,\n\t\tisCubemap: pvrDatas.isCubemap\n\t};\n\n\tconst buffer = pvrDatas.buffer;\n\n\tlet dataOffset = pvrDatas.dataPtr,\n\t\tdataSize = 0,\n\t\tblockSize = 0,\n\t\tblockWidth = 0,\n\t\tblockHeight = 0,\n\t\twidthBlocks = 0,\n\t\theightBlocks = 0;\n\n\tconst bpp = pvrDatas.bpp,\n\t\tnumSurfs = pvrDatas.numSurfaces;\n\n\tif ( bpp === 2 ) {\n\n\t\tblockWidth = 8;\n\t\tblockHeight = 4;\n\n\t} else {\n\n\t\tblockWidth = 4;\n\t\tblockHeight = 4;\n\n\t}\n\n\tblockSize = ( blockWidth * blockHeight ) * bpp / 8;\n\n\tpvr.mipmaps.length = pvrDatas.numMipmaps * numSurfs;\n\n\tlet mipLevel = 0;\n\n\twhile ( mipLevel < pvrDatas.numMipmaps ) {\n\n\t\tconst sWidth = pvrDatas.width >> mipLevel,\n\t\t\tsHeight = pvrDatas.height >> mipLevel;\n\n\t\twidthBlocks = sWidth / blockWidth;\n\t\theightBlocks = sHeight / blockHeight;\n\n\t\t// Clamp to minimum number of blocks\n\t\tif ( widthBlocks < 2 ) widthBlocks = 2;\n\t\tif ( heightBlocks < 2 ) heightBlocks = 2;\n\n\t\tdataSize = widthBlocks * heightBlocks * blockSize;\n\n\t\tfor ( let surfIndex = 0; surfIndex < numSurfs; surfIndex ++ ) {\n\n\t\t\tconst byteArray = new Uint8Array( buffer, dataOffset, dataSize );\n\n\t\t\tconst mipmap = {\n\t\t\t\tdata: byteArray,\n\t\t\t\twidth: sWidth,\n\t\t\t\theight: sHeight\n\t\t\t};\n\n\t\t\tpvr.mipmaps[ surfIndex * pvrDatas.numMipmaps + mipLevel ] = mipmap;\n\n\t\t\tdataOffset += dataSize;\n\n\t\t}\n\n\t\tmipLevel ++;\n\n\t}\n\n\treturn pvr;\n\n}\n\nexport { PVRLoader };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}