{"ast":null,"code":"import { DataTexture, FloatType, MathUtils, RedFormat, ShaderMaterial, UniformsUtils } from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { DigitalGlitch } from '../shaders/DigitalGlitch.js';\n\n/**\n * Pass for creating a glitch effect.\n *\n * ```js\n * const glitchPass = new GlitchPass();\n * composer.addPass( glitchPass );\n * ```\n *\n * @augments Pass\n * @three_import import { GlitchPass } from 'three/addons/postprocessing/GlitchPass.js';\n */\nclass GlitchPass extends Pass {\n  /**\n   * Constructs a new glitch pass.\n   *\n   * @param {number} [dt_size=64] - The size of the displacement texture\n   * for digital glitch squares.\n   */\n  constructor(dt_size = 64) {\n    super();\n\n    /**\n     * The pass uniforms.\n     *\n     * @type {Object}\n     */\n    this.uniforms = UniformsUtils.clone(DigitalGlitch.uniforms);\n\n    /**\n     * The pass material.\n     *\n     * @type {ShaderMaterial}\n     */\n    this.material = new ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: DigitalGlitch.vertexShader,\n      fragmentShader: DigitalGlitch.fragmentShader\n    });\n\n    /**\n     * Whether to noticeably increase the effect intensity or not.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.goWild = false;\n\n    // internals\n\n    this._heightMap = this._generateHeightmap(dt_size);\n    this.uniforms['tDisp'].value = this.heightMap;\n    this._fsQuad = new FullScreenQuad(this.material);\n    this._curF = 0;\n    this._randX = 0;\n    this._generateTrigger();\n  }\n\n  /**\n   * Performs the glitch pass.\n   *\n   * @param {WebGLRenderer} renderer - The renderer.\n   * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\n   * destination for the pass.\n   * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\n   * previous pass from this buffer.\n   * @param {number} deltaTime - The delta time in seconds.\n   * @param {boolean} maskActive - Whether masking is active or not.\n   */\n  render(renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */) {\n    this.uniforms['tDiffuse'].value = readBuffer.texture;\n    this.uniforms['seed'].value = Math.random(); // default seeding\n    this.uniforms['byp'].value = 0;\n    if (this._curF % this._randX == 0 || this.goWild == true) {\n      this.uniforms['amount'].value = Math.random() / 30;\n      this.uniforms['angle'].value = MathUtils.randFloat(-Math.PI, Math.PI);\n      this.uniforms['seed_x'].value = MathUtils.randFloat(-1, 1);\n      this.uniforms['seed_y'].value = MathUtils.randFloat(-1, 1);\n      this.uniforms['distortion_x'].value = MathUtils.randFloat(0, 1);\n      this.uniforms['distortion_y'].value = MathUtils.randFloat(0, 1);\n      this._curF = 0;\n      this._generateTrigger();\n    } else if (this._curF % this._randX < this._randX / 5) {\n      this.uniforms['amount'].value = Math.random() / 90;\n      this.uniforms['angle'].value = MathUtils.randFloat(-Math.PI, Math.PI);\n      this.uniforms['distortion_x'].value = MathUtils.randFloat(0, 1);\n      this.uniforms['distortion_y'].value = MathUtils.randFloat(0, 1);\n      this.uniforms['seed_x'].value = MathUtils.randFloat(-0.3, 0.3);\n      this.uniforms['seed_y'].value = MathUtils.randFloat(-0.3, 0.3);\n    } else if (this.goWild == false) {\n      this.uniforms['byp'].value = 1;\n    }\n    this._curF++;\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this._fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      this._fsQuad.render(renderer);\n    }\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever the pass is no longer used in your app.\n   */\n  dispose() {\n    this.material.dispose();\n    this.heightMap.dispose();\n    this._fsQuad.dispose();\n  }\n\n  // internals\n\n  _generateTrigger() {\n    this._randX = MathUtils.randInt(120, 240);\n  }\n  _generateHeightmap(dt_size) {\n    const data_arr = new Float32Array(dt_size * dt_size);\n    const length = dt_size * dt_size;\n    for (let i = 0; i < length; i++) {\n      const val = MathUtils.randFloat(0, 1);\n      data_arr[i] = val;\n    }\n    const texture = new DataTexture(data_arr, dt_size, dt_size, RedFormat, FloatType);\n    texture.needsUpdate = true;\n    return texture;\n  }\n}\nexport { GlitchPass };","map":{"version":3,"names":["DataTexture","FloatType","MathUtils","RedFormat","ShaderMaterial","UniformsUtils","Pass","FullScreenQuad","DigitalGlitch","GlitchPass","constructor","dt_size","uniforms","clone","material","vertexShader","fragmentShader","goWild","_heightMap","_generateHeightmap","value","heightMap","_fsQuad","_curF","_randX","_generateTrigger","render","renderer","writeBuffer","readBuffer","texture","Math","random","randFloat","PI","renderToScreen","setRenderTarget","clear","dispose","randInt","data_arr","Float32Array","length","i","val","needsUpdate"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/postprocessing/GlitchPass.js"],"sourcesContent":["import {\n\tDataTexture,\n\tFloatType,\n\tMathUtils,\n\tRedFormat,\n\tShaderMaterial,\n\tUniformsUtils\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { DigitalGlitch } from '../shaders/DigitalGlitch.js';\n\n/**\n * Pass for creating a glitch effect.\n *\n * ```js\n * const glitchPass = new GlitchPass();\n * composer.addPass( glitchPass );\n * ```\n *\n * @augments Pass\n * @three_import import { GlitchPass } from 'three/addons/postprocessing/GlitchPass.js';\n */\nclass GlitchPass extends Pass {\n\n\t/**\n\t * Constructs a new glitch pass.\n\t *\n\t * @param {number} [dt_size=64] - The size of the displacement texture\n\t * for digital glitch squares.\n\t */\n\tconstructor( dt_size = 64 ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The pass uniforms.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.uniforms = UniformsUtils.clone( DigitalGlitch.uniforms );\n\n\t\t/**\n\t\t * The pass material.\n\t\t *\n\t\t * @type {ShaderMaterial}\n\t\t */\n\t\tthis.material = new ShaderMaterial( {\n\t\t\tuniforms: this.uniforms,\n\t\t\tvertexShader: DigitalGlitch.vertexShader,\n\t\t\tfragmentShader: DigitalGlitch.fragmentShader\n\t\t} );\n\n\t\t/**\n\t\t * Whether to noticeably increase the effect intensity or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.goWild = false;\n\n\t\t// internals\n\n\t\tthis._heightMap = this._generateHeightmap( dt_size );\n\t\tthis.uniforms[ 'tDisp' ].value = this.heightMap;\n\n\t\tthis._fsQuad = new FullScreenQuad( this.material );\n\n\t\tthis._curF = 0;\n\t\tthis._randX = 0;\n\n\t\tthis._generateTrigger();\n\n\t}\n\n\t/**\n\t * Performs the glitch pass.\n\t *\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\n\t * destination for the pass.\n\t * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\n\t * previous pass from this buffer.\n\t * @param {number} deltaTime - The delta time in seconds.\n\t * @param {boolean} maskActive - Whether masking is active or not.\n\t */\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tthis.uniforms[ 'tDiffuse' ].value = readBuffer.texture;\n\t\tthis.uniforms[ 'seed' ].value = Math.random(); // default seeding\n\t\tthis.uniforms[ 'byp' ].value = 0;\n\n\t\tif ( this._curF % this._randX == 0 || this.goWild == true ) {\n\n\t\t\tthis.uniforms[ 'amount' ].value = Math.random() / 30;\n\t\t\tthis.uniforms[ 'angle' ].value = MathUtils.randFloat( - Math.PI, Math.PI );\n\t\t\tthis.uniforms[ 'seed_x' ].value = MathUtils.randFloat( - 1, 1 );\n\t\t\tthis.uniforms[ 'seed_y' ].value = MathUtils.randFloat( - 1, 1 );\n\t\t\tthis.uniforms[ 'distortion_x' ].value = MathUtils.randFloat( 0, 1 );\n\t\t\tthis.uniforms[ 'distortion_y' ].value = MathUtils.randFloat( 0, 1 );\n\t\t\tthis._curF = 0;\n\t\t\tthis._generateTrigger();\n\n\t\t} else if ( this._curF % this._randX < this._randX / 5 ) {\n\n\t\t\tthis.uniforms[ 'amount' ].value = Math.random() / 90;\n\t\t\tthis.uniforms[ 'angle' ].value = MathUtils.randFloat( - Math.PI, Math.PI );\n\t\t\tthis.uniforms[ 'distortion_x' ].value = MathUtils.randFloat( 0, 1 );\n\t\t\tthis.uniforms[ 'distortion_y' ].value = MathUtils.randFloat( 0, 1 );\n\t\t\tthis.uniforms[ 'seed_x' ].value = MathUtils.randFloat( - 0.3, 0.3 );\n\t\t\tthis.uniforms[ 'seed_y' ].value = MathUtils.randFloat( - 0.3, 0.3 );\n\n\t\t} else if ( this.goWild == false ) {\n\n\t\t\tthis.uniforms[ 'byp' ].value = 1;\n\n\t\t}\n\n\t\tthis._curF ++;\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis._fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\tif ( this.clear ) renderer.clear();\n\t\t\tthis._fsQuad.render( renderer );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever the pass is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.material.dispose();\n\n\t\tthis.heightMap.dispose();\n\n\t\tthis._fsQuad.dispose();\n\n\t}\n\n\t// internals\n\n\t_generateTrigger() {\n\n\t\tthis._randX = MathUtils.randInt( 120, 240 );\n\n\t}\n\n\t_generateHeightmap( dt_size ) {\n\n\t\tconst data_arr = new Float32Array( dt_size * dt_size );\n\t\tconst length = dt_size * dt_size;\n\n\t\tfor ( let i = 0; i < length; i ++ ) {\n\n\t\t\tconst val = MathUtils.randFloat( 0, 1 );\n\t\t\tdata_arr[ i ] = val;\n\n\t\t}\n\n\t\tconst texture = new DataTexture( data_arr, dt_size, dt_size, RedFormat, FloatType );\n\t\ttexture.needsUpdate = true;\n\t\treturn texture;\n\n\t}\n\n}\n\nexport { GlitchPass };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}