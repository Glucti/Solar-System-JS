{"ast":null,"code":"import { BufferGeometry, BufferAttribute, LineBasicMaterial, Line, MathUtils } from 'three';\n\n/**\n * This helper displays the directional cone of a positional audio.\n *\n * `PositionalAudioHelper` must be added as a child of the positional audio.\n *\n * ```js\n * const positionalAudio = new THREE.PositionalAudio( listener );\n * positionalAudio.setDirectionalCone( 180, 230, 0.1 );\n * scene.add( positionalAudio );\n *\n * const helper = new PositionalAudioHelper( positionalAudio );\n * positionalAudio.add( helper );\n * ```\n *\n * @augments Line\n * @three_import import { PositionalAudioHelper } from 'three/addons/helpers/PositionalAudioHelper.js';\n */\nclass PositionalAudioHelper extends Line {\n  /**\n   * Constructs a new positional audio helper.\n   *\n   * @param {PositionalAudio} audio - The audio to visualize.\n   * @param {number} [range=1] - The range of the directional cone.\n   * @param {number} [divisionsInnerAngle=16] - The number of divisions of the inner part of the directional cone.\n   * @param {number} [divisionsOuterAngle=2] The number of divisions of the outer part of the directional cone.\n   */\n  constructor(audio, range = 1, divisionsInnerAngle = 16, divisionsOuterAngle = 2) {\n    const geometry = new BufferGeometry();\n    const divisions = divisionsInnerAngle + divisionsOuterAngle * 2;\n    const positions = new Float32Array((divisions * 3 + 3) * 3);\n    geometry.setAttribute('position', new BufferAttribute(positions, 3));\n    const materialInnerAngle = new LineBasicMaterial({\n      color: 0x00ff00\n    });\n    const materialOuterAngle = new LineBasicMaterial({\n      color: 0xffff00\n    });\n    super(geometry, [materialOuterAngle, materialInnerAngle]);\n\n    /**\n     * The audio to visualize.\n     *\n     * @type {PositionalAudio}\n     */\n    this.audio = audio;\n\n    /**\n     * The range of the directional cone.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.range = range;\n\n    /**\n     * The number of divisions of the inner part of the directional cone.\n     *\n     * @type {number}\n     * @default 16\n     */\n    this.divisionsInnerAngle = divisionsInnerAngle;\n\n    /**\n     * The number of divisions of the outer part of the directional cone.\n     *\n     * @type {number}\n     * @default 2\n     */\n    this.divisionsOuterAngle = divisionsOuterAngle;\n    this.type = 'PositionalAudioHelper';\n    this.update();\n  }\n\n  /**\n   * Updates the helper. This method must be called whenever the directional cone\n   * of the positional audio is changed.\n   */\n  update() {\n    const audio = this.audio;\n    const range = this.range;\n    const divisionsInnerAngle = this.divisionsInnerAngle;\n    const divisionsOuterAngle = this.divisionsOuterAngle;\n    const coneInnerAngle = MathUtils.degToRad(audio.panner.coneInnerAngle);\n    const coneOuterAngle = MathUtils.degToRad(audio.panner.coneOuterAngle);\n    const halfConeInnerAngle = coneInnerAngle / 2;\n    const halfConeOuterAngle = coneOuterAngle / 2;\n    let start = 0;\n    let count = 0;\n    let i;\n    let stride;\n    const geometry = this.geometry;\n    const positionAttribute = geometry.attributes.position;\n    geometry.clearGroups();\n\n    //\n\n    function generateSegment(from, to, divisions, materialIndex) {\n      const step = (to - from) / divisions;\n      positionAttribute.setXYZ(start, 0, 0, 0);\n      count++;\n      for (i = from; i < to; i += step) {\n        stride = start + count;\n        positionAttribute.setXYZ(stride, Math.sin(i) * range, 0, Math.cos(i) * range);\n        positionAttribute.setXYZ(stride + 1, Math.sin(Math.min(i + step, to)) * range, 0, Math.cos(Math.min(i + step, to)) * range);\n        positionAttribute.setXYZ(stride + 2, 0, 0, 0);\n        count += 3;\n      }\n      geometry.addGroup(start, count, materialIndex);\n      start += count;\n      count = 0;\n    }\n\n    //\n\n    generateSegment(-halfConeOuterAngle, -halfConeInnerAngle, divisionsOuterAngle, 0);\n    generateSegment(-halfConeInnerAngle, halfConeInnerAngle, divisionsInnerAngle, 1);\n    generateSegment(halfConeInnerAngle, halfConeOuterAngle, divisionsOuterAngle, 0);\n\n    //\n\n    positionAttribute.needsUpdate = true;\n    if (coneInnerAngle === coneOuterAngle) this.material[0].visible = false;\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever this instance is no longer used in your app.\n   */\n  dispose() {\n    this.geometry.dispose();\n    this.material[0].dispose();\n    this.material[1].dispose();\n  }\n}\nexport { PositionalAudioHelper };","map":{"version":3,"names":["BufferGeometry","BufferAttribute","LineBasicMaterial","Line","MathUtils","PositionalAudioHelper","constructor","audio","range","divisionsInnerAngle","divisionsOuterAngle","geometry","divisions","positions","Float32Array","setAttribute","materialInnerAngle","color","materialOuterAngle","type","update","coneInnerAngle","degToRad","panner","coneOuterAngle","halfConeInnerAngle","halfConeOuterAngle","start","count","i","stride","positionAttribute","attributes","position","clearGroups","generateSegment","from","to","materialIndex","step","setXYZ","Math","sin","cos","min","addGroup","needsUpdate","material","visible","dispose"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/helpers/PositionalAudioHelper.js"],"sourcesContent":["import {\n\tBufferGeometry,\n\tBufferAttribute,\n\tLineBasicMaterial,\n\tLine,\n\tMathUtils\n} from 'three';\n\n/**\n * This helper displays the directional cone of a positional audio.\n *\n * `PositionalAudioHelper` must be added as a child of the positional audio.\n *\n * ```js\n * const positionalAudio = new THREE.PositionalAudio( listener );\n * positionalAudio.setDirectionalCone( 180, 230, 0.1 );\n * scene.add( positionalAudio );\n *\n * const helper = new PositionalAudioHelper( positionalAudio );\n * positionalAudio.add( helper );\n * ```\n *\n * @augments Line\n * @three_import import { PositionalAudioHelper } from 'three/addons/helpers/PositionalAudioHelper.js';\n */\nclass PositionalAudioHelper extends Line {\n\n\t/**\n\t * Constructs a new positional audio helper.\n\t *\n\t * @param {PositionalAudio} audio - The audio to visualize.\n\t * @param {number} [range=1] - The range of the directional cone.\n\t * @param {number} [divisionsInnerAngle=16] - The number of divisions of the inner part of the directional cone.\n\t * @param {number} [divisionsOuterAngle=2] The number of divisions of the outer part of the directional cone.\n\t */\n\tconstructor( audio, range = 1, divisionsInnerAngle = 16, divisionsOuterAngle = 2 ) {\n\n\t\tconst geometry = new BufferGeometry();\n\t\tconst divisions = divisionsInnerAngle + divisionsOuterAngle * 2;\n\t\tconst positions = new Float32Array( ( divisions * 3 + 3 ) * 3 );\n\t\tgeometry.setAttribute( 'position', new BufferAttribute( positions, 3 ) );\n\n\t\tconst materialInnerAngle = new LineBasicMaterial( { color: 0x00ff00 } );\n\t\tconst materialOuterAngle = new LineBasicMaterial( { color: 0xffff00 } );\n\n\t\tsuper( geometry, [ materialOuterAngle, materialInnerAngle ] );\n\n\t\t/**\n\t\t * The audio to visualize.\n\t\t *\n\t\t * @type {PositionalAudio}\n\t\t */\n\t\tthis.audio = audio;\n\n\t\t/**\n\t\t * The range of the directional cone.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.range = range;\n\n\t\t/**\n\t\t * The number of divisions of the inner part of the directional cone.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 16\n\t\t */\n\t\tthis.divisionsInnerAngle = divisionsInnerAngle;\n\n\t\t/**\n\t\t * The number of divisions of the outer part of the directional cone.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 2\n\t\t */\n\t\tthis.divisionsOuterAngle = divisionsOuterAngle;\n\n\t\tthis.type = 'PositionalAudioHelper';\n\n\t\tthis.update();\n\n\t}\n\n\t/**\n\t * Updates the helper. This method must be called whenever the directional cone\n\t * of the positional audio is changed.\n\t */\n\tupdate() {\n\n\t\tconst audio = this.audio;\n\t\tconst range = this.range;\n\t\tconst divisionsInnerAngle = this.divisionsInnerAngle;\n\t\tconst divisionsOuterAngle = this.divisionsOuterAngle;\n\n\t\tconst coneInnerAngle = MathUtils.degToRad( audio.panner.coneInnerAngle );\n\t\tconst coneOuterAngle = MathUtils.degToRad( audio.panner.coneOuterAngle );\n\n\t\tconst halfConeInnerAngle = coneInnerAngle / 2;\n\t\tconst halfConeOuterAngle = coneOuterAngle / 2;\n\n\t\tlet start = 0;\n\t\tlet count = 0;\n\t\tlet i;\n\t\tlet stride;\n\n\t\tconst geometry = this.geometry;\n\t\tconst positionAttribute = geometry.attributes.position;\n\n\t\tgeometry.clearGroups();\n\n\t\t//\n\n\t\tfunction generateSegment( from, to, divisions, materialIndex ) {\n\n\t\t\tconst step = ( to - from ) / divisions;\n\n\t\t\tpositionAttribute.setXYZ( start, 0, 0, 0 );\n\t\t\tcount ++;\n\n\t\t\tfor ( i = from; i < to; i += step ) {\n\n\t\t\t\tstride = start + count;\n\n\t\t\t\tpositionAttribute.setXYZ( stride, Math.sin( i ) * range, 0, Math.cos( i ) * range );\n\t\t\t\tpositionAttribute.setXYZ( stride + 1, Math.sin( Math.min( i + step, to ) ) * range, 0, Math.cos( Math.min( i + step, to ) ) * range );\n\t\t\t\tpositionAttribute.setXYZ( stride + 2, 0, 0, 0 );\n\n\t\t\t\tcount += 3;\n\n\t\t\t}\n\n\t\t\tgeometry.addGroup( start, count, materialIndex );\n\n\t\t\tstart += count;\n\t\t\tcount = 0;\n\n\t\t}\n\n\t\t//\n\n\t\tgenerateSegment( - halfConeOuterAngle, - halfConeInnerAngle, divisionsOuterAngle, 0 );\n\t\tgenerateSegment( - halfConeInnerAngle, halfConeInnerAngle, divisionsInnerAngle, 1 );\n\t\tgenerateSegment( halfConeInnerAngle, halfConeOuterAngle, divisionsOuterAngle, 0 );\n\n\t\t//\n\n\t\tpositionAttribute.needsUpdate = true;\n\n\t\tif ( coneInnerAngle === coneOuterAngle ) this.material[ 0 ].visible = false;\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material[ 0 ].dispose();\n\t\tthis.material[ 1 ].dispose();\n\n\t}\n\n}\n\n\nexport { PositionalAudioHelper };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}