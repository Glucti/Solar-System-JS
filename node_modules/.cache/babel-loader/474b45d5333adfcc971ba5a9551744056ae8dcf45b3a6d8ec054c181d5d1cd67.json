{"ast":null,"code":"/**\n * potpack - by [@mourner](https://github.com/mourner)\n * \n * A tiny JavaScript function for packing 2D rectangles into a near-square container, \n * which is useful for generating CSS sprites and WebGL textures. Similar to \n * [shelf-pack](https://github.com/mapbox/shelf-pack), but static (you can't add items \n * once a layout is generated), and aims for maximal space utilization.\n *\n * A variation of algorithms used in [rectpack2D](https://github.com/TeamHypersomnia/rectpack2D)\n * and [bin-pack](https://github.com/bryanburgers/bin-pack), which are in turn based \n * on [this article by Blackpawn](http://blackpawn.com/texts/lightmaps/default.html).\n * \n * @license\n * ISC License\n * \n * Copyright (c) 2018, Mapbox\n * \n * Permission to use, copy, modify, and/or distribute this software for any purpose\n * with or without fee is hereby granted, provided that the above copyright notice\n * and this permission notice appear in all copies.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\n * FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\n * OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER\n * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF\n * THIS SOFTWARE.\n */\n\nfunction potpack(boxes) {\n  // calculate total box area and maximum box width\n  let area = 0;\n  let maxWidth = 0;\n  for (const box of boxes) {\n    area += box.w * box.h;\n    maxWidth = Math.max(maxWidth, box.w);\n  }\n\n  // sort the boxes for insertion by height, descending\n  boxes.sort((a, b) => b.h - a.h);\n\n  // aim for a squarish resulting container,\n  // slightly adjusted for sub-100% space utilization\n  const startWidth = Math.max(Math.ceil(Math.sqrt(area / 0.95)), maxWidth);\n\n  // start with a single empty space, unbounded at the bottom\n  const spaces = [{\n    x: 0,\n    y: 0,\n    w: startWidth,\n    h: Infinity\n  }];\n  let width = 0;\n  let height = 0;\n  for (const box of boxes) {\n    // look through spaces backwards so that we check smaller spaces first\n    for (let i = spaces.length - 1; i >= 0; i--) {\n      const space = spaces[i];\n\n      // look for empty spaces that can accommodate the current box\n      if (box.w > space.w || box.h > space.h) continue;\n\n      // found the space; add the box to its top-left corner\n      // |-------|-------|\n      // |  box  |       |\n      // |_______|       |\n      // |         space |\n      // |_______________|\n      box.x = space.x;\n      box.y = space.y;\n      height = Math.max(height, box.y + box.h);\n      width = Math.max(width, box.x + box.w);\n      if (box.w === space.w && box.h === space.h) {\n        // space matches the box exactly; remove it\n        const last = spaces.pop();\n        if (i < spaces.length) spaces[i] = last;\n      } else if (box.h === space.h) {\n        // space matches the box height; update it accordingly\n        // |-------|---------------|\n        // |  box  | updated space |\n        // |_______|_______________|\n        space.x += box.w;\n        space.w -= box.w;\n      } else if (box.w === space.w) {\n        // space matches the box width; update it accordingly\n        // |---------------|\n        // |      box      |\n        // |_______________|\n        // | updated space |\n        // |_______________|\n        space.y += box.h;\n        space.h -= box.h;\n      } else {\n        // otherwise the box splits the space into two spaces\n        // |-------|-----------|\n        // |  box  | new space |\n        // |_______|___________|\n        // | updated space     |\n        // |___________________|\n        spaces.push({\n          x: space.x + box.w,\n          y: space.y,\n          w: space.w - box.w,\n          h: box.h\n        });\n        space.y += box.h;\n        space.h -= box.h;\n      }\n      break;\n    }\n  }\n  return {\n    w: width,\n    // container width\n    h: height,\n    // container height\n    fill: area / (width * height) || 0 // space utilization\n  };\n}\nexport { potpack };","map":{"version":3,"names":["potpack","boxes","area","maxWidth","box","w","h","Math","max","sort","a","b","startWidth","ceil","sqrt","spaces","x","y","Infinity","width","height","i","length","space","last","pop","push","fill"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/libs/potpack.module.js"],"sourcesContent":["/**\n * potpack - by [@mourner](https://github.com/mourner)\n * \n * A tiny JavaScript function for packing 2D rectangles into a near-square container, \n * which is useful for generating CSS sprites and WebGL textures. Similar to \n * [shelf-pack](https://github.com/mapbox/shelf-pack), but static (you can't add items \n * once a layout is generated), and aims for maximal space utilization.\n *\n * A variation of algorithms used in [rectpack2D](https://github.com/TeamHypersomnia/rectpack2D)\n * and [bin-pack](https://github.com/bryanburgers/bin-pack), which are in turn based \n * on [this article by Blackpawn](http://blackpawn.com/texts/lightmaps/default.html).\n * \n * @license\n * ISC License\n * \n * Copyright (c) 2018, Mapbox\n * \n * Permission to use, copy, modify, and/or distribute this software for any purpose\n * with or without fee is hereby granted, provided that the above copyright notice\n * and this permission notice appear in all copies.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\n * FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\n * OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER\n * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF\n * THIS SOFTWARE.\n */\n\nfunction potpack(boxes) {\n\n\t// calculate total box area and maximum box width\n\tlet area = 0;\n\tlet maxWidth = 0;\n\t\n\tfor (const box of boxes) {\n\t\tarea += box.w * box.h;\n\t\tmaxWidth = Math.max(maxWidth, box.w);\n\t}\n\t\n\t// sort the boxes for insertion by height, descending\n\tboxes.sort((a, b) => b.h - a.h);\n\t\n\t// aim for a squarish resulting container,\n\t// slightly adjusted for sub-100% space utilization\n\tconst startWidth = Math.max(Math.ceil(Math.sqrt(area / 0.95)), maxWidth);\n\t\n\t// start with a single empty space, unbounded at the bottom\n\tconst spaces = [{x: 0, y: 0, w: startWidth, h: Infinity}];\n\t\n\tlet width = 0;\n\tlet height = 0;\n\t\n\tfor (const box of boxes) {\n\t\t// look through spaces backwards so that we check smaller spaces first\n\t\tfor (let i = spaces.length - 1; i >= 0; i--) {\n\t\t\tconst space = spaces[i];\n\t\t\t\n\t\t\t// look for empty spaces that can accommodate the current box\n\t\t\tif (box.w > space.w || box.h > space.h) continue;\n\t\t\t\n\t\t\t// found the space; add the box to its top-left corner\n\t\t\t// |-------|-------|\n\t\t\t// |  box  |       |\n\t\t\t// |_______|       |\n\t\t\t// |         space |\n\t\t\t// |_______________|\n\t\t\tbox.x = space.x;\n\t\t\tbox.y = space.y;\n\t\t\t\n\t\t\theight = Math.max(height, box.y + box.h);\n\t\t\twidth = Math.max(width, box.x + box.w);\n\t\t\t\n\t\t\tif (box.w === space.w && box.h === space.h) {\n\t\t\t\t// space matches the box exactly; remove it\n\t\t\t\tconst last = spaces.pop();\n\t\t\t\tif (i < spaces.length) spaces[i] = last;\n\t\t\t\n\t\t\t} else if (box.h === space.h) {\n\t\t\t\t// space matches the box height; update it accordingly\n\t\t\t\t// |-------|---------------|\n\t\t\t\t// |  box  | updated space |\n\t\t\t\t// |_______|_______________|\n\t\t\t\tspace.x += box.w;\n\t\t\t\tspace.w -= box.w;\n\t\t\t\n\t\t\t} else if (box.w === space.w) {\n\t\t\t\t// space matches the box width; update it accordingly\n\t\t\t\t// |---------------|\n\t\t\t\t// |      box      |\n\t\t\t\t// |_______________|\n\t\t\t\t// | updated space |\n\t\t\t\t// |_______________|\n\t\t\t\tspace.y += box.h;\n\t\t\t\tspace.h -= box.h;\n\t\t\t\n\t\t\t} else {\n\t\t\t\t// otherwise the box splits the space into two spaces\n\t\t\t\t// |-------|-----------|\n\t\t\t\t// |  box  | new space |\n\t\t\t\t// |_______|___________|\n\t\t\t\t// | updated space     |\n\t\t\t\t// |___________________|\n\t\t\t\tspaces.push({\n\t\t\t\t\tx: space.x + box.w,\n\t\t\t\t\ty: space.y,\n\t\t\t\t\tw: space.w - box.w,\n\t\t\t\t\th: box.h\n\t\t\t\t});\n\t\t\t\tspace.y += box.h;\n\t\t\t\tspace.h -= box.h;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn {\n\t\tw: width, // container width\n\t\th: height, // container height\n\t\tfill: (area / (width * height)) || 0 // space utilization\n\t};\n}\n\nexport { potpack };"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,OAAOA,CAACC,KAAK,EAAE;EAEvB;EACA,IAAIC,IAAI,GAAG,CAAC;EACZ,IAAIC,QAAQ,GAAG,CAAC;EAEhB,KAAK,MAAMC,GAAG,IAAIH,KAAK,EAAE;IACxBC,IAAI,IAAIE,GAAG,CAACC,CAAC,GAAGD,GAAG,CAACE,CAAC;IACrBH,QAAQ,GAAGI,IAAI,CAACC,GAAG,CAACL,QAAQ,EAAEC,GAAG,CAACC,CAAC,CAAC;EACrC;;EAEA;EACAJ,KAAK,CAACQ,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACL,CAAC,GAAGI,CAAC,CAACJ,CAAC,CAAC;;EAE/B;EACA;EACA,MAAMM,UAAU,GAAGL,IAAI,CAACC,GAAG,CAACD,IAAI,CAACM,IAAI,CAACN,IAAI,CAACO,IAAI,CAACZ,IAAI,GAAG,IAAI,CAAC,CAAC,EAAEC,QAAQ,CAAC;;EAExE;EACA,MAAMY,MAAM,GAAG,CAAC;IAACC,CAAC,EAAE,CAAC;IAAEC,CAAC,EAAE,CAAC;IAAEZ,CAAC,EAAEO,UAAU;IAAEN,CAAC,EAAEY;EAAQ,CAAC,CAAC;EAEzD,IAAIC,KAAK,GAAG,CAAC;EACb,IAAIC,MAAM,GAAG,CAAC;EAEd,KAAK,MAAMhB,GAAG,IAAIH,KAAK,EAAE;IACxB;IACA,KAAK,IAAIoB,CAAC,GAAGN,MAAM,CAACO,MAAM,GAAG,CAAC,EAAED,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC5C,MAAME,KAAK,GAAGR,MAAM,CAACM,CAAC,CAAC;;MAEvB;MACA,IAAIjB,GAAG,CAACC,CAAC,GAAGkB,KAAK,CAAClB,CAAC,IAAID,GAAG,CAACE,CAAC,GAAGiB,KAAK,CAACjB,CAAC,EAAE;;MAExC;MACA;MACA;MACA;MACA;MACA;MACAF,GAAG,CAACY,CAAC,GAAGO,KAAK,CAACP,CAAC;MACfZ,GAAG,CAACa,CAAC,GAAGM,KAAK,CAACN,CAAC;MAEfG,MAAM,GAAGb,IAAI,CAACC,GAAG,CAACY,MAAM,EAAEhB,GAAG,CAACa,CAAC,GAAGb,GAAG,CAACE,CAAC,CAAC;MACxCa,KAAK,GAAGZ,IAAI,CAACC,GAAG,CAACW,KAAK,EAAEf,GAAG,CAACY,CAAC,GAAGZ,GAAG,CAACC,CAAC,CAAC;MAEtC,IAAID,GAAG,CAACC,CAAC,KAAKkB,KAAK,CAAClB,CAAC,IAAID,GAAG,CAACE,CAAC,KAAKiB,KAAK,CAACjB,CAAC,EAAE;QAC3C;QACA,MAAMkB,IAAI,GAAGT,MAAM,CAACU,GAAG,CAAC,CAAC;QACzB,IAAIJ,CAAC,GAAGN,MAAM,CAACO,MAAM,EAAEP,MAAM,CAACM,CAAC,CAAC,GAAGG,IAAI;MAExC,CAAC,MAAM,IAAIpB,GAAG,CAACE,CAAC,KAAKiB,KAAK,CAACjB,CAAC,EAAE;QAC7B;QACA;QACA;QACA;QACAiB,KAAK,CAACP,CAAC,IAAIZ,GAAG,CAACC,CAAC;QAChBkB,KAAK,CAAClB,CAAC,IAAID,GAAG,CAACC,CAAC;MAEjB,CAAC,MAAM,IAAID,GAAG,CAACC,CAAC,KAAKkB,KAAK,CAAClB,CAAC,EAAE;QAC7B;QACA;QACA;QACA;QACA;QACA;QACAkB,KAAK,CAACN,CAAC,IAAIb,GAAG,CAACE,CAAC;QAChBiB,KAAK,CAACjB,CAAC,IAAIF,GAAG,CAACE,CAAC;MAEjB,CAAC,MAAM;QACN;QACA;QACA;QACA;QACA;QACA;QACAS,MAAM,CAACW,IAAI,CAAC;UACXV,CAAC,EAAEO,KAAK,CAACP,CAAC,GAAGZ,GAAG,CAACC,CAAC;UAClBY,CAAC,EAAEM,KAAK,CAACN,CAAC;UACVZ,CAAC,EAAEkB,KAAK,CAAClB,CAAC,GAAGD,GAAG,CAACC,CAAC;UAClBC,CAAC,EAAEF,GAAG,CAACE;QACR,CAAC,CAAC;QACFiB,KAAK,CAACN,CAAC,IAAIb,GAAG,CAACE,CAAC;QAChBiB,KAAK,CAACjB,CAAC,IAAIF,GAAG,CAACE,CAAC;MACjB;MACA;IACD;EACD;EAEA,OAAO;IACND,CAAC,EAAEc,KAAK;IAAE;IACVb,CAAC,EAAEc,MAAM;IAAE;IACXO,IAAI,EAAGzB,IAAI,IAAIiB,KAAK,GAAGC,MAAM,CAAC,IAAK,CAAC,CAAC;EACtC,CAAC;AACF;AAEA,SAASpB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}