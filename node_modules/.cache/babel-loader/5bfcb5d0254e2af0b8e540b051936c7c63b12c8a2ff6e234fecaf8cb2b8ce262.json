{"ast":null,"code":"/**\n * A utility class for creating a button that allows to initiate\n * immersive VR sessions based on WebXR. The button can be created\n * with a factory method and then appended ot the website's DOM.\n *\n * ```js\n * document.body.appendChild( VRButton.createButton( renderer ) );\n * ```\n *\n * @hideconstructor\n * @three_import import { VRButton } from 'three/addons/webxr/VRButton.js';\n */\nclass VRButton {\n  /**\n   * Constructs a new VR button.\n   *\n   * @param {WebGLRenderer|WebGPURenderer} renderer - The renderer.\n   * @param {XRSessionInit} [sessionInit] - The a configuration object for the AR session.\n   * @return {HTMLElement} The button or an error message if `immersive-ar` isn't supported.\n   */\n  static createButton(renderer, sessionInit = {}) {\n    const button = document.createElement('button');\n    function showEnterVR(/*device*/\n    ) {\n      let currentSession = null;\n      async function onSessionStarted(session) {\n        session.addEventListener('end', onSessionEnded);\n        await renderer.xr.setSession(session);\n        button.textContent = 'EXIT VR';\n        currentSession = session;\n      }\n      function onSessionEnded(/*event*/\n      ) {\n        currentSession.removeEventListener('end', onSessionEnded);\n        button.textContent = 'ENTER VR';\n        currentSession = null;\n      }\n\n      //\n\n      button.style.display = '';\n      button.style.cursor = 'pointer';\n      button.style.left = 'calc(50% - 50px)';\n      button.style.width = '100px';\n      button.textContent = 'ENTER VR';\n\n      // WebXR's requestReferenceSpace only works if the corresponding feature\n      // was requested at session creation time. For simplicity, just ask for\n      // the interesting ones as optional features, but be aware that the\n      // requestReferenceSpace call will fail if it turns out to be unavailable.\n      // ('local' is always available for immersive sessions and doesn't need to\n      // be requested separately.)\n\n      const sessionOptions = {\n        ...sessionInit,\n        optionalFeatures: ['local-floor', 'bounded-floor', 'layers', ...(sessionInit.optionalFeatures || [])]\n      };\n      button.onmouseenter = function () {\n        button.style.opacity = '1.0';\n      };\n      button.onmouseleave = function () {\n        button.style.opacity = '0.5';\n      };\n      button.onclick = function () {\n        if (currentSession === null) {\n          navigator.xr.requestSession('immersive-vr', sessionOptions).then(onSessionStarted);\n        } else {\n          currentSession.end();\n          if (navigator.xr.offerSession !== undefined) {\n            navigator.xr.offerSession('immersive-vr', sessionOptions).then(onSessionStarted).catch(err => {\n              console.warn(err);\n            });\n          }\n        }\n      };\n      if (navigator.xr.offerSession !== undefined) {\n        navigator.xr.offerSession('immersive-vr', sessionOptions).then(onSessionStarted).catch(err => {\n          console.warn(err);\n        });\n      }\n    }\n    function disableButton() {\n      button.style.display = '';\n      button.style.cursor = 'auto';\n      button.style.left = 'calc(50% - 75px)';\n      button.style.width = '150px';\n      button.onmouseenter = null;\n      button.onmouseleave = null;\n      button.onclick = null;\n    }\n    function showWebXRNotFound() {\n      disableButton();\n      button.textContent = 'VR NOT SUPPORTED';\n    }\n    function showVRNotAllowed(exception) {\n      disableButton();\n      console.warn('Exception when trying to call xr.isSessionSupported', exception);\n      button.textContent = 'VR NOT ALLOWED';\n    }\n    function stylizeElement(element) {\n      element.style.position = 'absolute';\n      element.style.bottom = '20px';\n      element.style.padding = '12px 6px';\n      element.style.border = '1px solid #fff';\n      element.style.borderRadius = '4px';\n      element.style.background = 'rgba(0,0,0,0.1)';\n      element.style.color = '#fff';\n      element.style.font = 'normal 13px sans-serif';\n      element.style.textAlign = 'center';\n      element.style.opacity = '0.5';\n      element.style.outline = 'none';\n      element.style.zIndex = '999';\n    }\n    if ('xr' in navigator) {\n      button.id = 'VRButton';\n      button.style.display = 'none';\n      stylizeElement(button);\n      navigator.xr.isSessionSupported('immersive-vr').then(function (supported) {\n        supported ? showEnterVR() : showWebXRNotFound();\n        if (supported && VRButton.xrSessionIsGranted) {\n          button.click();\n        }\n      }).catch(showVRNotAllowed);\n      return button;\n    } else {\n      const message = document.createElement('a');\n      if (window.isSecureContext === false) {\n        message.href = document.location.href.replace(/^http:/, 'https:');\n        message.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\n      } else {\n        message.href = 'https://immersiveweb.dev/';\n        message.innerHTML = 'WEBXR NOT AVAILABLE';\n      }\n      message.style.left = 'calc(50% - 90px)';\n      message.style.width = '180px';\n      message.style.textDecoration = 'none';\n      stylizeElement(message);\n      return message;\n    }\n  }\n\n  /**\n   * Registers a `sessiongranted` event listener. When a session is granted, the {@link VRButton#xrSessionIsGranted}\n   * flag will evaluate to `true`. This method is automatically called by the module itself so there\n   * should be no need to use it on app level.\n   */\n  static registerSessionGrantedListener() {\n    if (typeof navigator !== 'undefined' && 'xr' in navigator) {\n      // WebXRViewer (based on Firefox) has a bug where addEventListener\n      // throws a silent exception and aborts execution entirely.\n      if (/WebXRViewer\\//i.test(navigator.userAgent)) return;\n      navigator.xr.addEventListener('sessiongranted', () => {\n        VRButton.xrSessionIsGranted = true;\n      });\n    }\n  }\n}\n\n/**\n * Whether a XR session has been granted or not.\n *\n * @static\n * @type {boolean}\n * @default false\n */\nVRButton.xrSessionIsGranted = false;\nVRButton.registerSessionGrantedListener();\nexport { VRButton };","map":{"version":3,"names":["VRButton","createButton","renderer","sessionInit","button","document","createElement","showEnterVR","currentSession","onSessionStarted","session","addEventListener","onSessionEnded","xr","setSession","textContent","removeEventListener","style","display","cursor","left","width","sessionOptions","optionalFeatures","onmouseenter","opacity","onmouseleave","onclick","navigator","requestSession","then","end","offerSession","undefined","catch","err","console","warn","disableButton","showWebXRNotFound","showVRNotAllowed","exception","stylizeElement","element","position","bottom","padding","border","borderRadius","background","color","font","textAlign","outline","zIndex","id","isSessionSupported","supported","xrSessionIsGranted","click","message","window","isSecureContext","href","location","replace","innerHTML","textDecoration","registerSessionGrantedListener","test","userAgent"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/webxr/VRButton.js"],"sourcesContent":["/**\n * A utility class for creating a button that allows to initiate\n * immersive VR sessions based on WebXR. The button can be created\n * with a factory method and then appended ot the website's DOM.\n *\n * ```js\n * document.body.appendChild( VRButton.createButton( renderer ) );\n * ```\n *\n * @hideconstructor\n * @three_import import { VRButton } from 'three/addons/webxr/VRButton.js';\n */\nclass VRButton {\n\n\t/**\n\t * Constructs a new VR button.\n\t *\n\t * @param {WebGLRenderer|WebGPURenderer} renderer - The renderer.\n\t * @param {XRSessionInit} [sessionInit] - The a configuration object for the AR session.\n\t * @return {HTMLElement} The button or an error message if `immersive-ar` isn't supported.\n\t */\n\tstatic createButton( renderer, sessionInit = {} ) {\n\n\t\tconst button = document.createElement( 'button' );\n\n\t\tfunction showEnterVR( /*device*/ ) {\n\n\t\t\tlet currentSession = null;\n\n\t\t\tasync function onSessionStarted( session ) {\n\n\t\t\t\tsession.addEventListener( 'end', onSessionEnded );\n\n\t\t\t\tawait renderer.xr.setSession( session );\n\t\t\t\tbutton.textContent = 'EXIT VR';\n\n\t\t\t\tcurrentSession = session;\n\n\t\t\t}\n\n\t\t\tfunction onSessionEnded( /*event*/ ) {\n\n\t\t\t\tcurrentSession.removeEventListener( 'end', onSessionEnded );\n\n\t\t\t\tbutton.textContent = 'ENTER VR';\n\n\t\t\t\tcurrentSession = null;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tbutton.style.display = '';\n\n\t\t\tbutton.style.cursor = 'pointer';\n\t\t\tbutton.style.left = 'calc(50% - 50px)';\n\t\t\tbutton.style.width = '100px';\n\n\t\t\tbutton.textContent = 'ENTER VR';\n\n\t\t\t// WebXR's requestReferenceSpace only works if the corresponding feature\n\t\t\t// was requested at session creation time. For simplicity, just ask for\n\t\t\t// the interesting ones as optional features, but be aware that the\n\t\t\t// requestReferenceSpace call will fail if it turns out to be unavailable.\n\t\t\t// ('local' is always available for immersive sessions and doesn't need to\n\t\t\t// be requested separately.)\n\n\t\t\tconst sessionOptions = {\n\t\t\t\t...sessionInit,\n\t\t\t\toptionalFeatures: [\n\t\t\t\t\t'local-floor',\n\t\t\t\t\t'bounded-floor',\n\t\t\t\t\t'layers',\n\t\t\t\t\t...( sessionInit.optionalFeatures || [] )\n\t\t\t\t],\n\t\t\t};\n\n\t\t\tbutton.onmouseenter = function () {\n\n\t\t\t\tbutton.style.opacity = '1.0';\n\n\t\t\t};\n\n\t\t\tbutton.onmouseleave = function () {\n\n\t\t\t\tbutton.style.opacity = '0.5';\n\n\t\t\t};\n\n\t\t\tbutton.onclick = function () {\n\n\t\t\t\tif ( currentSession === null ) {\n\n\t\t\t\t\tnavigator.xr.requestSession( 'immersive-vr', sessionOptions ).then( onSessionStarted );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcurrentSession.end();\n\n\t\t\t\t\tif ( navigator.xr.offerSession !== undefined ) {\n\n\t\t\t\t\t\tnavigator.xr.offerSession( 'immersive-vr', sessionOptions )\n\t\t\t\t\t\t\t.then( onSessionStarted )\n\t\t\t\t\t\t\t.catch( ( err ) => {\n\n\t\t\t\t\t\t\t\tconsole.warn( err );\n\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t\tif ( navigator.xr.offerSession !== undefined ) {\n\n\t\t\t\tnavigator.xr.offerSession( 'immersive-vr', sessionOptions )\n\t\t\t\t\t.then( onSessionStarted )\n\t\t\t\t\t.catch( ( err ) => {\n\n\t\t\t\t\t\tconsole.warn( err );\n\n\t\t\t\t\t} );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction disableButton() {\n\n\t\t\tbutton.style.display = '';\n\n\t\t\tbutton.style.cursor = 'auto';\n\t\t\tbutton.style.left = 'calc(50% - 75px)';\n\t\t\tbutton.style.width = '150px';\n\n\t\t\tbutton.onmouseenter = null;\n\t\t\tbutton.onmouseleave = null;\n\n\t\t\tbutton.onclick = null;\n\n\t\t}\n\n\t\tfunction showWebXRNotFound() {\n\n\t\t\tdisableButton();\n\n\t\t\tbutton.textContent = 'VR NOT SUPPORTED';\n\n\t\t}\n\n\t\tfunction showVRNotAllowed( exception ) {\n\n\t\t\tdisableButton();\n\n\t\t\tconsole.warn( 'Exception when trying to call xr.isSessionSupported', exception );\n\n\t\t\tbutton.textContent = 'VR NOT ALLOWED';\n\n\t\t}\n\n\t\tfunction stylizeElement( element ) {\n\n\t\t\telement.style.position = 'absolute';\n\t\t\telement.style.bottom = '20px';\n\t\t\telement.style.padding = '12px 6px';\n\t\t\telement.style.border = '1px solid #fff';\n\t\t\telement.style.borderRadius = '4px';\n\t\t\telement.style.background = 'rgba(0,0,0,0.1)';\n\t\t\telement.style.color = '#fff';\n\t\t\telement.style.font = 'normal 13px sans-serif';\n\t\t\telement.style.textAlign = 'center';\n\t\t\telement.style.opacity = '0.5';\n\t\t\telement.style.outline = 'none';\n\t\t\telement.style.zIndex = '999';\n\n\t\t}\n\n\t\tif ( 'xr' in navigator ) {\n\n\t\t\tbutton.id = 'VRButton';\n\t\t\tbutton.style.display = 'none';\n\n\t\t\tstylizeElement( button );\n\n\t\t\tnavigator.xr.isSessionSupported( 'immersive-vr' ).then( function ( supported ) {\n\n\t\t\t\tsupported ? showEnterVR() : showWebXRNotFound();\n\n\t\t\t\tif ( supported && VRButton.xrSessionIsGranted ) {\n\n\t\t\t\t\tbutton.click();\n\n\t\t\t\t}\n\n\t\t\t} ).catch( showVRNotAllowed );\n\n\t\t\treturn button;\n\n\t\t} else {\n\n\t\t\tconst message = document.createElement( 'a' );\n\n\t\t\tif ( window.isSecureContext === false ) {\n\n\t\t\t\tmessage.href = document.location.href.replace( /^http:/, 'https:' );\n\t\t\t\tmessage.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\n\n\t\t\t} else {\n\n\t\t\t\tmessage.href = 'https://immersiveweb.dev/';\n\t\t\t\tmessage.innerHTML = 'WEBXR NOT AVAILABLE';\n\n\t\t\t}\n\n\t\t\tmessage.style.left = 'calc(50% - 90px)';\n\t\t\tmessage.style.width = '180px';\n\t\t\tmessage.style.textDecoration = 'none';\n\n\t\t\tstylizeElement( message );\n\n\t\t\treturn message;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Registers a `sessiongranted` event listener. When a session is granted, the {@link VRButton#xrSessionIsGranted}\n\t * flag will evaluate to `true`. This method is automatically called by the module itself so there\n\t * should be no need to use it on app level.\n\t */\n\tstatic registerSessionGrantedListener() {\n\n\t\tif ( typeof navigator !== 'undefined' && 'xr' in navigator ) {\n\n\t\t\t// WebXRViewer (based on Firefox) has a bug where addEventListener\n\t\t\t// throws a silent exception and aborts execution entirely.\n\t\t\tif ( /WebXRViewer\\//i.test( navigator.userAgent ) ) return;\n\n\t\t\tnavigator.xr.addEventListener( 'sessiongranted', () => {\n\n\t\t\t\tVRButton.xrSessionIsGranted = true;\n\n\t\t\t} );\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * Whether a XR session has been granted or not.\n *\n * @static\n * @type {boolean}\n * @default false\n */\nVRButton.xrSessionIsGranted = false;\nVRButton.registerSessionGrantedListener();\n\nexport { VRButton };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}