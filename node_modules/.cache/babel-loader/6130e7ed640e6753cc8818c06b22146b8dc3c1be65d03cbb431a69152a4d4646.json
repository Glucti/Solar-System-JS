{"ast":null,"code":"import { BufferGeometry, Float32BufferAttribute } from 'three';\nimport { ConvexHull } from '../math/ConvexHull.js';\n\n/**\n * This class can be used to generate a convex hull for a given array of 3D points.\n * The average time complexity for this task is considered to be O(nlog(n)).\n *\n * ```js\n * const geometry = new ConvexGeometry( points );\n * const material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n * const mesh = new THREE.Mesh( geometry, material );\n * scene.add( mesh );\n * ```\n *\n * @augments BufferGeometry\n * @three_import import { ConvexGeometry } from 'three/addons/geometries/ConvexGeometry.js';\n */\nclass ConvexGeometry extends BufferGeometry {\n  /**\n   * Constructs a new convex geometry.\n   *\n   * @param {Array<Vector3>} points - An array of points in 3D space which should be enclosed by the convex hull.\n   */\n  constructor(points = []) {\n    super();\n\n    // buffers\n\n    const vertices = [];\n    const normals = [];\n    const convexHull = new ConvexHull().setFromPoints(points);\n\n    // generate vertices and normals\n\n    const faces = convexHull.faces;\n    for (let i = 0; i < faces.length; i++) {\n      const face = faces[i];\n      let edge = face.edge;\n\n      // we move along a doubly-connected edge list to access all face points (see HalfEdge docs)\n\n      do {\n        const point = edge.head().point;\n        vertices.push(point.x, point.y, point.z);\n        normals.push(face.normal.x, face.normal.y, face.normal.z);\n        edge = edge.next;\n      } while (edge !== face.edge);\n    }\n\n    // build geometry\n\n    this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n  }\n}\nexport { ConvexGeometry };","map":{"version":3,"names":["BufferGeometry","Float32BufferAttribute","ConvexHull","ConvexGeometry","constructor","points","vertices","normals","convexHull","setFromPoints","faces","i","length","face","edge","point","head","push","x","y","z","normal","next","setAttribute"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/geometries/ConvexGeometry.js"],"sourcesContent":["import {\n\tBufferGeometry,\n\tFloat32BufferAttribute\n} from 'three';\nimport { ConvexHull } from '../math/ConvexHull.js';\n\n/**\n * This class can be used to generate a convex hull for a given array of 3D points.\n * The average time complexity for this task is considered to be O(nlog(n)).\n *\n * ```js\n * const geometry = new ConvexGeometry( points );\n * const material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n * const mesh = new THREE.Mesh( geometry, material );\n * scene.add( mesh );\n * ```\n *\n * @augments BufferGeometry\n * @three_import import { ConvexGeometry } from 'three/addons/geometries/ConvexGeometry.js';\n */\nclass ConvexGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new convex geometry.\n\t *\n\t * @param {Array<Vector3>} points - An array of points in 3D space which should be enclosed by the convex hull.\n\t */\n\tconstructor( points = [] ) {\n\n\t\tsuper();\n\n\t\t// buffers\n\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\n\t\tconst convexHull = new ConvexHull().setFromPoints( points );\n\n\t\t// generate vertices and normals\n\n\t\tconst faces = convexHull.faces;\n\n\t\tfor ( let i = 0; i < faces.length; i ++ ) {\n\n\t\t\tconst face = faces[ i ];\n\t\t\tlet edge = face.edge;\n\n\t\t\t// we move along a doubly-connected edge list to access all face points (see HalfEdge docs)\n\n\t\t\tdo {\n\n\t\t\t\tconst point = edge.head().point;\n\n\t\t\t\tvertices.push( point.x, point.y, point.z );\n\t\t\t\tnormals.push( face.normal.x, face.normal.y, face.normal.z );\n\n\t\t\t\tedge = edge.next;\n\n\t\t\t} while ( edge !== face.edge );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\n\t}\n\n}\n\nexport { ConvexGeometry };\n"],"mappings":"AAAA,SACCA,cAAc,EACdC,sBAAsB,QAChB,OAAO;AACd,SAASC,UAAU,QAAQ,uBAAuB;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,cAAc,SAASH,cAAc,CAAC;EAE3C;AACD;AACA;AACA;AACA;EACCI,WAAWA,CAAEC,MAAM,GAAG,EAAE,EAAG;IAE1B,KAAK,CAAC,CAAC;;IAEP;;IAEA,MAAMC,QAAQ,GAAG,EAAE;IACnB,MAAMC,OAAO,GAAG,EAAE;IAElB,MAAMC,UAAU,GAAG,IAAIN,UAAU,CAAC,CAAC,CAACO,aAAa,CAAEJ,MAAO,CAAC;;IAE3D;;IAEA,MAAMK,KAAK,GAAGF,UAAU,CAACE,KAAK;IAE9B,KAAM,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,KAAK,CAACE,MAAM,EAAED,CAAC,EAAG,EAAG;MAEzC,MAAME,IAAI,GAAGH,KAAK,CAAEC,CAAC,CAAE;MACvB,IAAIG,IAAI,GAAGD,IAAI,CAACC,IAAI;;MAEpB;;MAEA,GAAG;QAEF,MAAMC,KAAK,GAAGD,IAAI,CAACE,IAAI,CAAC,CAAC,CAACD,KAAK;QAE/BT,QAAQ,CAACW,IAAI,CAAEF,KAAK,CAACG,CAAC,EAAEH,KAAK,CAACI,CAAC,EAAEJ,KAAK,CAACK,CAAE,CAAC;QAC1Cb,OAAO,CAACU,IAAI,CAAEJ,IAAI,CAACQ,MAAM,CAACH,CAAC,EAAEL,IAAI,CAACQ,MAAM,CAACF,CAAC,EAAEN,IAAI,CAACQ,MAAM,CAACD,CAAE,CAAC;QAE3DN,IAAI,GAAGA,IAAI,CAACQ,IAAI;MAEjB,CAAC,QAASR,IAAI,KAAKD,IAAI,CAACC,IAAI;IAE7B;;IAEA;;IAEA,IAAI,CAACS,YAAY,CAAE,UAAU,EAAE,IAAItB,sBAAsB,CAAEK,QAAQ,EAAE,CAAE,CAAE,CAAC;IAC1E,IAAI,CAACiB,YAAY,CAAE,QAAQ,EAAE,IAAItB,sBAAsB,CAAEM,OAAO,EAAE,CAAE,CAAE,CAAC;EAExE;AAED;AAEA,SAASJ,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}