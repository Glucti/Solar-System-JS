{"ast":null,"code":"import { Clock, Vector3, Quaternion, Matrix4 } from 'three';\nconst RAPIER_PATH = 'https://cdn.skypack.dev/@dimforge/rapier3d-compat@0.12.0';\nconst frameRate = 60;\nconst _scale = new Vector3(1, 1, 1);\nconst ZERO = new Vector3();\nlet RAPIER = null;\nfunction getShape(geometry) {\n  const parameters = geometry.parameters;\n\n  // TODO change type to is*\n\n  if (geometry.type === 'BoxGeometry') {\n    const sx = parameters.width !== undefined ? parameters.width / 2 : 0.5;\n    const sy = parameters.height !== undefined ? parameters.height / 2 : 0.5;\n    const sz = parameters.depth !== undefined ? parameters.depth / 2 : 0.5;\n    return RAPIER.ColliderDesc.cuboid(sx, sy, sz);\n  } else if (geometry.type === 'SphereGeometry' || geometry.type === 'IcosahedronGeometry') {\n    const radius = parameters.radius !== undefined ? parameters.radius : 1;\n    return RAPIER.ColliderDesc.ball(radius);\n  } else if (geometry.type === 'CylinderGeometry') {\n    const radius = parameters.radiusBottom !== undefined ? parameters.radiusBottom : 0.5;\n    const length = parameters.height !== undefined ? parameters.height : 0.5;\n    return RAPIER.ColliderDesc.cylinder(length / 2, radius);\n  } else if (geometry.type === 'CapsuleGeometry') {\n    const radius = parameters.radius !== undefined ? parameters.radius : 0.5;\n    const length = parameters.height !== undefined ? parameters.height : 0.5;\n    return RAPIER.ColliderDesc.capsule(length / 2, radius);\n  } else if (geometry.type === 'BufferGeometry') {\n    const vertices = [];\n    const vertex = new Vector3();\n    const position = geometry.getAttribute('position');\n    for (let i = 0; i < position.count; i++) {\n      vertex.fromBufferAttribute(position, i);\n      vertices.push(vertex.x, vertex.y, vertex.z);\n    }\n\n    // if the buffer is non-indexed, generate an index buffer\n    const indices = geometry.getIndex() === null ? Uint32Array.from(Array(parseInt(vertices.length / 3)).keys()) : geometry.getIndex().array;\n    return RAPIER.ColliderDesc.trimesh(vertices, indices);\n  }\n  return null;\n}\n\n/**\n * @classdesc Can be used to include Rapier as a Physics engine into\n * `three.js` apps. The API can be initialized via:\n * ```js\n * const physics = await RapierPhysics();\n * ```\n * The component automatically imports Rapier from a CDN so make sure\n * to use the component with an active Internet connection.\n *\n * @name RapierPhysics\n * @class\n * @hideconstructor\n * @three_import import { RapierPhysics } from 'three/addons/physics/RapierPhysics.js';\n */\nasync function RapierPhysics() {\n  if (RAPIER === null) {\n    RAPIER = await import(`${RAPIER_PATH}`);\n    await RAPIER.init();\n  }\n\n  // Docs: https://rapier.rs/docs/api/javascript/JavaScript3D/\n\n  const gravity = new Vector3(0.0, -9.81, 0.0);\n  const world = new RAPIER.World(gravity);\n  const meshes = [];\n  const meshMap = new WeakMap();\n  const _vector = new Vector3();\n  const _quaternion = new Quaternion();\n  const _matrix = new Matrix4();\n  function addScene(scene) {\n    scene.traverse(function (child) {\n      if (child.isMesh) {\n        const physics = child.userData.physics;\n        if (physics) {\n          addMesh(child, physics.mass, physics.restitution);\n        }\n      }\n    });\n  }\n  function addMesh(mesh, mass = 0, restitution = 0) {\n    const shape = getShape(mesh.geometry);\n    if (shape === null) return;\n    shape.setMass(mass);\n    shape.setRestitution(restitution);\n    const body = mesh.isInstancedMesh ? createInstancedBody(mesh, mass, shape) : createBody(mesh.position, mesh.quaternion, mass, shape);\n    if (!mesh.userData.physics) mesh.userData.physics = {};\n    mesh.userData.physics.body = body;\n    if (mass > 0) {\n      meshes.push(mesh);\n      meshMap.set(mesh, body);\n    }\n  }\n  function createInstancedBody(mesh, mass, shape) {\n    const array = mesh.instanceMatrix.array;\n    const bodies = [];\n    for (let i = 0; i < mesh.count; i++) {\n      const position = _vector.fromArray(array, i * 16 + 12);\n      bodies.push(createBody(position, null, mass, shape));\n    }\n    return bodies;\n  }\n  function createBody(position, quaternion, mass, shape) {\n    const desc = mass > 0 ? RAPIER.RigidBodyDesc.dynamic() : RAPIER.RigidBodyDesc.fixed();\n    desc.setTranslation(...position);\n    if (quaternion !== null) desc.setRotation(quaternion);\n    const body = world.createRigidBody(desc);\n    world.createCollider(shape, body);\n    return body;\n  }\n  function setMeshPosition(mesh, position, index = 0) {\n    let body = meshMap.get(mesh);\n    if (mesh.isInstancedMesh) {\n      body = body[index];\n    }\n    body.setAngvel(ZERO);\n    body.setLinvel(ZERO);\n    body.setTranslation(position);\n  }\n  function setMeshVelocity(mesh, velocity, index = 0) {\n    let body = meshMap.get(mesh);\n    if (mesh.isInstancedMesh) {\n      body = body[index];\n    }\n    body.setLinvel(velocity);\n  }\n  function addHeightfield(mesh, width, depth, heights, scale) {\n    const shape = RAPIER.ColliderDesc.heightfield(width, depth, heights, scale);\n    const bodyDesc = RAPIER.RigidBodyDesc.fixed();\n    bodyDesc.setTranslation(mesh.position.x, mesh.position.y, mesh.position.z);\n    bodyDesc.setRotation(mesh.quaternion);\n    const body = world.createRigidBody(bodyDesc);\n    world.createCollider(shape, body);\n    if (!mesh.userData.physics) mesh.userData.physics = {};\n    mesh.userData.physics.body = body;\n    return body;\n  }\n\n  //\n\n  const clock = new Clock();\n  function step() {\n    world.timestep = clock.getDelta();\n    world.step();\n\n    //\n\n    for (let i = 0, l = meshes.length; i < l; i++) {\n      const mesh = meshes[i];\n      if (mesh.isInstancedMesh) {\n        const array = mesh.instanceMatrix.array;\n        const bodies = meshMap.get(mesh);\n        for (let j = 0; j < bodies.length; j++) {\n          const body = bodies[j];\n          const position = body.translation();\n          _quaternion.copy(body.rotation());\n          _matrix.compose(position, _quaternion, _scale).toArray(array, j * 16);\n        }\n        mesh.instanceMatrix.needsUpdate = true;\n        mesh.computeBoundingSphere();\n      } else {\n        const body = meshMap.get(mesh);\n        mesh.position.copy(body.translation());\n        mesh.quaternion.copy(body.rotation());\n      }\n    }\n  }\n\n  // animate\n\n  setInterval(step, 1000 / frameRate);\n  return {\n    RAPIER,\n    world,\n    /**\n     * Adds the given scene to this physics simulation. Only meshes with a\n     * `physics` object in their {@link Object3D#userData} field will be honored.\n     * The object can be used to store the mass and restitution of the mesh. E.g.:\n     * ```js\n     * box.userData.physics = { mass: 1, restitution: 0 };\n     * ```\n     *\n     * @method\n     * @name RapierPhysics#addScene\n     * @param {Object3D} scene The scene or any type of 3D object to add.\n     */\n    addScene: addScene,\n    /**\n     * Adds the given mesh to this physics simulation.\n     *\n     * @method\n     * @name RapierPhysics#addMesh\n     * @param {Mesh} mesh The mesh to add.\n     * @param {number} [mass=0] The mass in kg of the mesh.\n     * @param {number} [restitution=0] The restitution/friction of the mesh.\n     */\n    addMesh: addMesh,\n    /**\n     * Set the position of the given mesh which is part of the physics simulation. Calling this\n     * method will reset the current simulated velocity of the mesh.\n     *\n     * @method\n     * @name RapierPhysics#setMeshPosition\n     * @param {Mesh} mesh The mesh to update the position for.\n     * @param {Vector3} position - The new position.\n     * @param {number} [index=0] - If the mesh is instanced, the index represents the instanced ID.\n     */\n    setMeshPosition: setMeshPosition,\n    /**\n     * Set the velocity of the given mesh which is part of the physics simulation.\n     *\n     * @method\n     * @name RapierPhysics#setMeshVelocity\n     * @param {Mesh} mesh The mesh to update the velocity for.\n     * @param {Vector3} velocity - The new velocity.\n     * @param {number} [index=0] - If the mesh is instanced, the index represents the instanced ID.\n     */\n    setMeshVelocity: setMeshVelocity,\n    /**\n     * Adds a heightfield terrain to the physics simulation.\n     * \n     * @method\n     * @name RapierPhysics#addHeightfield\n     * @param {Mesh} mesh - The Three.js mesh representing the terrain.\n     * @param {number} width - The number of vertices along the width (x-axis) of the heightfield.\n     * @param {number} depth - The number of vertices along the depth (z-axis) of the heightfield.\n     * @param {Float32Array} heights - Array of height values for each vertex in the heightfield.\n     * @param {Object} scale - Scale factors for the heightfield dimensions.\n     * @param {number} scale.x - Scale factor for width.\n     * @param {number} scale.y - Scale factor for height.\n     * @param {number} scale.z - Scale factor for depth.\n     * @returns {RigidBody} The created Rapier rigid body for the heightfield.\n     */\n    addHeightfield: addHeightfield\n  };\n}\nexport { RapierPhysics };","map":{"version":3,"names":["Clock","Vector3","Quaternion","Matrix4","RAPIER_PATH","frameRate","_scale","ZERO","RAPIER","getShape","geometry","parameters","type","sx","width","undefined","sy","height","sz","depth","ColliderDesc","cuboid","radius","ball","radiusBottom","length","cylinder","capsule","vertices","vertex","position","getAttribute","i","count","fromBufferAttribute","push","x","y","z","indices","getIndex","Uint32Array","from","Array","parseInt","keys","array","trimesh","RapierPhysics","init","gravity","world","World","meshes","meshMap","WeakMap","_vector","_quaternion","_matrix","addScene","scene","traverse","child","isMesh","physics","userData","addMesh","mass","restitution","mesh","shape","setMass","setRestitution","body","isInstancedMesh","createInstancedBody","createBody","quaternion","set","instanceMatrix","bodies","fromArray","desc","RigidBodyDesc","dynamic","fixed","setTranslation","setRotation","createRigidBody","createCollider","setMeshPosition","index","get","setAngvel","setLinvel","setMeshVelocity","velocity","addHeightfield","heights","scale","heightfield","bodyDesc","clock","step","timestep","getDelta","l","j","translation","copy","rotation","compose","toArray","needsUpdate","computeBoundingSphere","setInterval"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/physics/RapierPhysics.js"],"sourcesContent":["import { Clock, Vector3, Quaternion, Matrix4 } from 'three';\n\nconst RAPIER_PATH = 'https://cdn.skypack.dev/@dimforge/rapier3d-compat@0.12.0';\n\nconst frameRate = 60;\n\nconst _scale = new Vector3( 1, 1, 1 );\nconst ZERO = new Vector3();\n\nlet RAPIER = null;\n\nfunction getShape( geometry ) {\n\n\tconst parameters = geometry.parameters;\n\n\t// TODO change type to is*\n\n\tif ( geometry.type === 'BoxGeometry' ) {\n\n\t\tconst sx = parameters.width !== undefined ? parameters.width / 2 : 0.5;\n\t\tconst sy = parameters.height !== undefined ? parameters.height / 2 : 0.5;\n\t\tconst sz = parameters.depth !== undefined ? parameters.depth / 2 : 0.5;\n\n\t\treturn RAPIER.ColliderDesc.cuboid( sx, sy, sz );\n\n\t} else if ( geometry.type === 'SphereGeometry' || geometry.type === 'IcosahedronGeometry' ) {\n\n\t\tconst radius = parameters.radius !== undefined ? parameters.radius : 1;\n\t\treturn RAPIER.ColliderDesc.ball( radius );\n\n\t} else if ( geometry.type === 'CylinderGeometry' ) {\n\n\t\tconst radius = parameters.radiusBottom !== undefined ? parameters.radiusBottom : 0.5;\n\t\tconst length = parameters.height !== undefined ? parameters.height : 0.5;\n\n\t\treturn RAPIER.ColliderDesc.cylinder( length / 2, radius );\n\n\t} else if ( geometry.type === 'CapsuleGeometry' ) {\n\n\t\tconst radius = parameters.radius !== undefined ? parameters.radius : 0.5;\n\t\tconst length = parameters.height !== undefined ? parameters.height : 0.5;\n\n\t\treturn RAPIER.ColliderDesc.capsule( length / 2, radius );\n\n\t} else if ( geometry.type === 'BufferGeometry' ) {\n\n\t\tconst vertices = [];\n\t\tconst vertex = new Vector3();\n\t\tconst position = geometry.getAttribute( 'position' );\n\n\t\tfor ( let i = 0; i < position.count; i ++ ) {\n\n\t\t\tvertex.fromBufferAttribute( position, i );\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t}\n\n\t\t// if the buffer is non-indexed, generate an index buffer\n\t\tconst indices = geometry.getIndex() === null\n\t\t\t? Uint32Array.from( Array( parseInt( vertices.length / 3 ) ).keys() )\n\t\t\t: geometry.getIndex().array;\n\n\t\treturn RAPIER.ColliderDesc.trimesh( vertices, indices );\n\n\t}\n\n\treturn null;\n\n}\n\n/**\n * @classdesc Can be used to include Rapier as a Physics engine into\n * `three.js` apps. The API can be initialized via:\n * ```js\n * const physics = await RapierPhysics();\n * ```\n * The component automatically imports Rapier from a CDN so make sure\n * to use the component with an active Internet connection.\n *\n * @name RapierPhysics\n * @class\n * @hideconstructor\n * @three_import import { RapierPhysics } from 'three/addons/physics/RapierPhysics.js';\n */\nasync function RapierPhysics() {\n\n\tif ( RAPIER === null ) {\n\n\t\tRAPIER = await import( `${RAPIER_PATH}` );\n\t\tawait RAPIER.init();\n\n\t}\n\n\t// Docs: https://rapier.rs/docs/api/javascript/JavaScript3D/\n\n\tconst gravity = new Vector3( 0.0, - 9.81, 0.0 );\n\tconst world = new RAPIER.World( gravity );\n\n\tconst meshes = [];\n\tconst meshMap = new WeakMap();\n\n\tconst _vector = new Vector3();\n\tconst _quaternion = new Quaternion();\n\tconst _matrix = new Matrix4();\n\n\tfunction addScene( scene ) {\n\n\t\tscene.traverse( function ( child ) {\n\n\t\t\tif ( child.isMesh ) {\n\n\t\t\t\tconst physics = child.userData.physics;\n\n\t\t\t\tif ( physics ) {\n\n\t\t\t\t\taddMesh( child, physics.mass, physics.restitution );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n\tfunction addMesh( mesh, mass = 0, restitution = 0 ) {\n\n\t\tconst shape = getShape( mesh.geometry );\n\n\t\tif ( shape === null ) return;\n\n\t\tshape.setMass( mass );\n\t\tshape.setRestitution( restitution );\n\n\t\tconst body = mesh.isInstancedMesh\n\t\t\t? createInstancedBody( mesh, mass, shape )\n\t\t\t: createBody( mesh.position, mesh.quaternion, mass, shape );\n\n\t\tif ( ! mesh.userData.physics ) mesh.userData.physics = {};\n\n\t\tmesh.userData.physics.body = body;\n\n\t\tif ( mass > 0 ) {\n\n\t\t\tmeshes.push( mesh );\n\t\t\tmeshMap.set( mesh, body );\n\n\t\t}\n\n\t}\n\n\tfunction createInstancedBody( mesh, mass, shape ) {\n\n\t\tconst array = mesh.instanceMatrix.array;\n\n\t\tconst bodies = [];\n\n\t\tfor ( let i = 0; i < mesh.count; i ++ ) {\n\n\t\t\tconst position = _vector.fromArray( array, i * 16 + 12 );\n\t\t\tbodies.push( createBody( position, null, mass, shape ) );\n\n\t\t}\n\n\t\treturn bodies;\n\n\t}\n\n\tfunction createBody( position, quaternion, mass, shape ) {\n\n\t\tconst desc = mass > 0 ? RAPIER.RigidBodyDesc.dynamic() : RAPIER.RigidBodyDesc.fixed();\n\t\tdesc.setTranslation( ...position );\n\t\tif ( quaternion !== null ) desc.setRotation( quaternion );\n\n\t\tconst body = world.createRigidBody( desc );\n\t\tworld.createCollider( shape, body );\n\n\t\treturn body;\n\n\t}\n\n\tfunction setMeshPosition( mesh, position, index = 0 ) {\n\n\t\tlet body = meshMap.get( mesh );\n\n\t\tif ( mesh.isInstancedMesh ) {\n\n\t\t\tbody = body[ index ];\n\n\t\t}\n\n\t\tbody.setAngvel( ZERO );\n\t\tbody.setLinvel( ZERO );\n\t\tbody.setTranslation( position );\n\n\t}\n\n\tfunction setMeshVelocity( mesh, velocity, index = 0 ) {\n\n\t\tlet body = meshMap.get( mesh );\n\n\t\tif ( mesh.isInstancedMesh ) {\n\n\t\t\tbody = body[ index ];\n\n\t\t}\n\n\t\tbody.setLinvel( velocity );\n\n\t}\n\n\tfunction addHeightfield( mesh, width, depth, heights, scale ) {\n\n\t\tconst shape = RAPIER.ColliderDesc.heightfield( width, depth, heights, scale );\n\t\t\n\t\tconst bodyDesc = RAPIER.RigidBodyDesc.fixed();\n\t\tbodyDesc.setTranslation( mesh.position.x, mesh.position.y, mesh.position.z );\n\t\tbodyDesc.setRotation( mesh.quaternion );\n\t\t\n\t\tconst body = world.createRigidBody( bodyDesc );\n\t\tworld.createCollider( shape, body );\n\t\t\n\t\tif ( ! mesh.userData.physics ) mesh.userData.physics = {};\n\t\tmesh.userData.physics.body = body;\n\t\t\n\t\treturn body;\n\n\t}\n\n\t//\n\n\tconst clock = new Clock();\n\n\tfunction step() {\n\n\t\tworld.timestep = clock.getDelta();\n\t\tworld.step();\n\n\t\t//\n\n\t\tfor ( let i = 0, l = meshes.length; i < l; i ++ ) {\n\n\t\t\tconst mesh = meshes[ i ];\n\n\t\t\tif ( mesh.isInstancedMesh ) {\n\n\t\t\t\tconst array = mesh.instanceMatrix.array;\n\t\t\t\tconst bodies = meshMap.get( mesh );\n\n\t\t\t\tfor ( let j = 0; j < bodies.length; j ++ ) {\n\n\t\t\t\t\tconst body = bodies[ j ];\n\n\t\t\t\t\tconst position = body.translation();\n\t\t\t\t\t_quaternion.copy( body.rotation() );\n\n\t\t\t\t\t_matrix.compose( position, _quaternion, _scale ).toArray( array, j * 16 );\n\n\t\t\t\t}\n\n\t\t\t\tmesh.instanceMatrix.needsUpdate = true;\n\t\t\t\tmesh.computeBoundingSphere();\n\n\t\t\t} else {\n\n\t\t\t\tconst body = meshMap.get( mesh );\n\n\t\t\t\tmesh.position.copy( body.translation() );\n\t\t\t\tmesh.quaternion.copy( body.rotation() );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// animate\n\n\tsetInterval( step, 1000 / frameRate );\n\n\treturn {\n\t\tRAPIER,\n\t\tworld,\n\t\t/**\n\t\t * Adds the given scene to this physics simulation. Only meshes with a\n\t\t * `physics` object in their {@link Object3D#userData} field will be honored.\n\t\t * The object can be used to store the mass and restitution of the mesh. E.g.:\n\t\t * ```js\n\t\t * box.userData.physics = { mass: 1, restitution: 0 };\n\t\t * ```\n\t\t *\n\t\t * @method\n\t\t * @name RapierPhysics#addScene\n\t\t * @param {Object3D} scene The scene or any type of 3D object to add.\n\t\t */\n\t\taddScene: addScene,\n\n\t\t/**\n\t\t * Adds the given mesh to this physics simulation.\n\t\t *\n\t\t * @method\n\t\t * @name RapierPhysics#addMesh\n\t\t * @param {Mesh} mesh The mesh to add.\n\t\t * @param {number} [mass=0] The mass in kg of the mesh.\n\t\t * @param {number} [restitution=0] The restitution/friction of the mesh.\n\t\t */\n\t\taddMesh: addMesh,\n\n\t\t/**\n\t\t * Set the position of the given mesh which is part of the physics simulation. Calling this\n\t\t * method will reset the current simulated velocity of the mesh.\n\t\t *\n\t\t * @method\n\t\t * @name RapierPhysics#setMeshPosition\n\t\t * @param {Mesh} mesh The mesh to update the position for.\n\t\t * @param {Vector3} position - The new position.\n\t\t * @param {number} [index=0] - If the mesh is instanced, the index represents the instanced ID.\n\t\t */\n\t\tsetMeshPosition: setMeshPosition,\n\n\t\t/**\n\t\t * Set the velocity of the given mesh which is part of the physics simulation.\n\t\t *\n\t\t * @method\n\t\t * @name RapierPhysics#setMeshVelocity\n\t\t * @param {Mesh} mesh The mesh to update the velocity for.\n\t\t * @param {Vector3} velocity - The new velocity.\n\t\t * @param {number} [index=0] - If the mesh is instanced, the index represents the instanced ID.\n\t\t */\n\t\tsetMeshVelocity: setMeshVelocity,\n\n\t\t/**\n\t\t * Adds a heightfield terrain to the physics simulation.\n\t\t * \n\t\t * @method\n\t\t * @name RapierPhysics#addHeightfield\n\t\t * @param {Mesh} mesh - The Three.js mesh representing the terrain.\n\t\t * @param {number} width - The number of vertices along the width (x-axis) of the heightfield.\n\t\t * @param {number} depth - The number of vertices along the depth (z-axis) of the heightfield.\n\t\t * @param {Float32Array} heights - Array of height values for each vertex in the heightfield.\n\t\t * @param {Object} scale - Scale factors for the heightfield dimensions.\n\t\t * @param {number} scale.x - Scale factor for width.\n\t\t * @param {number} scale.y - Scale factor for height.\n\t\t * @param {number} scale.z - Scale factor for depth.\n\t\t * @returns {RigidBody} The created Rapier rigid body for the heightfield.\n\t\t */\n\t\taddHeightfield: addHeightfield\n\n\t};\n\n}\n\nexport { RapierPhysics };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}