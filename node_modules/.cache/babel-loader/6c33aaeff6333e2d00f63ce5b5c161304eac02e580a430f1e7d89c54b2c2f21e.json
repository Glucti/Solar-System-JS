{"ast":null,"code":"import { BufferGeometryLoader, CanvasTexture, ClampToEdgeWrapping, Color, DirectionalLight, DoubleSide, FileLoader, LinearFilter, Line, LineBasicMaterial, Loader, Matrix4, Mesh, MeshPhysicalMaterial, MeshStandardMaterial, Object3D, PointLight, Points, PointsMaterial, RectAreaLight, RepeatWrapping, SpotLight, Sprite, SpriteMaterial, TextureLoader } from 'three';\nimport { EXRLoader } from '../loaders/EXRLoader.js';\nconst _taskCache = new WeakMap();\n\n/**\n * A loader for Rhinoceros 3D files and objects.\n *\n * Rhinoceros is a 3D modeler used to create, edit, analyze, document, render,\n * animate, and translate NURBS curves, surfaces, breps, extrusions, point clouds,\n * as well as polygon meshes and SubD objects. `rhino3dm.js` is compiled to WebAssembly\n * from the open source geometry library `openNURBS`. The loader currently uses\n * `rhino3dm.js 8.4.0`.\n *\n * ```js\n * const loader = new Rhino3dmLoader();\n * loader.setLibraryPath( 'https://cdn.jsdelivr.net/npm/rhino3dm@8.0.1' );\n *\n * const object = await loader.loadAsync( 'models/3dm/Rhino_Logo.3dm' );\n * scene.add( object );\n * ```\n *\n * @augments Loader\n * @three_import import { Rhino3dmLoader } from 'three/addons/loaders/3DMLoader.js';\n */\nclass Rhino3dmLoader extends Loader {\n  /**\n   * Constructs a new Rhino 3DM loader.\n   *\n   * @param {LoadingManager} [manager] - The loading manager.\n   */\n  constructor(manager) {\n    super(manager);\n\n    // internals\n\n    this.libraryPath = '';\n    this.libraryPending = null;\n    this.libraryBinary = null;\n    this.libraryConfig = {};\n    this.url = '';\n    this.workerLimit = 4;\n    this.workerPool = [];\n    this.workerNextTaskID = 1;\n    this.workerSourceURL = '';\n    this.workerConfig = {};\n    this.materials = [];\n    this.warnings = [];\n  }\n\n  /**\n   * Path to a folder containing the JS and WASM libraries.\n   *\n   * @param {string} path - The library path to set.\n   * @return {Rhino3dmLoader} A reference to this loader.\n   */\n  setLibraryPath(path) {\n    this.libraryPath = path;\n    return this;\n  }\n\n  /**\n   * Sets the maximum number of Web Workers to be used during decoding.\n   * A lower limit may be preferable if workers are also for other\n   * tasks in the application.\n   *\n   * @param {number} workerLimit - The worker limit.\n   * @return {Rhino3dmLoader} A reference to this loader.\n   */\n  setWorkerLimit(workerLimit) {\n    this.workerLimit = workerLimit;\n    return this;\n  }\n\n  /**\n   * Starts loading from the given URL and passes the loaded 3DM asset\n   * to the `onLoad()` callback.\n   *\n   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n   * @param {function(Object3D)} onLoad - Executed when the loading process has been finished.\n   * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n   * @param {onErrorCallback} onError - Executed when errors occur.\n   */\n  load(url, onLoad, onProgress, onError) {\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(this.requestHeader);\n    this.url = url;\n    loader.load(url, buffer => {\n      // Check for an existing task using this buffer. A transferred buffer cannot be transferred\n      // again from this thread.\n      if (_taskCache.has(buffer)) {\n        const cachedTask = _taskCache.get(buffer);\n        return cachedTask.promise.then(onLoad).catch(onError);\n      }\n      this.decodeObjects(buffer, url).then(result => {\n        result.userData.warnings = this.warnings;\n        onLoad(result);\n      }).catch(e => onError(e));\n    }, onProgress, onError);\n  }\n\n  /**\n   * Prints debug messages to the browser console.\n   */\n  debug() {\n    console.log('Task load: ', this.workerPool.map(worker => worker._taskLoad));\n  }\n\n  /**\n   * Decodes the 3DM asset data with a Web Worker.\n   *\n   * @param {ArrayBuffer} buffer - The raw 3DM asset data as an array buffer.\n   * @param {string} url - The asset URL.\n   * @return {Promise<Object3D>} A Promise that resolved with the decoded 3D object.\n   */\n  decodeObjects(buffer, url) {\n    let worker;\n    let taskID;\n    const taskCost = buffer.byteLength;\n    const objectPending = this._getWorker(taskCost).then(_worker => {\n      worker = _worker;\n      taskID = this.workerNextTaskID++;\n      return new Promise((resolve, reject) => {\n        worker._callbacks[taskID] = {\n          resolve,\n          reject\n        };\n        worker.postMessage({\n          type: 'decode',\n          id: taskID,\n          buffer\n        }, [buffer]);\n\n        // this.debug();\n      });\n    }).then(message => this._createGeometry(message.data)).catch(e => {\n      throw e;\n    });\n\n    // Remove task from the task list.\n    // Note: replaced '.finally()' with '.catch().then()' block - iOS 11 support (#19416)\n    objectPending.catch(() => true).then(() => {\n      if (worker && taskID) {\n        this._releaseTask(worker, taskID);\n\n        //this.debug();\n      }\n    });\n\n    // Cache the task result.\n    _taskCache.set(buffer, {\n      url: url,\n      promise: objectPending\n    });\n    return objectPending;\n  }\n\n  /**\n   * Parses the given 3DM data and passes the loaded 3DM asset\n   * to the `onLoad()` callback.\n   *\n   * @param {ArrayBuffer} data - The raw 3DM asset data as an array buffer.\n   * @param {function(Object3D)} onLoad - Executed when the loading process has been finished.\n   * @param {onErrorCallback} onError - Executed when errors occur.\n   */\n  parse(data, onLoad, onError) {\n    this.decodeObjects(data, '').then(result => {\n      result.userData.warnings = this.warnings;\n      onLoad(result);\n    }).catch(e => onError(e));\n  }\n  _compareMaterials(material) {\n    const mat = {};\n    mat.name = material.name;\n    mat.color = {};\n    mat.color.r = material.color.r;\n    mat.color.g = material.color.g;\n    mat.color.b = material.color.b;\n    mat.type = material.type;\n    mat.vertexColors = material.vertexColors;\n    const json = JSON.stringify(mat);\n    for (let i = 0; i < this.materials.length; i++) {\n      const m = this.materials[i];\n      const _mat = {};\n      _mat.name = m.name;\n      _mat.color = {};\n      _mat.color.r = m.color.r;\n      _mat.color.g = m.color.g;\n      _mat.color.b = m.color.b;\n      _mat.type = m.type;\n      _mat.vertexColors = m.vertexColors;\n      if (JSON.stringify(_mat) === json) {\n        return m;\n      }\n    }\n    this.materials.push(material);\n    return material;\n  }\n  _createMaterial(material, renderEnvironment) {\n    if (material === undefined) {\n      return new MeshStandardMaterial({\n        color: new Color(1, 1, 1),\n        metalness: 0.8,\n        name: Loader.DEFAULT_MATERIAL_NAME,\n        side: DoubleSide\n      });\n    }\n\n    //console.log(material)\n\n    const mat = new MeshPhysicalMaterial({\n      color: new Color(material.diffuseColor.r / 255.0, material.diffuseColor.g / 255.0, material.diffuseColor.b / 255.0),\n      emissive: new Color(material.emissionColor.r, material.emissionColor.g, material.emissionColor.b),\n      flatShading: material.disableLighting,\n      ior: material.indexOfRefraction,\n      name: material.name,\n      reflectivity: material.reflectivity,\n      opacity: 1.0 - material.transparency,\n      side: DoubleSide,\n      specularColor: material.specularColor,\n      transparent: material.transparency > 0 ? true : false\n    });\n    mat.userData.id = material.id;\n    if (material.pbrSupported) {\n      const pbr = material.pbr;\n      mat.anisotropy = pbr.anisotropic;\n      mat.anisotropyRotation = pbr.anisotropicRotation;\n      mat.color = new Color(pbr.baseColor.r, pbr.baseColor.g, pbr.baseColor.b);\n      mat.clearcoat = pbr.clearcoat;\n      mat.clearcoatRoughness = pbr.clearcoatRoughness;\n      mat.metalness = pbr.metallic;\n      mat.transmission = 1 - pbr.opacity;\n      mat.roughness = pbr.roughness;\n      mat.sheen = pbr.sheen;\n      mat.specularIntensity = pbr.specular;\n      mat.thickness = pbr.subsurface;\n    }\n    if (material.pbrSupported && material.pbr.opacity === 0 && material.transparency === 1) {\n      //some compromises\n\n      mat.opacity = 0.2;\n      mat.transmission = 1.00;\n    }\n    const textureLoader = new TextureLoader();\n    for (let i = 0; i < material.textures.length; i++) {\n      const texture = material.textures[i];\n      if (texture.image !== null) {\n        const map = textureLoader.load(texture.image);\n\n        //console.log(texture.type )\n\n        switch (texture.type) {\n          case 'Bump':\n            mat.bumpMap = map;\n            break;\n          case 'Diffuse':\n            mat.map = map;\n            break;\n          case 'Emap':\n            mat.envMap = map;\n            break;\n          case 'Opacity':\n            mat.transmissionMap = map;\n            break;\n          case 'Transparency':\n            mat.alphaMap = map;\n            mat.transparent = true;\n            break;\n          case 'PBR_Alpha':\n            mat.alphaMap = map;\n            mat.transparent = true;\n            break;\n          case 'PBR_AmbientOcclusion':\n            mat.aoMap = map;\n            break;\n          case 'PBR_Anisotropic':\n            mat.anisotropyMap = map;\n            break;\n          case 'PBR_BaseColor':\n            mat.map = map;\n            break;\n          case 'PBR_Clearcoat':\n            mat.clearcoatMap = map;\n            break;\n          case 'PBR_ClearcoatBump':\n            mat.clearcoatNormalMap = map;\n            break;\n          case 'PBR_ClearcoatRoughness':\n            mat.clearcoatRoughnessMap = map;\n            break;\n          case 'PBR_Displacement':\n            mat.displacementMap = map;\n            break;\n          case 'PBR_Emission':\n            mat.emissiveMap = map;\n            break;\n          case 'PBR_Metallic':\n            mat.metalnessMap = map;\n            break;\n          case 'PBR_Roughness':\n            mat.roughnessMap = map;\n            break;\n          case 'PBR_Sheen':\n            mat.sheenColorMap = map;\n            break;\n          case 'PBR_Specular':\n            mat.specularColorMap = map;\n            break;\n          case 'PBR_Subsurface':\n            mat.thicknessMap = map;\n            break;\n          default:\n            this.warnings.push({\n              message: `THREE.3DMLoader: No conversion exists for 3dm ${texture.type}.`,\n              type: 'no conversion'\n            });\n            break;\n        }\n        map.wrapS = texture.wrapU === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n        map.wrapT = texture.wrapV === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n        if (texture.repeat) {\n          map.repeat.set(texture.repeat[0], texture.repeat[1]);\n        }\n      }\n    }\n    if (renderEnvironment) {\n      new EXRLoader().load(renderEnvironment.image, function (texture) {\n        texture.mapping = THREE.EquirectangularReflectionMapping;\n        mat.envMap = texture;\n      });\n    }\n    return mat;\n  }\n  _createGeometry(data) {\n    const object = new Object3D();\n    const instanceDefinitionObjects = [];\n    const instanceDefinitions = [];\n    const instanceReferences = [];\n    object.userData['layers'] = data.layers;\n    object.userData['groups'] = data.groups;\n    object.userData['settings'] = data.settings;\n    object.userData.settings['renderSettings'] = data.renderSettings;\n    object.userData['objectType'] = 'File3dm';\n    object.userData['materials'] = null;\n    object.name = this.url;\n    let objects = data.objects;\n    const materials = data.materials;\n    for (let i = 0; i < objects.length; i++) {\n      const obj = objects[i];\n      const attributes = obj.attributes;\n      switch (obj.objectType) {\n        case 'InstanceDefinition':\n          instanceDefinitions.push(obj);\n          break;\n        case 'InstanceReference':\n          instanceReferences.push(obj);\n          break;\n        default:\n          let matId = null;\n          switch (attributes.materialSource.name) {\n            case 'ObjectMaterialSource_MaterialFromLayer':\n              //check layer index\n              if (attributes.layerIndex >= 0) {\n                matId = data.layers[attributes.layerIndex].renderMaterialIndex;\n              }\n              break;\n            case 'ObjectMaterialSource_MaterialFromObject':\n              if (attributes.materialIndex >= 0) {\n                matId = attributes.materialIndex;\n              }\n              break;\n          }\n          let material = null;\n          if (matId >= 0) {\n            const rMaterial = materials[matId];\n            material = this._createMaterial(rMaterial, data.renderEnvironment);\n          }\n          const _object = this._createObject(obj, material);\n          if (_object === undefined) {\n            continue;\n          }\n          const layer = data.layers[attributes.layerIndex];\n          _object.visible = layer ? data.layers[attributes.layerIndex].visible : true;\n          if (attributes.isInstanceDefinitionObject) {\n            instanceDefinitionObjects.push(_object);\n          } else {\n            object.add(_object);\n          }\n          break;\n      }\n    }\n    for (let i = 0; i < instanceDefinitions.length; i++) {\n      const iDef = instanceDefinitions[i];\n      objects = [];\n      for (let j = 0; j < iDef.attributes.objectIds.length; j++) {\n        const objId = iDef.attributes.objectIds[j];\n        for (let p = 0; p < instanceDefinitionObjects.length; p++) {\n          const idoId = instanceDefinitionObjects[p].userData.attributes.id;\n          if (objId === idoId) {\n            objects.push(instanceDefinitionObjects[p]);\n          }\n        }\n      }\n\n      // Currently clones geometry and does not take advantage of instancing\n\n      for (let j = 0; j < instanceReferences.length; j++) {\n        const iRef = instanceReferences[j];\n        if (iRef.geometry.parentIdefId === iDef.attributes.id) {\n          const iRefObject = new Object3D();\n          const xf = iRef.geometry.xform.array;\n          const matrix = new Matrix4();\n          matrix.set(...xf);\n          iRefObject.applyMatrix4(matrix);\n          for (let p = 0; p < objects.length; p++) {\n            iRefObject.add(objects[p].clone(true));\n          }\n          object.add(iRefObject);\n        }\n      }\n    }\n    object.userData['materials'] = this.materials;\n    object.name = '';\n    return object;\n  }\n  _createObject(obj, mat) {\n    const loader = new BufferGeometryLoader();\n    const attributes = obj.attributes;\n    let geometry, material, _color, color;\n    switch (obj.objectType) {\n      case 'Point':\n      case 'PointSet':\n        geometry = loader.parse(obj.geometry);\n        if (geometry.attributes.hasOwnProperty('color')) {\n          material = new PointsMaterial({\n            vertexColors: true,\n            sizeAttenuation: false,\n            size: 2\n          });\n        } else {\n          _color = attributes.drawColor;\n          color = new Color(_color.r / 255.0, _color.g / 255.0, _color.b / 255.0);\n          material = new PointsMaterial({\n            color: color,\n            sizeAttenuation: false,\n            size: 2\n          });\n        }\n        material = this._compareMaterials(material);\n        const points = new Points(geometry, material);\n        points.userData['attributes'] = attributes;\n        points.userData['objectType'] = obj.objectType;\n        if (attributes.name) {\n          points.name = attributes.name;\n        }\n        return points;\n      case 'Mesh':\n      case 'Extrusion':\n      case 'SubD':\n      case 'Brep':\n        if (obj.geometry === null) return;\n        geometry = loader.parse(obj.geometry);\n        if (mat === null) {\n          mat = this._createMaterial();\n        }\n        if (geometry.attributes.hasOwnProperty('color')) {\n          mat.vertexColors = true;\n        }\n        mat = this._compareMaterials(mat);\n        const mesh = new Mesh(geometry, mat);\n        mesh.castShadow = attributes.castsShadows;\n        mesh.receiveShadow = attributes.receivesShadows;\n        mesh.userData['attributes'] = attributes;\n        mesh.userData['objectType'] = obj.objectType;\n        if (attributes.name) {\n          mesh.name = attributes.name;\n        }\n        return mesh;\n      case 'Curve':\n        geometry = loader.parse(obj.geometry);\n        _color = attributes.drawColor;\n        color = new Color(_color.r / 255.0, _color.g / 255.0, _color.b / 255.0);\n        material = new LineBasicMaterial({\n          color: color\n        });\n        material = this._compareMaterials(material);\n        const lines = new Line(geometry, material);\n        lines.userData['attributes'] = attributes;\n        lines.userData['objectType'] = obj.objectType;\n        if (attributes.name) {\n          lines.name = attributes.name;\n        }\n        return lines;\n      case 'TextDot':\n        geometry = obj.geometry;\n        const ctx = document.createElement('canvas').getContext('2d');\n        const font = `${geometry.fontHeight}px ${geometry.fontFace}`;\n        ctx.font = font;\n        const width = ctx.measureText(geometry.text).width + 10;\n        const height = geometry.fontHeight + 10;\n        const r = window.devicePixelRatio;\n        ctx.canvas.width = width * r;\n        ctx.canvas.height = height * r;\n        ctx.canvas.style.width = width + 'px';\n        ctx.canvas.style.height = height + 'px';\n        ctx.setTransform(r, 0, 0, r, 0, 0);\n        ctx.font = font;\n        ctx.textBaseline = 'middle';\n        ctx.textAlign = 'center';\n        color = attributes.drawColor;\n        ctx.fillStyle = `rgba(${color.r},${color.g},${color.b},${color.a})`;\n        ctx.fillRect(0, 0, width, height);\n        ctx.fillStyle = 'white';\n        ctx.fillText(geometry.text, width / 2, height / 2);\n        const texture = new CanvasTexture(ctx.canvas);\n        texture.minFilter = LinearFilter;\n        texture.generateMipmaps = false;\n        texture.wrapS = ClampToEdgeWrapping;\n        texture.wrapT = ClampToEdgeWrapping;\n        material = new SpriteMaterial({\n          map: texture,\n          depthTest: false\n        });\n        const sprite = new Sprite(material);\n        sprite.position.set(geometry.point[0], geometry.point[1], geometry.point[2]);\n        sprite.scale.set(width / 10, height / 10, 1.0);\n        sprite.userData['attributes'] = attributes;\n        sprite.userData['objectType'] = obj.objectType;\n        if (attributes.name) {\n          sprite.name = attributes.name;\n        }\n        return sprite;\n      case 'Light':\n        geometry = obj.geometry;\n        let light;\n        switch (geometry.lightStyle.name) {\n          case 'LightStyle_WorldPoint':\n            light = new PointLight();\n            light.castShadow = attributes.castsShadows;\n            light.position.set(geometry.location[0], geometry.location[1], geometry.location[2]);\n            light.shadow.normalBias = 0.1;\n            break;\n          case 'LightStyle_WorldSpot':\n            light = new SpotLight();\n            light.castShadow = attributes.castsShadows;\n            light.position.set(geometry.location[0], geometry.location[1], geometry.location[2]);\n            light.target.position.set(geometry.direction[0], geometry.direction[1], geometry.direction[2]);\n            light.angle = geometry.spotAngleRadians;\n            light.shadow.normalBias = 0.1;\n            break;\n          case 'LightStyle_WorldRectangular':\n            light = new RectAreaLight();\n            const width = Math.abs(geometry.width[2]);\n            const height = Math.abs(geometry.length[0]);\n            light.position.set(geometry.location[0] - height / 2, geometry.location[1], geometry.location[2] - width / 2);\n            light.height = height;\n            light.width = width;\n            light.lookAt(geometry.direction[0], geometry.direction[1], geometry.direction[2]);\n            break;\n          case 'LightStyle_WorldDirectional':\n            light = new DirectionalLight();\n            light.castShadow = attributes.castsShadows;\n            light.position.set(geometry.location[0], geometry.location[1], geometry.location[2]);\n            light.target.position.set(geometry.direction[0], geometry.direction[1], geometry.direction[2]);\n            light.shadow.normalBias = 0.1;\n            break;\n          case 'LightStyle_WorldLinear':\n            // no conversion exists, warning has already been printed to the console\n            break;\n          default:\n            break;\n        }\n        if (light) {\n          light.intensity = geometry.intensity;\n          _color = geometry.diffuse;\n          color = new Color(_color.r / 255.0, _color.g / 255.0, _color.b / 255.0);\n          light.color = color;\n          light.userData['attributes'] = attributes;\n          light.userData['objectType'] = obj.objectType;\n        }\n        return light;\n    }\n  }\n  _initLibrary() {\n    if (!this.libraryPending) {\n      // Load rhino3dm wrapper.\n      const jsLoader = new FileLoader(this.manager);\n      jsLoader.setPath(this.libraryPath);\n      const jsContent = new Promise((resolve, reject) => {\n        jsLoader.load('rhino3dm.js', resolve, undefined, reject);\n      });\n\n      // Load rhino3dm WASM binary.\n      const binaryLoader = new FileLoader(this.manager);\n      binaryLoader.setPath(this.libraryPath);\n      binaryLoader.setResponseType('arraybuffer');\n      const binaryContent = new Promise((resolve, reject) => {\n        binaryLoader.load('rhino3dm.wasm', resolve, undefined, reject);\n      });\n      this.libraryPending = Promise.all([jsContent, binaryContent]).then(([jsContent, binaryContent]) => {\n        //this.libraryBinary = binaryContent;\n        this.libraryConfig.wasmBinary = binaryContent;\n        const fn = Rhino3dmWorker.toString();\n        const body = ['/* rhino3dm.js */', jsContent, '/* worker */', fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))].join('\\n');\n        this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n      });\n    }\n    return this.libraryPending;\n  }\n  _getWorker(taskCost) {\n    return this._initLibrary().then(() => {\n      if (this.workerPool.length < this.workerLimit) {\n        const worker = new Worker(this.workerSourceURL);\n        worker._callbacks = {};\n        worker._taskCosts = {};\n        worker._taskLoad = 0;\n        worker.postMessage({\n          type: 'init',\n          libraryConfig: this.libraryConfig\n        });\n        worker.onmessage = e => {\n          const message = e.data;\n          switch (message.type) {\n            case 'warning':\n              this.warnings.push(message.data);\n              console.warn(message.data);\n              break;\n            case 'decode':\n              worker._callbacks[message.id].resolve(message);\n              break;\n            case 'error':\n              worker._callbacks[message.id].reject(message);\n              break;\n            default:\n              console.error('THREE.Rhino3dmLoader: Unexpected message, \"' + message.type + '\"');\n          }\n        };\n        this.workerPool.push(worker);\n      } else {\n        this.workerPool.sort(function (a, b) {\n          return a._taskLoad > b._taskLoad ? -1 : 1;\n        });\n      }\n      const worker = this.workerPool[this.workerPool.length - 1];\n      worker._taskLoad += taskCost;\n      return worker;\n    });\n  }\n  _releaseTask(worker, taskID) {\n    worker._taskLoad -= worker._taskCosts[taskID];\n    delete worker._callbacks[taskID];\n    delete worker._taskCosts[taskID];\n  }\n\n  /**\n   * Frees internal resources. This method should be called\n   * when the loader is no longer required.\n   */\n  dispose() {\n    for (let i = 0; i < this.workerPool.length; ++i) {\n      this.workerPool[i].terminate();\n    }\n    this.workerPool.length = 0;\n  }\n}\n\n/* WEB WORKER */\n\nfunction Rhino3dmWorker() {\n  let libraryPending;\n  let libraryConfig;\n  let rhino;\n  let taskID;\n  onmessage = function (e) {\n    const message = e.data;\n    switch (message.type) {\n      case 'init':\n        libraryConfig = message.libraryConfig;\n        const wasmBinary = libraryConfig.wasmBinary;\n        let RhinoModule;\n        libraryPending = new Promise(function (resolve) {\n          /* Like Basis Loader */\n          RhinoModule = {\n            wasmBinary,\n            onRuntimeInitialized: resolve\n          };\n          rhino3dm(RhinoModule); // eslint-disable-line no-undef\n        }).then(() => {\n          rhino = RhinoModule;\n        });\n        break;\n      case 'decode':\n        taskID = message.id;\n        const buffer = message.buffer;\n        libraryPending.then(() => {\n          try {\n            const data = decodeObjects(rhino, buffer);\n            self.postMessage({\n              type: 'decode',\n              id: message.id,\n              data\n            });\n          } catch (error) {\n            self.postMessage({\n              type: 'error',\n              id: message.id,\n              error\n            });\n          }\n        });\n        break;\n    }\n  };\n  function decodeObjects(rhino, buffer) {\n    const arr = new Uint8Array(buffer);\n    const doc = rhino.File3dm.fromByteArray(arr);\n    const objects = [];\n    const materials = [];\n    const layers = [];\n    const views = [];\n    const namedViews = [];\n    const groups = [];\n    const strings = [];\n\n    //Handle objects\n\n    const objs = doc.objects();\n    const cnt = objs.count;\n    for (let i = 0; i < cnt; i++) {\n      const _object = objs.get(i);\n      const object = extractObjectData(_object, doc);\n      _object.delete();\n      if (object) {\n        objects.push(object);\n      }\n    }\n\n    // Handle instance definitions\n    // console.log( `Instance Definitions Count: ${doc.instanceDefinitions().count()}` );\n\n    for (let i = 0; i < doc.instanceDefinitions().count; i++) {\n      const idef = doc.instanceDefinitions().get(i);\n      const idefAttributes = extractProperties(idef);\n      idefAttributes.objectIds = idef.getObjectIds();\n      objects.push({\n        geometry: null,\n        attributes: idefAttributes,\n        objectType: 'InstanceDefinition'\n      });\n    }\n\n    // Handle materials\n\n    const textureTypes = [\n    // rhino.TextureType.Bitmap,\n    rhino.TextureType.Diffuse, rhino.TextureType.Bump, rhino.TextureType.Transparency, rhino.TextureType.Opacity, rhino.TextureType.Emap];\n    const pbrTextureTypes = [rhino.TextureType.PBR_BaseColor, rhino.TextureType.PBR_Subsurface, rhino.TextureType.PBR_SubsurfaceScattering, rhino.TextureType.PBR_SubsurfaceScatteringRadius, rhino.TextureType.PBR_Metallic, rhino.TextureType.PBR_Specular, rhino.TextureType.PBR_SpecularTint, rhino.TextureType.PBR_Roughness, rhino.TextureType.PBR_Anisotropic, rhino.TextureType.PBR_Anisotropic_Rotation, rhino.TextureType.PBR_Sheen, rhino.TextureType.PBR_SheenTint, rhino.TextureType.PBR_Clearcoat, rhino.TextureType.PBR_ClearcoatBump, rhino.TextureType.PBR_ClearcoatRoughness, rhino.TextureType.PBR_OpacityIor, rhino.TextureType.PBR_OpacityRoughness, rhino.TextureType.PBR_Emission, rhino.TextureType.PBR_AmbientOcclusion, rhino.TextureType.PBR_Displacement];\n    for (let i = 0; i < doc.materials().count; i++) {\n      const _material = doc.materials().get(i);\n      const material = extractProperties(_material);\n      const textures = [];\n      textures.push(...extractTextures(_material, textureTypes, doc));\n      material.pbrSupported = _material.physicallyBased().supported;\n      if (material.pbrSupported) {\n        textures.push(...extractTextures(_material, pbrTextureTypes, doc));\n        material.pbr = extractProperties(_material.physicallyBased());\n      }\n      material.textures = textures;\n      materials.push(material);\n      _material.delete();\n    }\n\n    // Handle layers\n\n    for (let i = 0; i < doc.layers().count; i++) {\n      const _layer = doc.layers().get(i);\n      const layer = extractProperties(_layer);\n      layers.push(layer);\n      _layer.delete();\n    }\n\n    // Handle views\n\n    for (let i = 0; i < doc.views().count; i++) {\n      const _view = doc.views().get(i);\n      const view = extractProperties(_view);\n      views.push(view);\n      _view.delete();\n    }\n\n    // Handle named views\n\n    for (let i = 0; i < doc.namedViews().count; i++) {\n      const _namedView = doc.namedViews().get(i);\n      const namedView = extractProperties(_namedView);\n      namedViews.push(namedView);\n      _namedView.delete();\n    }\n\n    // Handle groups\n\n    for (let i = 0; i < doc.groups().count; i++) {\n      const _group = doc.groups().get(i);\n      const group = extractProperties(_group);\n      groups.push(group);\n      _group.delete();\n    }\n\n    // Handle settings\n\n    const settings = extractProperties(doc.settings());\n\n    //TODO: Handle other document stuff like dimstyles, instance definitions, bitmaps etc.\n\n    // Handle dimstyles\n    // console.log( `Dimstyle Count: ${doc.dimstyles().count()}` );\n\n    // Handle bitmaps\n    // console.log( `Bitmap Count: ${doc.bitmaps().count()}` );\n\n    // Handle strings\n    // console.log( `Document Strings Count: ${doc.strings().count()}` );\n    // Note: doc.strings().documentUserTextCount() counts any doc.strings defined in a section\n    // console.log( `Document User Text Count: ${doc.strings().documentUserTextCount()}` );\n\n    const strings_count = doc.strings().count;\n    for (let i = 0; i < strings_count; i++) {\n      strings.push(doc.strings().get(i));\n    }\n\n    // Handle Render Environments for Material Environment\n\n    // get the id of the active render environment skylight, which we'll use for environment texture\n    const reflectionId = doc.settings().renderSettings().renderEnvironments.reflectionId;\n    const rc = doc.renderContent();\n    let renderEnvironment = null;\n    for (let i = 0; i < rc.count; i++) {\n      const content = rc.get(i);\n      switch (content.kind) {\n        case 'environment':\n          const id = content.id;\n\n          // there could be multiple render environments in a 3dm file\n          if (id !== reflectionId) break;\n          const renderTexture = content.findChild('texture');\n          const fileName = renderTexture.fileName;\n          for (let j = 0; j < doc.embeddedFiles().count; j++) {\n            const _fileName = doc.embeddedFiles().get(j).fileName;\n            if (fileName === _fileName) {\n              const background = doc.getEmbeddedFileAsBase64(fileName);\n              const backgroundImage = 'data:image/png;base64,' + background;\n              renderEnvironment = {\n                type: 'renderEnvironment',\n                image: backgroundImage,\n                name: fileName\n              };\n            }\n          }\n          break;\n      }\n    }\n\n    // Handle Render Settings\n\n    const renderSettings = {\n      ambientLight: doc.settings().renderSettings().ambientLight,\n      backgroundColorTop: doc.settings().renderSettings().backgroundColorTop,\n      backgroundColorBottom: doc.settings().renderSettings().backgroundColorBottom,\n      useHiddenLights: doc.settings().renderSettings().useHiddenLights,\n      depthCue: doc.settings().renderSettings().depthCue,\n      flatShade: doc.settings().renderSettings().flatShade,\n      renderBackFaces: doc.settings().renderSettings().renderBackFaces,\n      renderPoints: doc.settings().renderSettings().renderPoints,\n      renderCurves: doc.settings().renderSettings().renderCurves,\n      renderIsoParams: doc.settings().renderSettings().renderIsoParams,\n      renderMeshEdges: doc.settings().renderSettings().renderMeshEdges,\n      renderAnnotations: doc.settings().renderSettings().renderAnnotations,\n      useViewportSize: doc.settings().renderSettings().useViewportSize,\n      scaleBackgroundToFit: doc.settings().renderSettings().scaleBackgroundToFit,\n      transparentBackground: doc.settings().renderSettings().transparentBackground,\n      imageDpi: doc.settings().renderSettings().imageDpi,\n      shadowMapLevel: doc.settings().renderSettings().shadowMapLevel,\n      namedView: doc.settings().renderSettings().namedView,\n      snapShot: doc.settings().renderSettings().snapShot,\n      specificViewport: doc.settings().renderSettings().specificViewport,\n      groundPlane: extractProperties(doc.settings().renderSettings().groundPlane),\n      safeFrame: extractProperties(doc.settings().renderSettings().safeFrame),\n      dithering: extractProperties(doc.settings().renderSettings().dithering),\n      skylight: extractProperties(doc.settings().renderSettings().skylight),\n      linearWorkflow: extractProperties(doc.settings().renderSettings().linearWorkflow),\n      renderChannels: extractProperties(doc.settings().renderSettings().renderChannels),\n      sun: extractProperties(doc.settings().renderSettings().sun),\n      renderEnvironments: extractProperties(doc.settings().renderSettings().renderEnvironments),\n      postEffects: extractProperties(doc.settings().renderSettings().postEffects)\n    };\n    doc.delete();\n    return {\n      objects,\n      materials,\n      layers,\n      views,\n      namedViews,\n      groups,\n      strings,\n      settings,\n      renderSettings,\n      renderEnvironment\n    };\n  }\n  function extractTextures(m, tTypes, d) {\n    const textures = [];\n    for (let i = 0; i < tTypes.length; i++) {\n      const _texture = m.getTexture(tTypes[i]);\n      if (_texture) {\n        let textureType = tTypes[i].constructor.name;\n        textureType = textureType.substring(12, textureType.length);\n        const texture = extractTextureData(_texture, textureType, d);\n        textures.push(texture);\n        _texture.delete();\n      }\n    }\n    return textures;\n  }\n  function extractTextureData(t, tType, d) {\n    const texture = {\n      type: tType\n    };\n    const image = d.getEmbeddedFileAsBase64(t.fileName);\n    texture.wrapU = t.wrapU;\n    texture.wrapV = t.wrapV;\n    texture.wrapW = t.wrapW;\n    const uvw = t.uvwTransform.toFloatArray(true);\n    texture.repeat = [uvw[0], uvw[5]];\n    if (image) {\n      texture.image = 'data:image/png;base64,' + image;\n    } else {\n      self.postMessage({\n        type: 'warning',\n        id: taskID,\n        data: {\n          message: `THREE.3DMLoader: Image for ${tType} texture not embedded in file.`,\n          type: 'missing resource'\n        }\n      });\n      texture.image = null;\n    }\n    return texture;\n  }\n  function extractObjectData(object, doc) {\n    const _geometry = object.geometry();\n    const _attributes = object.attributes();\n    let objectType = _geometry.objectType;\n    let geometry, attributes, position, data, mesh;\n\n    // skip instance definition objects\n    //if( _attributes.isInstanceDefinitionObject ) { continue; }\n\n    // TODO: handle other geometry types\n    switch (objectType) {\n      case rhino.ObjectType.Curve:\n        const pts = curveToPoints(_geometry, 100);\n        position = {};\n        attributes = {};\n        data = {};\n        position.itemSize = 3;\n        position.type = 'Float32Array';\n        position.array = [];\n        for (let j = 0; j < pts.length; j++) {\n          position.array.push(pts[j][0]);\n          position.array.push(pts[j][1]);\n          position.array.push(pts[j][2]);\n        }\n        attributes.position = position;\n        data.attributes = attributes;\n        geometry = {\n          data\n        };\n        break;\n      case rhino.ObjectType.Point:\n        const pt = _geometry.location;\n        position = {};\n        const color = {};\n        attributes = {};\n        data = {};\n        position.itemSize = 3;\n        position.type = 'Float32Array';\n        position.array = [pt[0], pt[1], pt[2]];\n        const _color = _attributes.drawColor(doc);\n        color.itemSize = 3;\n        color.type = 'Float32Array';\n        color.array = [_color.r / 255.0, _color.g / 255.0, _color.b / 255.0];\n        attributes.position = position;\n        attributes.color = color;\n        data.attributes = attributes;\n        geometry = {\n          data\n        };\n        break;\n      case rhino.ObjectType.PointSet:\n      case rhino.ObjectType.Mesh:\n        geometry = _geometry.toThreejsJSON();\n        break;\n      case rhino.ObjectType.Brep:\n        const faces = _geometry.faces();\n        mesh = new rhino.Mesh();\n        for (let faceIndex = 0; faceIndex < faces.count; faceIndex++) {\n          const face = faces.get(faceIndex);\n          const _mesh = face.getMesh(rhino.MeshType.Any);\n          if (_mesh) {\n            mesh.append(_mesh);\n            _mesh.delete();\n          }\n          face.delete();\n        }\n        if (mesh.faces().count > 0) {\n          mesh.compact();\n          geometry = mesh.toThreejsJSON();\n          faces.delete();\n        }\n        mesh.delete();\n        break;\n      case rhino.ObjectType.Extrusion:\n        mesh = _geometry.getMesh(rhino.MeshType.Any);\n        if (mesh) {\n          geometry = mesh.toThreejsJSON();\n          mesh.delete();\n        }\n        break;\n      case rhino.ObjectType.TextDot:\n        geometry = extractProperties(_geometry);\n        break;\n      case rhino.ObjectType.Light:\n        geometry = extractProperties(_geometry);\n        if (geometry.lightStyle.name === 'LightStyle_WorldLinear') {\n          self.postMessage({\n            type: 'warning',\n            id: taskID,\n            data: {\n              message: `THREE.3DMLoader: No conversion exists for ${objectType.constructor.name} ${geometry.lightStyle.name}`,\n              type: 'no conversion',\n              guid: _attributes.id\n            }\n          });\n        }\n        break;\n      case rhino.ObjectType.InstanceReference:\n        geometry = extractProperties(_geometry);\n        geometry.xform = extractProperties(_geometry.xform);\n        geometry.xform.array = _geometry.xform.toFloatArray(true);\n        break;\n      case rhino.ObjectType.SubD:\n        // TODO: precalculate resulting vertices and faces and warn on excessive results\n        _geometry.subdivide(3);\n        mesh = rhino.Mesh.createFromSubDControlNet(_geometry, false);\n        if (mesh) {\n          geometry = mesh.toThreejsJSON();\n          mesh.delete();\n        }\n        break;\n\n      /*\n      case rhino.ObjectType.Annotation:\n      case rhino.ObjectType.Hatch:\n      case rhino.ObjectType.ClipPlane:\n      */\n\n      default:\n        self.postMessage({\n          type: 'warning',\n          id: taskID,\n          data: {\n            message: `THREE.3DMLoader: Conversion not implemented for ${objectType.constructor.name}`,\n            type: 'not implemented',\n            guid: _attributes.id\n          }\n        });\n        break;\n    }\n    if (geometry) {\n      attributes = extractProperties(_attributes);\n      attributes.geometry = extractProperties(_geometry);\n      if (_attributes.groupCount > 0) {\n        attributes.groupIds = _attributes.getGroupList();\n      }\n      if (_attributes.userStringCount > 0) {\n        attributes.userStrings = _attributes.getUserStrings();\n      }\n      if (_geometry.userStringCount > 0) {\n        attributes.geometry.userStrings = _geometry.getUserStrings();\n      }\n      if (_attributes.decals().count > 0) {\n        self.postMessage({\n          type: 'warning',\n          id: taskID,\n          data: {\n            message: 'THREE.3DMLoader: No conversion exists for the decals associated with this object.',\n            type: 'no conversion',\n            guid: _attributes.id\n          }\n        });\n      }\n      attributes.drawColor = _attributes.drawColor(doc);\n      objectType = objectType.constructor.name;\n      objectType = objectType.substring(11, objectType.length);\n      return {\n        geometry,\n        attributes,\n        objectType\n      };\n    } else {\n      self.postMessage({\n        type: 'warning',\n        id: taskID,\n        data: {\n          message: `THREE.3DMLoader: ${objectType.constructor.name} has no associated mesh geometry.`,\n          type: 'missing mesh',\n          guid: _attributes.id\n        }\n      });\n    }\n  }\n  function extractProperties(object) {\n    const result = {};\n    for (const property in object) {\n      const value = object[property];\n      if (typeof value !== 'function') {\n        if (typeof value === 'object' && value !== null && value.hasOwnProperty('constructor')) {\n          result[property] = {\n            name: value.constructor.name,\n            value: value.value\n          };\n        } else if (typeof value === 'object' && value !== null) {\n          result[property] = extractProperties(value);\n        } else {\n          result[property] = value;\n        }\n      } else {\n\n        // these are functions that could be called to extract more data.\n        //console.log( `${property}: ${object[ property ].constructor.name}` );\n      }\n    }\n    return result;\n  }\n  function curveToPoints(curve, pointLimit) {\n    let pointCount = pointLimit;\n    let rc = [];\n    const ts = [];\n    if (curve instanceof rhino.LineCurve) {\n      return [curve.pointAtStart, curve.pointAtEnd];\n    }\n    if (curve instanceof rhino.PolylineCurve) {\n      pointCount = curve.pointCount;\n      for (let i = 0; i < pointCount; i++) {\n        rc.push(curve.point(i));\n      }\n      return rc;\n    }\n    if (curve instanceof rhino.PolyCurve) {\n      const segmentCount = curve.segmentCount;\n      for (let i = 0; i < segmentCount; i++) {\n        const segment = curve.segmentCurve(i);\n        const segmentArray = curveToPoints(segment, pointCount);\n        rc = rc.concat(segmentArray);\n        segment.delete();\n      }\n      return rc;\n    }\n    if (curve instanceof rhino.ArcCurve) {\n      pointCount = Math.floor(curve.angleDegrees / 5);\n      pointCount = pointCount < 2 ? 2 : pointCount;\n      // alternative to this hardcoded version: https://stackoverflow.com/a/18499923/2179399\n    }\n    if (curve instanceof rhino.NurbsCurve && curve.degree === 1) {\n      const pLine = curve.tryGetPolyline();\n      for (let i = 0; i < pLine.count; i++) {\n        rc.push(pLine.get(i));\n      }\n      pLine.delete();\n      return rc;\n    }\n    const domain = curve.domain;\n    const divisions = pointCount - 1.0;\n    for (let j = 0; j < pointCount; j++) {\n      const t = domain[0] + j / divisions * (domain[1] - domain[0]);\n      if (t === domain[0] || t === domain[1]) {\n        ts.push(t);\n        continue;\n      }\n      const tan = curve.tangentAt(t);\n      const prevTan = curve.tangentAt(ts.slice(-1)[0]);\n\n      // Duplicated from THREE.Vector3\n      // How to pass imports to worker?\n\n      const tS = tan[0] * tan[0] + tan[1] * tan[1] + tan[2] * tan[2];\n      const ptS = prevTan[0] * prevTan[0] + prevTan[1] * prevTan[1] + prevTan[2] * prevTan[2];\n      const denominator = Math.sqrt(tS * ptS);\n      let angle;\n      if (denominator === 0) {\n        angle = Math.PI / 2;\n      } else {\n        const theta = (tan.x * prevTan.x + tan.y * prevTan.y + tan.z * prevTan.z) / denominator;\n        angle = Math.acos(Math.max(-1, Math.min(1, theta)));\n      }\n      if (angle < 0.1) continue;\n      ts.push(t);\n    }\n    rc = ts.map(t => curve.pointAt(t));\n    return rc;\n  }\n}\nexport { Rhino3dmLoader };","map":{"version":3,"names":["BufferGeometryLoader","CanvasTexture","ClampToEdgeWrapping","Color","DirectionalLight","DoubleSide","FileLoader","LinearFilter","Line","LineBasicMaterial","Loader","Matrix4","Mesh","MeshPhysicalMaterial","MeshStandardMaterial","Object3D","PointLight","Points","PointsMaterial","RectAreaLight","RepeatWrapping","SpotLight","Sprite","SpriteMaterial","TextureLoader","EXRLoader","_taskCache","WeakMap","Rhino3dmLoader","constructor","manager","libraryPath","libraryPending","libraryBinary","libraryConfig","url","workerLimit","workerPool","workerNextTaskID","workerSourceURL","workerConfig","materials","warnings","setLibraryPath","path","setWorkerLimit","load","onLoad","onProgress","onError","loader","setPath","setResponseType","setRequestHeader","requestHeader","buffer","has","cachedTask","get","promise","then","catch","decodeObjects","result","userData","e","debug","console","log","map","worker","_taskLoad","taskID","taskCost","byteLength","objectPending","_getWorker","_worker","Promise","resolve","reject","_callbacks","postMessage","type","id","message","_createGeometry","data","_releaseTask","set","parse","_compareMaterials","material","mat","name","color","r","g","b","vertexColors","json","JSON","stringify","i","length","m","_mat","push","_createMaterial","renderEnvironment","undefined","metalness","DEFAULT_MATERIAL_NAME","side","diffuseColor","emissive","emissionColor","flatShading","disableLighting","ior","indexOfRefraction","reflectivity","opacity","transparency","specularColor","transparent","pbrSupported","pbr","anisotropy","anisotropic","anisotropyRotation","anisotropicRotation","baseColor","clearcoat","clearcoatRoughness","metallic","transmission","roughness","sheen","specularIntensity","specular","thickness","subsurface","textureLoader","textures","texture","image","bumpMap","envMap","transmissionMap","alphaMap","aoMap","anisotropyMap","clearcoatMap","clearcoatNormalMap","clearcoatRoughnessMap","displacementMap","emissiveMap","metalnessMap","roughnessMap","sheenColorMap","specularColorMap","thicknessMap","wrapS","wrapU","wrapT","wrapV","repeat","mapping","THREE","EquirectangularReflectionMapping","object","instanceDefinitionObjects","instanceDefinitions","instanceReferences","layers","groups","settings","renderSettings","objects","obj","attributes","objectType","matId","materialSource","layerIndex","renderMaterialIndex","materialIndex","rMaterial","_object","_createObject","layer","visible","isInstanceDefinitionObject","add","iDef","j","objectIds","objId","p","idoId","iRef","geometry","parentIdefId","iRefObject","xf","xform","array","matrix","applyMatrix4","clone","_color","hasOwnProperty","sizeAttenuation","size","drawColor","points","mesh","castShadow","castsShadows","receiveShadow","receivesShadows","lines","ctx","document","createElement","getContext","font","fontHeight","fontFace","width","measureText","text","height","window","devicePixelRatio","canvas","style","setTransform","textBaseline","textAlign","fillStyle","a","fillRect","fillText","minFilter","generateMipmaps","depthTest","sprite","position","point","scale","light","lightStyle","location","shadow","normalBias","target","direction","angle","spotAngleRadians","Math","abs","lookAt","intensity","diffuse","_initLibrary","jsLoader","jsContent","binaryLoader","binaryContent","all","wasmBinary","fn","Rhino3dmWorker","toString","body","substring","indexOf","lastIndexOf","join","URL","createObjectURL","Blob","Worker","_taskCosts","onmessage","warn","error","sort","dispose","terminate","rhino","RhinoModule","onRuntimeInitialized","rhino3dm","self","arr","Uint8Array","doc","File3dm","fromByteArray","views","namedViews","strings","objs","cnt","count","extractObjectData","delete","idef","idefAttributes","extractProperties","getObjectIds","textureTypes","TextureType","Diffuse","Bump","Transparency","Opacity","Emap","pbrTextureTypes","PBR_BaseColor","PBR_Subsurface","PBR_SubsurfaceScattering","PBR_SubsurfaceScatteringRadius","PBR_Metallic","PBR_Specular","PBR_SpecularTint","PBR_Roughness","PBR_Anisotropic","PBR_Anisotropic_Rotation","PBR_Sheen","PBR_SheenTint","PBR_Clearcoat","PBR_ClearcoatBump","PBR_ClearcoatRoughness","PBR_OpacityIor","PBR_OpacityRoughness","PBR_Emission","PBR_AmbientOcclusion","PBR_Displacement","_material","extractTextures","physicallyBased","supported","_layer","_view","view","_namedView","namedView","_group","group","strings_count","reflectionId","renderEnvironments","rc","renderContent","content","kind","renderTexture","findChild","fileName","embeddedFiles","_fileName","background","getEmbeddedFileAsBase64","backgroundImage","ambientLight","backgroundColorTop","backgroundColorBottom","useHiddenLights","depthCue","flatShade","renderBackFaces","renderPoints","renderCurves","renderIsoParams","renderMeshEdges","renderAnnotations","useViewportSize","scaleBackgroundToFit","transparentBackground","imageDpi","shadowMapLevel","snapShot","specificViewport","groundPlane","safeFrame","dithering","skylight","linearWorkflow","renderChannels","sun","postEffects","tTypes","d","_texture","getTexture","textureType","extractTextureData","t","tType","wrapW","uvw","uvwTransform","toFloatArray","_geometry","_attributes","ObjectType","Curve","pts","curveToPoints","itemSize","Point","pt","PointSet","toThreejsJSON","Brep","faces","faceIndex","face","_mesh","getMesh","MeshType","Any","append","compact","Extrusion","TextDot","Light","guid","InstanceReference","SubD","subdivide","createFromSubDControlNet","groupCount","groupIds","getGroupList","userStringCount","userStrings","getUserStrings","decals","property","value","curve","pointLimit","pointCount","ts","LineCurve","pointAtStart","pointAtEnd","PolylineCurve","PolyCurve","segmentCount","segment","segmentCurve","segmentArray","concat","ArcCurve","floor","angleDegrees","NurbsCurve","degree","pLine","tryGetPolyline","domain","divisions","tan","tangentAt","prevTan","slice","tS","ptS","denominator","sqrt","PI","theta","x","y","z","acos","max","min","pointAt"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/loaders/3DMLoader.js"],"sourcesContent":["import {\n\tBufferGeometryLoader,\n\tCanvasTexture,\n\tClampToEdgeWrapping,\n\tColor,\n\tDirectionalLight,\n\tDoubleSide,\n\tFileLoader,\n\tLinearFilter,\n\tLine,\n\tLineBasicMaterial,\n\tLoader,\n\tMatrix4,\n\tMesh,\n\tMeshPhysicalMaterial,\n\tMeshStandardMaterial,\n\tObject3D,\n\tPointLight,\n\tPoints,\n\tPointsMaterial,\n\tRectAreaLight,\n\tRepeatWrapping,\n\tSpotLight,\n\tSprite,\n\tSpriteMaterial,\n\tTextureLoader\n} from 'three';\n\nimport { EXRLoader } from '../loaders/EXRLoader.js';\n\nconst _taskCache = new WeakMap();\n\n/**\n * A loader for Rhinoceros 3D files and objects.\n *\n * Rhinoceros is a 3D modeler used to create, edit, analyze, document, render,\n * animate, and translate NURBS curves, surfaces, breps, extrusions, point clouds,\n * as well as polygon meshes and SubD objects. `rhino3dm.js` is compiled to WebAssembly\n * from the open source geometry library `openNURBS`. The loader currently uses\n * `rhino3dm.js 8.4.0`.\n *\n * ```js\n * const loader = new Rhino3dmLoader();\n * loader.setLibraryPath( 'https://cdn.jsdelivr.net/npm/rhino3dm@8.0.1' );\n *\n * const object = await loader.loadAsync( 'models/3dm/Rhino_Logo.3dm' );\n * scene.add( object );\n * ```\n *\n * @augments Loader\n * @three_import import { Rhino3dmLoader } from 'three/addons/loaders/3DMLoader.js';\n */\nclass Rhino3dmLoader extends Loader {\n\n\t/**\n\t * Constructs a new Rhino 3DM loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\t// internals\n\n\t\tthis.libraryPath = '';\n\t\tthis.libraryPending = null;\n\t\tthis.libraryBinary = null;\n\t\tthis.libraryConfig = {};\n\n\t\tthis.url = '';\n\n\t\tthis.workerLimit = 4;\n\t\tthis.workerPool = [];\n\t\tthis.workerNextTaskID = 1;\n\t\tthis.workerSourceURL = '';\n\t\tthis.workerConfig = {};\n\n\t\tthis.materials = [];\n\t\tthis.warnings = [];\n\n\t}\n\n\t/**\n\t * Path to a folder containing the JS and WASM libraries.\n\t *\n\t * @param {string} path - The library path to set.\n\t * @return {Rhino3dmLoader} A reference to this loader.\n\t */\n\tsetLibraryPath( path ) {\n\n\t\tthis.libraryPath = path;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the maximum number of Web Workers to be used during decoding.\n\t * A lower limit may be preferable if workers are also for other\n\t * tasks in the application.\n\t *\n\t * @param {number} workerLimit - The worker limit.\n\t * @return {Rhino3dmLoader} A reference to this loader.\n\t */\n\tsetWorkerLimit( workerLimit ) {\n\n\t\tthis.workerLimit = workerLimit;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Starts loading from the given URL and passes the loaded 3DM asset\n\t * to the `onLoad()` callback.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(Object3D)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst loader = new FileLoader( this.manager );\n\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( this.requestHeader );\n\n\t\tthis.url = url;\n\n\t\tloader.load( url, ( buffer ) => {\n\n\t\t\t// Check for an existing task using this buffer. A transferred buffer cannot be transferred\n\t\t\t// again from this thread.\n\t\t\tif ( _taskCache.has( buffer ) ) {\n\n\t\t\t\tconst cachedTask = _taskCache.get( buffer );\n\n\t\t\t\treturn cachedTask.promise.then( onLoad ).catch( onError );\n\n\t\t\t}\n\n\t\t\tthis.decodeObjects( buffer, url )\n\t\t\t\t.then( result => {\n\n\t\t\t\t\tresult.userData.warnings = this.warnings;\n\t\t\t\t\tonLoad( result );\n\n\t\t\t\t } )\n\t\t\t\t.catch( e => onError( e ) );\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\t/**\n\t * Prints debug messages to the browser console.\n\t */\n\tdebug() {\n\n\t\tconsole.log( 'Task load: ', this.workerPool.map( ( worker ) => worker._taskLoad ) );\n\n\t}\n\n\t/**\n\t * Decodes the 3DM asset data with a Web Worker.\n\t *\n\t * @param {ArrayBuffer} buffer - The raw 3DM asset data as an array buffer.\n\t * @param {string} url - The asset URL.\n\t * @return {Promise<Object3D>} A Promise that resolved with the decoded 3D object.\n\t */\n\tdecodeObjects( buffer, url ) {\n\n\t\tlet worker;\n\t\tlet taskID;\n\n\t\tconst taskCost = buffer.byteLength;\n\n\t\tconst objectPending = this._getWorker( taskCost )\n\t\t\t.then( ( _worker ) => {\n\n\t\t\t\tworker = _worker;\n\t\t\t\ttaskID = this.workerNextTaskID ++;\n\n\t\t\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\t\t\tworker._callbacks[ taskID ] = { resolve, reject };\n\n\t\t\t\t\tworker.postMessage( { type: 'decode', id: taskID, buffer }, [ buffer ] );\n\n\t\t\t\t\t// this.debug();\n\n\t\t\t\t} );\n\n\t\t\t} )\n\t\t\t.then( ( message ) => this._createGeometry( message.data ) )\n\t\t\t.catch( e => {\n\n\t\t\t\tthrow e;\n\n\t\t\t} );\n\n\t\t// Remove task from the task list.\n\t\t// Note: replaced '.finally()' with '.catch().then()' block - iOS 11 support (#19416)\n\t\tobjectPending\n\t\t\t.catch( () => true )\n\t\t\t.then( () => {\n\n\t\t\t\tif ( worker && taskID ) {\n\n\t\t\t\t\tthis._releaseTask( worker, taskID );\n\n\t\t\t\t\t//this.debug();\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t// Cache the task result.\n\t\t_taskCache.set( buffer, {\n\n\t\t\turl: url,\n\t\t\tpromise: objectPending\n\n\t\t} );\n\n\t\treturn objectPending;\n\n\t}\n\n\t/**\n\t * Parses the given 3DM data and passes the loaded 3DM asset\n\t * to the `onLoad()` callback.\n\t *\n\t * @param {ArrayBuffer} data - The raw 3DM asset data as an array buffer.\n\t * @param {function(Object3D)} onLoad - Executed when the loading process has been finished.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t */\n\tparse( data, onLoad, onError ) {\n\n\t\tthis.decodeObjects( data, '' )\n\t\t\t.then( result => {\n\n\t\t\t\tresult.userData.warnings = this.warnings;\n\t\t\t\tonLoad( result );\n\n\t\t\t} )\n\t\t\t.catch( e => onError( e ) );\n\n\t}\n\n\t_compareMaterials( material ) {\n\n\t\tconst mat = {};\n\t\tmat.name = material.name;\n\t\tmat.color = {};\n\t\tmat.color.r = material.color.r;\n\t\tmat.color.g = material.color.g;\n\t\tmat.color.b = material.color.b;\n\t\tmat.type = material.type;\n\t\tmat.vertexColors = material.vertexColors;\n\n\t\tconst json = JSON.stringify( mat );\n\n\t\tfor ( let i = 0; i < this.materials.length; i ++ ) {\n\n\t\t\tconst m = this.materials[ i ];\n\t\t\tconst _mat = {};\n\t\t\t_mat.name = m.name;\n\t\t\t_mat.color = {};\n\t\t\t_mat.color.r = m.color.r;\n\t\t\t_mat.color.g = m.color.g;\n\t\t\t_mat.color.b = m.color.b;\n\t\t\t_mat.type = m.type;\n\t\t\t_mat.vertexColors = m.vertexColors;\n\n\t\t\tif ( JSON.stringify( _mat ) === json ) {\n\n\t\t\t\treturn m;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.materials.push( material );\n\n\t\treturn material;\n\n\t}\n\n\t_createMaterial( material, renderEnvironment ) {\n\n\t\tif ( material === undefined ) {\n\n\t\t\treturn new MeshStandardMaterial( {\n\t\t\t\tcolor: new Color( 1, 1, 1 ),\n\t\t\t\tmetalness: 0.8,\n\t\t\t\tname: Loader.DEFAULT_MATERIAL_NAME,\n\t\t\t\tside: DoubleSide\n\t\t\t} );\n\n\t\t}\n\n\t\t//console.log(material)\n\n\t\tconst mat = new MeshPhysicalMaterial( {\n\n\t\t\tcolor: new Color( material.diffuseColor.r / 255.0, material.diffuseColor.g / 255.0, material.diffuseColor.b / 255.0 ),\n\t\t\temissive: new Color( material.emissionColor.r, material.emissionColor.g, material.emissionColor.b ),\n\t\t\tflatShading: material.disableLighting,\n\t\t\tior: material.indexOfRefraction,\n\t\t\tname: material.name,\n\t\t\treflectivity: material.reflectivity,\n\t\t\topacity: 1.0 - material.transparency,\n\t\t\tside: DoubleSide,\n\t\t\tspecularColor: material.specularColor,\n\t\t\ttransparent: material.transparency > 0 ? true : false\n\n\t\t} );\n\n\t\tmat.userData.id = material.id;\n\n\t\tif ( material.pbrSupported ) {\n\n\t\t\tconst pbr = material.pbr;\n\n\t\t\tmat.anisotropy = pbr.anisotropic;\n\t\t\tmat.anisotropyRotation = pbr.anisotropicRotation;\n\t\t\tmat.color = new Color( pbr.baseColor.r, pbr.baseColor.g, pbr.baseColor.b );\n\t\t\tmat.clearcoat = pbr.clearcoat;\n\t\t\tmat.clearcoatRoughness = pbr.clearcoatRoughness;\n\t\t\tmat.metalness = pbr.metallic;\n\t\t\tmat.transmission = 1 - pbr.opacity;\n\t\t\tmat.roughness = pbr.roughness;\n\t\t\tmat.sheen = pbr.sheen;\n\t\t\tmat.specularIntensity = pbr.specular;\n\t\t\tmat.thickness = pbr.subsurface;\n\n\t\t}\n\n\t\tif ( material.pbrSupported && material.pbr.opacity === 0 && material.transparency === 1 ) {\n\n\t\t\t//some compromises\n\n\t\t\tmat.opacity = 0.2;\n\t\t\tmat.transmission = 1.00;\n\n\t\t}\n\n\t\tconst textureLoader = new TextureLoader();\n\n\t\tfor ( let i = 0; i < material.textures.length; i ++ ) {\n\n\t\t\tconst texture = material.textures[ i ];\n\n\t\t\tif ( texture.image !== null ) {\n\n\t\t\t\tconst map = textureLoader.load( texture.image );\n\n\t\t\t\t//console.log(texture.type )\n\n\t\t\t\tswitch ( texture.type ) {\n\n\t\t\t\t\tcase 'Bump':\n\n\t\t\t\t\t\tmat.bumpMap = map;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Diffuse':\n\n\t\t\t\t\t\tmat.map = map;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Emap':\n\n\t\t\t\t\t\tmat.envMap = map;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Opacity':\n\n\t\t\t\t\t\tmat.transmissionMap = map;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Transparency':\n\n\t\t\t\t\t\tmat.alphaMap = map;\n\t\t\t\t\t\tmat.transparent = true;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PBR_Alpha':\n\n\t\t\t\t\t\tmat.alphaMap = map;\n\t\t\t\t\t\tmat.transparent = true;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PBR_AmbientOcclusion':\n\n\t\t\t\t\t\tmat.aoMap = map;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PBR_Anisotropic':\n\n\t\t\t\t\t\tmat.anisotropyMap = map;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PBR_BaseColor':\n\n\t\t\t\t\t\tmat.map = map;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PBR_Clearcoat':\n\n\t\t\t\t\t\tmat.clearcoatMap = map;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PBR_ClearcoatBump':\n\n\t\t\t\t\t\tmat.clearcoatNormalMap = map;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PBR_ClearcoatRoughness':\n\n\t\t\t\t\t\tmat.clearcoatRoughnessMap = map;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PBR_Displacement':\n\n\t\t\t\t\t\tmat.displacementMap = map;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PBR_Emission':\n\n\t\t\t\t\t\tmat.emissiveMap = map;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PBR_Metallic':\n\n\t\t\t\t\t\tmat.metalnessMap = map;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PBR_Roughness':\n\n\t\t\t\t\t\tmat.roughnessMap = map;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PBR_Sheen':\n\n\t\t\t\t\t\tmat.sheenColorMap = map;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PBR_Specular':\n\n\t\t\t\t\t\tmat.specularColorMap = map;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PBR_Subsurface':\n\n\t\t\t\t\t\tmat.thicknessMap = map;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tthis.warnings.push( {\n\t\t\t\t\t\t\tmessage: `THREE.3DMLoader: No conversion exists for 3dm ${texture.type}.`,\n\t\t\t\t\t\t\ttype: 'no conversion'\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tmap.wrapS = texture.wrapU === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n\t\t\t\tmap.wrapT = texture.wrapV === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n\n\t\t\t\tif ( texture.repeat ) {\n\n\t\t\t\t\tmap.repeat.set( texture.repeat[ 0 ], texture.repeat[ 1 ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( renderEnvironment ) {\n\n\t\t\tnew EXRLoader().load( renderEnvironment.image, function ( texture ) {\n\n\t\t\t\ttexture.mapping = THREE.EquirectangularReflectionMapping;\n\t\t\t\tmat.envMap = texture;\n\n\t\t\t} );\n\n\t\t}\n\n\t\treturn mat;\n\n\t}\n\n\t_createGeometry( data ) {\n\n\t\tconst object = new Object3D();\n\t\tconst instanceDefinitionObjects = [];\n\t\tconst instanceDefinitions = [];\n\t\tconst instanceReferences = [];\n\n\t\tobject.userData[ 'layers' ] = data.layers;\n\t\tobject.userData[ 'groups' ] = data.groups;\n\t\tobject.userData[ 'settings' ] = data.settings;\n\t\tobject.userData.settings[ 'renderSettings' ] = data.renderSettings;\n\t\tobject.userData[ 'objectType' ] = 'File3dm';\n\t\tobject.userData[ 'materials' ] = null;\n\n\t\tobject.name = this.url;\n\n\t\tlet objects = data.objects;\n\t\tconst materials = data.materials;\n\n\t\tfor ( let i = 0; i < objects.length; i ++ ) {\n\n\t\t\tconst obj = objects[ i ];\n\t\t\tconst attributes = obj.attributes;\n\n\t\t\tswitch ( obj.objectType ) {\n\n\t\t\t\tcase 'InstanceDefinition':\n\n\t\t\t\t\tinstanceDefinitions.push( obj );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'InstanceReference':\n\n\t\t\t\t\tinstanceReferences.push( obj );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tlet matId = null;\n\n\t\t\t\t\tswitch ( attributes.materialSource.name ) {\n\n\t\t\t\t\t\tcase 'ObjectMaterialSource_MaterialFromLayer':\n\t\t\t\t\t\t\t//check layer index\n\t\t\t\t\t\t\tif ( attributes.layerIndex >= 0 ) {\n\n\t\t\t\t\t\t\t\tmatId = data.layers[ attributes.layerIndex ].renderMaterialIndex;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ObjectMaterialSource_MaterialFromObject':\n\n\t\t\t\t\t\t\tif ( attributes.materialIndex >= 0 ) {\n\n\t\t\t\t\t\t\t\tmatId = attributes.materialIndex;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tlet material = null;\n\n\t\t\t\t\tif ( matId >= 0 ) {\n\n\t\t\t\t\t\tconst rMaterial = materials[ matId ];\n\t\t\t\t\t\tmaterial = this._createMaterial( rMaterial, data.renderEnvironment );\n\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst _object = this._createObject( obj, material );\n\n\t\t\t\t\tif ( _object === undefined ) {\n\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst layer = data.layers[ attributes.layerIndex ];\n\n\t\t\t\t\t_object.visible = layer ? data.layers[ attributes.layerIndex ].visible : true;\n\n\t\t\t\t\tif ( attributes.isInstanceDefinitionObject ) {\n\n\t\t\t\t\t\tinstanceDefinitionObjects.push( _object );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tobject.add( _object );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( let i = 0; i < instanceDefinitions.length; i ++ ) {\n\n\t\t\tconst iDef = instanceDefinitions[ i ];\n\n\t\t\tobjects = [];\n\n\t\t\tfor ( let j = 0; j < iDef.attributes.objectIds.length; j ++ ) {\n\n\t\t\t\tconst objId = iDef.attributes.objectIds[ j ];\n\n\t\t\t\tfor ( let p = 0; p < instanceDefinitionObjects.length; p ++ ) {\n\n\t\t\t\t\tconst idoId = instanceDefinitionObjects[ p ].userData.attributes.id;\n\n\t\t\t\t\tif ( objId === idoId ) {\n\n\t\t\t\t\t\tobjects.push( instanceDefinitionObjects[ p ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Currently clones geometry and does not take advantage of instancing\n\n\t\t\tfor ( let j = 0; j < instanceReferences.length; j ++ ) {\n\n\t\t\t\tconst iRef = instanceReferences[ j ];\n\n\t\t\t\tif ( iRef.geometry.parentIdefId === iDef.attributes.id ) {\n\n\t\t\t\t\tconst iRefObject = new Object3D();\n\t\t\t\t\tconst xf = iRef.geometry.xform.array;\n\n\t\t\t\t\tconst matrix = new Matrix4();\n\t\t\t\t\tmatrix.set( ...xf );\n\n\t\t\t\t\tiRefObject.applyMatrix4( matrix );\n\n\t\t\t\t\tfor ( let p = 0; p < objects.length; p ++ ) {\n\n\t\t\t\t\t\tiRefObject.add( objects[ p ].clone( true ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tobject.add( iRefObject );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tobject.userData[ 'materials' ] = this.materials;\n\t\tobject.name = '';\n\t\treturn object;\n\n\t}\n\n\t_createObject( obj, mat ) {\n\n\t\tconst loader = new BufferGeometryLoader();\n\n\t\tconst attributes = obj.attributes;\n\n\t\tlet geometry, material, _color, color;\n\n\t\tswitch ( obj.objectType ) {\n\n\t\t\tcase 'Point':\n\t\t\tcase 'PointSet':\n\n\t\t\t\tgeometry = loader.parse( obj.geometry );\n\n\t\t\t\tif ( geometry.attributes.hasOwnProperty( 'color' ) ) {\n\n\t\t\t\t\tmaterial = new PointsMaterial( { vertexColors: true, sizeAttenuation: false, size: 2 } );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_color = attributes.drawColor;\n\t\t\t\t\tcolor = new Color( _color.r / 255.0, _color.g / 255.0, _color.b / 255.0 );\n\t\t\t\t\tmaterial = new PointsMaterial( { color: color, sizeAttenuation: false, size: 2 } );\n\n\t\t\t\t}\n\n\t\t\t\tmaterial = this._compareMaterials( material );\n\n\t\t\t\tconst points = new Points( geometry, material );\n\t\t\t\tpoints.userData[ 'attributes' ] = attributes;\n\t\t\t\tpoints.userData[ 'objectType' ] = obj.objectType;\n\n\t\t\t\tif ( attributes.name ) {\n\n\t\t\t\t\tpoints.name = attributes.name;\n\n\t\t\t\t}\n\n\t\t\t\treturn points;\n\n\t\t\tcase 'Mesh':\n\t\t\tcase 'Extrusion':\n\t\t\tcase 'SubD':\n\t\t\tcase 'Brep':\n\n\t\t\t\tif ( obj.geometry === null ) return;\n\n\t\t\t\tgeometry = loader.parse( obj.geometry );\n\n\n\t\t\t\tif ( mat === null ) {\n\n\t\t\t\t\tmat = this._createMaterial();\n\n\t\t\t\t}\n\n\n\t\t\t\tif ( geometry.attributes.hasOwnProperty( 'color' ) ) {\n\n\t\t\t\t\tmat.vertexColors = true;\n\n\t\t\t\t}\n\n\t\t\t\tmat = this._compareMaterials( mat );\n\n\t\t\t\tconst mesh = new Mesh( geometry, mat );\n\t\t\t\tmesh.castShadow = attributes.castsShadows;\n\t\t\t\tmesh.receiveShadow = attributes.receivesShadows;\n\t\t\t\tmesh.userData[ 'attributes' ] = attributes;\n\t\t\t\tmesh.userData[ 'objectType' ] = obj.objectType;\n\n\t\t\t\tif ( attributes.name ) {\n\n\t\t\t\t\tmesh.name = attributes.name;\n\n\t\t\t\t}\n\n\t\t\t\treturn mesh;\n\n\t\t\tcase 'Curve':\n\n\t\t\t\tgeometry = loader.parse( obj.geometry );\n\n\t\t\t\t_color = attributes.drawColor;\n\t\t\t\tcolor = new Color( _color.r / 255.0, _color.g / 255.0, _color.b / 255.0 );\n\n\t\t\t\tmaterial = new LineBasicMaterial( { color: color } );\n\t\t\t\tmaterial = this._compareMaterials( material );\n\n\t\t\t\tconst lines = new Line( geometry, material );\n\t\t\t\tlines.userData[ 'attributes' ] = attributes;\n\t\t\t\tlines.userData[ 'objectType' ] = obj.objectType;\n\n\t\t\t\tif ( attributes.name ) {\n\n\t\t\t\t\tlines.name = attributes.name;\n\n\t\t\t\t}\n\n\t\t\t\treturn lines;\n\n\t\t\tcase 'TextDot':\n\n\t\t\t\tgeometry = obj.geometry;\n\n\t\t\t\tconst ctx = document.createElement( 'canvas' ).getContext( '2d' );\n\t\t\t\tconst font = `${geometry.fontHeight}px ${geometry.fontFace}`;\n\t\t\t\tctx.font = font;\n\t\t\t\tconst width = ctx.measureText( geometry.text ).width + 10;\n\t\t\t\tconst height = geometry.fontHeight + 10;\n\n\t\t\t\tconst r = window.devicePixelRatio;\n\n\t\t\t\tctx.canvas.width = width * r;\n\t\t\t\tctx.canvas.height = height * r;\n\t\t\t\tctx.canvas.style.width = width + 'px';\n\t\t\t\tctx.canvas.style.height = height + 'px';\n\t\t\t\tctx.setTransform( r, 0, 0, r, 0, 0 );\n\n\t\t\t\tctx.font = font;\n\t\t\t\tctx.textBaseline = 'middle';\n\t\t\t\tctx.textAlign = 'center';\n\t\t\t\tcolor = attributes.drawColor;\n\t\t\t\tctx.fillStyle = `rgba(${color.r},${color.g},${color.b},${color.a})`;\n\t\t\t\tctx.fillRect( 0, 0, width, height );\n\t\t\t\tctx.fillStyle = 'white';\n\t\t\t\tctx.fillText( geometry.text, width / 2, height / 2 );\n\n\t\t\t\tconst texture = new CanvasTexture( ctx.canvas );\n\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\ttexture.wrapS = ClampToEdgeWrapping;\n\t\t\t\ttexture.wrapT = ClampToEdgeWrapping;\n\n\t\t\t\tmaterial = new SpriteMaterial( { map: texture, depthTest: false } );\n\t\t\t\tconst sprite = new Sprite( material );\n\t\t\t\tsprite.position.set( geometry.point[ 0 ], geometry.point[ 1 ], geometry.point[ 2 ] );\n\t\t\t\tsprite.scale.set( width / 10, height / 10, 1.0 );\n\n\t\t\t\tsprite.userData[ 'attributes' ] = attributes;\n\t\t\t\tsprite.userData[ 'objectType' ] = obj.objectType;\n\n\t\t\t\tif ( attributes.name ) {\n\n\t\t\t\t\tsprite.name = attributes.name;\n\n\t\t\t\t}\n\n\t\t\t\treturn sprite;\n\n\t\t\tcase 'Light':\n\n\t\t\t\tgeometry = obj.geometry;\n\n\t\t\t\tlet light;\n\n\t\t\t\tswitch ( geometry.lightStyle.name ) {\n\n\t\t\t\t\tcase 'LightStyle_WorldPoint':\n\n\t\t\t\t\t\tlight = new PointLight();\n\t\t\t\t\t\tlight.castShadow = attributes.castsShadows;\n\t\t\t\t\t\tlight.position.set( geometry.location[ 0 ], geometry.location[ 1 ], geometry.location[ 2 ] );\n\t\t\t\t\t\tlight.shadow.normalBias = 0.1;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'LightStyle_WorldSpot':\n\n\t\t\t\t\t\tlight = new SpotLight();\n\t\t\t\t\t\tlight.castShadow = attributes.castsShadows;\n\t\t\t\t\t\tlight.position.set( geometry.location[ 0 ], geometry.location[ 1 ], geometry.location[ 2 ] );\n\t\t\t\t\t\tlight.target.position.set( geometry.direction[ 0 ], geometry.direction[ 1 ], geometry.direction[ 2 ] );\n\t\t\t\t\t\tlight.angle = geometry.spotAngleRadians;\n\t\t\t\t\t\tlight.shadow.normalBias = 0.1;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'LightStyle_WorldRectangular':\n\n\t\t\t\t\t\tlight = new RectAreaLight();\n\t\t\t\t\t\tconst width = Math.abs( geometry.width[ 2 ] );\n\t\t\t\t\t\tconst height = Math.abs( geometry.length[ 0 ] );\n\t\t\t\t\t\tlight.position.set( geometry.location[ 0 ] - ( height / 2 ), geometry.location[ 1 ], geometry.location[ 2 ] - ( width / 2 ) );\n\t\t\t\t\t\tlight.height = height;\n\t\t\t\t\t\tlight.width = width;\n\t\t\t\t\t\tlight.lookAt( geometry.direction[ 0 ], geometry.direction[ 1 ], geometry.direction[ 2 ] );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'LightStyle_WorldDirectional':\n\n\t\t\t\t\t\tlight = new DirectionalLight();\n\t\t\t\t\t\tlight.castShadow = attributes.castsShadows;\n\t\t\t\t\t\tlight.position.set( geometry.location[ 0 ], geometry.location[ 1 ], geometry.location[ 2 ] );\n\t\t\t\t\t\tlight.target.position.set( geometry.direction[ 0 ], geometry.direction[ 1 ], geometry.direction[ 2 ] );\n\t\t\t\t\t\tlight.shadow.normalBias = 0.1;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'LightStyle_WorldLinear':\n\t\t\t\t\t\t// no conversion exists, warning has already been printed to the console\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tif ( light ) {\n\n\t\t\t\t\tlight.intensity = geometry.intensity;\n\t\t\t\t\t_color = geometry.diffuse;\n\t\t\t\t\tcolor = new Color( _color.r / 255.0, _color.g / 255.0, _color.b / 255.0 );\n\t\t\t\t\tlight.color = color;\n\t\t\t\t\tlight.userData[ 'attributes' ] = attributes;\n\t\t\t\t\tlight.userData[ 'objectType' ] = obj.objectType;\n\n\t\t\t\t}\n\n\t\t\t\treturn light;\n\n\t\t}\n\n\t}\n\n\t_initLibrary() {\n\n\t\tif ( ! this.libraryPending ) {\n\n\t\t\t// Load rhino3dm wrapper.\n\t\t\tconst jsLoader = new FileLoader( this.manager );\n\t\t\tjsLoader.setPath( this.libraryPath );\n\t\t\tconst jsContent = new Promise( ( resolve, reject ) => {\n\n\t\t\t\tjsLoader.load( 'rhino3dm.js', resolve, undefined, reject );\n\n\t\t\t} );\n\n\t\t\t// Load rhino3dm WASM binary.\n\t\t\tconst binaryLoader = new FileLoader( this.manager );\n\t\t\tbinaryLoader.setPath( this.libraryPath );\n\t\t\tbinaryLoader.setResponseType( 'arraybuffer' );\n\t\t\tconst binaryContent = new Promise( ( resolve, reject ) => {\n\n\t\t\t\tbinaryLoader.load( 'rhino3dm.wasm', resolve, undefined, reject );\n\n\t\t\t} );\n\n\t\t\tthis.libraryPending = Promise.all( [ jsContent, binaryContent ] )\n\t\t\t\t.then( ( [ jsContent, binaryContent ] ) => {\n\n\t\t\t\t\t//this.libraryBinary = binaryContent;\n\t\t\t\t\tthis.libraryConfig.wasmBinary = binaryContent;\n\n\t\t\t\t\tconst fn = Rhino3dmWorker.toString();\n\n\t\t\t\t\tconst body = [\n\t\t\t\t\t\t'/* rhino3dm.js */',\n\t\t\t\t\t\tjsContent,\n\t\t\t\t\t\t'/* worker */',\n\t\t\t\t\t\tfn.substring( fn.indexOf( '{' ) + 1, fn.lastIndexOf( '}' ) )\n\t\t\t\t\t].join( '\\n' );\n\n\t\t\t\t\tthis.workerSourceURL = URL.createObjectURL( new Blob( [ body ] ) );\n\n\t\t\t\t} );\n\n\t\t}\n\n\t\treturn this.libraryPending;\n\n\t}\n\n\t_getWorker( taskCost ) {\n\n\t\treturn this._initLibrary().then( () => {\n\n\t\t\tif ( this.workerPool.length < this.workerLimit ) {\n\n\t\t\t\tconst worker = new Worker( this.workerSourceURL );\n\n\t\t\t\tworker._callbacks = {};\n\t\t\t\tworker._taskCosts = {};\n\t\t\t\tworker._taskLoad = 0;\n\n\t\t\t\tworker.postMessage( {\n\t\t\t\t\ttype: 'init',\n\t\t\t\t\tlibraryConfig: this.libraryConfig\n\t\t\t\t} );\n\n\t\t\t\tworker.onmessage = e => {\n\n\t\t\t\t\tconst message = e.data;\n\n\t\t\t\t\tswitch ( message.type ) {\n\n\t\t\t\t\t\tcase 'warning':\n\t\t\t\t\t\t\tthis.warnings.push( message.data );\n\t\t\t\t\t\t\tconsole.warn( message.data );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'decode':\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].resolve( message );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'error':\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].reject( message );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.Rhino3dmLoader: Unexpected message, \"' + message.type + '\"' );\n\n\t\t\t\t\t}\n\n\t\t\t\t};\n\n\t\t\t\tthis.workerPool.push( worker );\n\n\t\t\t} else {\n\n\t\t\t\tthis.workerPool.sort( function ( a, b ) {\n\n\t\t\t\t\treturn a._taskLoad > b._taskLoad ? - 1 : 1;\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tconst worker = this.workerPool[ this.workerPool.length - 1 ];\n\n\t\t\tworker._taskLoad += taskCost;\n\n\t\t\treturn worker;\n\n\t\t} );\n\n\t}\n\n\t_releaseTask( worker, taskID ) {\n\n\t\tworker._taskLoad -= worker._taskCosts[ taskID ];\n\t\tdelete worker._callbacks[ taskID ];\n\t\tdelete worker._taskCosts[ taskID ];\n\n\t}\n\n\t/**\n\t * Frees internal resources. This method should be called\n\t * when the loader is no longer required.\n\t */\n\tdispose() {\n\n\t\tfor ( let i = 0; i < this.workerPool.length; ++ i ) {\n\n\t\t\tthis.workerPool[ i ].terminate();\n\n\t\t}\n\n\t\tthis.workerPool.length = 0;\n\n\t}\n\n}\n\n/* WEB WORKER */\n\nfunction Rhino3dmWorker() {\n\n\tlet libraryPending;\n\tlet libraryConfig;\n\tlet rhino;\n\tlet taskID;\n\n\tonmessage = function ( e ) {\n\n\t\tconst message = e.data;\n\n\t\tswitch ( message.type ) {\n\n\t\t\tcase 'init':\n\n\t\t\t\tlibraryConfig = message.libraryConfig;\n\t\t\t\tconst wasmBinary = libraryConfig.wasmBinary;\n\t\t\t\tlet RhinoModule;\n\t\t\t\tlibraryPending = new Promise( function ( resolve ) {\n\n\t\t\t\t\t/* Like Basis Loader */\n\t\t\t\t\tRhinoModule = { wasmBinary, onRuntimeInitialized: resolve };\n\n\t\t\t\t\trhino3dm( RhinoModule ); // eslint-disable-line no-undef\n\n\t\t\t\t } ).then( () => {\n\n\t\t\t\t\trhino = RhinoModule;\n\n\t\t\t\t } );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'decode':\n\n\t\t\t\ttaskID = message.id;\n\t\t\t\tconst buffer = message.buffer;\n\t\t\t\tlibraryPending.then( () => {\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\tconst data = decodeObjects( rhino, buffer );\n\t\t\t\t\t\tself.postMessage( { type: 'decode', id: message.id, data } );\n\n\t\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t\tself.postMessage( { type: 'error', id: message.id, error } );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t};\n\n\tfunction decodeObjects( rhino, buffer ) {\n\n\t\tconst arr = new Uint8Array( buffer );\n\t\tconst doc = rhino.File3dm.fromByteArray( arr );\n\n\t\tconst objects = [];\n\t\tconst materials = [];\n\t\tconst layers = [];\n\t\tconst views = [];\n\t\tconst namedViews = [];\n\t\tconst groups = [];\n\t\tconst strings = [];\n\n\t\t//Handle objects\n\n\t\tconst objs = doc.objects();\n\t\tconst cnt = objs.count;\n\n\t\tfor ( let i = 0; i < cnt; i ++ ) {\n\n\t\t\tconst _object = objs.get( i );\n\n\t\t\tconst object = extractObjectData( _object, doc );\n\n\t\t\t_object.delete();\n\n\t\t\tif ( object ) {\n\n\t\t\t\tobjects.push( object );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Handle instance definitions\n\t\t// console.log( `Instance Definitions Count: ${doc.instanceDefinitions().count()}` );\n\n\t\tfor ( let i = 0; i < doc.instanceDefinitions().count; i ++ ) {\n\n\t\t\tconst idef = doc.instanceDefinitions().get( i );\n\t\t\tconst idefAttributes = extractProperties( idef );\n\t\t\tidefAttributes.objectIds = idef.getObjectIds();\n\n\t\t\tobjects.push( { geometry: null, attributes: idefAttributes, objectType: 'InstanceDefinition' } );\n\n\t\t}\n\n\t\t// Handle materials\n\n\t\tconst textureTypes = [\n\t\t\t// rhino.TextureType.Bitmap,\n\t\t\trhino.TextureType.Diffuse,\n\t\t\trhino.TextureType.Bump,\n\t\t\trhino.TextureType.Transparency,\n\t\t\trhino.TextureType.Opacity,\n\t\t\trhino.TextureType.Emap\n\t\t];\n\n\t\tconst pbrTextureTypes = [\n\t\t\trhino.TextureType.PBR_BaseColor,\n\t\t\trhino.TextureType.PBR_Subsurface,\n\t\t\trhino.TextureType.PBR_SubsurfaceScattering,\n\t\t\trhino.TextureType.PBR_SubsurfaceScatteringRadius,\n\t\t\trhino.TextureType.PBR_Metallic,\n\t\t\trhino.TextureType.PBR_Specular,\n\t\t\trhino.TextureType.PBR_SpecularTint,\n\t\t\trhino.TextureType.PBR_Roughness,\n\t\t\trhino.TextureType.PBR_Anisotropic,\n\t\t\trhino.TextureType.PBR_Anisotropic_Rotation,\n\t\t\trhino.TextureType.PBR_Sheen,\n\t\t\trhino.TextureType.PBR_SheenTint,\n\t\t\trhino.TextureType.PBR_Clearcoat,\n\t\t\trhino.TextureType.PBR_ClearcoatBump,\n\t\t\trhino.TextureType.PBR_ClearcoatRoughness,\n\t\t\trhino.TextureType.PBR_OpacityIor,\n\t\t\trhino.TextureType.PBR_OpacityRoughness,\n\t\t\trhino.TextureType.PBR_Emission,\n\t\t\trhino.TextureType.PBR_AmbientOcclusion,\n\t\t\trhino.TextureType.PBR_Displacement\n\t\t];\n\n\t\tfor ( let i = 0; i < doc.materials().count; i ++ ) {\n\n\t\t\tconst _material = doc.materials().get( i );\n\n\t\t\tconst material = extractProperties( _material );\n\n\t\t\tconst textures = [];\n\n\t\t\ttextures.push( ...extractTextures( _material, textureTypes, doc ) );\n\n\t\t\tmaterial.pbrSupported = _material.physicallyBased().supported;\n\n\t\t\tif ( material.pbrSupported ) {\n\n\t\t\t\ttextures.push( ...extractTextures( _material, pbrTextureTypes, doc ) );\n\t\t\t\tmaterial.pbr = extractProperties( _material.physicallyBased() );\n\n\t\t\t}\n\n\t\t\tmaterial.textures = textures;\n\n\t\t\tmaterials.push( material );\n\n\t\t\t_material.delete();\n\n\t\t}\n\n\t\t// Handle layers\n\n\t\tfor ( let i = 0; i < doc.layers().count; i ++ ) {\n\n\t\t\tconst _layer = doc.layers().get( i );\n\t\t\tconst layer = extractProperties( _layer );\n\n\t\t\tlayers.push( layer );\n\n\t\t\t_layer.delete();\n\n\t\t}\n\n\t\t// Handle views\n\n\t\tfor ( let i = 0; i < doc.views().count; i ++ ) {\n\n\t\t\tconst _view = doc.views().get( i );\n\t\t\tconst view = extractProperties( _view );\n\n\t\t\tviews.push( view );\n\n\t\t\t_view.delete();\n\n\t\t}\n\n\t\t// Handle named views\n\n\t\tfor ( let i = 0; i < doc.namedViews().count; i ++ ) {\n\n\t\t\tconst _namedView = doc.namedViews().get( i );\n\t\t\tconst namedView = extractProperties( _namedView );\n\n\t\t\tnamedViews.push( namedView );\n\n\t\t\t_namedView.delete();\n\n\t\t}\n\n\t\t// Handle groups\n\n\t\tfor ( let i = 0; i < doc.groups().count; i ++ ) {\n\n\t\t\tconst _group = doc.groups().get( i );\n\t\t\tconst group = extractProperties( _group );\n\n\t\t\tgroups.push( group );\n\n\t\t\t_group.delete();\n\n\t\t}\n\n\t\t// Handle settings\n\n\t\tconst settings = extractProperties( doc.settings() );\n\n\t\t//TODO: Handle other document stuff like dimstyles, instance definitions, bitmaps etc.\n\n\t\t// Handle dimstyles\n\t\t// console.log( `Dimstyle Count: ${doc.dimstyles().count()}` );\n\n\t\t// Handle bitmaps\n\t\t// console.log( `Bitmap Count: ${doc.bitmaps().count()}` );\n\n\t\t// Handle strings\n\t\t// console.log( `Document Strings Count: ${doc.strings().count()}` );\n\t\t// Note: doc.strings().documentUserTextCount() counts any doc.strings defined in a section\n\t\t// console.log( `Document User Text Count: ${doc.strings().documentUserTextCount()}` );\n\n\t\tconst strings_count = doc.strings().count;\n\n\t\tfor ( let i = 0; i < strings_count; i ++ ) {\n\n\t\t\tstrings.push( doc.strings().get( i ) );\n\n\t\t}\n\n\t\t// Handle Render Environments for Material Environment\n\n\t\t// get the id of the active render environment skylight, which we'll use for environment texture\n\t\tconst reflectionId = doc.settings().renderSettings().renderEnvironments.reflectionId;\n\n\t\tconst rc = doc.renderContent();\n\n\t\tlet renderEnvironment = null;\n\n\t\tfor ( let i = 0; i < rc.count; i ++ ) {\n\n\t\t\tconst content = rc.get( i );\n\n\t\t\tswitch ( content.kind ) {\n\n\t\t\t\tcase 'environment':\n\n\t\t\t\t\tconst id = content.id;\n\n\t\t\t\t\t// there could be multiple render environments in a 3dm file\n\t\t\t\t\tif ( id !== reflectionId ) break;\n\n\t\t\t\t\tconst renderTexture = content.findChild( 'texture' );\n\t\t\t\t\tconst fileName = renderTexture.fileName;\n\n\t\t\t\t\tfor ( let j = 0; j < doc.embeddedFiles().count; j ++ ) {\n\n\t\t\t\t\t\tconst _fileName = doc.embeddedFiles().get( j ).fileName;\n\n\t\t\t\t\t\tif ( fileName === _fileName ) {\n\n\t\t\t\t\t\t\tconst background = doc.getEmbeddedFileAsBase64( fileName );\n\t\t\t\t\t\t\tconst backgroundImage = 'data:image/png;base64,' + background;\n\t\t\t\t\t\t\trenderEnvironment = { type: 'renderEnvironment', image: backgroundImage, name: fileName };\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Handle Render Settings\n\n\t\tconst renderSettings = {\n\t\t\tambientLight: doc.settings().renderSettings().ambientLight,\n\t\t\tbackgroundColorTop: doc.settings().renderSettings().backgroundColorTop,\n\t\t\tbackgroundColorBottom: doc.settings().renderSettings().backgroundColorBottom,\n\t\t\tuseHiddenLights: doc.settings().renderSettings().useHiddenLights,\n\t\t\tdepthCue: doc.settings().renderSettings().depthCue,\n\t\t\tflatShade: doc.settings().renderSettings().flatShade,\n\t\t\trenderBackFaces: doc.settings().renderSettings().renderBackFaces,\n\t\t\trenderPoints: doc.settings().renderSettings().renderPoints,\n\t\t\trenderCurves: doc.settings().renderSettings().renderCurves,\n\t\t\trenderIsoParams: doc.settings().renderSettings().renderIsoParams,\n\t\t\trenderMeshEdges: doc.settings().renderSettings().renderMeshEdges,\n\t\t\trenderAnnotations: doc.settings().renderSettings().renderAnnotations,\n\t\t\tuseViewportSize: doc.settings().renderSettings().useViewportSize,\n\t\t\tscaleBackgroundToFit: doc.settings().renderSettings().scaleBackgroundToFit,\n\t\t\ttransparentBackground: doc.settings().renderSettings().transparentBackground,\n\t\t\timageDpi: doc.settings().renderSettings().imageDpi,\n\t\t\tshadowMapLevel: doc.settings().renderSettings().shadowMapLevel,\n\t\t\tnamedView: doc.settings().renderSettings().namedView,\n\t\t\tsnapShot: doc.settings().renderSettings().snapShot,\n\t\t\tspecificViewport: doc.settings().renderSettings().specificViewport,\n\t\t\tgroundPlane: extractProperties( doc.settings().renderSettings().groundPlane ),\n\t\t\tsafeFrame: extractProperties( doc.settings().renderSettings().safeFrame ),\n\t\t\tdithering: extractProperties( doc.settings().renderSettings().dithering ),\n\t\t\tskylight: extractProperties( doc.settings().renderSettings().skylight ),\n\t\t\tlinearWorkflow: extractProperties( doc.settings().renderSettings().linearWorkflow ),\n\t\t\trenderChannels: extractProperties( doc.settings().renderSettings().renderChannels ),\n\t\t\tsun: extractProperties( doc.settings().renderSettings().sun ),\n\t\t\trenderEnvironments: extractProperties( doc.settings().renderSettings().renderEnvironments ),\n\t\t\tpostEffects: extractProperties( doc.settings().renderSettings().postEffects ),\n\n\t\t};\n\n\t\tdoc.delete();\n\n\t\treturn { objects, materials, layers, views, namedViews, groups, strings, settings, renderSettings, renderEnvironment };\n\n\t}\n\n\tfunction extractTextures( m, tTypes, d ) {\n\n\t\tconst textures = [];\n\n\t\tfor ( let i = 0; i < tTypes.length; i ++ ) {\n\n\t\t\tconst _texture = m.getTexture( tTypes[ i ] );\n\t\t\tif ( _texture ) {\n\n\t\t\t\tlet textureType = tTypes[ i ].constructor.name;\n\t\t\t\ttextureType = textureType.substring( 12, textureType.length );\n\t\t\t\tconst texture = extractTextureData( _texture, textureType, d );\n\t\t\t\ttextures.push( texture );\n\t\t\t\t_texture.delete();\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn textures;\n\n\t}\n\n\tfunction extractTextureData( t, tType, d ) {\n\n\t\tconst texture = { type: tType };\n\n\t\tconst image = d.getEmbeddedFileAsBase64( t.fileName );\n\n\t\ttexture.wrapU = t.wrapU;\n\t\ttexture.wrapV = t.wrapV;\n\t\ttexture.wrapW = t.wrapW;\n\t\tconst uvw = t.uvwTransform.toFloatArray( true );\n\n\t\ttexture.repeat = [ uvw[ 0 ], uvw[ 5 ] ];\n\n\t\tif ( image ) {\n\n\t\t\ttexture.image = 'data:image/png;base64,' + image;\n\n\t\t} else {\n\n\t\t\tself.postMessage( { type: 'warning', id: taskID, data: {\n\t\t\t\tmessage: `THREE.3DMLoader: Image for ${tType} texture not embedded in file.`,\n\t\t\t\ttype: 'missing resource'\n\t\t\t}\n\n\t\t\t} );\n\n\t\t\ttexture.image = null;\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n\tfunction extractObjectData( object, doc ) {\n\n\t\tconst _geometry = object.geometry();\n\t\tconst _attributes = object.attributes();\n\t\tlet objectType = _geometry.objectType;\n\t\tlet geometry, attributes, position, data, mesh;\n\n\t\t// skip instance definition objects\n\t\t//if( _attributes.isInstanceDefinitionObject ) { continue; }\n\n\t\t// TODO: handle other geometry types\n\t\tswitch ( objectType ) {\n\n\t\t\tcase rhino.ObjectType.Curve:\n\n\t\t\t\tconst pts = curveToPoints( _geometry, 100 );\n\n\t\t\t\tposition = {};\n\t\t\t\tattributes = {};\n\t\t\t\tdata = {};\n\n\t\t\t\tposition.itemSize = 3;\n\t\t\t\tposition.type = 'Float32Array';\n\t\t\t\tposition.array = [];\n\n\t\t\t\tfor ( let j = 0; j < pts.length; j ++ ) {\n\n\t\t\t\t\tposition.array.push( pts[ j ][ 0 ] );\n\t\t\t\t\tposition.array.push( pts[ j ][ 1 ] );\n\t\t\t\t\tposition.array.push( pts[ j ][ 2 ] );\n\n\t\t\t\t}\n\n\t\t\t\tattributes.position = position;\n\t\t\t\tdata.attributes = attributes;\n\n\t\t\t\tgeometry = { data };\n\n\t\t\t\tbreak;\n\n\t\t\tcase rhino.ObjectType.Point:\n\n\t\t\t\tconst pt = _geometry.location;\n\n\t\t\t\tposition = {};\n\t\t\t\tconst color = {};\n\t\t\t\tattributes = {};\n\t\t\t\tdata = {};\n\n\t\t\t\tposition.itemSize = 3;\n\t\t\t\tposition.type = 'Float32Array';\n\t\t\t\tposition.array = [ pt[ 0 ], pt[ 1 ], pt[ 2 ] ];\n\n\t\t\t\tconst _color = _attributes.drawColor( doc );\n\n\t\t\t\tcolor.itemSize = 3;\n\t\t\t\tcolor.type = 'Float32Array';\n\t\t\t\tcolor.array = [ _color.r / 255.0, _color.g / 255.0, _color.b / 255.0 ];\n\n\t\t\t\tattributes.position = position;\n\t\t\t\tattributes.color = color;\n\t\t\t\tdata.attributes = attributes;\n\n\t\t\t\tgeometry = { data };\n\n\t\t\t\tbreak;\n\n\t\t\tcase rhino.ObjectType.PointSet:\n\t\t\tcase rhino.ObjectType.Mesh:\n\n\t\t\t\tgeometry = _geometry.toThreejsJSON();\n\n\t\t\t\tbreak;\n\n\t\t\tcase rhino.ObjectType.Brep:\n\n\t\t\t\tconst faces = _geometry.faces();\n\t\t\t\tmesh = new rhino.Mesh();\n\n\t\t\t\tfor ( let faceIndex = 0; faceIndex < faces.count; faceIndex ++ ) {\n\n\t\t\t\t\tconst face = faces.get( faceIndex );\n\t\t\t\t\tconst _mesh = face.getMesh( rhino.MeshType.Any );\n\n\t\t\t\t\tif ( _mesh ) {\n\n\t\t\t\t\t\tmesh.append( _mesh );\n\t\t\t\t\t\t_mesh.delete();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tface.delete();\n\n\t\t\t\t}\n\n\t\t\t\tif ( mesh.faces().count > 0 ) {\n\n\t\t\t\t\tmesh.compact();\n\t\t\t\t\tgeometry = mesh.toThreejsJSON();\n\t\t\t\t\tfaces.delete();\n\n\t\t\t\t}\n\n\t\t\t\tmesh.delete();\n\n\t\t\t\tbreak;\n\n\t\t\tcase rhino.ObjectType.Extrusion:\n\n\t\t\t\tmesh = _geometry.getMesh( rhino.MeshType.Any );\n\n\t\t\t\tif ( mesh ) {\n\n\t\t\t\t\tgeometry = mesh.toThreejsJSON();\n\t\t\t\t\tmesh.delete();\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase rhino.ObjectType.TextDot:\n\n\t\t\t\tgeometry = extractProperties( _geometry );\n\n\t\t\t\tbreak;\n\n\t\t\tcase rhino.ObjectType.Light:\n\n\t\t\t\tgeometry = extractProperties( _geometry );\n\n\t\t\t\tif ( geometry.lightStyle.name === 'LightStyle_WorldLinear' ) {\n\n\t\t\t\t\tself.postMessage( { type: 'warning', id: taskID, data: {\n\t\t\t\t\t\tmessage: `THREE.3DMLoader: No conversion exists for ${objectType.constructor.name} ${geometry.lightStyle.name}`,\n\t\t\t\t\t\ttype: 'no conversion',\n\t\t\t\t\t\tguid: _attributes.id\n\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase rhino.ObjectType.InstanceReference:\n\n\t\t\t\tgeometry = extractProperties( _geometry );\n\t\t\t\tgeometry.xform = extractProperties( _geometry.xform );\n\t\t\t\tgeometry.xform.array = _geometry.xform.toFloatArray( true );\n\n\t\t\t\tbreak;\n\n\t\t\tcase rhino.ObjectType.SubD:\n\n\t\t\t\t// TODO: precalculate resulting vertices and faces and warn on excessive results\n\t\t\t\t_geometry.subdivide( 3 );\n\t\t\t\tmesh = rhino.Mesh.createFromSubDControlNet( _geometry, false );\n\t\t\t\tif ( mesh ) {\n\n\t\t\t\t\tgeometry = mesh.toThreejsJSON();\n\t\t\t\t\tmesh.delete();\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\t\t/*\n\t\t\t\tcase rhino.ObjectType.Annotation:\n\t\t\t\tcase rhino.ObjectType.Hatch:\n\t\t\t\tcase rhino.ObjectType.ClipPlane:\n\t\t\t\t*/\n\n\t\t\tdefault:\n\n\t\t\t\tself.postMessage( { type: 'warning', id: taskID, data: {\n\t\t\t\t\tmessage: `THREE.3DMLoader: Conversion not implemented for ${objectType.constructor.name}`,\n\t\t\t\t\ttype: 'not implemented',\n\t\t\t\t\tguid: _attributes.id\n\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tif ( geometry ) {\n\n\t\t\tattributes = extractProperties( _attributes );\n\t\t\tattributes.geometry = extractProperties( _geometry );\n\n\t\t\tif ( _attributes.groupCount > 0 ) {\n\n\t\t\t\tattributes.groupIds = _attributes.getGroupList();\n\n\t\t\t}\n\n\t\t\tif ( _attributes.userStringCount > 0 ) {\n\n\t\t\t\tattributes.userStrings = _attributes.getUserStrings();\n\n\t\t\t}\n\n\t\t\tif ( _geometry.userStringCount > 0 ) {\n\n\t\t\t\tattributes.geometry.userStrings = _geometry.getUserStrings();\n\n\t\t\t}\n\n\t\t\tif ( _attributes.decals().count > 0 ) {\n\n\t\t\t\tself.postMessage( { type: 'warning', id: taskID, data: {\n\t\t\t\t\tmessage: 'THREE.3DMLoader: No conversion exists for the decals associated with this object.',\n\t\t\t\t\ttype: 'no conversion',\n\t\t\t\t\tguid: _attributes.id\n\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tattributes.drawColor = _attributes.drawColor( doc );\n\n\t\t\tobjectType = objectType.constructor.name;\n\t\t\tobjectType = objectType.substring( 11, objectType.length );\n\n\t\t\treturn { geometry, attributes, objectType };\n\n\t\t} else {\n\n\t\t\tself.postMessage( { type: 'warning', id: taskID, data: {\n\t\t\t\tmessage: `THREE.3DMLoader: ${objectType.constructor.name} has no associated mesh geometry.`,\n\t\t\t\ttype: 'missing mesh',\n\t\t\t\tguid: _attributes.id\n\t\t\t}\n\n\t\t\t} );\n\n\t\t}\n\n\t}\n\n\tfunction extractProperties( object ) {\n\n\t\tconst result = {};\n\n\t\tfor ( const property in object ) {\n\n\t\t\tconst value = object[ property ];\n\n\t\t\tif ( typeof value !== 'function' ) {\n\n\t\t\t\tif ( typeof value === 'object' && value !== null && value.hasOwnProperty( 'constructor' ) ) {\n\n\t\t\t\t\tresult[ property ] = { name: value.constructor.name, value: value.value };\n\n\t\t\t\t} else if ( typeof value === 'object' && value !== null ) {\n\n\t\t\t\t\tresult[ property ] = extractProperties( value );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tresult[ property ] = value;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// these are functions that could be called to extract more data.\n\t\t\t\t//console.log( `${property}: ${object[ property ].constructor.name}` );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\tfunction curveToPoints( curve, pointLimit ) {\n\n\t\tlet pointCount = pointLimit;\n\t\tlet rc = [];\n\t\tconst ts = [];\n\n\t\tif ( curve instanceof rhino.LineCurve ) {\n\n\t\t\treturn [ curve.pointAtStart, curve.pointAtEnd ];\n\n\t\t}\n\n\t\tif ( curve instanceof rhino.PolylineCurve ) {\n\n\t\t\tpointCount = curve.pointCount;\n\t\t\tfor ( let i = 0; i < pointCount; i ++ ) {\n\n\t\t\t\trc.push( curve.point( i ) );\n\n\t\t\t}\n\n\t\t\treturn rc;\n\n\t\t}\n\n\t\tif ( curve instanceof rhino.PolyCurve ) {\n\n\t\t\tconst segmentCount = curve.segmentCount;\n\n\t\t\tfor ( let i = 0; i < segmentCount; i ++ ) {\n\n\t\t\t\tconst segment = curve.segmentCurve( i );\n\t\t\t\tconst segmentArray = curveToPoints( segment, pointCount );\n\t\t\t\trc = rc.concat( segmentArray );\n\t\t\t\tsegment.delete();\n\n\t\t\t}\n\n\t\t\treturn rc;\n\n\t\t}\n\n\t\tif ( curve instanceof rhino.ArcCurve ) {\n\n\t\t\tpointCount = Math.floor( curve.angleDegrees / 5 );\n\t\t\tpointCount = pointCount < 2 ? 2 : pointCount;\n\t\t\t// alternative to this hardcoded version: https://stackoverflow.com/a/18499923/2179399\n\n\t\t}\n\n\t\tif ( curve instanceof rhino.NurbsCurve && curve.degree === 1 ) {\n\n\t\t\tconst pLine = curve.tryGetPolyline();\n\n\t\t\tfor ( let i = 0; i < pLine.count; i ++ ) {\n\n\t\t\t\trc.push( pLine.get( i ) );\n\n\t\t\t}\n\n\t\t\tpLine.delete();\n\n\t\t\treturn rc;\n\n\t\t}\n\n\t\tconst domain = curve.domain;\n\t\tconst divisions = pointCount - 1.0;\n\n\t\tfor ( let j = 0; j < pointCount; j ++ ) {\n\n\t\t\tconst t = domain[ 0 ] + ( j / divisions ) * ( domain[ 1 ] - domain[ 0 ] );\n\n\t\t\tif ( t === domain[ 0 ] || t === domain[ 1 ] ) {\n\n\t\t\t\tts.push( t );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tconst tan = curve.tangentAt( t );\n\t\t\tconst prevTan = curve.tangentAt( ts.slice( - 1 )[ 0 ] );\n\n\t\t\t// Duplicated from THREE.Vector3\n\t\t\t// How to pass imports to worker?\n\n\t\t\tconst tS = tan[ 0 ] * tan[ 0 ] + tan[ 1 ] * tan[ 1 ] + tan[ 2 ] * tan[ 2 ];\n\t\t\tconst ptS = prevTan[ 0 ] * prevTan[ 0 ] + prevTan[ 1 ] * prevTan[ 1 ] + prevTan[ 2 ] * prevTan[ 2 ];\n\n\t\t\tconst denominator = Math.sqrt( tS * ptS );\n\n\t\t\tlet angle;\n\n\t\t\tif ( denominator === 0 ) {\n\n\t\t\t\tangle = Math.PI / 2;\n\n\t\t\t} else {\n\n\t\t\t\tconst theta = ( tan.x * prevTan.x + tan.y * prevTan.y + tan.z * prevTan.z ) / denominator;\n\t\t\t\tangle = Math.acos( Math.max( - 1, Math.min( 1, theta ) ) );\n\n\t\t\t}\n\n\t\t\tif ( angle < 0.1 ) continue;\n\n\t\t\tts.push( t );\n\n\t\t}\n\n\t\trc = ts.map( t => curve.pointAt( t ) );\n\t\treturn rc;\n\n\t}\n\n}\n\nexport { Rhino3dmLoader };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}