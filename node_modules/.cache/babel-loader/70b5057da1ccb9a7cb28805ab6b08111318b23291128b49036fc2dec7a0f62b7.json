{"ast":null,"code":"/**\n * This class is an alternative to {@link Clock} with a different API design and behavior.\n * The goal is to avoid the conceptual flaws that became apparent in `Clock` over time.\n *\n * - `Timer` has an `update()` method that updates its internal state. That makes it possible to\n * call `getDelta()` and `getElapsed()` multiple times per simulation step without getting different values.\n * - The class can make use of the Page Visibility API to avoid large time delta values when the app\n * is inactive (e.g. tab switched or browser hidden).\n *\n * ```js\n * const timer = new Timer();\n * timer.connect( document ); // use Page Visibility API\n * ```\n *\n * @three_import import { Timer } from 'three/addons/misc/Timer.js';\n */\nclass Timer {\n  /**\n   * Constructs a new timer.\n   */\n  constructor() {\n    this._previousTime = 0;\n    this._currentTime = 0;\n    this._startTime = now();\n    this._delta = 0;\n    this._elapsed = 0;\n    this._timescale = 1;\n    this._document = null;\n    this._pageVisibilityHandler = null;\n  }\n\n  /**\n   * Connect the timer to the given document.Calling this method is not mandatory to\n   * use the timer but enables the usage of the Page Visibility API to avoid large time\n   * delta values.\n   *\n   * @param {Document} document - The document.\n   */\n  connect(document) {\n    this._document = document;\n\n    // use Page Visibility API to avoid large time delta values\n\n    if (document.hidden !== undefined) {\n      this._pageVisibilityHandler = handleVisibilityChange.bind(this);\n      document.addEventListener('visibilitychange', this._pageVisibilityHandler, false);\n    }\n  }\n\n  /**\n   * Disconnects the timer from the DOM and also disables the usage of the Page Visibility API.\n   */\n  disconnect() {\n    if (this._pageVisibilityHandler !== null) {\n      this._document.removeEventListener('visibilitychange', this._pageVisibilityHandler);\n      this._pageVisibilityHandler = null;\n    }\n    this._document = null;\n  }\n\n  /**\n   * Returns the time delta in seconds.\n   *\n   * @return {number} The time delta in second.\n   */\n  getDelta() {\n    return this._delta / 1000;\n  }\n\n  /**\n   * Returns the elapsed time in seconds.\n   *\n   * @return {number} The elapsed time in second.\n   */\n  getElapsed() {\n    return this._elapsed / 1000;\n  }\n\n  /**\n   * Returns the timescale.\n   *\n   * @return {number} The timescale.\n   */\n  getTimescale() {\n    return this._timescale;\n  }\n\n  /**\n   * Sets the given timescale which scale the time delta computation\n   * in `update()`.\n   *\n   * @param {number} timescale - The timescale to set.\n   * @return {Timer} A reference to this timer.\n   */\n  setTimescale(timescale) {\n    this._timescale = timescale;\n    return this;\n  }\n\n  /**\n   * Resets the time computation for the current simulation step.\n   *\n   * @return {Timer} A reference to this timer.\n   */\n  reset() {\n    this._currentTime = now() - this._startTime;\n    return this;\n  }\n\n  /**\n   * Can be used to free all internal resources. Usually called when\n   * the timer instance isn't required anymore.\n   */\n  dispose() {\n    this.disconnect();\n  }\n\n  /**\n   * Updates the internal state of the timer. This method should be called\n   * once per simulation step and before you perform queries against the timer\n   * (e.g. via `getDelta()`).\n   *\n   * @param {number} timestamp - The current time in milliseconds. Can be obtained\n   * from the `requestAnimationFrame` callback argument. If not provided, the current\n   * time will be determined with `performance.now`.\n   * @return {Timer} A reference to this timer.\n   */\n  update(timestamp) {\n    if (this._pageVisibilityHandler !== null && this._document.hidden === true) {\n      this._delta = 0;\n    } else {\n      this._previousTime = this._currentTime;\n      this._currentTime = (timestamp !== undefined ? timestamp : now()) - this._startTime;\n      this._delta = (this._currentTime - this._previousTime) * this._timescale;\n      this._elapsed += this._delta; // _elapsed is the accumulation of all previous deltas\n    }\n    return this;\n  }\n}\n\n/**\n * A special version of a timer with a fixed time delta value.\n * Can be useful for testing and debugging purposes.\n *\n * @augments Timer\n */\nclass FixedTimer extends Timer {\n  /**\n   * Constructs a new timer.\n   *\n   * @param {number} [fps=60] - The fixed FPS of this timer.\n   */\n  constructor(fps = 60) {\n    super();\n    this._delta = 1 / fps * 1000;\n  }\n  update() {\n    this._elapsed += this._delta * this._timescale; // _elapsed is the accumulation of all previous deltas\n\n    return this;\n  }\n}\nfunction now() {\n  return performance.now();\n}\nfunction handleVisibilityChange() {\n  if (this._document.hidden === false) this.reset();\n}\nexport { Timer, FixedTimer };","map":{"version":3,"names":["Timer","constructor","_previousTime","_currentTime","_startTime","now","_delta","_elapsed","_timescale","_document","_pageVisibilityHandler","connect","document","hidden","undefined","handleVisibilityChange","bind","addEventListener","disconnect","removeEventListener","getDelta","getElapsed","getTimescale","setTimescale","timescale","reset","dispose","update","timestamp","FixedTimer","fps","performance"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/misc/Timer.js"],"sourcesContent":["/**\n * This class is an alternative to {@link Clock} with a different API design and behavior.\n * The goal is to avoid the conceptual flaws that became apparent in `Clock` over time.\n *\n * - `Timer` has an `update()` method that updates its internal state. That makes it possible to\n * call `getDelta()` and `getElapsed()` multiple times per simulation step without getting different values.\n * - The class can make use of the Page Visibility API to avoid large time delta values when the app\n * is inactive (e.g. tab switched or browser hidden).\n *\n * ```js\n * const timer = new Timer();\n * timer.connect( document ); // use Page Visibility API\n * ```\n *\n * @three_import import { Timer } from 'three/addons/misc/Timer.js';\n */\nclass Timer {\n\n\t/**\n\t * Constructs a new timer.\n\t */\n\tconstructor() {\n\n\t\tthis._previousTime = 0;\n\t\tthis._currentTime = 0;\n\t\tthis._startTime = now();\n\n\t\tthis._delta = 0;\n\t\tthis._elapsed = 0;\n\n\t\tthis._timescale = 1;\n\n\t\tthis._document = null;\n\t\tthis._pageVisibilityHandler = null;\n\n\t}\n\n\t/**\n\t * Connect the timer to the given document.Calling this method is not mandatory to\n\t * use the timer but enables the usage of the Page Visibility API to avoid large time\n\t * delta values.\n\t *\n\t * @param {Document} document - The document.\n\t */\n\tconnect( document ) {\n\n\t\tthis._document = document;\n\n\t\t// use Page Visibility API to avoid large time delta values\n\n\t\tif ( document.hidden !== undefined ) {\n\n\t\t\tthis._pageVisibilityHandler = handleVisibilityChange.bind( this );\n\n\t\t\tdocument.addEventListener( 'visibilitychange', this._pageVisibilityHandler, false );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Disconnects the timer from the DOM and also disables the usage of the Page Visibility API.\n\t */\n\tdisconnect() {\n\n\t\tif ( this._pageVisibilityHandler !== null ) {\n\n\t\t\tthis._document.removeEventListener( 'visibilitychange', this._pageVisibilityHandler );\n\t\t\tthis._pageVisibilityHandler = null;\n\n\t\t}\n\n\t\tthis._document = null;\n\n\t}\n\n\t/**\n\t * Returns the time delta in seconds.\n\t *\n\t * @return {number} The time delta in second.\n\t */\n\tgetDelta() {\n\n\t\treturn this._delta / 1000;\n\n\t}\n\n\t/**\n\t * Returns the elapsed time in seconds.\n\t *\n\t * @return {number} The elapsed time in second.\n\t */\n\tgetElapsed() {\n\n\t\treturn this._elapsed / 1000;\n\n\t}\n\n\t/**\n\t * Returns the timescale.\n\t *\n\t * @return {number} The timescale.\n\t */\n\tgetTimescale() {\n\n\t\treturn this._timescale;\n\n\t}\n\n\t/**\n\t * Sets the given timescale which scale the time delta computation\n\t * in `update()`.\n\t *\n\t * @param {number} timescale - The timescale to set.\n\t * @return {Timer} A reference to this timer.\n\t */\n\tsetTimescale( timescale ) {\n\n\t\tthis._timescale = timescale;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Resets the time computation for the current simulation step.\n\t *\n\t * @return {Timer} A reference to this timer.\n\t */\n\treset() {\n\n\t\tthis._currentTime = now() - this._startTime;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Can be used to free all internal resources. Usually called when\n\t * the timer instance isn't required anymore.\n\t */\n\tdispose() {\n\n\t\tthis.disconnect();\n\n\t}\n\n\t/**\n\t * Updates the internal state of the timer. This method should be called\n\t * once per simulation step and before you perform queries against the timer\n\t * (e.g. via `getDelta()`).\n\t *\n\t * @param {number} timestamp - The current time in milliseconds. Can be obtained\n\t * from the `requestAnimationFrame` callback argument. If not provided, the current\n\t * time will be determined with `performance.now`.\n\t * @return {Timer} A reference to this timer.\n\t */\n\tupdate( timestamp ) {\n\n\t\tif ( this._pageVisibilityHandler !== null && this._document.hidden === true ) {\n\n\t\t\tthis._delta = 0;\n\n\t\t} else {\n\n\t\t\tthis._previousTime = this._currentTime;\n\t\t\tthis._currentTime = ( timestamp !== undefined ? timestamp : now() ) - this._startTime;\n\n\t\t\tthis._delta = ( this._currentTime - this._previousTime ) * this._timescale;\n\t\t\tthis._elapsed += this._delta; // _elapsed is the accumulation of all previous deltas\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * A special version of a timer with a fixed time delta value.\n * Can be useful for testing and debugging purposes.\n *\n * @augments Timer\n */\nclass FixedTimer extends Timer {\n\n\t/**\n\t * Constructs a new timer.\n\t *\n\t * @param {number} [fps=60] - The fixed FPS of this timer.\n\t */\n\tconstructor( fps = 60 ) {\n\n\t\tsuper();\n\t\tthis._delta = ( 1 / fps ) * 1000;\n\n\t}\n\n\tupdate() {\n\n\t\tthis._elapsed += ( this._delta * this._timescale ); // _elapsed is the accumulation of all previous deltas\n\n\t\treturn this;\n\n\t}\n\n}\n\nfunction now() {\n\n\treturn performance.now();\n\n}\n\nfunction handleVisibilityChange() {\n\n\tif ( this._document.hidden === false ) this.reset();\n\n}\n\nexport { Timer, FixedTimer };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}