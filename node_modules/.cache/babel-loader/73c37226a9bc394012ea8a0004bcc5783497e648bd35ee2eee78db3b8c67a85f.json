{"ast":null,"code":"import { MathUtils, Quaternion, Vector3 } from 'three';\n\n/**\n * @module CameraUtils\n * @three_import import * as CameraUtils from 'three/addons/utils/CameraUtils.js';\n */\n\nconst _va = /*@__PURE__*/new Vector3(),\n  // from pe to pa\n  _vb = /*@__PURE__*/new Vector3(),\n  // from pe to pb\n  _vc = /*@__PURE__*/new Vector3(),\n  // from pe to pc\n  _vr = /*@__PURE__*/new Vector3(),\n  // right axis of screen\n  _vu = /*@__PURE__*/new Vector3(),\n  // up axis of screen\n  _vn = /*@__PURE__*/new Vector3(),\n  // normal vector of screen\n  _vec = /*@__PURE__*/new Vector3(),\n  // temporary vector\n  _quat = /*@__PURE__*/new Quaternion(); // temporary quaternion\n\n/**\n * Set projection matrix and the orientation of a perspective camera\n * to exactly frame the corners of an arbitrary rectangle.\n * NOTE: This function ignores the standard parameters;\n * do not call `updateProjectionMatrix()` after this.\n *\n * @param {PerspectiveCamera} camera - The camera.\n * @param {Vector3} bottomLeftCorner - The bottom-left corner point.\n * @param {Vector3} bottomRightCorner - The bottom-right corner point.\n * @param {Vector3} topLeftCorner - The top-left corner point.\n * @param {boolean} [estimateViewFrustum=false] - If set to `true`, the function tries to estimate the camera's FOV.\n */\nfunction frameCorners(camera, bottomLeftCorner, bottomRightCorner, topLeftCorner, estimateViewFrustum = false) {\n  const pa = bottomLeftCorner,\n    pb = bottomRightCorner,\n    pc = topLeftCorner;\n  const pe = camera.position; // eye position\n  const n = camera.near; // distance of near clipping plane\n  const f = camera.far; //distance of far clipping plane\n\n  _vr.copy(pb).sub(pa).normalize();\n  _vu.copy(pc).sub(pa).normalize();\n  _vn.crossVectors(_vr, _vu).normalize();\n  _va.copy(pa).sub(pe); // from pe to pa\n  _vb.copy(pb).sub(pe); // from pe to pb\n  _vc.copy(pc).sub(pe); // from pe to pc\n\n  const d = -_va.dot(_vn); // distance from eye to screen\n  const l = _vr.dot(_va) * n / d; // distance to left screen edge\n  const r = _vr.dot(_vb) * n / d; // distance to right screen edge\n  const b = _vu.dot(_va) * n / d; // distance to bottom screen edge\n  const t = _vu.dot(_vc) * n / d; // distance to top screen edge\n\n  // Set the camera rotation to match the focal plane to the corners' plane\n  _quat.setFromUnitVectors(_vec.set(0, 1, 0), _vu);\n  camera.quaternion.setFromUnitVectors(_vec.set(0, 0, 1).applyQuaternion(_quat), _vn).multiply(_quat);\n\n  // Set the off-axis projection matrix to match the corners\n  camera.projectionMatrix.set(2.0 * n / (r - l), 0.0, (r + l) / (r - l), 0.0, 0.0, 2.0 * n / (t - b), (t + b) / (t - b), 0.0, 0.0, 0.0, (f + n) / (n - f), 2.0 * f * n / (n - f), 0.0, 0.0, -1.0, 0.0);\n  camera.projectionMatrixInverse.copy(camera.projectionMatrix).invert();\n\n  // FoV estimation to fix frustum culling\n  if (estimateViewFrustum) {\n    // Set fieldOfView to a conservative estimate\n    // to make frustum tall/wide enough to encompass it\n    camera.fov = MathUtils.RAD2DEG / Math.min(1.0, camera.aspect) * Math.atan((_vec.copy(pb).sub(pa).length() + _vec.copy(pc).sub(pa).length()) / _va.length());\n  }\n}\nexport { frameCorners };","map":{"version":3,"names":["MathUtils","Quaternion","Vector3","_va","_vb","_vc","_vr","_vu","_vn","_vec","_quat","frameCorners","camera","bottomLeftCorner","bottomRightCorner","topLeftCorner","estimateViewFrustum","pa","pb","pc","pe","position","n","near","f","far","copy","sub","normalize","crossVectors","d","dot","l","r","b","t","setFromUnitVectors","set","quaternion","applyQuaternion","multiply","projectionMatrix","projectionMatrixInverse","invert","fov","RAD2DEG","Math","min","aspect","atan","length"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/utils/CameraUtils.js"],"sourcesContent":["import {\n\tMathUtils,\n\tQuaternion,\n\tVector3\n} from 'three';\n\n/**\n * @module CameraUtils\n * @three_import import * as CameraUtils from 'three/addons/utils/CameraUtils.js';\n */\n\nconst _va = /*@__PURE__*/ new Vector3(), // from pe to pa\n\t_vb = /*@__PURE__*/ new Vector3(), // from pe to pb\n\t_vc = /*@__PURE__*/ new Vector3(), // from pe to pc\n\t_vr = /*@__PURE__*/ new Vector3(), // right axis of screen\n\t_vu = /*@__PURE__*/ new Vector3(), // up axis of screen\n\t_vn = /*@__PURE__*/ new Vector3(), // normal vector of screen\n\t_vec = /*@__PURE__*/ new Vector3(), // temporary vector\n\t_quat = /*@__PURE__*/ new Quaternion(); // temporary quaternion\n\n\n/**\n * Set projection matrix and the orientation of a perspective camera\n * to exactly frame the corners of an arbitrary rectangle.\n * NOTE: This function ignores the standard parameters;\n * do not call `updateProjectionMatrix()` after this.\n *\n * @param {PerspectiveCamera} camera - The camera.\n * @param {Vector3} bottomLeftCorner - The bottom-left corner point.\n * @param {Vector3} bottomRightCorner - The bottom-right corner point.\n * @param {Vector3} topLeftCorner - The top-left corner point.\n * @param {boolean} [estimateViewFrustum=false] - If set to `true`, the function tries to estimate the camera's FOV.\n */\nfunction frameCorners( camera, bottomLeftCorner, bottomRightCorner, topLeftCorner, estimateViewFrustum = false ) {\n\n\tconst pa = bottomLeftCorner, pb = bottomRightCorner, pc = topLeftCorner;\n\tconst pe = camera.position; // eye position\n\tconst n = camera.near; // distance of near clipping plane\n\tconst f = camera.far; //distance of far clipping plane\n\n\t_vr.copy( pb ).sub( pa ).normalize();\n\t_vu.copy( pc ).sub( pa ).normalize();\n\t_vn.crossVectors( _vr, _vu ).normalize();\n\n\t_va.copy( pa ).sub( pe ); // from pe to pa\n\t_vb.copy( pb ).sub( pe ); // from pe to pb\n\t_vc.copy( pc ).sub( pe ); // from pe to pc\n\n\tconst d = - _va.dot( _vn );\t// distance from eye to screen\n\tconst l = _vr.dot( _va ) * n / d; // distance to left screen edge\n\tconst r = _vr.dot( _vb ) * n / d; // distance to right screen edge\n\tconst b = _vu.dot( _va ) * n / d; // distance to bottom screen edge\n\tconst t = _vu.dot( _vc ) * n / d; // distance to top screen edge\n\n\t// Set the camera rotation to match the focal plane to the corners' plane\n\t_quat.setFromUnitVectors( _vec.set( 0, 1, 0 ), _vu );\n\tcamera.quaternion.setFromUnitVectors( _vec.set( 0, 0, 1 ).applyQuaternion( _quat ), _vn ).multiply( _quat );\n\n\t// Set the off-axis projection matrix to match the corners\n\tcamera.projectionMatrix.set( 2.0 * n / ( r - l ), 0.0,\n\t\t( r + l ) / ( r - l ), 0.0, 0.0,\n\t\t2.0 * n / ( t - b ),\n\t\t( t + b ) / ( t - b ), 0.0, 0.0, 0.0,\n\t\t( f + n ) / ( n - f ),\n\t\t2.0 * f * n / ( n - f ), 0.0, 0.0, - 1.0, 0.0 );\n\tcamera.projectionMatrixInverse.copy( camera.projectionMatrix ).invert();\n\n\t// FoV estimation to fix frustum culling\n\tif ( estimateViewFrustum ) {\n\n\t\t// Set fieldOfView to a conservative estimate\n\t\t// to make frustum tall/wide enough to encompass it\n\t\tcamera.fov =\n\t\t\tMathUtils.RAD2DEG / Math.min( 1.0, camera.aspect ) *\n\t\t\tMath.atan( ( _vec.copy( pb ).sub( pa ).length() +\n\t\t\t\t\t\t\t( _vec.copy( pc ).sub( pa ).length() ) ) / _va.length() );\n\n\t}\n\n}\n\nexport { frameCorners };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}