{"ast":null,"code":"/**\n * A simple pool for managing Web Workers.\n *\n * @three_import import { WorkerPool } from 'three/addons/utils/WorkerPool.js';\n */\nexport class WorkerPool {\n  /**\n   * Constructs a new Worker pool.\n   *\n   * @param {number} [pool=4] - The size of the pool.\n   */\n  constructor(pool = 4) {\n    /**\n     * The size of the pool.\n     *\n     * @type {number}\n     * @default 4\n     */\n    this.pool = pool;\n\n    /**\n     * A message queue.\n     *\n     * @type {Array<Object>}\n     */\n    this.queue = [];\n\n    /**\n     * An array of Workers.\n     *\n     * @type {Array<Worker>}\n     */\n    this.workers = [];\n\n    /**\n     * An array with resolve functions for messages.\n     *\n     * @type {Array<Function>}\n     */\n    this.workersResolve = [];\n\n    /**\n     * The current worker status.\n     *\n     * @type {number}\n     */\n    this.workerStatus = 0;\n\n    /**\n     * A factory function for creating workers.\n     *\n     * @type {?Function}\n     */\n    this.workerCreator = null;\n  }\n  _initWorker(workerId) {\n    if (!this.workers[workerId]) {\n      const worker = this.workerCreator();\n      worker.addEventListener('message', this._onMessage.bind(this, workerId));\n      this.workers[workerId] = worker;\n    }\n  }\n  _getIdleWorker() {\n    for (let i = 0; i < this.pool; i++) if (!(this.workerStatus & 1 << i)) return i;\n    return -1;\n  }\n  _onMessage(workerId, msg) {\n    const resolve = this.workersResolve[workerId];\n    resolve && resolve(msg);\n    if (this.queue.length) {\n      const {\n        resolve,\n        msg,\n        transfer\n      } = this.queue.shift();\n      this.workersResolve[workerId] = resolve;\n      this.workers[workerId].postMessage(msg, transfer);\n    } else {\n      this.workerStatus ^= 1 << workerId;\n    }\n  }\n\n  /**\n   * Sets a function that is responsible for creating Workers.\n   *\n   * @param {Function} workerCreator - The worker creator function.\n   */\n  setWorkerCreator(workerCreator) {\n    this.workerCreator = workerCreator;\n  }\n\n  /**\n   * Sets the Worker limit\n   *\n   * @param {number} pool - The size of the pool.\n   */\n  setWorkerLimit(pool) {\n    this.pool = pool;\n  }\n\n  /**\n   * Post a message to an idle Worker. If no Worker is available,\n   * the message is pushed into a message queue for later processing.\n   *\n   * @param {Object} msg - The message.\n   * @param {Array<ArrayBuffer>} transfer - An array with array buffers for data transfer.\n   * @return {Promise} A Promise that resolves when the message has been processed.\n   */\n  postMessage(msg, transfer) {\n    return new Promise(resolve => {\n      const workerId = this._getIdleWorker();\n      if (workerId !== -1) {\n        this._initWorker(workerId);\n        this.workerStatus |= 1 << workerId;\n        this.workersResolve[workerId] = resolve;\n        this.workers[workerId].postMessage(msg, transfer);\n      } else {\n        this.queue.push({\n          resolve,\n          msg,\n          transfer\n        });\n      }\n    });\n  }\n\n  /**\n   * Terminates all Workers of this pool. Call this  method whenever this\n   * Worker pool is no longer used in your app.\n   */\n  dispose() {\n    this.workers.forEach(worker => worker.terminate());\n    this.workersResolve.length = 0;\n    this.workers.length = 0;\n    this.queue.length = 0;\n    this.workerStatus = 0;\n  }\n}","map":{"version":3,"names":["WorkerPool","constructor","pool","queue","workers","workersResolve","workerStatus","workerCreator","_initWorker","workerId","worker","addEventListener","_onMessage","bind","_getIdleWorker","i","msg","resolve","length","transfer","shift","postMessage","setWorkerCreator","setWorkerLimit","Promise","push","dispose","forEach","terminate"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/utils/WorkerPool.js"],"sourcesContent":["/**\n * A simple pool for managing Web Workers.\n *\n * @three_import import { WorkerPool } from 'three/addons/utils/WorkerPool.js';\n */\nexport class WorkerPool {\n\n\t/**\n\t * Constructs a new Worker pool.\n\t *\n\t * @param {number} [pool=4] - The size of the pool.\n\t */\n\tconstructor( pool = 4 ) {\n\n\t\t/**\n\t\t * The size of the pool.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 4\n\t\t */\n\t\tthis.pool = pool;\n\n\t\t/**\n\t\t * A message queue.\n\t\t *\n\t\t * @type {Array<Object>}\n\t\t */\n\t\tthis.queue = [];\n\n\t\t/**\n\t\t * An array of Workers.\n\t\t *\n\t\t * @type {Array<Worker>}\n\t\t */\n\t\tthis.workers = [];\n\n\t\t/**\n\t\t * An array with resolve functions for messages.\n\t\t *\n\t\t * @type {Array<Function>}\n\t\t */\n\t\tthis.workersResolve = [];\n\n\t\t/**\n\t\t * The current worker status.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.workerStatus = 0;\n\n\t\t/**\n\t\t * A factory function for creating workers.\n\t\t *\n\t\t * @type {?Function}\n\t\t */\n\t\tthis.workerCreator = null;\n\n\t}\n\n\t_initWorker( workerId ) {\n\n\t\tif ( ! this.workers[ workerId ] ) {\n\n\t\t\tconst worker = this.workerCreator();\n\t\t\tworker.addEventListener( 'message', this._onMessage.bind( this, workerId ) );\n\t\t\tthis.workers[ workerId ] = worker;\n\n\t\t}\n\n\t}\n\n\t_getIdleWorker() {\n\n\t\tfor ( let i = 0; i < this.pool; i ++ )\n\t\t\tif ( ! ( this.workerStatus & ( 1 << i ) ) ) return i;\n\n\t\treturn - 1;\n\n\t}\n\n\t_onMessage( workerId, msg ) {\n\n\t\tconst resolve = this.workersResolve[ workerId ];\n\t\tresolve && resolve( msg );\n\n\t\tif ( this.queue.length ) {\n\n\t\t\tconst { resolve, msg, transfer } = this.queue.shift();\n\t\t\tthis.workersResolve[ workerId ] = resolve;\n\t\t\tthis.workers[ workerId ].postMessage( msg, transfer );\n\n\t\t} else {\n\n\t\t\tthis.workerStatus ^= 1 << workerId;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Sets a function that is responsible for creating Workers.\n\t *\n\t * @param {Function} workerCreator - The worker creator function.\n\t */\n\tsetWorkerCreator( workerCreator ) {\n\n\t\tthis.workerCreator = workerCreator;\n\n\t}\n\n\t/**\n\t * Sets the Worker limit\n\t *\n\t * @param {number} pool - The size of the pool.\n\t */\n\tsetWorkerLimit( pool ) {\n\n\t\tthis.pool = pool;\n\n\t}\n\n\t/**\n\t * Post a message to an idle Worker. If no Worker is available,\n\t * the message is pushed into a message queue for later processing.\n\t *\n\t * @param {Object} msg - The message.\n\t * @param {Array<ArrayBuffer>} transfer - An array with array buffers for data transfer.\n\t * @return {Promise} A Promise that resolves when the message has been processed.\n\t */\n\tpostMessage( msg, transfer ) {\n\n\t\treturn new Promise( ( resolve ) => {\n\n\t\t\tconst workerId = this._getIdleWorker();\n\n\t\t\tif ( workerId !== - 1 ) {\n\n\t\t\t\tthis._initWorker( workerId );\n\t\t\t\tthis.workerStatus |= 1 << workerId;\n\t\t\t\tthis.workersResolve[ workerId ] = resolve;\n\t\t\t\tthis.workers[ workerId ].postMessage( msg, transfer );\n\n\t\t\t} else {\n\n\t\t\t\tthis.queue.push( { resolve, msg, transfer } );\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * Terminates all Workers of this pool. Call this  method whenever this\n\t * Worker pool is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.workers.forEach( ( worker ) => worker.terminate() );\n\t\tthis.workersResolve.length = 0;\n\t\tthis.workers.length = 0;\n\t\tthis.queue.length = 0;\n\t\tthis.workerStatus = 0;\n\n\t}\n\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}