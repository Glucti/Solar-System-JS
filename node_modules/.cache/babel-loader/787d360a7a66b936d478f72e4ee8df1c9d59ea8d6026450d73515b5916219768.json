{"ast":null,"code":"import { BufferGeometry, FileLoader, Float32BufferAttribute, Loader, Color, SRGBColorSpace } from 'three';\n\n/**\n * A loader for the PDB format.\n *\n * The [Protein Data Bank]{@link https://en.wikipedia.org/wiki/Protein_Data_Bank_(file_format)}\n * file format is a textual file describing the three-dimensional structures of molecules.\n *\n * ```js\n * const loader = new PDBLoader();\n * const pdb = await loader.loadAsync( 'models/pdb/ethanol.pdb' );\n *\n * const geometryAtoms = pdb.geometryAtoms;\n * const geometryBonds = pdb.geometryBonds;\n * const json = pdb.json;\n * ```\n *\n * @augments Loader\n * @three_import import { PDBLoader } from 'three/addons/loaders/PDBLoader.js';\n */\nclass PDBLoader extends Loader {\n  /**\n   * Constructs a new PDB loader.\n   *\n   * @param {LoadingManager} [manager] - The loading manager.\n   */\n  constructor(manager) {\n    super(manager);\n  }\n\n  /**\n   * Starts loading from the given URL and passes the loaded PDB asset\n   * to the `onLoad()` callback.\n   *\n   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n   * @param {function(Object)} onLoad - Executed when the loading process has been finished.\n   * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n   * @param {onErrorCallback} onError - Executed when errors occur.\n   */\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  /**\n   * Parses the given PDB data and returns an object holding the atoms and\n   * bond geometries as well as the raw atom data as JSON.\n   *\n   * @param {string} text - The raw PDB data as a string.\n   * @return {Object} The result object.\n   */\n  parse(text) {\n    // Based on CanvasMol PDB parser\n\n    function trim(text) {\n      return text.replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '');\n    }\n    function capitalize(text) {\n      return text.charAt(0).toUpperCase() + text.slice(1).toLowerCase();\n    }\n    function hash(s, e) {\n      return 's' + Math.min(s, e) + 'e' + Math.max(s, e);\n    }\n    function parseBond(start, length, satom, i) {\n      const eatom = parseInt(lines[i].slice(start, start + length));\n      if (eatom) {\n        const h = hash(satom, eatom);\n        if (_bhash[h] === undefined) {\n          _bonds.push([satom - 1, eatom - 1, 1]);\n          _bhash[h] = _bonds.length - 1;\n        } else {\n\n          // doesn't really work as almost all PDBs\n          // have just normal bonds appearing multiple\n          // times instead of being double/triple bonds\n          // bonds[bhash[h]][2] += 1;\n        }\n      }\n    }\n    function buildGeometry() {\n      const build = {\n        geometryAtoms: new BufferGeometry(),\n        geometryBonds: new BufferGeometry(),\n        json: {\n          atoms: atoms\n        }\n      };\n      const geometryAtoms = build.geometryAtoms;\n      const geometryBonds = build.geometryBonds;\n      const verticesAtoms = [];\n      const colorsAtoms = [];\n      const verticesBonds = [];\n\n      // atoms\n\n      const c = new Color();\n      for (let i = 0, l = atoms.length; i < l; i++) {\n        const atom = atoms[i];\n        const x = atom[0];\n        const y = atom[1];\n        const z = atom[2];\n        verticesAtoms.push(x, y, z);\n        const r = atom[3][0] / 255;\n        const g = atom[3][1] / 255;\n        const b = atom[3][2] / 255;\n        c.setRGB(r, g, b, SRGBColorSpace);\n        colorsAtoms.push(c.r, c.g, c.b);\n      }\n\n      // bonds\n\n      for (let i = 0, l = _bonds.length; i < l; i++) {\n        const bond = _bonds[i];\n        const start = bond[0];\n        const end = bond[1];\n        const startAtom = _atomMap[start];\n        const endAtom = _atomMap[end];\n        let x = startAtom[0];\n        let y = startAtom[1];\n        let z = startAtom[2];\n        verticesBonds.push(x, y, z);\n        x = endAtom[0];\n        y = endAtom[1];\n        z = endAtom[2];\n        verticesBonds.push(x, y, z);\n      }\n\n      // build geometry\n\n      geometryAtoms.setAttribute('position', new Float32BufferAttribute(verticesAtoms, 3));\n      geometryAtoms.setAttribute('color', new Float32BufferAttribute(colorsAtoms, 3));\n      geometryBonds.setAttribute('position', new Float32BufferAttribute(verticesBonds, 3));\n      return build;\n    }\n    const CPK = {\n      h: [255, 255, 255],\n      he: [217, 255, 255],\n      li: [204, 128, 255],\n      be: [194, 255, 0],\n      b: [255, 181, 181],\n      c: [144, 144, 144],\n      n: [48, 80, 248],\n      o: [255, 13, 13],\n      f: [144, 224, 80],\n      ne: [179, 227, 245],\n      na: [171, 92, 242],\n      mg: [138, 255, 0],\n      al: [191, 166, 166],\n      si: [240, 200, 160],\n      p: [255, 128, 0],\n      s: [255, 255, 48],\n      cl: [31, 240, 31],\n      ar: [128, 209, 227],\n      k: [143, 64, 212],\n      ca: [61, 255, 0],\n      sc: [230, 230, 230],\n      ti: [191, 194, 199],\n      v: [166, 166, 171],\n      cr: [138, 153, 199],\n      mn: [156, 122, 199],\n      fe: [224, 102, 51],\n      co: [240, 144, 160],\n      ni: [80, 208, 80],\n      cu: [200, 128, 51],\n      zn: [125, 128, 176],\n      ga: [194, 143, 143],\n      ge: [102, 143, 143],\n      as: [189, 128, 227],\n      se: [255, 161, 0],\n      br: [166, 41, 41],\n      kr: [92, 184, 209],\n      rb: [112, 46, 176],\n      sr: [0, 255, 0],\n      y: [148, 255, 255],\n      zr: [148, 224, 224],\n      nb: [115, 194, 201],\n      mo: [84, 181, 181],\n      tc: [59, 158, 158],\n      ru: [36, 143, 143],\n      rh: [10, 125, 140],\n      pd: [0, 105, 133],\n      ag: [192, 192, 192],\n      cd: [255, 217, 143],\n      in: [166, 117, 115],\n      sn: [102, 128, 128],\n      sb: [158, 99, 181],\n      te: [212, 122, 0],\n      i: [148, 0, 148],\n      xe: [66, 158, 176],\n      cs: [87, 23, 143],\n      ba: [0, 201, 0],\n      la: [112, 212, 255],\n      ce: [255, 255, 199],\n      pr: [217, 255, 199],\n      nd: [199, 255, 199],\n      pm: [163, 255, 199],\n      sm: [143, 255, 199],\n      eu: [97, 255, 199],\n      gd: [69, 255, 199],\n      tb: [48, 255, 199],\n      dy: [31, 255, 199],\n      ho: [0, 255, 156],\n      er: [0, 230, 117],\n      tm: [0, 212, 82],\n      yb: [0, 191, 56],\n      lu: [0, 171, 36],\n      hf: [77, 194, 255],\n      ta: [77, 166, 255],\n      w: [33, 148, 214],\n      re: [38, 125, 171],\n      os: [38, 102, 150],\n      ir: [23, 84, 135],\n      pt: [208, 208, 224],\n      au: [255, 209, 35],\n      hg: [184, 184, 208],\n      tl: [166, 84, 77],\n      pb: [87, 89, 97],\n      bi: [158, 79, 181],\n      po: [171, 92, 0],\n      at: [117, 79, 69],\n      rn: [66, 130, 150],\n      fr: [66, 0, 102],\n      ra: [0, 125, 0],\n      ac: [112, 171, 250],\n      th: [0, 186, 255],\n      pa: [0, 161, 255],\n      u: [0, 143, 255],\n      np: [0, 128, 255],\n      pu: [0, 107, 255],\n      am: [84, 92, 242],\n      cm: [120, 92, 227],\n      bk: [138, 79, 227],\n      cf: [161, 54, 212],\n      es: [179, 31, 212],\n      fm: [179, 31, 186],\n      md: [179, 13, 166],\n      no: [189, 13, 135],\n      lr: [199, 0, 102],\n      rf: [204, 0, 89],\n      db: [209, 0, 79],\n      sg: [217, 0, 69],\n      bh: [224, 0, 56],\n      hs: [230, 0, 46],\n      mt: [235, 0, 38],\n      ds: [235, 0, 38],\n      rg: [235, 0, 38],\n      cn: [235, 0, 38],\n      uut: [235, 0, 38],\n      uuq: [235, 0, 38],\n      uup: [235, 0, 38],\n      uuh: [235, 0, 38],\n      uus: [235, 0, 38],\n      uuo: [235, 0, 38]\n    };\n    const atoms = [];\n    const _bonds = [];\n    const _bhash = {};\n    const _atomMap = {};\n\n    // parse\n\n    const lines = text.split('\\n');\n    for (let i = 0, l = lines.length; i < l; i++) {\n      if (lines[i].slice(0, 4) === 'ATOM' || lines[i].slice(0, 6) === 'HETATM') {\n        const x = parseFloat(lines[i].slice(30, 37));\n        const y = parseFloat(lines[i].slice(38, 45));\n        const z = parseFloat(lines[i].slice(46, 53));\n        const index = parseInt(lines[i].slice(6, 11)) - 1;\n        let e = trim(lines[i].slice(76, 78)).toLowerCase();\n        if (e === '') {\n          e = trim(lines[i].slice(12, 14)).toLowerCase();\n        }\n        const atomData = [x, y, z, CPK[e], capitalize(e)];\n        atoms.push(atomData);\n        _atomMap[index] = atomData;\n      } else if (lines[i].slice(0, 6) === 'CONECT') {\n        const satom = parseInt(lines[i].slice(6, 11));\n        parseBond(11, 5, satom, i);\n        parseBond(16, 5, satom, i);\n        parseBond(21, 5, satom, i);\n        parseBond(26, 5, satom, i);\n      }\n    }\n\n    // build and return geometry\n\n    return buildGeometry();\n  }\n}\nexport { PDBLoader };","map":{"version":3,"names":["BufferGeometry","FileLoader","Float32BufferAttribute","Loader","Color","SRGBColorSpace","PDBLoader","constructor","manager","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","e","console","error","itemError","trim","replace","capitalize","charAt","toUpperCase","slice","toLowerCase","hash","s","Math","min","max","parseBond","start","length","satom","i","eatom","parseInt","lines","h","_bhash","undefined","_bonds","push","buildGeometry","build","geometryAtoms","geometryBonds","json","atoms","verticesAtoms","colorsAtoms","verticesBonds","c","l","atom","x","y","z","r","g","b","setRGB","bond","end","startAtom","_atomMap","endAtom","setAttribute","CPK","he","li","be","n","o","f","ne","na","mg","al","si","p","cl","ar","k","ca","sc","ti","v","cr","mn","fe","co","ni","cu","zn","ga","ge","as","se","br","kr","rb","sr","zr","nb","mo","tc","ru","rh","pd","ag","cd","in","sn","sb","te","xe","cs","ba","la","ce","pr","nd","pm","sm","eu","gd","tb","dy","ho","er","tm","yb","lu","hf","ta","w","re","os","ir","pt","au","hg","tl","pb","bi","po","at","rn","fr","ra","ac","th","pa","u","np","pu","am","cm","bk","cf","es","fm","md","no","lr","rf","db","sg","bh","hs","mt","ds","rg","cn","uut","uuq","uup","uuh","uus","uuo","split","parseFloat","index","atomData"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/loaders/PDBLoader.js"],"sourcesContent":["import {\n\tBufferGeometry,\n\tFileLoader,\n\tFloat32BufferAttribute,\n\tLoader,\n\tColor,\n\tSRGBColorSpace\n} from 'three';\n\n/**\n * A loader for the PDB format.\n *\n * The [Protein Data Bank]{@link https://en.wikipedia.org/wiki/Protein_Data_Bank_(file_format)}\n * file format is a textual file describing the three-dimensional structures of molecules.\n *\n * ```js\n * const loader = new PDBLoader();\n * const pdb = await loader.loadAsync( 'models/pdb/ethanol.pdb' );\n *\n * const geometryAtoms = pdb.geometryAtoms;\n * const geometryBonds = pdb.geometryBonds;\n * const json = pdb.json;\n * ```\n *\n * @augments Loader\n * @three_import import { PDBLoader } from 'three/addons/loaders/PDBLoader.js';\n */\nclass PDBLoader extends Loader {\n\n\t/**\n\t * Constructs a new PDB loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\t/**\n\t * Starts loading from the given URL and passes the loaded PDB asset\n\t * to the `onLoad()` callback.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(Object)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( scope.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.setRequestHeader( scope.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( text ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\t/**\n\t * Parses the given PDB data and returns an object holding the atoms and\n\t * bond geometries as well as the raw atom data as JSON.\n\t *\n\t * @param {string} text - The raw PDB data as a string.\n\t * @return {Object} The result object.\n\t */\n\tparse( text ) {\n\n\t\t// Based on CanvasMol PDB parser\n\n\t\tfunction trim( text ) {\n\n\t\t\treturn text.replace( /^\\s\\s*/, '' ).replace( /\\s\\s*$/, '' );\n\n\t\t}\n\n\t\tfunction capitalize( text ) {\n\n\t\t\treturn text.charAt( 0 ).toUpperCase() + text.slice( 1 ).toLowerCase();\n\n\t\t}\n\n\t\tfunction hash( s, e ) {\n\n\t\t\treturn 's' + Math.min( s, e ) + 'e' + Math.max( s, e );\n\n\t\t}\n\n\t\tfunction parseBond( start, length, satom, i ) {\n\n\t\t\tconst eatom = parseInt( lines[ i ].slice( start, start + length ) );\n\n\t\t\tif ( eatom ) {\n\n\t\t\t\tconst h = hash( satom, eatom );\n\n\t\t\t\tif ( _bhash[ h ] === undefined ) {\n\n\t\t\t\t\t_bonds.push( [ satom - 1, eatom - 1, 1 ] );\n\t\t\t\t\t_bhash[ h ] = _bonds.length - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// doesn't really work as almost all PDBs\n\t\t\t\t\t// have just normal bonds appearing multiple\n\t\t\t\t\t// times instead of being double/triple bonds\n\t\t\t\t\t// bonds[bhash[h]][2] += 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction buildGeometry() {\n\n\t\t\tconst build = {\n\t\t\t\tgeometryAtoms: new BufferGeometry(),\n\t\t\t\tgeometryBonds: new BufferGeometry(),\n\t\t\t\tjson: {\n\t\t\t\t\tatoms: atoms\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconst geometryAtoms = build.geometryAtoms;\n\t\t\tconst geometryBonds = build.geometryBonds;\n\n\t\t\tconst verticesAtoms = [];\n\t\t\tconst colorsAtoms = [];\n\t\t\tconst verticesBonds = [];\n\n\t\t\t// atoms\n\n\t\t\tconst c = new Color();\n\n\t\t\tfor ( let i = 0, l = atoms.length; i < l; i ++ ) {\n\n\t\t\t\tconst atom = atoms[ i ];\n\n\t\t\t\tconst x = atom[ 0 ];\n\t\t\t\tconst y = atom[ 1 ];\n\t\t\t\tconst z = atom[ 2 ];\n\n\t\t\t\tverticesAtoms.push( x, y, z );\n\n\t\t\t\tconst r = atom[ 3 ][ 0 ] / 255;\n\t\t\t\tconst g = atom[ 3 ][ 1 ] / 255;\n\t\t\t\tconst b = atom[ 3 ][ 2 ] / 255;\n\n\t\t\t\tc.setRGB( r, g, b, SRGBColorSpace );\n\n\t\t\t\tcolorsAtoms.push( c.r, c.g, c.b );\n\n\t\t\t}\n\n\t\t\t// bonds\n\n\t\t\tfor ( let i = 0, l = _bonds.length; i < l; i ++ ) {\n\n\t\t\t\tconst bond = _bonds[ i ];\n\n\t\t\t\tconst start = bond[ 0 ];\n\t\t\t\tconst end = bond[ 1 ];\n\n\t\t\t\tconst startAtom = _atomMap[ start ];\n\t\t\t\tconst endAtom = _atomMap[ end ];\n\n\t\t\t\tlet x = startAtom[ 0 ];\n\t\t\t\tlet y = startAtom[ 1 ];\n\t\t\t\tlet z = startAtom[ 2 ];\n\n\t\t\t\tverticesBonds.push( x, y, z );\n\n\t\t\t\tx = endAtom[ 0 ];\n\t\t\t\ty = endAtom[ 1 ];\n\t\t\t\tz = endAtom[ 2 ];\n\n\t\t\t\tverticesBonds.push( x, y, z );\n\n\t\t\t}\n\n\t\t\t// build geometry\n\n\t\t\tgeometryAtoms.setAttribute( 'position', new Float32BufferAttribute( verticesAtoms, 3 ) );\n\t\t\tgeometryAtoms.setAttribute( 'color', new Float32BufferAttribute( colorsAtoms, 3 ) );\n\n\t\t\tgeometryBonds.setAttribute( 'position', new Float32BufferAttribute( verticesBonds, 3 ) );\n\n\t\t\treturn build;\n\n\t\t}\n\n\t\tconst CPK = { h: [ 255, 255, 255 ], he: [ 217, 255, 255 ], li: [ 204, 128, 255 ], be: [ 194, 255, 0 ], b: [ 255, 181, 181 ], c: [ 144, 144, 144 ], n: [ 48, 80, 248 ], o: [ 255, 13, 13 ], f: [ 144, 224, 80 ], ne: [ 179, 227, 245 ], na: [ 171, 92, 242 ], mg: [ 138, 255, 0 ], al: [ 191, 166, 166 ], si: [ 240, 200, 160 ], p: [ 255, 128, 0 ], s: [ 255, 255, 48 ], cl: [ 31, 240, 31 ], ar: [ 128, 209, 227 ], k: [ 143, 64, 212 ], ca: [ 61, 255, 0 ], sc: [ 230, 230, 230 ], ti: [ 191, 194, 199 ], v: [ 166, 166, 171 ], cr: [ 138, 153, 199 ], mn: [ 156, 122, 199 ], fe: [ 224, 102, 51 ], co: [ 240, 144, 160 ], ni: [ 80, 208, 80 ], cu: [ 200, 128, 51 ], zn: [ 125, 128, 176 ], ga: [ 194, 143, 143 ], ge: [ 102, 143, 143 ], as: [ 189, 128, 227 ], se: [ 255, 161, 0 ], br: [ 166, 41, 41 ], kr: [ 92, 184, 209 ], rb: [ 112, 46, 176 ], sr: [ 0, 255, 0 ], y: [ 148, 255, 255 ], zr: [ 148, 224, 224 ], nb: [ 115, 194, 201 ], mo: [ 84, 181, 181 ], tc: [ 59, 158, 158 ], ru: [ 36, 143, 143 ], rh: [ 10, 125, 140 ], pd: [ 0, 105, 133 ], ag: [ 192, 192, 192 ], cd: [ 255, 217, 143 ], in: [ 166, 117, 115 ], sn: [ 102, 128, 128 ], sb: [ 158, 99, 181 ], te: [ 212, 122, 0 ], i: [ 148, 0, 148 ], xe: [ 66, 158, 176 ], cs: [ 87, 23, 143 ], ba: [ 0, 201, 0 ], la: [ 112, 212, 255 ], ce: [ 255, 255, 199 ], pr: [ 217, 255, 199 ], nd: [ 199, 255, 199 ], pm: [ 163, 255, 199 ], sm: [ 143, 255, 199 ], eu: [ 97, 255, 199 ], gd: [ 69, 255, 199 ], tb: [ 48, 255, 199 ], dy: [ 31, 255, 199 ], ho: [ 0, 255, 156 ], er: [ 0, 230, 117 ], tm: [ 0, 212, 82 ], yb: [ 0, 191, 56 ], lu: [ 0, 171, 36 ], hf: [ 77, 194, 255 ], ta: [ 77, 166, 255 ], w: [ 33, 148, 214 ], re: [ 38, 125, 171 ], os: [ 38, 102, 150 ], ir: [ 23, 84, 135 ], pt: [ 208, 208, 224 ], au: [ 255, 209, 35 ], hg: [ 184, 184, 208 ], tl: [ 166, 84, 77 ], pb: [ 87, 89, 97 ], bi: [ 158, 79, 181 ], po: [ 171, 92, 0 ], at: [ 117, 79, 69 ], rn: [ 66, 130, 150 ], fr: [ 66, 0, 102 ], ra: [ 0, 125, 0 ], ac: [ 112, 171, 250 ], th: [ 0, 186, 255 ], pa: [ 0, 161, 255 ], u: [ 0, 143, 255 ], np: [ 0, 128, 255 ], pu: [ 0, 107, 255 ], am: [ 84, 92, 242 ], cm: [ 120, 92, 227 ], bk: [ 138, 79, 227 ], cf: [ 161, 54, 212 ], es: [ 179, 31, 212 ], fm: [ 179, 31, 186 ], md: [ 179, 13, 166 ], no: [ 189, 13, 135 ], lr: [ 199, 0, 102 ], rf: [ 204, 0, 89 ], db: [ 209, 0, 79 ], sg: [ 217, 0, 69 ], bh: [ 224, 0, 56 ], hs: [ 230, 0, 46 ], mt: [ 235, 0, 38 ], ds: [ 235, 0, 38 ], rg: [ 235, 0, 38 ], cn: [ 235, 0, 38 ], uut: [ 235, 0, 38 ], uuq: [ 235, 0, 38 ], uup: [ 235, 0, 38 ], uuh: [ 235, 0, 38 ], uus: [ 235, 0, 38 ], uuo: [ 235, 0, 38 ] };\n\n\t\tconst atoms = [];\n\n\t\tconst _bonds = [];\n\t\tconst _bhash = {};\n\t\tconst _atomMap = {};\n\n\t\t// parse\n\n\t\tconst lines = text.split( '\\n' );\n\n\t\tfor ( let i = 0, l = lines.length; i < l; i ++ ) {\n\n\t\t\tif ( lines[ i ].slice( 0, 4 ) === 'ATOM' || lines[ i ].slice( 0, 6 ) === 'HETATM' ) {\n\n\t\t\t\tconst x = parseFloat( lines[ i ].slice( 30, 37 ) );\n\t\t\t\tconst y = parseFloat( lines[ i ].slice( 38, 45 ) );\n\t\t\t\tconst z = parseFloat( lines[ i ].slice( 46, 53 ) );\n\t\t\t\tconst index = parseInt( lines[ i ].slice( 6, 11 ) ) - 1;\n\n\t\t\t\tlet e = trim( lines[ i ].slice( 76, 78 ) ).toLowerCase();\n\n\t\t\t\tif ( e === '' ) {\n\n\t\t\t\t\te = trim( lines[ i ].slice( 12, 14 ) ).toLowerCase();\n\n\t\t\t\t}\n\n\t\t\t\tconst atomData = [ x, y, z, CPK[ e ], capitalize( e ) ];\n\n\t\t\t\tatoms.push( atomData );\n\t\t\t\t_atomMap[ index ] = atomData;\n\n\t\t\t} else if ( lines[ i ].slice( 0, 6 ) === 'CONECT' ) {\n\n\t\t\t\tconst satom = parseInt( lines[ i ].slice( 6, 11 ) );\n\n\t\t\t\tparseBond( 11, 5, satom, i );\n\t\t\t\tparseBond( 16, 5, satom, i );\n\t\t\t\tparseBond( 21, 5, satom, i );\n\t\t\t\tparseBond( 26, 5, satom, i );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build and return geometry\n\n\t\treturn buildGeometry();\n\n\t}\n\n}\n\nexport { PDBLoader };\n"],"mappings":"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AAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAE;MAAEC,EAAE,EAAE,CAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAE;MAAEC,CAAC,EAAE,CAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAE;MAAEtD,CAAC,EAAE,CAAE,GAAG,EAAE,GAAG,EAAE,EAAE,CAAE;MAAEuD,EAAE,EAAE,CAAE,EAAE,EAAE,GAAG,EAAE,EAAE,CAAE;MAAEC,EAAE,EAAE,CAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAE;MAAEC,CAAC,EAAE,CAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAE;MAAEC,EAAE,EAAE,CAAE,EAAE,EAAE,GAAG,EAAE,CAAC,CAAE;MAAEC,EAAE,EAAE,CAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAE;MAAEC,EAAE,EAAE,CAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAE;MAAEC,CAAC,EAAE,CAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAE;MAAEC,EAAE,EAAE,CAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAE;MAAEC,EAAE,EAAE,CAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAE;MAAEC,EAAE,EAAE,CAAE,GAAG,EAAE,GAAG,EAAE,EAAE,CAAE;MAAEC,EAAE,EAAE,CAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAE;MAAEC,EAAE,EAAE,CAAE,EAAE,EAAE,GAAG,EAAE,EAAE,CAAE;MAAEC,EAAE,EAAE,CAAE,GAAG,EAAE,GAAG,EAAE,EAAE,CAAE;MAAEC,EAAE,EAAE,CAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAE;MAAEC,EAAE,EAAE,CAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAE;MAAEC,EAAE,EAAE,CAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAE;MAAEC,EAAE,EAAE,CAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAE;MAAEC,EAAE,EAAE,CAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAE;MAAEC,EAAE,EAAE,CAAE,GAAG,EAAE,EAAE,EAAE,EAAE,CAAE;MAAEC,EAAE,EAAE,CAAE,EAAE,EAAE,GAAG,EAAE,G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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}