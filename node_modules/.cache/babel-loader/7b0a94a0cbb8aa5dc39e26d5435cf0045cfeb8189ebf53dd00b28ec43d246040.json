{"ast":null,"code":"/**\n * A utility class providing noise functions.\n *\n * The code is based on [Simplex noise demystified]{@link https://web.archive.org/web/20210210162332/http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf}\n * by Stefan Gustavson, 2005.\n *\n * @three_import import { SimplexNoise } from 'three/addons/math/SimplexNoise.js';\n */\nclass SimplexNoise {\n  /**\n   * Constructs a new simplex noise object.\n   *\n   * @param {Object} [r=Math] - A math utility class that holds a `random()` method. This makes it\n   * possible to pass in custom random number generator.\n   */\n  constructor(r = Math) {\n    this.grad3 = [[1, 1, 0], [-1, 1, 0], [1, -1, 0], [-1, -1, 0], [1, 0, 1], [-1, 0, 1], [1, 0, -1], [-1, 0, -1], [0, 1, 1], [0, -1, 1], [0, 1, -1], [0, -1, -1]];\n    this.grad4 = [[0, 1, 1, 1], [0, 1, 1, -1], [0, 1, -1, 1], [0, 1, -1, -1], [0, -1, 1, 1], [0, -1, 1, -1], [0, -1, -1, 1], [0, -1, -1, -1], [1, 0, 1, 1], [1, 0, 1, -1], [1, 0, -1, 1], [1, 0, -1, -1], [-1, 0, 1, 1], [-1, 0, 1, -1], [-1, 0, -1, 1], [-1, 0, -1, -1], [1, 1, 0, 1], [1, 1, 0, -1], [1, -1, 0, 1], [1, -1, 0, -1], [-1, 1, 0, 1], [-1, 1, 0, -1], [-1, -1, 0, 1], [-1, -1, 0, -1], [1, 1, 1, 0], [1, 1, -1, 0], [1, -1, 1, 0], [1, -1, -1, 0], [-1, 1, 1, 0], [-1, 1, -1, 0], [-1, -1, 1, 0], [-1, -1, -1, 0]];\n    this.p = [];\n    for (let i = 0; i < 256; i++) {\n      this.p[i] = Math.floor(r.random() * 256);\n    }\n\n    // To remove the need for index wrapping, double the permutation table length\n    this.perm = [];\n    for (let i = 0; i < 512; i++) {\n      this.perm[i] = this.p[i & 255];\n    }\n\n    // A lookup table to traverse the simplex around a given point in 4D.\n    // Details can be found where this table is used, in the 4D noise method.\n    this.simplex = [[0, 1, 2, 3], [0, 1, 3, 2], [0, 0, 0, 0], [0, 2, 3, 1], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 2, 3, 0], [0, 2, 1, 3], [0, 0, 0, 0], [0, 3, 1, 2], [0, 3, 2, 1], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 3, 2, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 2, 0, 3], [0, 0, 0, 0], [1, 3, 0, 2], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 3, 0, 1], [2, 3, 1, 0], [1, 0, 2, 3], [1, 0, 3, 2], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 0, 3, 1], [0, 0, 0, 0], [2, 1, 3, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 0, 1, 3], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [3, 0, 1, 2], [3, 0, 2, 1], [0, 0, 0, 0], [3, 1, 2, 0], [2, 1, 0, 3], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [3, 1, 0, 2], [0, 0, 0, 0], [3, 2, 0, 1], [3, 2, 1, 0]];\n  }\n\n  /**\n   * A 2D simplex noise method.\n   *\n   * @param {number} xin - The x coordinate.\n   * @param {number} yin - The y coordinate.\n   * @return {number} The noise value.\n   */\n  noise(xin, yin) {\n    let n0; // Noise contributions from the three corners\n    let n1;\n    let n2;\n    // Skew the input space to determine which simplex cell we're in\n    const F2 = 0.5 * (Math.sqrt(3.0) - 1.0);\n    const s = (xin + yin) * F2; // Hairy factor for 2D\n    const i = Math.floor(xin + s);\n    const j = Math.floor(yin + s);\n    const G2 = (3.0 - Math.sqrt(3.0)) / 6.0;\n    const t = (i + j) * G2;\n    const X0 = i - t; // Unskew the cell origin back to (x,y) space\n    const Y0 = j - t;\n    const x0 = xin - X0; // The x,y distances from the cell origin\n    const y0 = yin - Y0;\n\n    // For the 2D case, the simplex shape is an equilateral triangle.\n    // Determine which simplex we are in.\n    let i1; // Offsets for second (middle) corner of simplex in (i,j) coords\n\n    let j1;\n    if (x0 > y0) {\n      i1 = 1;\n      j1 = 0;\n\n      // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n    } else {\n      i1 = 0;\n      j1 = 1;\n    } // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n\n    // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n    // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n    // c = (3-sqrt(3))/6\n    const x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n    const y1 = y0 - j1 + G2;\n    const x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\n    const y2 = y0 - 1.0 + 2.0 * G2;\n    // Work out the hashed gradient indices of the three simplex corners\n    const ii = i & 255;\n    const jj = j & 255;\n    const gi0 = this.perm[ii + this.perm[jj]] % 12;\n    const gi1 = this.perm[ii + i1 + this.perm[jj + j1]] % 12;\n    const gi2 = this.perm[ii + 1 + this.perm[jj + 1]] % 12;\n    // Calculate the contribution from the three corners\n    let t0 = 0.5 - x0 * x0 - y0 * y0;\n    if (t0 < 0) n0 = 0.0;else {\n      t0 *= t0;\n      n0 = t0 * t0 * this._dot(this.grad3[gi0], x0, y0); // (x,y) of grad3 used for 2D gradient\n    }\n    let t1 = 0.5 - x1 * x1 - y1 * y1;\n    if (t1 < 0) n1 = 0.0;else {\n      t1 *= t1;\n      n1 = t1 * t1 * this._dot(this.grad3[gi1], x1, y1);\n    }\n    let t2 = 0.5 - x2 * x2 - y2 * y2;\n    if (t2 < 0) n2 = 0.0;else {\n      t2 *= t2;\n      n2 = t2 * t2 * this._dot(this.grad3[gi2], x2, y2);\n    }\n\n    // Add contributions from each corner to get the final noise value.\n    // The result is scaled to return values in the interval [-1,1].\n    return 70.0 * (n0 + n1 + n2);\n  }\n\n  /**\n   * A 3D simplex noise method.\n   *\n   * @param {number} xin - The x coordinate.\n   * @param {number} yin - The y coordinate.\n   * @param {number} zin - The z coordinate.\n   * @return {number} The noise value.\n   */\n  noise3d(xin, yin, zin) {\n    let n0; // Noise contributions from the four corners\n    let n1;\n    let n2;\n    let n3;\n    // Skew the input space to determine which simplex cell we're in\n    const F3 = 1.0 / 3.0;\n    const s = (xin + yin + zin) * F3; // Very nice and simple skew factor for 3D\n    const i = Math.floor(xin + s);\n    const j = Math.floor(yin + s);\n    const k = Math.floor(zin + s);\n    const G3 = 1.0 / 6.0; // Very nice and simple unskew factor, too\n    const t = (i + j + k) * G3;\n    const X0 = i - t; // Unskew the cell origin back to (x,y,z) space\n    const Y0 = j - t;\n    const Z0 = k - t;\n    const x0 = xin - X0; // The x,y,z distances from the cell origin\n    const y0 = yin - Y0;\n    const z0 = zin - Z0;\n\n    // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n    // Determine which simplex we are in.\n    let i1; // Offsets for second corner of simplex in (i,j,k) coords\n\n    let j1;\n    let k1;\n    let i2; // Offsets for third corner of simplex in (i,j,k) coords\n    let j2;\n    let k2;\n    if (x0 >= y0) {\n      if (y0 >= z0) {\n        i1 = 1;\n        j1 = 0;\n        k1 = 0;\n        i2 = 1;\n        j2 = 1;\n        k2 = 0;\n\n        // X Y Z order\n      } else if (x0 >= z0) {\n        i1 = 1;\n        j1 = 0;\n        k1 = 0;\n        i2 = 1;\n        j2 = 0;\n        k2 = 1;\n\n        // X Z Y order\n      } else {\n        i1 = 0;\n        j1 = 0;\n        k1 = 1;\n        i2 = 1;\n        j2 = 0;\n        k2 = 1;\n      } // Z X Y order\n    } else {\n      // x0<y0\n\n      if (y0 < z0) {\n        i1 = 0;\n        j1 = 0;\n        k1 = 1;\n        i2 = 0;\n        j2 = 1;\n        k2 = 1;\n\n        // Z Y X order\n      } else if (x0 < z0) {\n        i1 = 0;\n        j1 = 1;\n        k1 = 0;\n        i2 = 0;\n        j2 = 1;\n        k2 = 1;\n\n        // Y Z X order\n      } else {\n        i1 = 0;\n        j1 = 1;\n        k1 = 0;\n        i2 = 1;\n        j2 = 1;\n        k2 = 0;\n      } // Y X Z order\n    }\n\n    // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n    // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n    // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n    // c = 1/6.\n    const x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\n    const y1 = y0 - j1 + G3;\n    const z1 = z0 - k1 + G3;\n    const x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords\n    const y2 = y0 - j2 + 2.0 * G3;\n    const z2 = z0 - k2 + 2.0 * G3;\n    const x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords\n    const y3 = y0 - 1.0 + 3.0 * G3;\n    const z3 = z0 - 1.0 + 3.0 * G3;\n    // Work out the hashed gradient indices of the four simplex corners\n    const ii = i & 255;\n    const jj = j & 255;\n    const kk = k & 255;\n    const gi0 = this.perm[ii + this.perm[jj + this.perm[kk]]] % 12;\n    const gi1 = this.perm[ii + i1 + this.perm[jj + j1 + this.perm[kk + k1]]] % 12;\n    const gi2 = this.perm[ii + i2 + this.perm[jj + j2 + this.perm[kk + k2]]] % 12;\n    const gi3 = this.perm[ii + 1 + this.perm[jj + 1 + this.perm[kk + 1]]] % 12;\n    // Calculate the contribution from the four corners\n    let t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n    if (t0 < 0) n0 = 0.0;else {\n      t0 *= t0;\n      n0 = t0 * t0 * this._dot3(this.grad3[gi0], x0, y0, z0);\n    }\n    let t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n    if (t1 < 0) n1 = 0.0;else {\n      t1 *= t1;\n      n1 = t1 * t1 * this._dot3(this.grad3[gi1], x1, y1, z1);\n    }\n    let t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n    if (t2 < 0) n2 = 0.0;else {\n      t2 *= t2;\n      n2 = t2 * t2 * this._dot3(this.grad3[gi2], x2, y2, z2);\n    }\n    let t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n    if (t3 < 0) n3 = 0.0;else {\n      t3 *= t3;\n      n3 = t3 * t3 * this._dot3(this.grad3[gi3], x3, y3, z3);\n    }\n\n    // Add contributions from each corner to get the final noise value.\n    // The result is scaled to stay just inside [-1,1]\n    return 32.0 * (n0 + n1 + n2 + n3);\n  }\n\n  /**\n   * A 4D simplex noise method.\n   *\n   * @param {number} x - The x coordinate.\n   * @param {number} y - The y coordinate.\n   * @param {number} z - The z coordinate.\n   * @param {number} w - The w coordinate.\n   * @return {number} The noise value.\n   */\n  noise4d(x, y, z, w) {\n    // For faster and easier lookups\n    const grad4 = this.grad4;\n    const simplex = this.simplex;\n    const perm = this.perm;\n\n    // The skewing and unskewing factors are hairy again for the 4D case\n    const F4 = (Math.sqrt(5.0) - 1.0) / 4.0;\n    const G4 = (5.0 - Math.sqrt(5.0)) / 20.0;\n    let n0; // Noise contributions from the five corners\n    let n1;\n    let n2;\n    let n3;\n    let n4;\n    // Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\n    const s = (x + y + z + w) * F4; // Factor for 4D skewing\n    const i = Math.floor(x + s);\n    const j = Math.floor(y + s);\n    const k = Math.floor(z + s);\n    const l = Math.floor(w + s);\n    const t = (i + j + k + l) * G4; // Factor for 4D unskewing\n    const X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\n    const Y0 = j - t;\n    const Z0 = k - t;\n    const W0 = l - t;\n    const x0 = x - X0; // The x,y,z,w distances from the cell origin\n    const y0 = y - Y0;\n    const z0 = z - Z0;\n    const w0 = w - W0;\n\n    // For the 4D case, the simplex is a 4D shape I won't even try to describe.\n    // To find out which of the 24 possible simplices we're in, we need to\n    // determine the magnitude ordering of x0, y0, z0 and w0.\n    // The method below is a good way of finding the ordering of x,y,z,w and\n    // then find the correct traversal order for the simplex we’re in.\n    // First, six pair-wise comparisons are performed between each possible pair\n    // of the four coordinates, and the results are used to add up binary bits\n    // for an integer index.\n    const c1 = x0 > y0 ? 32 : 0;\n    const c2 = x0 > z0 ? 16 : 0;\n    const c3 = y0 > z0 ? 8 : 0;\n    const c4 = x0 > w0 ? 4 : 0;\n    const c5 = y0 > w0 ? 2 : 0;\n    const c6 = z0 > w0 ? 1 : 0;\n    const c = c1 + c2 + c3 + c4 + c5 + c6;\n\n    // simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\n    // Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\n    // impossible. Only the 24 indices which have non-zero entries make any sense.\n    // We use a thresholding to set the coordinates in turn from the largest magnitude.\n    // The number 3 in the \"simplex\" array is at the position of the largest coordinate.\n    const i1 = simplex[c][0] >= 3 ? 1 : 0;\n    const j1 = simplex[c][1] >= 3 ? 1 : 0;\n    const k1 = simplex[c][2] >= 3 ? 1 : 0;\n    const l1 = simplex[c][3] >= 3 ? 1 : 0;\n    // The number 2 in the \"simplex\" array is at the second largest coordinate.\n    const i2 = simplex[c][0] >= 2 ? 1 : 0;\n    const j2 = simplex[c][1] >= 2 ? 1 : 0;\n    const k2 = simplex[c][2] >= 2 ? 1 : 0;\n    const l2 = simplex[c][3] >= 2 ? 1 : 0;\n    // The number 1 in the \"simplex\" array is at the second smallest coordinate.\n    const i3 = simplex[c][0] >= 1 ? 1 : 0;\n    const j3 = simplex[c][1] >= 1 ? 1 : 0;\n    const k3 = simplex[c][2] >= 1 ? 1 : 0;\n    const l3 = simplex[c][3] >= 1 ? 1 : 0;\n    // The fifth corner has all coordinate offsets = 1, so no need to look that up.\n    const x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords\n    const y1 = y0 - j1 + G4;\n    const z1 = z0 - k1 + G4;\n    const w1 = w0 - l1 + G4;\n    const x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords\n    const y2 = y0 - j2 + 2.0 * G4;\n    const z2 = z0 - k2 + 2.0 * G4;\n    const w2 = w0 - l2 + 2.0 * G4;\n    const x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords\n    const y3 = y0 - j3 + 3.0 * G4;\n    const z3 = z0 - k3 + 3.0 * G4;\n    const w3 = w0 - l3 + 3.0 * G4;\n    const x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords\n    const y4 = y0 - 1.0 + 4.0 * G4;\n    const z4 = z0 - 1.0 + 4.0 * G4;\n    const w4 = w0 - 1.0 + 4.0 * G4;\n    // Work out the hashed gradient indices of the five simplex corners\n    const ii = i & 255;\n    const jj = j & 255;\n    const kk = k & 255;\n    const ll = l & 255;\n    const gi0 = perm[ii + perm[jj + perm[kk + perm[ll]]]] % 32;\n    const gi1 = perm[ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]]] % 32;\n    const gi2 = perm[ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]]] % 32;\n    const gi3 = perm[ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]]] % 32;\n    const gi4 = perm[ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]]] % 32;\n    // Calculate the contribution from the five corners\n    let t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\n    if (t0 < 0) n0 = 0.0;else {\n      t0 *= t0;\n      n0 = t0 * t0 * this._dot4(grad4[gi0], x0, y0, z0, w0);\n    }\n    let t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\n    if (t1 < 0) n1 = 0.0;else {\n      t1 *= t1;\n      n1 = t1 * t1 * this._dot4(grad4[gi1], x1, y1, z1, w1);\n    }\n    let t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\n    if (t2 < 0) n2 = 0.0;else {\n      t2 *= t2;\n      n2 = t2 * t2 * this._dot4(grad4[gi2], x2, y2, z2, w2);\n    }\n    let t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\n    if (t3 < 0) n3 = 0.0;else {\n      t3 *= t3;\n      n3 = t3 * t3 * this._dot4(grad4[gi3], x3, y3, z3, w3);\n    }\n    let t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\n    if (t4 < 0) n4 = 0.0;else {\n      t4 *= t4;\n      n4 = t4 * t4 * this._dot4(grad4[gi4], x4, y4, z4, w4);\n    }\n\n    // Sum up and scale the result to cover the range [-1,1]\n    return 27.0 * (n0 + n1 + n2 + n3 + n4);\n  }\n\n  // private\n\n  _dot(g, x, y) {\n    return g[0] * x + g[1] * y;\n  }\n  _dot3(g, x, y, z) {\n    return g[0] * x + g[1] * y + g[2] * z;\n  }\n  _dot4(g, x, y, z, w) {\n    return g[0] * x + g[1] * y + g[2] * z + g[3] * w;\n  }\n}\nexport { SimplexNoise };","map":{"version":3,"names":["SimplexNoise","constructor","r","Math","grad3","grad4","p","i","floor","random","perm","simplex","noise","xin","yin","n0","n1","n2","F2","sqrt","s","j","G2","t","X0","Y0","x0","y0","i1","j1","x1","y1","x2","y2","ii","jj","gi0","gi1","gi2","t0","_dot","t1","t2","noise3d","zin","n3","F3","k","G3","Z0","z0","k1","i2","j2","k2","z1","z2","x3","y3","z3","kk","gi3","_dot3","t3","noise4d","x","y","z","w","F4","G4","n4","l","W0","w0","c1","c2","c3","c4","c5","c6","c","l1","l2","i3","j3","k3","l3","w1","w2","w3","x4","y4","z4","w4","ll","gi4","_dot4","t4","g"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/math/SimplexNoise.js"],"sourcesContent":["/**\n * A utility class providing noise functions.\n *\n * The code is based on [Simplex noise demystified]{@link https://web.archive.org/web/20210210162332/http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf}\n * by Stefan Gustavson, 2005.\n *\n * @three_import import { SimplexNoise } from 'three/addons/math/SimplexNoise.js';\n */\nclass SimplexNoise {\n\n\t/**\n\t * Constructs a new simplex noise object.\n\t *\n\t * @param {Object} [r=Math] - A math utility class that holds a `random()` method. This makes it\n\t * possible to pass in custom random number generator.\n\t */\n\tconstructor( r = Math ) {\n\n\t\tthis.grad3 = [[ 1, 1, 0 ], [ - 1, 1, 0 ], [ 1, - 1, 0 ], [ - 1, - 1, 0 ],\n\t\t\t[ 1, 0, 1 ], [ - 1, 0, 1 ], [ 1, 0, - 1 ], [ - 1, 0, - 1 ],\n\t\t\t[ 0, 1, 1 ], [ 0, - 1, 1 ], [ 0, 1, - 1 ], [ 0, - 1, - 1 ]];\n\n\t\tthis.grad4 = [[ 0, 1, 1, 1 ], [ 0, 1, 1, - 1 ], [ 0, 1, - 1, 1 ], [ 0, 1, - 1, - 1 ],\n\t\t\t[ 0, - 1, 1, 1 ], [ 0, - 1, 1, - 1 ], [ 0, - 1, - 1, 1 ], [ 0, - 1, - 1, - 1 ],\n\t\t\t[ 1, 0, 1, 1 ], [ 1, 0, 1, - 1 ], [ 1, 0, - 1, 1 ], [ 1, 0, - 1, - 1 ],\n\t\t\t[ - 1, 0, 1, 1 ], [ - 1, 0, 1, - 1 ], [ - 1, 0, - 1, 1 ], [ - 1, 0, - 1, - 1 ],\n\t\t\t[ 1, 1, 0, 1 ], [ 1, 1, 0, - 1 ], [ 1, - 1, 0, 1 ], [ 1, - 1, 0, - 1 ],\n\t\t\t[ - 1, 1, 0, 1 ], [ - 1, 1, 0, - 1 ], [ - 1, - 1, 0, 1 ], [ - 1, - 1, 0, - 1 ],\n\t\t\t[ 1, 1, 1, 0 ], [ 1, 1, - 1, 0 ], [ 1, - 1, 1, 0 ], [ 1, - 1, - 1, 0 ],\n\t\t\t[ - 1, 1, 1, 0 ], [ - 1, 1, - 1, 0 ], [ - 1, - 1, 1, 0 ], [ - 1, - 1, - 1, 0 ]];\n\n\t\tthis.p = [];\n\n\t\tfor ( let i = 0; i < 256; i ++ ) {\n\n\t\t\tthis.p[ i ] = Math.floor( r.random() * 256 );\n\n\t\t}\n\n\t\t// To remove the need for index wrapping, double the permutation table length\n\t\tthis.perm = [];\n\n\t\tfor ( let i = 0; i < 512; i ++ ) {\n\n\t\t\tthis.perm[ i ] = this.p[ i & 255 ];\n\n\t\t}\n\n\t\t// A lookup table to traverse the simplex around a given point in 4D.\n\t\t// Details can be found where this table is used, in the 4D noise method.\n\t\tthis.simplex = [\n\t\t\t[ 0, 1, 2, 3 ], [ 0, 1, 3, 2 ], [ 0, 0, 0, 0 ], [ 0, 2, 3, 1 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 1, 2, 3, 0 ],\n\t\t\t[ 0, 2, 1, 3 ], [ 0, 0, 0, 0 ], [ 0, 3, 1, 2 ], [ 0, 3, 2, 1 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 1, 3, 2, 0 ],\n\t\t\t[ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ],\n\t\t\t[ 1, 2, 0, 3 ], [ 0, 0, 0, 0 ], [ 1, 3, 0, 2 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 2, 3, 0, 1 ], [ 2, 3, 1, 0 ],\n\t\t\t[ 1, 0, 2, 3 ], [ 1, 0, 3, 2 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 2, 0, 3, 1 ], [ 0, 0, 0, 0 ], [ 2, 1, 3, 0 ],\n\t\t\t[ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ],\n\t\t\t[ 2, 0, 1, 3 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 3, 0, 1, 2 ], [ 3, 0, 2, 1 ], [ 0, 0, 0, 0 ], [ 3, 1, 2, 0 ],\n\t\t\t[ 2, 1, 0, 3 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 3, 1, 0, 2 ], [ 0, 0, 0, 0 ], [ 3, 2, 0, 1 ], [ 3, 2, 1, 0 ]];\n\n\t}\n\n\t/**\n\t * A 2D simplex noise method.\n\t *\n\t * @param {number} xin - The x coordinate.\n\t * @param {number} yin - The y coordinate.\n\t * @return {number} The noise value.\n\t */\n\tnoise( xin, yin ) {\n\n\t\tlet n0; // Noise contributions from the three corners\n\t\tlet n1;\n\t\tlet n2;\n\t\t// Skew the input space to determine which simplex cell we're in\n\t\tconst F2 = 0.5 * ( Math.sqrt( 3.0 ) - 1.0 );\n\t\tconst s = ( xin + yin ) * F2; // Hairy factor for 2D\n\t\tconst i = Math.floor( xin + s );\n\t\tconst j = Math.floor( yin + s );\n\t\tconst G2 = ( 3.0 - Math.sqrt( 3.0 ) ) / 6.0;\n\t\tconst t = ( i + j ) * G2;\n\t\tconst X0 = i - t; // Unskew the cell origin back to (x,y) space\n\t\tconst Y0 = j - t;\n\t\tconst x0 = xin - X0; // The x,y distances from the cell origin\n\t\tconst y0 = yin - Y0;\n\n\t\t// For the 2D case, the simplex shape is an equilateral triangle.\n\t\t// Determine which simplex we are in.\n\t\tlet i1; // Offsets for second (middle) corner of simplex in (i,j) coords\n\n\t\tlet j1;\n\t\tif ( x0 > y0 ) {\n\n\t\t\ti1 = 1; j1 = 0;\n\n\t\t\t// lower triangle, XY order: (0,0)->(1,0)->(1,1)\n\n\t\t}\telse {\n\n\t\t\ti1 = 0; j1 = 1;\n\n\t\t} // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n\n\t\t// A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n\t\t// a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n\t\t// c = (3-sqrt(3))/6\n\t\tconst x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n\t\tconst y1 = y0 - j1 + G2;\n\t\tconst x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\n\t\tconst y2 = y0 - 1.0 + 2.0 * G2;\n\t\t// Work out the hashed gradient indices of the three simplex corners\n\t\tconst ii = i & 255;\n\t\tconst jj = j & 255;\n\t\tconst gi0 = this.perm[ ii + this.perm[ jj ] ] % 12;\n\t\tconst gi1 = this.perm[ ii + i1 + this.perm[ jj + j1 ] ] % 12;\n\t\tconst gi2 = this.perm[ ii + 1 + this.perm[ jj + 1 ] ] % 12;\n\t\t// Calculate the contribution from the three corners\n\t\tlet t0 = 0.5 - x0 * x0 - y0 * y0;\n\t\tif ( t0 < 0 ) n0 = 0.0;\n\t\telse {\n\n\t\t\tt0 *= t0;\n\t\t\tn0 = t0 * t0 * this._dot( this.grad3[ gi0 ], x0, y0 ); // (x,y) of grad3 used for 2D gradient\n\n\t\t}\n\n\t\tlet t1 = 0.5 - x1 * x1 - y1 * y1;\n\t\tif ( t1 < 0 ) n1 = 0.0;\n\t\telse {\n\n\t\t\tt1 *= t1;\n\t\t\tn1 = t1 * t1 * this._dot( this.grad3[ gi1 ], x1, y1 );\n\n\t\t}\n\n\t\tlet t2 = 0.5 - x2 * x2 - y2 * y2;\n\t\tif ( t2 < 0 ) n2 = 0.0;\n\t\telse {\n\n\t\t\tt2 *= t2;\n\t\t\tn2 = t2 * t2 * this._dot( this.grad3[ gi2 ], x2, y2 );\n\n\t\t}\n\n\t\t// Add contributions from each corner to get the final noise value.\n\t\t// The result is scaled to return values in the interval [-1,1].\n\t\treturn 70.0 * ( n0 + n1 + n2 );\n\n\t}\n\n\t/**\n\t * A 3D simplex noise method.\n\t *\n\t * @param {number} xin - The x coordinate.\n\t * @param {number} yin - The y coordinate.\n\t * @param {number} zin - The z coordinate.\n\t * @return {number} The noise value.\n\t */\n\tnoise3d( xin, yin, zin ) {\n\n\t\tlet n0; // Noise contributions from the four corners\n\t\tlet n1;\n\t\tlet n2;\n\t\tlet n3;\n\t\t// Skew the input space to determine which simplex cell we're in\n\t\tconst F3 = 1.0 / 3.0;\n\t\tconst s = ( xin + yin + zin ) * F3; // Very nice and simple skew factor for 3D\n\t\tconst i = Math.floor( xin + s );\n\t\tconst j = Math.floor( yin + s );\n\t\tconst k = Math.floor( zin + s );\n\t\tconst G3 = 1.0 / 6.0; // Very nice and simple unskew factor, too\n\t\tconst t = ( i + j + k ) * G3;\n\t\tconst X0 = i - t; // Unskew the cell origin back to (x,y,z) space\n\t\tconst Y0 = j - t;\n\t\tconst Z0 = k - t;\n\t\tconst x0 = xin - X0; // The x,y,z distances from the cell origin\n\t\tconst y0 = yin - Y0;\n\t\tconst z0 = zin - Z0;\n\n\t\t// For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n\t\t// Determine which simplex we are in.\n\t\tlet i1; // Offsets for second corner of simplex in (i,j,k) coords\n\n\t\tlet j1;\n\t\tlet k1;\n\t\tlet i2; // Offsets for third corner of simplex in (i,j,k) coords\n\t\tlet j2;\n\t\tlet k2;\n\t\tif ( x0 >= y0 ) {\n\n\t\t\tif ( y0 >= z0 ) {\n\n\t\t\t\ti1 = 1; j1 = 0; k1 = 0; i2 = 1; j2 = 1; k2 = 0;\n\n\t\t\t\t// X Y Z order\n\n\t\t\t} else if ( x0 >= z0 ) {\n\n\t\t\t\ti1 = 1; j1 = 0; k1 = 0; i2 = 1; j2 = 0; k2 = 1;\n\n\t\t\t\t// X Z Y order\n\n\t\t\t} else {\n\n\t\t\t\ti1 = 0; j1 = 0; k1 = 1; i2 = 1; j2 = 0; k2 = 1;\n\n\t\t\t} // Z X Y order\n\n\t\t} else { // x0<y0\n\n\t\t\tif ( y0 < z0 ) {\n\n\t\t\t\ti1 = 0; j1 = 0; k1 = 1; i2 = 0; j2 = 1; k2 = 1;\n\n\t\t\t\t// Z Y X order\n\n\t\t\t} else if ( x0 < z0 ) {\n\n\t\t\t\ti1 = 0; j1 = 1; k1 = 0; i2 = 0; j2 = 1; k2 = 1;\n\n\t\t\t\t// Y Z X order\n\n\t\t\t} else {\n\n\t\t\t\ti1 = 0; j1 = 1; k1 = 0; i2 = 1; j2 = 1; k2 = 0;\n\n\t\t\t} // Y X Z order\n\n\t\t}\n\n\t\t// A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n\t\t// a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n\t\t// a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n\t\t// c = 1/6.\n\t\tconst x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\n\t\tconst y1 = y0 - j1 + G3;\n\t\tconst z1 = z0 - k1 + G3;\n\t\tconst x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords\n\t\tconst y2 = y0 - j2 + 2.0 * G3;\n\t\tconst z2 = z0 - k2 + 2.0 * G3;\n\t\tconst x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords\n\t\tconst y3 = y0 - 1.0 + 3.0 * G3;\n\t\tconst z3 = z0 - 1.0 + 3.0 * G3;\n\t\t// Work out the hashed gradient indices of the four simplex corners\n\t\tconst ii = i & 255;\n\t\tconst jj = j & 255;\n\t\tconst kk = k & 255;\n\t\tconst gi0 = this.perm[ ii + this.perm[ jj + this.perm[ kk ] ] ] % 12;\n\t\tconst gi1 = this.perm[ ii + i1 + this.perm[ jj + j1 + this.perm[ kk + k1 ] ] ] % 12;\n\t\tconst gi2 = this.perm[ ii + i2 + this.perm[ jj + j2 + this.perm[ kk + k2 ] ] ] % 12;\n\t\tconst gi3 = this.perm[ ii + 1 + this.perm[ jj + 1 + this.perm[ kk + 1 ] ] ] % 12;\n\t\t// Calculate the contribution from the four corners\n\t\tlet t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n\t\tif ( t0 < 0 ) n0 = 0.0;\n\t\telse {\n\n\t\t\tt0 *= t0;\n\t\t\tn0 = t0 * t0 * this._dot3( this.grad3[ gi0 ], x0, y0, z0 );\n\n\t\t}\n\n\t\tlet t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n\t\tif ( t1 < 0 ) n1 = 0.0;\n\t\telse {\n\n\t\t\tt1 *= t1;\n\t\t\tn1 = t1 * t1 * this._dot3( this.grad3[ gi1 ], x1, y1, z1 );\n\n\t\t}\n\n\t\tlet t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n\t\tif ( t2 < 0 ) n2 = 0.0;\n\t\telse {\n\n\t\t\tt2 *= t2;\n\t\t\tn2 = t2 * t2 * this._dot3( this.grad3[ gi2 ], x2, y2, z2 );\n\n\t\t}\n\n\t\tlet t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n\t\tif ( t3 < 0 ) n3 = 0.0;\n\t\telse {\n\n\t\t\tt3 *= t3;\n\t\t\tn3 = t3 * t3 * this._dot3( this.grad3[ gi3 ], x3, y3, z3 );\n\n\t\t}\n\n\t\t// Add contributions from each corner to get the final noise value.\n\t\t// The result is scaled to stay just inside [-1,1]\n\t\treturn 32.0 * ( n0 + n1 + n2 + n3 );\n\n\t}\n\n\t/**\n\t * A 4D simplex noise method.\n\t *\n\t * @param {number} x - The x coordinate.\n\t * @param {number} y - The y coordinate.\n\t * @param {number} z - The z coordinate.\n\t * @param {number} w - The w coordinate.\n\t * @return {number} The noise value.\n\t */\n\tnoise4d( x, y, z, w ) {\n\n\t\t// For faster and easier lookups\n\t\tconst grad4 = this.grad4;\n\t\tconst simplex = this.simplex;\n\t\tconst perm = this.perm;\n\n\t\t// The skewing and unskewing factors are hairy again for the 4D case\n\t\tconst F4 = ( Math.sqrt( 5.0 ) - 1.0 ) / 4.0;\n\t\tconst G4 = ( 5.0 - Math.sqrt( 5.0 ) ) / 20.0;\n\t\tlet n0; // Noise contributions from the five corners\n\t\tlet n1;\n\t\tlet n2;\n\t\tlet n3;\n\t\tlet n4;\n\t\t// Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\n\t\tconst s = ( x + y + z + w ) * F4; // Factor for 4D skewing\n\t\tconst i = Math.floor( x + s );\n\t\tconst j = Math.floor( y + s );\n\t\tconst k = Math.floor( z + s );\n\t\tconst l = Math.floor( w + s );\n\t\tconst t = ( i + j + k + l ) * G4; // Factor for 4D unskewing\n\t\tconst X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\n\t\tconst Y0 = j - t;\n\t\tconst Z0 = k - t;\n\t\tconst W0 = l - t;\n\t\tconst x0 = x - X0; // The x,y,z,w distances from the cell origin\n\t\tconst y0 = y - Y0;\n\t\tconst z0 = z - Z0;\n\t\tconst w0 = w - W0;\n\n\t\t// For the 4D case, the simplex is a 4D shape I won't even try to describe.\n\t\t// To find out which of the 24 possible simplices we're in, we need to\n\t\t// determine the magnitude ordering of x0, y0, z0 and w0.\n\t\t// The method below is a good way of finding the ordering of x,y,z,w and\n\t\t// then find the correct traversal order for the simplex we’re in.\n\t\t// First, six pair-wise comparisons are performed between each possible pair\n\t\t// of the four coordinates, and the results are used to add up binary bits\n\t\t// for an integer index.\n\t\tconst c1 = ( x0 > y0 ) ? 32 : 0;\n\t\tconst c2 = ( x0 > z0 ) ? 16 : 0;\n\t\tconst c3 = ( y0 > z0 ) ? 8 : 0;\n\t\tconst c4 = ( x0 > w0 ) ? 4 : 0;\n\t\tconst c5 = ( y0 > w0 ) ? 2 : 0;\n\t\tconst c6 = ( z0 > w0 ) ? 1 : 0;\n\t\tconst c = c1 + c2 + c3 + c4 + c5 + c6;\n\n\t\t// simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\n\t\t// Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\n\t\t// impossible. Only the 24 indices which have non-zero entries make any sense.\n\t\t// We use a thresholding to set the coordinates in turn from the largest magnitude.\n\t\t// The number 3 in the \"simplex\" array is at the position of the largest coordinate.\n\t\tconst i1 = simplex[ c ][ 0 ] >= 3 ? 1 : 0;\n\t\tconst j1 = simplex[ c ][ 1 ] >= 3 ? 1 : 0;\n\t\tconst k1 = simplex[ c ][ 2 ] >= 3 ? 1 : 0;\n\t\tconst l1 = simplex[ c ][ 3 ] >= 3 ? 1 : 0;\n\t\t// The number 2 in the \"simplex\" array is at the second largest coordinate.\n\t\tconst i2 = simplex[ c ][ 0 ] >= 2 ? 1 : 0;\n\t\tconst j2 = simplex[ c ][ 1 ] >= 2 ? 1 : 0;\n\t\tconst k2 = simplex[ c ][ 2 ] >= 2 ? 1 : 0;\n\t\tconst l2 = simplex[ c ][ 3 ] >= 2 ? 1 : 0;\n\t\t// The number 1 in the \"simplex\" array is at the second smallest coordinate.\n\t\tconst i3 = simplex[ c ][ 0 ] >= 1 ? 1 : 0;\n\t\tconst j3 = simplex[ c ][ 1 ] >= 1 ? 1 : 0;\n\t\tconst k3 = simplex[ c ][ 2 ] >= 1 ? 1 : 0;\n\t\tconst l3 = simplex[ c ][ 3 ] >= 1 ? 1 : 0;\n\t\t// The fifth corner has all coordinate offsets = 1, so no need to look that up.\n\t\tconst x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords\n\t\tconst y1 = y0 - j1 + G4;\n\t\tconst z1 = z0 - k1 + G4;\n\t\tconst w1 = w0 - l1 + G4;\n\t\tconst x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords\n\t\tconst y2 = y0 - j2 + 2.0 * G4;\n\t\tconst z2 = z0 - k2 + 2.0 * G4;\n\t\tconst w2 = w0 - l2 + 2.0 * G4;\n\t\tconst x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords\n\t\tconst y3 = y0 - j3 + 3.0 * G4;\n\t\tconst z3 = z0 - k3 + 3.0 * G4;\n\t\tconst w3 = w0 - l3 + 3.0 * G4;\n\t\tconst x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords\n\t\tconst y4 = y0 - 1.0 + 4.0 * G4;\n\t\tconst z4 = z0 - 1.0 + 4.0 * G4;\n\t\tconst w4 = w0 - 1.0 + 4.0 * G4;\n\t\t// Work out the hashed gradient indices of the five simplex corners\n\t\tconst ii = i & 255;\n\t\tconst jj = j & 255;\n\t\tconst kk = k & 255;\n\t\tconst ll = l & 255;\n\t\tconst gi0 = perm[ ii + perm[ jj + perm[ kk + perm[ ll ] ] ] ] % 32;\n\t\tconst gi1 = perm[ ii + i1 + perm[ jj + j1 + perm[ kk + k1 + perm[ ll + l1 ] ] ] ] % 32;\n\t\tconst gi2 = perm[ ii + i2 + perm[ jj + j2 + perm[ kk + k2 + perm[ ll + l2 ] ] ] ] % 32;\n\t\tconst gi3 = perm[ ii + i3 + perm[ jj + j3 + perm[ kk + k3 + perm[ ll + l3 ] ] ] ] % 32;\n\t\tconst gi4 = perm[ ii + 1 + perm[ jj + 1 + perm[ kk + 1 + perm[ ll + 1 ] ] ] ] % 32;\n\t\t// Calculate the contribution from the five corners\n\t\tlet t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\n\t\tif ( t0 < 0 ) n0 = 0.0;\n\t\telse {\n\n\t\t\tt0 *= t0;\n\t\t\tn0 = t0 * t0 * this._dot4( grad4[ gi0 ], x0, y0, z0, w0 );\n\n\t\t}\n\n\t\tlet t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\n\t\tif ( t1 < 0 ) n1 = 0.0;\n\t\telse {\n\n\t\t\tt1 *= t1;\n\t\t\tn1 = t1 * t1 * this._dot4( grad4[ gi1 ], x1, y1, z1, w1 );\n\n\t\t}\n\n\t\tlet t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\n\t\tif ( t2 < 0 ) n2 = 0.0;\n\t\telse {\n\n\t\t\tt2 *= t2;\n\t\t\tn2 = t2 * t2 * this._dot4( grad4[ gi2 ], x2, y2, z2, w2 );\n\n\t\t}\n\n\t\tlet t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\n\t\tif ( t3 < 0 ) n3 = 0.0;\n\t\telse {\n\n\t\t\tt3 *= t3;\n\t\t\tn3 = t3 * t3 * this._dot4( grad4[ gi3 ], x3, y3, z3, w3 );\n\n\t\t}\n\n\t\tlet t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\n\t\tif ( t4 < 0 ) n4 = 0.0;\n\t\telse {\n\n\t\t\tt4 *= t4;\n\t\t\tn4 = t4 * t4 * this._dot4( grad4[ gi4 ], x4, y4, z4, w4 );\n\n\t\t}\n\n\t\t// Sum up and scale the result to cover the range [-1,1]\n\t\treturn 27.0 * ( n0 + n1 + n2 + n3 + n4 );\n\n\t}\n\n\t// private\n\n\t_dot( g, x, y ) {\n\n\t\treturn g[ 0 ] * x + g[ 1 ] * y;\n\n\t}\n\n\t_dot3( g, x, y, z ) {\n\n\t\treturn g[ 0 ] * x + g[ 1 ] * y + g[ 2 ] * z;\n\n\t}\n\n\t_dot4( g, x, y, z, w ) {\n\n\t\treturn g[ 0 ] * x + g[ 1 ] * y + g[ 2 ] * z + g[ 3 ] * w;\n\n\t}\n\n}\n\nexport { SimplexNoise };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,YAAY,CAAC;EAElB;AACD;AACA;AACA;AACA;AACA;EACCC,WAAWA,CAAEC,CAAC,GAAGC,IAAI,EAAG;IAEvB,IAAI,CAACC,KAAK,GAAG,CAAC,CAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE,EAAE,CAAE,CAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE,EAAE,CAAE,CAAC,EAAE,CAAE,CAAC,EAAE,CAAC,CAAE,EAAE,CAAE,CAAE,CAAC,EAAE,CAAE,CAAC,EAAE,CAAC,CAAE,EACvE,CAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE,EAAE,CAAE,CAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE,EAAE,CAAE,CAAC,EAAE,CAAC,EAAE,CAAE,CAAC,CAAE,EAAE,CAAE,CAAE,CAAC,EAAE,CAAC,EAAE,CAAE,CAAC,CAAE,EAC1D,CAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE,EAAE,CAAE,CAAC,EAAE,CAAE,CAAC,EAAE,CAAC,CAAE,EAAE,CAAE,CAAC,EAAE,CAAC,EAAE,CAAE,CAAC,CAAE,EAAE,CAAE,CAAC,EAAE,CAAE,CAAC,EAAE,CAAE,CAAC,CAAE,CAAC;IAE5D,IAAI,CAACC,KAAK,GAAG,CAAC,CAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE,EAAE,CAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAE,CAAC,CAAE,EAAE,CAAE,CAAC,EAAE,CAAC,EAAE,CAAE,CAAC,EAAE,CAAC,CAAE,EAAE,CAAE,CAAC,EAAE,CAAC,EAAE,CAAE,CAAC,EAAE,CAAE,CAAC,CAAE,EACnF,CAAE,CAAC,EAAE,CAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE,EAAE,CAAE,CAAC,EAAE,CAAE,CAAC,EAAE,CAAC,EAAE,CAAE,CAAC,CAAE,EAAE,CAAE,CAAC,EAAE,CAAE,CAAC,EAAE,CAAE,CAAC,EAAE,CAAC,CAAE,EAAE,CAAE,CAAC,EAAE,CAAE,CAAC,EAAE,CAAE,CAAC,EAAE,CAAE,CAAC,CAAE,EAC9E,CAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE,EAAE,CAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAE,CAAC,CAAE,EAAE,CAAE,CAAC,EAAE,CAAC,EAAE,CAAE,CAAC,EAAE,CAAC,CAAE,EAAE,CAAE,CAAC,EAAE,CAAC,EAAE,CAAE,CAAC,EAAE,CAAE,CAAC,CAAE,EACtE,CAAE,CAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE,EAAE,CAAE,CAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAE,CAAC,CAAE,EAAE,CAAE,CAAE,CAAC,EAAE,CAAC,EAAE,CAAE,CAAC,EAAE,CAAC,CAAE,EAAE,CAAE,CAAE,CAAC,EAAE,CAAC,EAAE,CAAE,CAAC,EAAE,CAAE,CAAC,CAAE,EAC9E,CAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE,EAAE,CAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAE,CAAC,CAAE,EAAE,CAAE,CAAC,EAAE,CAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE,EAAE,CAAE,CAAC,EAAE,CAAE,CAAC,EAAE,CAAC,EAAE,CAAE,CAAC,CAAE,EACtE,CAAE,CAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE,EAAE,CAAE,CAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAE,CAAC,CAAE,EAAE,CAAE,CAAE,CAAC,EAAE,CAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE,EAAE,CAAE,CAAE,CAAC,EAAE,CAAE,CAAC,EAAE,CAAC,EAAE,CAAE,CAAC,CAAE,EAC9E,CAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE,EAAE,CAAE,CAAC,EAAE,CAAC,EAAE,CAAE,CAAC,EAAE,CAAC,CAAE,EAAE,CAAE,CAAC,EAAE,CAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE,EAAE,CAAE,CAAC,EAAE,CAAE,CAAC,EAAE,CAAE,CAAC,EAAE,CAAC,CAAE,EACtE,CAAE,CAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE,EAAE,C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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}