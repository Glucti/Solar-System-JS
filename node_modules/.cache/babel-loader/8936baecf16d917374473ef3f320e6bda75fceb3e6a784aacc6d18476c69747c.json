{"ast":null,"code":"import { HalfFloatType, NoBlending, ShaderMaterial, UniformsUtils, WebGLRenderTarget } from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\n\n/**\n * A pass that saves the contents of the current read buffer in a render target.\n *\n * ```js\n * const savePass = new SavePass( customRenderTarget );\n * composer.addPass( savePass );\n * ```\n *\n * @augments Pass\n * @three_import import { SavePass } from 'three/addons/postprocessing/SavePass.js';\n */\nclass SavePass extends Pass {\n  /**\n   * Constructs a new save pass.\n   *\n   * @param {WebGLRenderTarget} [renderTarget] - The render target for saving the read buffer.\n   * If not provided, the pass automatically creates a render target.\n   */\n  constructor(renderTarget) {\n    super();\n\n    /**\n     * The pass uniforms.\n     *\n     * @type {Object}\n     */\n    this.uniforms = UniformsUtils.clone(CopyShader.uniforms);\n\n    /**\n     * The pass material.\n     *\n     * @type {ShaderMaterial}\n     */\n    this.material = new ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      blending: NoBlending\n    });\n\n    /**\n     * The render target which is used to save the read buffer.\n     *\n     * @type {WebGLRenderTarget}\n     */\n    this.renderTarget = renderTarget;\n    if (this.renderTarget === undefined) {\n      this.renderTarget = new WebGLRenderTarget(1, 1, {\n        type: HalfFloatType\n      }); // will be resized later\n      this.renderTarget.texture.name = 'SavePass.rt';\n    }\n\n    /**\n     * Overwritten to disable the swap.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.needsSwap = false;\n\n    // internals\n\n    this._fsQuad = new FullScreenQuad(this.material);\n  }\n\n  /**\n   * Performs the save pass.\n   *\n   * @param {WebGLRenderer} renderer - The renderer.\n   * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\n   * destination for the pass.\n   * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\n   * previous pass from this buffer.\n   * @param {number} deltaTime - The delta time in seconds.\n   * @param {boolean} maskActive - Whether masking is active or not.\n   */\n  render(renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */) {\n    this.uniforms['tDiffuse'].value = readBuffer.texture;\n    renderer.setRenderTarget(this.renderTarget);\n    if (this.clear) renderer.clear();\n    this._fsQuad.render(renderer);\n  }\n\n  /**\n   * Sets the size of the pass.\n   *\n   * @param {number} width - The width to set.\n   * @param {number} height - The height to set.\n   */\n  setSize(width, height) {\n    this.renderTarget.setSize(width, height);\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever the pass is no longer used in your app.\n   */\n  dispose() {\n    this.renderTarget.dispose();\n    this.material.dispose();\n    this._fsQuad.dispose();\n  }\n}\nexport { SavePass };","map":{"version":3,"names":["HalfFloatType","NoBlending","ShaderMaterial","UniformsUtils","WebGLRenderTarget","Pass","FullScreenQuad","CopyShader","SavePass","constructor","renderTarget","uniforms","clone","material","vertexShader","fragmentShader","blending","undefined","type","texture","name","needsSwap","_fsQuad","render","renderer","writeBuffer","readBuffer","value","setRenderTarget","clear","setSize","width","height","dispose"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/postprocessing/SavePass.js"],"sourcesContent":["import {\n\tHalfFloatType,\n\tNoBlending,\n\tShaderMaterial,\n\tUniformsUtils,\n\tWebGLRenderTarget\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\n\n/**\n * A pass that saves the contents of the current read buffer in a render target.\n *\n * ```js\n * const savePass = new SavePass( customRenderTarget );\n * composer.addPass( savePass );\n * ```\n *\n * @augments Pass\n * @three_import import { SavePass } from 'three/addons/postprocessing/SavePass.js';\n */\nclass SavePass extends Pass {\n\n\t/**\n\t * Constructs a new save pass.\n\t *\n\t * @param {WebGLRenderTarget} [renderTarget] - The render target for saving the read buffer.\n\t * If not provided, the pass automatically creates a render target.\n\t */\n\tconstructor( renderTarget ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The pass uniforms.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.uniforms = UniformsUtils.clone( CopyShader.uniforms );\n\n\t\t/**\n\t\t * The pass material.\n\t\t *\n\t\t * @type {ShaderMaterial}\n\t\t */\n\t\tthis.material = new ShaderMaterial( {\n\n\t\t\tuniforms: this.uniforms,\n\t\t\tvertexShader: CopyShader.vertexShader,\n\t\t\tfragmentShader: CopyShader.fragmentShader,\n\t\t\tblending: NoBlending\n\n\t\t} );\n\n\t\t/**\n\t\t * The render target which is used to save the read buffer.\n\t\t *\n\t\t * @type {WebGLRenderTarget}\n\t\t */\n\t\tthis.renderTarget = renderTarget;\n\n\t\tif ( this.renderTarget === undefined ) {\n\n\t\t\tthis.renderTarget = new WebGLRenderTarget( 1, 1, { type: HalfFloatType } ); // will be resized later\n\t\t\tthis.renderTarget.texture.name = 'SavePass.rt';\n\n\t\t}\n\n\t\t/**\n\t\t * Overwritten to disable the swap.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.needsSwap = false;\n\n\t\t// internals\n\n\t\tthis._fsQuad = new FullScreenQuad( this.material );\n\n\t}\n\n\t/**\n\t * Performs the save pass.\n\t *\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\n\t * destination for the pass.\n\t * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\n\t * previous pass from this buffer.\n\t * @param {number} deltaTime - The delta time in seconds.\n\t * @param {boolean} maskActive - Whether masking is active or not.\n\t */\n\trender( renderer, writeBuffer, readBuffer/*, deltaTime, maskActive */ ) {\n\n\t\tthis.uniforms[ 'tDiffuse' ].value = readBuffer.texture;\n\n\t\trenderer.setRenderTarget( this.renderTarget );\n\t\tif ( this.clear ) renderer.clear();\n\t\tthis._fsQuad.render( renderer );\n\n\t}\n\n\t/**\n\t * Sets the size of the pass.\n\t *\n\t * @param {number} width - The width to set.\n\t * @param {number} height - The height to set.\n\t */\n\tsetSize( width, height ) {\n\n\t\tthis.renderTarget.setSize( width, height );\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever the pass is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.renderTarget.dispose();\n\n\t\tthis.material.dispose();\n\n\t\tthis._fsQuad.dispose();\n\n\t}\n\n}\n\nexport { SavePass };\n"],"mappings":"AAAA,SACCA,aAAa,EACbC,UAAU,EACVC,cAAc,EACdC,aAAa,EACbC,iBAAiB,QACX,OAAO;AACd,SAASC,IAAI,EAAEC,cAAc,QAAQ,WAAW;AAChD,SAASC,UAAU,QAAQ,0BAA0B;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,QAAQ,SAASH,IAAI,CAAC;EAE3B;AACD;AACA;AACA;AACA;AACA;EACCI,WAAWA,CAAEC,YAAY,EAAG;IAE3B,KAAK,CAAC,CAAC;;IAEP;AACF;AACA;AACA;AACA;IACE,IAAI,CAACC,QAAQ,GAAGR,aAAa,CAACS,KAAK,CAAEL,UAAU,CAACI,QAAS,CAAC;;IAE1D;AACF;AACA;AACA;AACA;IACE,IAAI,CAACE,QAAQ,GAAG,IAAIX,cAAc,CAAE;MAEnCS,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBG,YAAY,EAAEP,UAAU,CAACO,YAAY;MACrCC,cAAc,EAAER,UAAU,CAACQ,cAAc;MACzCC,QAAQ,EAAEf;IAEX,CAAE,CAAC;;IAEH;AACF;AACA;AACA;AACA;IACE,IAAI,CAACS,YAAY,GAAGA,YAAY;IAEhC,IAAK,IAAI,CAACA,YAAY,KAAKO,SAAS,EAAG;MAEtC,IAAI,CAACP,YAAY,GAAG,IAAIN,iBAAiB,CAAE,CAAC,EAAE,CAAC,EAAE;QAAEc,IAAI,EAAElB;MAAc,CAAE,CAAC,CAAC,CAAC;MAC5E,IAAI,CAACU,YAAY,CAACS,OAAO,CAACC,IAAI,GAAG,aAAa;IAE/C;;IAEA;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,SAAS,GAAG,KAAK;;IAEtB;;IAEA,IAAI,CAACC,OAAO,GAAG,IAAIhB,cAAc,CAAE,IAAI,CAACO,QAAS,CAAC;EAEnD;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCU,MAAMA,CAAEC,QAAQ,EAAEC,WAAW,EAAEC,UAAU,+BAA+B;IAEvE,IAAI,CAACf,QAAQ,CAAE,UAAU,CAAE,CAACgB,KAAK,GAAGD,UAAU,CAACP,OAAO;IAEtDK,QAAQ,CAACI,eAAe,CAAE,IAAI,CAAClB,YAAa,CAAC;IAC7C,IAAK,IAAI,CAACmB,KAAK,EAAGL,QAAQ,CAACK,KAAK,CAAC,CAAC;IAClC,IAAI,CAACP,OAAO,CAACC,MAAM,CAAEC,QAAS,CAAC;EAEhC;;EAEA;AACD;AACA;AACA;AACA;AACA;EACCM,OAAOA,CAAEC,KAAK,EAAEC,MAAM,EAAG;IAExB,IAAI,CAACtB,YAAY,CAACoB,OAAO,CAAEC,KAAK,EAAEC,MAAO,CAAC;EAE3C;;EAEA;AACD;AACA;AACA;EACCC,OAAOA,CAAA,EAAG;IAET,IAAI,CAACvB,YAAY,CAACuB,OAAO,CAAC,CAAC;IAE3B,IAAI,CAACpB,QAAQ,CAACoB,OAAO,CAAC,CAAC;IAEvB,IAAI,CAACX,OAAO,CAACW,OAAO,CAAC,CAAC;EAEvB;AAED;AAEA,SAASzB,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}