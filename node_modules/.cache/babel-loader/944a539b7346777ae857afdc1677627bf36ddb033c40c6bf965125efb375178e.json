{"ast":null,"code":"import { ShaderPass } from './ShaderPass.js';\nconst LUTShader = {\n  name: 'LUTShader',\n  uniforms: {\n    lut: {\n      value: null\n    },\n    lutSize: {\n      value: 0\n    },\n    tDiffuse: {\n      value: null\n    },\n    intensity: {\n      value: 1.0\n    }\n  },\n  vertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}\n\n\t`,\n  fragmentShader: /* glsl */`\n\n\t\tuniform float lutSize;\n\t\tuniform sampler3D lut;\n\n\t\tvarying vec2 vUv;\n\t\tuniform float intensity;\n\t\tuniform sampler2D tDiffuse;\n\t\tvoid main() {\n\n\t\t\tvec4 val = texture2D( tDiffuse, vUv );\n\t\t\tvec4 lutVal;\n\n\t\t\t// pull the sample in by half a pixel so the sample begins\n\t\t\t// at the center of the edge pixels.\n\t\t\tfloat pixelWidth = 1.0 / lutSize;\n\t\t\tfloat halfPixelWidth = 0.5 / lutSize;\n\t\t\tvec3 uvw = vec3( halfPixelWidth ) + val.rgb * ( 1.0 - pixelWidth );\n\n\n\t\t\tlutVal = vec4( texture( lut, uvw ).rgb, val.a );\n\n\t\t\tgl_FragColor = vec4( mix( val, lutVal, intensity ) );\n\n\t\t}\n\n\t`\n};\n\n/**\n * Pass for color grading via lookup tables.\n *\n * ```js\n * const lutPass = new LUTPass( { lut: lut.texture3D } );\n * composer.addPass( lutPass );\n * ```\n *\n * @augments ShaderPass\n * @three_import import { LUTPass } from 'three/addons/postprocessing/LUTPass.js';\n */\nclass LUTPass extends ShaderPass {\n  /**\n   * Constructs a LUT pass.\n   *\n   * @param {{lut:Data3DTexture,intensity:number}} [options={}] - The pass options.\n   */\n  constructor(options = {}) {\n    super(LUTShader);\n\n    /**\n     * The LUT as a 3D texture.\n     *\n     * @type {?Data3DTexture}\n     * @default null\n     */\n    this.lut = options.lut || null;\n\n    /**\n     * The intensity.\n     *\n     * @type {?number}\n     * @default 1\n     */\n    this.intensity = 'intensity' in options ? options.intensity : 1;\n  }\n  set lut(v) {\n    const material = this.material;\n    if (v !== this.lut) {\n      material.uniforms.lut.value = null;\n      if (v) {\n        material.uniforms.lutSize.value = v.image.width;\n        material.uniforms.lut.value = v;\n      }\n    }\n  }\n  get lut() {\n    return this.material.uniforms.lut.value;\n  }\n  set intensity(v) {\n    this.material.uniforms.intensity.value = v;\n  }\n  get intensity() {\n    return this.material.uniforms.intensity.value;\n  }\n}\nexport { LUTPass };","map":{"version":3,"names":["ShaderPass","LUTShader","name","uniforms","lut","value","lutSize","tDiffuse","intensity","vertexShader","fragmentShader","LUTPass","constructor","options","v","material","image","width"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/postprocessing/LUTPass.js"],"sourcesContent":["import { ShaderPass } from './ShaderPass.js';\n\nconst LUTShader = {\n\n\tname: 'LUTShader',\n\n\tuniforms: {\n\n\t\tlut: { value: null },\n\t\tlutSize: { value: 0 },\n\n\t\ttDiffuse: { value: null },\n\t\tintensity: { value: 1.0 },\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}\n\n\t`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform float lutSize;\n\t\tuniform sampler3D lut;\n\n\t\tvarying vec2 vUv;\n\t\tuniform float intensity;\n\t\tuniform sampler2D tDiffuse;\n\t\tvoid main() {\n\n\t\t\tvec4 val = texture2D( tDiffuse, vUv );\n\t\t\tvec4 lutVal;\n\n\t\t\t// pull the sample in by half a pixel so the sample begins\n\t\t\t// at the center of the edge pixels.\n\t\t\tfloat pixelWidth = 1.0 / lutSize;\n\t\t\tfloat halfPixelWidth = 0.5 / lutSize;\n\t\t\tvec3 uvw = vec3( halfPixelWidth ) + val.rgb * ( 1.0 - pixelWidth );\n\n\n\t\t\tlutVal = vec4( texture( lut, uvw ).rgb, val.a );\n\n\t\t\tgl_FragColor = vec4( mix( val, lutVal, intensity ) );\n\n\t\t}\n\n\t`,\n\n};\n\n/**\n * Pass for color grading via lookup tables.\n *\n * ```js\n * const lutPass = new LUTPass( { lut: lut.texture3D } );\n * composer.addPass( lutPass );\n * ```\n *\n * @augments ShaderPass\n * @three_import import { LUTPass } from 'three/addons/postprocessing/LUTPass.js';\n */\nclass LUTPass extends ShaderPass {\n\n\t/**\n\t * Constructs a LUT pass.\n\t *\n\t * @param {{lut:Data3DTexture,intensity:number}} [options={}] - The pass options.\n\t */\n\tconstructor( options = {} ) {\n\n\t\tsuper( LUTShader );\n\n\t\t/**\n\t\t * The LUT as a 3D texture.\n\t\t *\n\t\t * @type {?Data3DTexture}\n\t\t * @default null\n\t\t */\n\t\tthis.lut = options.lut || null;\n\n\t\t/**\n\t\t * The intensity.\n\t\t *\n\t\t * @type {?number}\n\t\t * @default 1\n\t\t */\n\t\tthis.intensity = 'intensity' in options ? options.intensity : 1;\n\n\t}\n\n\tset lut( v ) {\n\n\t\tconst material = this.material;\n\n\t\tif ( v !== this.lut ) {\n\n\t\t\tmaterial.uniforms.lut.value = null;\n\n\t\t\tif ( v ) {\n\n\t\t\t\tmaterial.uniforms.lutSize.value = v.image.width;\n\t\t\t\tmaterial.uniforms.lut.value = v;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tget lut() {\n\n\t\treturn this.material.uniforms.lut.value;\n\n\t}\n\n\tset intensity( v ) {\n\n\t\tthis.material.uniforms.intensity.value = v;\n\n\t}\n\n\tget intensity() {\n\n\t\treturn this.material.uniforms.intensity.value;\n\n\t}\n\n}\n\nexport { LUTPass };\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,iBAAiB;AAE5C,MAAMC,SAAS,GAAG;EAEjBC,IAAI,EAAE,WAAW;EAEjBC,QAAQ,EAAE;IAETC,GAAG,EAAE;MAAEC,KAAK,EAAE;IAAK,CAAC;IACpBC,OAAO,EAAE;MAAED,KAAK,EAAE;IAAE,CAAC;IAErBE,QAAQ,EAAE;MAAEF,KAAK,EAAE;IAAK,CAAC;IACzBG,SAAS,EAAE;MAAEH,KAAK,EAAE;IAAI;EACzB,CAAC;EAEDI,YAAY,EAAE,UAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;EAEDC,cAAc,EAAE,UAAU;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,OAAO,SAASX,UAAU,CAAC;EAEhC;AACD;AACA;AACA;AACA;EACCY,WAAWA,CAAEC,OAAO,GAAG,CAAC,CAAC,EAAG;IAE3B,KAAK,CAAEZ,SAAU,CAAC;;IAElB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACG,GAAG,GAAGS,OAAO,CAACT,GAAG,IAAI,IAAI;;IAE9B;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACI,SAAS,GAAG,WAAW,IAAIK,OAAO,GAAGA,OAAO,CAACL,SAAS,GAAG,CAAC;EAEhE;EAEA,IAAIJ,GAAGA,CAAEU,CAAC,EAAG;IAEZ,MAAMC,QAAQ,GAAG,IAAI,CAACA,QAAQ;IAE9B,IAAKD,CAAC,KAAK,IAAI,CAACV,GAAG,EAAG;MAErBW,QAAQ,CAACZ,QAAQ,CAACC,GAAG,CAACC,KAAK,GAAG,IAAI;MAElC,IAAKS,CAAC,EAAG;QAERC,QAAQ,CAACZ,QAAQ,CAACG,OAAO,CAACD,KAAK,GAAGS,CAAC,CAACE,KAAK,CAACC,KAAK;QAC/CF,QAAQ,CAACZ,QAAQ,CAACC,GAAG,CAACC,KAAK,GAAGS,CAAC;MAEhC;IAED;EAED;EAEA,IAAIV,GAAGA,CAAA,EAAG;IAET,OAAO,IAAI,CAACW,QAAQ,CAACZ,QAAQ,CAACC,GAAG,CAACC,KAAK;EAExC;EAEA,IAAIG,SAASA,CAAEM,CAAC,EAAG;IAElB,IAAI,CAACC,QAAQ,CAACZ,QAAQ,CAACK,SAAS,CAACH,KAAK,GAAGS,CAAC;EAE3C;EAEA,IAAIN,SAASA,CAAA,EAAG;IAEf,OAAO,IAAI,CAACO,QAAQ,CAACZ,QAAQ,CAACK,SAAS,CAACH,KAAK;EAE9C;AAED;AAEA,SAASM,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}