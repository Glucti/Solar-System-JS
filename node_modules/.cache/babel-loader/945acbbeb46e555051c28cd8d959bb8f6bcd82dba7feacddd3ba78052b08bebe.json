{"ast":null,"code":"import { AddEquation, Color, CustomBlending, DepthTexture, DstAlphaFactor, DstColorFactor, HalfFloatType, MeshNormalMaterial, NearestFilter, NoBlending, ShaderMaterial, UniformsUtils, DepthStencilFormat, UnsignedInt248Type, Vector2, WebGLRenderTarget, ZeroFactor } from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { SAOShader } from '../shaders/SAOShader.js';\nimport { BlurShaderUtils, DepthLimitedBlurShader } from '../shaders/DepthLimitedBlurShader.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\n\n/**\n * A SAO implementation inspired from @bhouston previous SAO work.\n *\n * `SAOPass` provides better quality than {@link SSAOPass} but is also more expensive.\n *\n * ```js\n * const saoPass = new SAOPass( scene, camera );\n * composer.addPass( saoPass );\n * ```\n *\n * @augments Pass\n * @three_import import { SAOPass } from 'three/addons/postprocessing/SAOPass.js';\n */\nclass SAOPass extends Pass {\n  /**\n   * Constructs a new SAO pass.\n   *\n   * @param {Scene} scene - The scene to compute the AO for.\n   * @param {Camera} camera - The camera.\n   * @param {Vector2} [resolution] - The effect's resolution.\n   */\n  constructor(scene, camera, resolution = new Vector2(256, 256)) {\n    super();\n\n    /**\n     * The scene to render the AO for.\n     *\n     * @type {Scene}\n     */\n    this.scene = scene;\n\n    /**\n     * The camera.\n     *\n     * @type {Camera}\n     */\n    this.camera = camera;\n\n    /**\n     * Overwritten to perform a clear operation by default.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.clear = true;\n\n    /**\n     * Overwritten to disable the swap.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.needsSwap = false;\n    this._originalClearColor = new Color();\n    this._oldClearColor = new Color();\n    this._oldClearAlpha = 1;\n\n    /**\n     * The SAO parameter.\n     *\n     * @type {Object}\n     */\n    this.params = {\n      output: 0,\n      saoBias: 0.5,\n      saoIntensity: 0.18,\n      saoScale: 1,\n      saoKernelRadius: 100,\n      saoMinResolution: 0,\n      saoBlur: true,\n      saoBlurRadius: 8,\n      saoBlurStdDev: 4,\n      saoBlurDepthCutoff: 0.01\n    };\n\n    /**\n     * The effect's resolution.\n     *\n     * @type {Vector2}\n     * @default (256,256)\n     */\n    this.resolution = new Vector2(resolution.x, resolution.y);\n    this.saoRenderTarget = new WebGLRenderTarget(this.resolution.x, this.resolution.y, {\n      type: HalfFloatType\n    });\n    this.blurIntermediateRenderTarget = this.saoRenderTarget.clone();\n    const depthTexture = new DepthTexture();\n    depthTexture.format = DepthStencilFormat;\n    depthTexture.type = UnsignedInt248Type;\n    this.normalRenderTarget = new WebGLRenderTarget(this.resolution.x, this.resolution.y, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType,\n      depthTexture: depthTexture\n    });\n    this.normalMaterial = new MeshNormalMaterial();\n    this.normalMaterial.blending = NoBlending;\n    this.saoMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SAOShader.defines),\n      fragmentShader: SAOShader.fragmentShader,\n      vertexShader: SAOShader.vertexShader,\n      uniforms: UniformsUtils.clone(SAOShader.uniforms)\n    });\n    this.saoMaterial.defines['PERSPECTIVE_CAMERA'] = this.camera.isPerspectiveCamera ? 1 : 0;\n    this.saoMaterial.uniforms['tDepth'].value = depthTexture;\n    this.saoMaterial.uniforms['tNormal'].value = this.normalRenderTarget.texture;\n    this.saoMaterial.uniforms['size'].value.set(this.resolution.x, this.resolution.y);\n    this.saoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse);\n    this.saoMaterial.uniforms['cameraProjectionMatrix'].value = this.camera.projectionMatrix;\n    this.saoMaterial.blending = NoBlending;\n    this.vBlurMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(DepthLimitedBlurShader.uniforms),\n      defines: Object.assign({}, DepthLimitedBlurShader.defines),\n      vertexShader: DepthLimitedBlurShader.vertexShader,\n      fragmentShader: DepthLimitedBlurShader.fragmentShader\n    });\n    this.vBlurMaterial.defines['DEPTH_PACKING'] = 0;\n    this.vBlurMaterial.defines['PERSPECTIVE_CAMERA'] = this.camera.isPerspectiveCamera ? 1 : 0;\n    this.vBlurMaterial.uniforms['tDiffuse'].value = this.saoRenderTarget.texture;\n    this.vBlurMaterial.uniforms['tDepth'].value = depthTexture;\n    this.vBlurMaterial.uniforms['size'].value.set(this.resolution.x, this.resolution.y);\n    this.vBlurMaterial.blending = NoBlending;\n    this.hBlurMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(DepthLimitedBlurShader.uniforms),\n      defines: Object.assign({}, DepthLimitedBlurShader.defines),\n      vertexShader: DepthLimitedBlurShader.vertexShader,\n      fragmentShader: DepthLimitedBlurShader.fragmentShader\n    });\n    this.hBlurMaterial.defines['DEPTH_PACKING'] = 0;\n    this.hBlurMaterial.defines['PERSPECTIVE_CAMERA'] = this.camera.isPerspectiveCamera ? 1 : 0;\n    this.hBlurMaterial.uniforms['tDiffuse'].value = this.blurIntermediateRenderTarget.texture;\n    this.hBlurMaterial.uniforms['tDepth'].value = depthTexture;\n    this.hBlurMaterial.uniforms['size'].value.set(this.resolution.x, this.resolution.y);\n    this.hBlurMaterial.blending = NoBlending;\n    this.materialCopy = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.materialCopy.transparent = true;\n    this.materialCopy.depthTest = false;\n    this.materialCopy.depthWrite = false;\n    this.materialCopy.blending = CustomBlending;\n    this.materialCopy.blendSrc = DstColorFactor;\n    this.materialCopy.blendDst = ZeroFactor;\n    this.materialCopy.blendEquation = AddEquation;\n    this.materialCopy.blendSrcAlpha = DstAlphaFactor;\n    this.materialCopy.blendDstAlpha = ZeroFactor;\n    this.materialCopy.blendEquationAlpha = AddEquation;\n    this.fsQuad = new FullScreenQuad(null);\n  }\n\n  /**\n   * Performs the SAO pass.\n   *\n   * @param {WebGLRenderer} renderer - The renderer.\n   * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\n   * destination for the pass.\n   * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\n   * previous pass from this buffer.\n   * @param {number} deltaTime - The delta time in seconds.\n   * @param {boolean} maskActive - Whether masking is active or not.\n   */\n  render(renderer, writeBuffer, readBuffer /*, deltaTime, maskActive*/) {\n    // Rendering readBuffer first when rendering to screen\n    if (this.renderToScreen) {\n      this.materialCopy.blending = NoBlending;\n      this.materialCopy.uniforms['tDiffuse'].value = readBuffer.texture;\n      this.materialCopy.needsUpdate = true;\n      this._renderPass(renderer, this.materialCopy, null);\n    }\n    renderer.getClearColor(this._oldClearColor);\n    this._oldClearAlpha = renderer.getClearAlpha();\n    const oldAutoClear = renderer.autoClear;\n    renderer.autoClear = false;\n    this.saoMaterial.uniforms['bias'].value = this.params.saoBias;\n    this.saoMaterial.uniforms['intensity'].value = this.params.saoIntensity;\n    this.saoMaterial.uniforms['scale'].value = this.params.saoScale;\n    this.saoMaterial.uniforms['kernelRadius'].value = this.params.saoKernelRadius;\n    this.saoMaterial.uniforms['minResolution'].value = this.params.saoMinResolution;\n    this.saoMaterial.uniforms['cameraNear'].value = this.camera.near;\n    this.saoMaterial.uniforms['cameraFar'].value = this.camera.far;\n    // this.saoMaterial.uniforms['randomSeed'].value = Math.random();\n\n    const depthCutoff = this.params.saoBlurDepthCutoff * (this.camera.far - this.camera.near);\n    this.vBlurMaterial.uniforms['depthCutoff'].value = depthCutoff;\n    this.hBlurMaterial.uniforms['depthCutoff'].value = depthCutoff;\n    this.vBlurMaterial.uniforms['cameraNear'].value = this.camera.near;\n    this.vBlurMaterial.uniforms['cameraFar'].value = this.camera.far;\n    this.hBlurMaterial.uniforms['cameraNear'].value = this.camera.near;\n    this.hBlurMaterial.uniforms['cameraFar'].value = this.camera.far;\n    this.params.saoBlurRadius = Math.floor(this.params.saoBlurRadius);\n    if (this.prevStdDev !== this.params.saoBlurStdDev || this.prevNumSamples !== this.params.saoBlurRadius) {\n      BlurShaderUtils.configure(this.vBlurMaterial, this.params.saoBlurRadius, this.params.saoBlurStdDev, new Vector2(0, 1));\n      BlurShaderUtils.configure(this.hBlurMaterial, this.params.saoBlurRadius, this.params.saoBlurStdDev, new Vector2(1, 0));\n      this.prevStdDev = this.params.saoBlurStdDev;\n      this.prevNumSamples = this.params.saoBlurRadius;\n    }\n\n    // render normal and depth\n    this._renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0);\n\n    // Rendering SAO texture\n    this._renderPass(renderer, this.saoMaterial, this.saoRenderTarget, 0xffffff, 1.0);\n\n    // Blurring SAO texture\n    if (this.params.saoBlur) {\n      this._renderPass(renderer, this.vBlurMaterial, this.blurIntermediateRenderTarget, 0xffffff, 1.0);\n      this._renderPass(renderer, this.hBlurMaterial, this.saoRenderTarget, 0xffffff, 1.0);\n    }\n    const outputMaterial = this.materialCopy;\n\n    // Setting up SAO rendering\n    if (this.params.output === SAOPass.OUTPUT.Normal) {\n      this.materialCopy.uniforms['tDiffuse'].value = this.normalRenderTarget.texture;\n      this.materialCopy.needsUpdate = true;\n    } else {\n      this.materialCopy.uniforms['tDiffuse'].value = this.saoRenderTarget.texture;\n      this.materialCopy.needsUpdate = true;\n    }\n\n    // Blending depends on output\n    if (this.params.output === SAOPass.OUTPUT.Default) {\n      outputMaterial.blending = CustomBlending;\n    } else {\n      outputMaterial.blending = NoBlending;\n    }\n\n    // Rendering SAOPass result on top of previous pass\n    this._renderPass(renderer, outputMaterial, this.renderToScreen ? null : readBuffer);\n    renderer.setClearColor(this._oldClearColor, this._oldClearAlpha);\n    renderer.autoClear = oldAutoClear;\n  }\n\n  /**\n   * Sets the size of the pass.\n   *\n   * @param {number} width - The width to set.\n   * @param {number} height - The height to set.\n   */\n  setSize(width, height) {\n    this.saoRenderTarget.setSize(width, height);\n    this.blurIntermediateRenderTarget.setSize(width, height);\n    this.normalRenderTarget.setSize(width, height);\n    this.saoMaterial.uniforms['size'].value.set(width, height);\n    this.saoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse);\n    this.saoMaterial.uniforms['cameraProjectionMatrix'].value = this.camera.projectionMatrix;\n    this.saoMaterial.needsUpdate = true;\n    this.vBlurMaterial.uniforms['size'].value.set(width, height);\n    this.vBlurMaterial.needsUpdate = true;\n    this.hBlurMaterial.uniforms['size'].value.set(width, height);\n    this.hBlurMaterial.needsUpdate = true;\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever the pass is no longer used in your app.\n   */\n  dispose() {\n    this.saoRenderTarget.dispose();\n    this.blurIntermediateRenderTarget.dispose();\n    this.normalRenderTarget.dispose();\n    this.normalMaterial.dispose();\n    this.saoMaterial.dispose();\n    this.vBlurMaterial.dispose();\n    this.hBlurMaterial.dispose();\n    this.materialCopy.dispose();\n    this.fsQuad.dispose();\n  }\n\n  // internal\n\n  _renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    // save original state\n    renderer.getClearColor(this._originalClearColor);\n    const originalClearAlpha = renderer.getClearAlpha();\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n\n    // setup pass state\n    renderer.autoClear = false;\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n    this.fsQuad.material = passMaterial;\n    this.fsQuad.render(renderer);\n\n    // restore original state\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this._originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  _renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this._originalClearColor);\n    const originalClearAlpha = renderer.getClearAlpha();\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n    this.scene.overrideMaterial = overrideMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = null;\n\n    // restore original state\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this._originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n}\nSAOPass.OUTPUT = {\n  'Default': 0,\n  'SAO': 1,\n  'Normal': 2\n};\nexport { SAOPass };","map":{"version":3,"names":["AddEquation","Color","CustomBlending","DepthTexture","DstAlphaFactor","DstColorFactor","HalfFloatType","MeshNormalMaterial","NearestFilter","NoBlending","ShaderMaterial","UniformsUtils","DepthStencilFormat","UnsignedInt248Type","Vector2","WebGLRenderTarget","ZeroFactor","Pass","FullScreenQuad","SAOShader","BlurShaderUtils","DepthLimitedBlurShader","CopyShader","SAOPass","constructor","scene","camera","resolution","clear","needsSwap","_originalClearColor","_oldClearColor","_oldClearAlpha","params","output","saoBias","saoIntensity","saoScale","saoKernelRadius","saoMinResolution","saoBlur","saoBlurRadius","saoBlurStdDev","saoBlurDepthCutoff","x","y","saoRenderTarget","type","blurIntermediateRenderTarget","clone","depthTexture","format","normalRenderTarget","minFilter","magFilter","normalMaterial","blending","saoMaterial","defines","Object","assign","fragmentShader","vertexShader","uniforms","isPerspectiveCamera","value","texture","set","copy","projectionMatrixInverse","projectionMatrix","vBlurMaterial","hBlurMaterial","materialCopy","transparent","depthTest","depthWrite","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","fsQuad","render","renderer","writeBuffer","readBuffer","renderToScreen","needsUpdate","_renderPass","getClearColor","getClearAlpha","oldAutoClear","autoClear","near","far","depthCutoff","Math","floor","prevStdDev","prevNumSamples","configure","_renderOverride","outputMaterial","OUTPUT","Normal","Default","setClearColor","setSize","width","height","dispose","passMaterial","renderTarget","clearColor","clearAlpha","originalClearAlpha","originalAutoClear","setRenderTarget","undefined","setClearAlpha","material","overrideMaterial"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/postprocessing/SAOPass.js"],"sourcesContent":["import {\n\tAddEquation,\n\tColor,\n\tCustomBlending,\n\tDepthTexture,\n\tDstAlphaFactor,\n\tDstColorFactor,\n\tHalfFloatType,\n\tMeshNormalMaterial,\n\tNearestFilter,\n\tNoBlending,\n\tShaderMaterial,\n\tUniformsUtils,\n\tDepthStencilFormat,\n\tUnsignedInt248Type,\n\tVector2,\n\tWebGLRenderTarget,\n\tZeroFactor\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { SAOShader } from '../shaders/SAOShader.js';\nimport { BlurShaderUtils, DepthLimitedBlurShader } from '../shaders/DepthLimitedBlurShader.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\n\n/**\n * A SAO implementation inspired from @bhouston previous SAO work.\n *\n * `SAOPass` provides better quality than {@link SSAOPass} but is also more expensive.\n *\n * ```js\n * const saoPass = new SAOPass( scene, camera );\n * composer.addPass( saoPass );\n * ```\n *\n * @augments Pass\n * @three_import import { SAOPass } from 'three/addons/postprocessing/SAOPass.js';\n */\nclass SAOPass extends Pass {\n\n\t/**\n\t * Constructs a new SAO pass.\n\t *\n\t * @param {Scene} scene - The scene to compute the AO for.\n\t * @param {Camera} camera - The camera.\n\t * @param {Vector2} [resolution] - The effect's resolution.\n\t */\n\tconstructor( scene, camera, resolution = new Vector2( 256, 256 ) ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The scene to render the AO for.\n\t\t *\n\t\t * @type {Scene}\n\t\t */\n\t\tthis.scene = scene;\n\n\t\t/**\n\t\t * The camera.\n\t\t *\n\t\t * @type {Camera}\n\t\t */\n\t\tthis.camera = camera;\n\n\t\t/**\n\t\t * Overwritten to perform a clear operation by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.clear = true;\n\n\t\t/**\n\t\t * Overwritten to disable the swap.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.needsSwap = false;\n\n\t\tthis._originalClearColor = new Color();\n\t\tthis._oldClearColor = new Color();\n\t\tthis._oldClearAlpha = 1;\n\n\t\t/**\n\t\t * The SAO parameter.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.params = {\n\t\t\toutput: 0,\n\t\t\tsaoBias: 0.5,\n\t\t\tsaoIntensity: 0.18,\n\t\t\tsaoScale: 1,\n\t\t\tsaoKernelRadius: 100,\n\t\t\tsaoMinResolution: 0,\n\t\t\tsaoBlur: true,\n\t\t\tsaoBlurRadius: 8,\n\t\t\tsaoBlurStdDev: 4,\n\t\t\tsaoBlurDepthCutoff: 0.01\n\t\t};\n\n\t\t/**\n\t\t * The effect's resolution.\n\t\t *\n\t\t * @type {Vector2}\n\t\t * @default (256,256)\n\t\t */\n\t\tthis.resolution = new Vector2( resolution.x, resolution.y );\n\n\t\tthis.saoRenderTarget = new WebGLRenderTarget( this.resolution.x, this.resolution.y, { type: HalfFloatType } );\n\t\tthis.blurIntermediateRenderTarget = this.saoRenderTarget.clone();\n\n\t\tconst depthTexture = new DepthTexture();\n\t\tdepthTexture.format = DepthStencilFormat;\n\t\tdepthTexture.type = UnsignedInt248Type;\n\n\t\tthis.normalRenderTarget = new WebGLRenderTarget( this.resolution.x, this.resolution.y, {\n\t\t\tminFilter: NearestFilter,\n\t\t\tmagFilter: NearestFilter,\n\t\t\ttype: HalfFloatType,\n\t\t\tdepthTexture: depthTexture\n\t\t} );\n\n\t\tthis.normalMaterial = new MeshNormalMaterial();\n\t\tthis.normalMaterial.blending = NoBlending;\n\n\t\tthis.saoMaterial = new ShaderMaterial( {\n\t\t\tdefines: Object.assign( {}, SAOShader.defines ),\n\t\t\tfragmentShader: SAOShader.fragmentShader,\n\t\t\tvertexShader: SAOShader.vertexShader,\n\t\t\tuniforms: UniformsUtils.clone( SAOShader.uniforms )\n\t\t} );\n\t\tthis.saoMaterial.defines[ 'PERSPECTIVE_CAMERA' ] = this.camera.isPerspectiveCamera ? 1 : 0;\n\t\tthis.saoMaterial.uniforms[ 'tDepth' ].value = depthTexture;\n\t\tthis.saoMaterial.uniforms[ 'tNormal' ].value = this.normalRenderTarget.texture;\n\t\tthis.saoMaterial.uniforms[ 'size' ].value.set( this.resolution.x, this.resolution.y );\n\t\tthis.saoMaterial.uniforms[ 'cameraInverseProjectionMatrix' ].value.copy( this.camera.projectionMatrixInverse );\n\t\tthis.saoMaterial.uniforms[ 'cameraProjectionMatrix' ].value = this.camera.projectionMatrix;\n\t\tthis.saoMaterial.blending = NoBlending;\n\n\t\tthis.vBlurMaterial = new ShaderMaterial( {\n\t\t\tuniforms: UniformsUtils.clone( DepthLimitedBlurShader.uniforms ),\n\t\t\tdefines: Object.assign( {}, DepthLimitedBlurShader.defines ),\n\t\t\tvertexShader: DepthLimitedBlurShader.vertexShader,\n\t\t\tfragmentShader: DepthLimitedBlurShader.fragmentShader\n\t\t} );\n\t\tthis.vBlurMaterial.defines[ 'DEPTH_PACKING' ] = 0;\n\t\tthis.vBlurMaterial.defines[ 'PERSPECTIVE_CAMERA' ] = this.camera.isPerspectiveCamera ? 1 : 0;\n\t\tthis.vBlurMaterial.uniforms[ 'tDiffuse' ].value = this.saoRenderTarget.texture;\n\t\tthis.vBlurMaterial.uniforms[ 'tDepth' ].value = depthTexture;\n\t\tthis.vBlurMaterial.uniforms[ 'size' ].value.set( this.resolution.x, this.resolution.y );\n\t\tthis.vBlurMaterial.blending = NoBlending;\n\n\t\tthis.hBlurMaterial = new ShaderMaterial( {\n\t\t\tuniforms: UniformsUtils.clone( DepthLimitedBlurShader.uniforms ),\n\t\t\tdefines: Object.assign( {}, DepthLimitedBlurShader.defines ),\n\t\t\tvertexShader: DepthLimitedBlurShader.vertexShader,\n\t\t\tfragmentShader: DepthLimitedBlurShader.fragmentShader\n\t\t} );\n\t\tthis.hBlurMaterial.defines[ 'DEPTH_PACKING' ] = 0;\n\t\tthis.hBlurMaterial.defines[ 'PERSPECTIVE_CAMERA' ] = this.camera.isPerspectiveCamera ? 1 : 0;\n\t\tthis.hBlurMaterial.uniforms[ 'tDiffuse' ].value = this.blurIntermediateRenderTarget.texture;\n\t\tthis.hBlurMaterial.uniforms[ 'tDepth' ].value = depthTexture;\n\t\tthis.hBlurMaterial.uniforms[ 'size' ].value.set( this.resolution.x, this.resolution.y );\n\t\tthis.hBlurMaterial.blending = NoBlending;\n\n\t\tthis.materialCopy = new ShaderMaterial( {\n\t\t\tuniforms: UniformsUtils.clone( CopyShader.uniforms ),\n\t\t\tvertexShader: CopyShader.vertexShader,\n\t\t\tfragmentShader: CopyShader.fragmentShader,\n\t\t\tblending: NoBlending\n\t\t} );\n\t\tthis.materialCopy.transparent = true;\n\t\tthis.materialCopy.depthTest = false;\n\t\tthis.materialCopy.depthWrite = false;\n\t\tthis.materialCopy.blending = CustomBlending;\n\t\tthis.materialCopy.blendSrc = DstColorFactor;\n\t\tthis.materialCopy.blendDst = ZeroFactor;\n\t\tthis.materialCopy.blendEquation = AddEquation;\n\t\tthis.materialCopy.blendSrcAlpha = DstAlphaFactor;\n\t\tthis.materialCopy.blendDstAlpha = ZeroFactor;\n\t\tthis.materialCopy.blendEquationAlpha = AddEquation;\n\n\t\tthis.fsQuad = new FullScreenQuad( null );\n\n\t}\n\n\t/**\n\t * Performs the SAO pass.\n\t *\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\n\t * destination for the pass.\n\t * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\n\t * previous pass from this buffer.\n\t * @param {number} deltaTime - The delta time in seconds.\n\t * @param {boolean} maskActive - Whether masking is active or not.\n\t */\n\trender( renderer, writeBuffer, readBuffer/*, deltaTime, maskActive*/ ) {\n\n\t\t// Rendering readBuffer first when rendering to screen\n\t\tif ( this.renderToScreen ) {\n\n\t\t\tthis.materialCopy.blending = NoBlending;\n\t\t\tthis.materialCopy.uniforms[ 'tDiffuse' ].value = readBuffer.texture;\n\t\t\tthis.materialCopy.needsUpdate = true;\n\t\t\tthis._renderPass( renderer, this.materialCopy, null );\n\n\t\t}\n\n\t\trenderer.getClearColor( this._oldClearColor );\n\t\tthis._oldClearAlpha = renderer.getClearAlpha();\n\t\tconst oldAutoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\tthis.saoMaterial.uniforms[ 'bias' ].value = this.params.saoBias;\n\t\tthis.saoMaterial.uniforms[ 'intensity' ].value = this.params.saoIntensity;\n\t\tthis.saoMaterial.uniforms[ 'scale' ].value = this.params.saoScale;\n\t\tthis.saoMaterial.uniforms[ 'kernelRadius' ].value = this.params.saoKernelRadius;\n\t\tthis.saoMaterial.uniforms[ 'minResolution' ].value = this.params.saoMinResolution;\n\t\tthis.saoMaterial.uniforms[ 'cameraNear' ].value = this.camera.near;\n\t\tthis.saoMaterial.uniforms[ 'cameraFar' ].value = this.camera.far;\n\t\t// this.saoMaterial.uniforms['randomSeed'].value = Math.random();\n\n\t\tconst depthCutoff = this.params.saoBlurDepthCutoff * ( this.camera.far - this.camera.near );\n\t\tthis.vBlurMaterial.uniforms[ 'depthCutoff' ].value = depthCutoff;\n\t\tthis.hBlurMaterial.uniforms[ 'depthCutoff' ].value = depthCutoff;\n\n\t\tthis.vBlurMaterial.uniforms[ 'cameraNear' ].value = this.camera.near;\n\t\tthis.vBlurMaterial.uniforms[ 'cameraFar' ].value = this.camera.far;\n\t\tthis.hBlurMaterial.uniforms[ 'cameraNear' ].value = this.camera.near;\n\t\tthis.hBlurMaterial.uniforms[ 'cameraFar' ].value = this.camera.far;\n\n\t\tthis.params.saoBlurRadius = Math.floor( this.params.saoBlurRadius );\n\t\tif ( ( this.prevStdDev !== this.params.saoBlurStdDev ) || ( this.prevNumSamples !== this.params.saoBlurRadius ) ) {\n\n\t\t\tBlurShaderUtils.configure( this.vBlurMaterial, this.params.saoBlurRadius, this.params.saoBlurStdDev, new Vector2( 0, 1 ) );\n\t\t\tBlurShaderUtils.configure( this.hBlurMaterial, this.params.saoBlurRadius, this.params.saoBlurStdDev, new Vector2( 1, 0 ) );\n\t\t\tthis.prevStdDev = this.params.saoBlurStdDev;\n\t\t\tthis.prevNumSamples = this.params.saoBlurRadius;\n\n\t\t}\n\n\t\t// render normal and depth\n\t\tthis._renderOverride( renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0 );\n\n\t\t// Rendering SAO texture\n\t\tthis._renderPass( renderer, this.saoMaterial, this.saoRenderTarget, 0xffffff, 1.0 );\n\n\t\t// Blurring SAO texture\n\t\tif ( this.params.saoBlur ) {\n\n\t\t\tthis._renderPass( renderer, this.vBlurMaterial, this.blurIntermediateRenderTarget, 0xffffff, 1.0 );\n\t\t\tthis._renderPass( renderer, this.hBlurMaterial, this.saoRenderTarget, 0xffffff, 1.0 );\n\n\t\t}\n\n\t\tconst outputMaterial = this.materialCopy;\n\n\t\t// Setting up SAO rendering\n\t\tif ( this.params.output === SAOPass.OUTPUT.Normal ) {\n\n\t\t\tthis.materialCopy.uniforms[ 'tDiffuse' ].value = this.normalRenderTarget.texture;\n\t\t\tthis.materialCopy.needsUpdate = true;\n\n\t\t} else {\n\n\t\t\tthis.materialCopy.uniforms[ 'tDiffuse' ].value = this.saoRenderTarget.texture;\n\t\t\tthis.materialCopy.needsUpdate = true;\n\n\t\t}\n\n\t\t// Blending depends on output\n\t\tif ( this.params.output === SAOPass.OUTPUT.Default ) {\n\n\t\t\toutputMaterial.blending = CustomBlending;\n\n\t\t} else {\n\n\t\t\toutputMaterial.blending = NoBlending;\n\n\t\t}\n\n\t\t// Rendering SAOPass result on top of previous pass\n\t\tthis._renderPass( renderer, outputMaterial, this.renderToScreen ? null : readBuffer );\n\n\t\trenderer.setClearColor( this._oldClearColor, this._oldClearAlpha );\n\t\trenderer.autoClear = oldAutoClear;\n\n\t}\n\n\t/**\n\t * Sets the size of the pass.\n\t *\n\t * @param {number} width - The width to set.\n\t * @param {number} height - The height to set.\n\t */\n\tsetSize( width, height ) {\n\n\t\tthis.saoRenderTarget.setSize( width, height );\n\t\tthis.blurIntermediateRenderTarget.setSize( width, height );\n\t\tthis.normalRenderTarget.setSize( width, height );\n\n\t\tthis.saoMaterial.uniforms[ 'size' ].value.set( width, height );\n\t\tthis.saoMaterial.uniforms[ 'cameraInverseProjectionMatrix' ].value.copy( this.camera.projectionMatrixInverse );\n\t\tthis.saoMaterial.uniforms[ 'cameraProjectionMatrix' ].value = this.camera.projectionMatrix;\n\t\tthis.saoMaterial.needsUpdate = true;\n\n\t\tthis.vBlurMaterial.uniforms[ 'size' ].value.set( width, height );\n\t\tthis.vBlurMaterial.needsUpdate = true;\n\n\t\tthis.hBlurMaterial.uniforms[ 'size' ].value.set( width, height );\n\t\tthis.hBlurMaterial.needsUpdate = true;\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever the pass is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.saoRenderTarget.dispose();\n\t\tthis.blurIntermediateRenderTarget.dispose();\n\t\tthis.normalRenderTarget.dispose();\n\n\t\tthis.normalMaterial.dispose();\n\t\tthis.saoMaterial.dispose();\n\t\tthis.vBlurMaterial.dispose();\n\t\tthis.hBlurMaterial.dispose();\n\t\tthis.materialCopy.dispose();\n\n\t\tthis.fsQuad.dispose();\n\n\t}\n\n\t// internal\n\n\t_renderPass( renderer, passMaterial, renderTarget, clearColor, clearAlpha ) {\n\n\t\t// save original state\n\t\trenderer.getClearColor( this._originalClearColor );\n\t\tconst originalClearAlpha = renderer.getClearAlpha();\n\t\tconst originalAutoClear = renderer.autoClear;\n\n\t\trenderer.setRenderTarget( renderTarget );\n\n\t\t// setup pass state\n\t\trenderer.autoClear = false;\n\t\tif ( ( clearColor !== undefined ) && ( clearColor !== null ) ) {\n\n\t\t\trenderer.setClearColor( clearColor );\n\t\t\trenderer.setClearAlpha( clearAlpha || 0.0 );\n\t\t\trenderer.clear();\n\n\t\t}\n\n\t\tthis.fsQuad.material = passMaterial;\n\t\tthis.fsQuad.render( renderer );\n\n\t\t// restore original state\n\t\trenderer.autoClear = originalAutoClear;\n\t\trenderer.setClearColor( this._originalClearColor );\n\t\trenderer.setClearAlpha( originalClearAlpha );\n\n\t}\n\n\t_renderOverride( renderer, overrideMaterial, renderTarget, clearColor, clearAlpha ) {\n\n\t\trenderer.getClearColor( this._originalClearColor );\n\t\tconst originalClearAlpha = renderer.getClearAlpha();\n\t\tconst originalAutoClear = renderer.autoClear;\n\n\t\trenderer.setRenderTarget( renderTarget );\n\t\trenderer.autoClear = false;\n\n\t\tclearColor = overrideMaterial.clearColor || clearColor;\n\t\tclearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n\t\tif ( ( clearColor !== undefined ) && ( clearColor !== null ) ) {\n\n\t\t\trenderer.setClearColor( clearColor );\n\t\t\trenderer.setClearAlpha( clearAlpha || 0.0 );\n\t\t\trenderer.clear();\n\n\t\t}\n\n\t\tthis.scene.overrideMaterial = overrideMaterial;\n\t\trenderer.render( this.scene, this.camera );\n\t\tthis.scene.overrideMaterial = null;\n\n\t\t// restore original state\n\t\trenderer.autoClear = originalAutoClear;\n\t\trenderer.setClearColor( this._originalClearColor );\n\t\trenderer.setClearAlpha( originalClearAlpha );\n\n\t}\n\n}\n\nSAOPass.OUTPUT = {\n\t'Default': 0,\n\t'SAO': 1,\n\t'Normal': 2\n};\n\nexport { SAOPass };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}