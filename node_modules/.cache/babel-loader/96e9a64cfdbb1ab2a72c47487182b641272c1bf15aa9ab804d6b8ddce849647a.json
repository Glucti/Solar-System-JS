{"ast":null,"code":"import { Vector2 } from 'three';\n\n/**\n * @module UVsDebug\n * @three_import import { UVsDebug } from 'three/addons/utils/UVsDebug.js';\n */\n\n/**\n * Function for \"unwrapping\" and debugging three.js geometries UV mapping.\n *\n * ```js\n * document.body.appendChild( UVsDebug( new THREE.SphereGeometry() ) );\n * ```\n *\n * @param {BufferGeometry} geometry - The geometry whose uv coordinates should be inspected.\n * @param {number} [size=1024] - The size of the debug canvas.\n * @return {HTMLCanvasElement} A canvas element with visualized uv coordinates.\n */\nfunction UVsDebug(geometry, size = 1024) {\n  // handles wrapping of uv.x > 1 only\n\n  const abc = 'abc';\n  const a = new Vector2();\n  const b = new Vector2();\n  const uvs = [new Vector2(), new Vector2(), new Vector2()];\n  const face = [];\n  const canvas = document.createElement('canvas');\n  const width = size; // power of 2 required for wrapping\n  const height = size;\n  canvas.width = width;\n  canvas.height = height;\n  const ctx = canvas.getContext('2d');\n  ctx.lineWidth = 1;\n  ctx.strokeStyle = 'rgb( 63, 63, 63 )';\n  ctx.textAlign = 'center';\n\n  // paint background white\n\n  ctx.fillStyle = 'rgb( 255, 255, 255 )';\n  ctx.fillRect(0, 0, width, height);\n  const index = geometry.index;\n  const uvAttribute = geometry.attributes.uv;\n  if (index) {\n    // indexed geometry\n\n    for (let i = 0, il = index.count; i < il; i += 3) {\n      face[0] = index.getX(i);\n      face[1] = index.getX(i + 1);\n      face[2] = index.getX(i + 2);\n      uvs[0].fromBufferAttribute(uvAttribute, face[0]);\n      uvs[1].fromBufferAttribute(uvAttribute, face[1]);\n      uvs[2].fromBufferAttribute(uvAttribute, face[2]);\n      processFace(face, uvs, i / 3);\n    }\n  } else {\n    // non-indexed geometry\n\n    for (let i = 0, il = uvAttribute.count; i < il; i += 3) {\n      face[0] = i;\n      face[1] = i + 1;\n      face[2] = i + 2;\n      uvs[0].fromBufferAttribute(uvAttribute, face[0]);\n      uvs[1].fromBufferAttribute(uvAttribute, face[1]);\n      uvs[2].fromBufferAttribute(uvAttribute, face[2]);\n      processFace(face, uvs, i / 3);\n    }\n  }\n  return canvas;\n  function processFace(face, uvs, index) {\n    // draw contour of face\n\n    ctx.beginPath();\n    a.set(0, 0);\n    for (let j = 0, jl = uvs.length; j < jl; j++) {\n      const uv = uvs[j];\n      a.x += uv.x;\n      a.y += uv.y;\n      if (j === 0) {\n        ctx.moveTo(uv.x * (width - 2) + 0.5, (1 - uv.y) * (height - 2) + 0.5);\n      } else {\n        ctx.lineTo(uv.x * (width - 2) + 0.5, (1 - uv.y) * (height - 2) + 0.5);\n      }\n    }\n    ctx.closePath();\n    ctx.stroke();\n\n    // calculate center of face\n\n    a.divideScalar(uvs.length);\n\n    // label the face number\n\n    ctx.font = '18px Arial';\n    ctx.fillStyle = 'rgb( 63, 63, 63 )';\n    ctx.fillText(index, a.x * width, (1 - a.y) * height);\n    if (a.x > 0.95) {\n      // wrap x // 0.95 is arbitrary\n\n      ctx.fillText(index, a.x % 1 * width, (1 - a.y) * height);\n    }\n\n    //\n\n    ctx.font = '12px Arial';\n    ctx.fillStyle = 'rgb( 191, 191, 191 )';\n\n    // label uv edge orders\n\n    for (let j = 0, jl = uvs.length; j < jl; j++) {\n      const uv = uvs[j];\n      b.addVectors(a, uv).divideScalar(2);\n      const vnum = face[j];\n      ctx.fillText(abc[j] + vnum, b.x * width, (1 - b.y) * height);\n      if (b.x > 0.95) {\n        // wrap x\n\n        ctx.fillText(abc[j] + vnum, b.x % 1 * width, (1 - b.y) * height);\n      }\n    }\n  }\n}\nexport { UVsDebug };","map":{"version":3,"names":["Vector2","UVsDebug","geometry","size","abc","a","b","uvs","face","canvas","document","createElement","width","height","ctx","getContext","lineWidth","strokeStyle","textAlign","fillStyle","fillRect","index","uvAttribute","attributes","uv","i","il","count","getX","fromBufferAttribute","processFace","beginPath","set","j","jl","length","x","y","moveTo","lineTo","closePath","stroke","divideScalar","font","fillText","addVectors","vnum"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/utils/UVsDebug.js"],"sourcesContent":["import {\n\tVector2\n} from 'three';\n\n/**\n * @module UVsDebug\n * @three_import import { UVsDebug } from 'three/addons/utils/UVsDebug.js';\n */\n\n/**\n * Function for \"unwrapping\" and debugging three.js geometries UV mapping.\n *\n * ```js\n * document.body.appendChild( UVsDebug( new THREE.SphereGeometry() ) );\n * ```\n *\n * @param {BufferGeometry} geometry - The geometry whose uv coordinates should be inspected.\n * @param {number} [size=1024] - The size of the debug canvas.\n * @return {HTMLCanvasElement} A canvas element with visualized uv coordinates.\n */\nfunction UVsDebug( geometry, size = 1024 ) {\n\n\t// handles wrapping of uv.x > 1 only\n\n\tconst abc = 'abc';\n\tconst a = new Vector2();\n\tconst b = new Vector2();\n\n\tconst uvs = [\n\t\tnew Vector2(),\n\t\tnew Vector2(),\n\t\tnew Vector2()\n\t];\n\n\tconst face = [];\n\n\tconst canvas = document.createElement( 'canvas' );\n\tconst width = size; // power of 2 required for wrapping\n\tconst height = size;\n\tcanvas.width = width;\n\tcanvas.height = height;\n\n\tconst ctx = canvas.getContext( '2d' );\n\tctx.lineWidth = 1;\n\tctx.strokeStyle = 'rgb( 63, 63, 63 )';\n\tctx.textAlign = 'center';\n\n\t// paint background white\n\n\tctx.fillStyle = 'rgb( 255, 255, 255 )';\n\tctx.fillRect( 0, 0, width, height );\n\n\tconst index = geometry.index;\n\tconst uvAttribute = geometry.attributes.uv;\n\n\tif ( index ) {\n\n\t\t// indexed geometry\n\n\t\tfor ( let i = 0, il = index.count; i < il; i += 3 ) {\n\n\t\t\tface[ 0 ] = index.getX( i );\n\t\t\tface[ 1 ] = index.getX( i + 1 );\n\t\t\tface[ 2 ] = index.getX( i + 2 );\n\n\t\t\tuvs[ 0 ].fromBufferAttribute( uvAttribute, face[ 0 ] );\n\t\t\tuvs[ 1 ].fromBufferAttribute( uvAttribute, face[ 1 ] );\n\t\t\tuvs[ 2 ].fromBufferAttribute( uvAttribute, face[ 2 ] );\n\n\t\t\tprocessFace( face, uvs, i / 3 );\n\n\t\t}\n\n\t} else {\n\n\t\t// non-indexed geometry\n\n\t\tfor ( let i = 0, il = uvAttribute.count; i < il; i += 3 ) {\n\n\t\t\tface[ 0 ] = i;\n\t\t\tface[ 1 ] = i + 1;\n\t\t\tface[ 2 ] = i + 2;\n\n\t\t\tuvs[ 0 ].fromBufferAttribute( uvAttribute, face[ 0 ] );\n\t\t\tuvs[ 1 ].fromBufferAttribute( uvAttribute, face[ 1 ] );\n\t\t\tuvs[ 2 ].fromBufferAttribute( uvAttribute, face[ 2 ] );\n\n\t\t\tprocessFace( face, uvs, i / 3 );\n\n\t\t}\n\n\t}\n\n\treturn canvas;\n\n\tfunction processFace( face, uvs, index ) {\n\n\t\t// draw contour of face\n\n\t\tctx.beginPath();\n\n\t\ta.set( 0, 0 );\n\n\t\tfor ( let j = 0, jl = uvs.length; j < jl; j ++ ) {\n\n\t\t\tconst uv = uvs[ j ];\n\n\t\t\ta.x += uv.x;\n\t\t\ta.y += uv.y;\n\n\t\t\tif ( j === 0 ) {\n\n\t\t\t\tctx.moveTo( uv.x * ( width - 2 ) + 0.5, ( 1 - uv.y ) * ( height - 2 ) + 0.5 );\n\n\t\t\t} else {\n\n\t\t\t\tctx.lineTo( uv.x * ( width - 2 ) + 0.5, ( 1 - uv.y ) * ( height - 2 ) + 0.5 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tctx.closePath();\n\t\tctx.stroke();\n\n\t\t// calculate center of face\n\n\t\ta.divideScalar( uvs.length );\n\n\t\t// label the face number\n\n\t\tctx.font = '18px Arial';\n\t\tctx.fillStyle = 'rgb( 63, 63, 63 )';\n\t\tctx.fillText( index, a.x * width, ( 1 - a.y ) * height );\n\n\t\tif ( a.x > 0.95 ) {\n\n\t\t\t// wrap x // 0.95 is arbitrary\n\n\t\t\tctx.fillText( index, ( a.x % 1 ) * width, ( 1 - a.y ) * height );\n\n\t\t}\n\n\t\t//\n\n\t\tctx.font = '12px Arial';\n\t\tctx.fillStyle = 'rgb( 191, 191, 191 )';\n\n\t\t// label uv edge orders\n\n\t\tfor ( let j = 0, jl = uvs.length; j < jl; j ++ ) {\n\n\t\t\tconst uv = uvs[ j ];\n\t\t\tb.addVectors( a, uv ).divideScalar( 2 );\n\n\t\t\tconst vnum = face[ j ];\n\t\t\tctx.fillText( abc[ j ] + vnum, b.x * width, ( 1 - b.y ) * height );\n\n\t\t\tif ( b.x > 0.95 ) {\n\n\t\t\t\t// wrap x\n\n\t\t\t\tctx.fillText( abc[ j ] + vnum, ( b.x % 1 ) * width, ( 1 - b.y ) * height );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nexport { UVsDebug };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}