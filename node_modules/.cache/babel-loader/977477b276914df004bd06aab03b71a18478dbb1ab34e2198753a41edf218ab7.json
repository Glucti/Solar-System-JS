{"ast":null,"code":"import { CompressedTextureLoader } from 'three';\n\n/**\n * A loader for the KTX texture compression format.\n *\n * References:\n * - [The KTX File Format and Tools]{@link https://www.khronos.org/opengles/sdk/tools/KTX/}\n * - [Babylon.JS khronosTextureContainer.ts]{@link https://github.com/BabylonJS/Babylon.js/blob/master/src/Misc/khronosTextureContainer.ts}\n *\n * ```js\n * const loader = new KTXLoader();\n *\n * const map = loader.load( 'textures/compressed/lensflare_ASTC8x8.ktx' )\n * map.colorSpace = THREE.SRGBColorSpace; // only for color textures\n * ```\n *\n * @augments CompressedTextureLoader\n * @three_import import { KTXLoader } from 'three/addons/loaders/KTXLoader.js';\n */\nclass KTXLoader extends CompressedTextureLoader {\n  /**\n   * Constructs a new KTX loader.\n   *\n   * @param {LoadingManager} [manager] - The loading manager.\n   */\n  constructor(manager) {\n    super(manager);\n  }\n\n  /**\n   * Parses the given KTX texture data.\n   *\n   * @param {ArrayBuffer} buffer - The raw texture data.\n   * @param {boolean} loadMipmaps - Whether to load mipmaps or not.\n   * @return {CompressedTextureLoader~TexData} An object representing the parsed texture data.\n   */\n  parse(buffer, loadMipmaps) {\n    const ktx = new KhronosTextureContainer(buffer, 1);\n    return {\n      mipmaps: ktx.mipmaps(loadMipmaps),\n      width: ktx.pixelWidth,\n      height: ktx.pixelHeight,\n      format: ktx.glInternalFormat,\n      isCubemap: ktx.numberOfFaces === 6,\n      mipmapCount: ktx.numberOfMipmapLevels\n    };\n  }\n}\nconst HEADER_LEN = 12 + 13 * 4; // identifier + header elements (not including key value meta-data pairs)\n// load types\nconst COMPRESSED_2D = 0; // uses a gl.compressedTexImage2D()\n//const COMPRESSED_3D = 1; // uses a gl.compressedTexImage3D()\n//const TEX_2D = 2; // uses a gl.texImage2D()\n//const TEX_3D = 3; // uses a gl.texImage3D()\n\nclass KhronosTextureContainer {\n  /**\n   * @private\n   * @param {ArrayBuffer} arrayBuffer - contents of the KTX container file\n   * @param {number} facesExpected - should be either 1 or 6, based whether a cube texture or or\n   * @param {boolean} threeDExpected - provision for indicating that data should be a 3D texture, not implemented\n   * @param {boolean} textureArrayExpected - provision for indicating that data should be a texture array, not implemented\n   */\n  constructor(arrayBuffer, facesExpected /*, threeDExpected, textureArrayExpected */) {\n    this.arrayBuffer = arrayBuffer;\n\n    // Test that it is a ktx formatted file, based on the first 12 bytes, character representation is:\n    // '´', 'K', 'T', 'X', ' ', '1', '1', 'ª', '\\r', '\\n', '\\x1A', '\\n'\n    // 0xAB, 0x4B, 0x54, 0x58, 0x20, 0x31, 0x31, 0xBB, 0x0D, 0x0A, 0x1A, 0x0A\n    const identifier = new Uint8Array(this.arrayBuffer, 0, 12);\n    if (identifier[0] !== 0xAB || identifier[1] !== 0x4B || identifier[2] !== 0x54 || identifier[3] !== 0x58 || identifier[4] !== 0x20 || identifier[5] !== 0x31 || identifier[6] !== 0x31 || identifier[7] !== 0xBB || identifier[8] !== 0x0D || identifier[9] !== 0x0A || identifier[10] !== 0x1A || identifier[11] !== 0x0A) {\n      console.error('texture missing KTX identifier');\n      return;\n    }\n\n    // load the reset of the header in native 32 bit uint\n    const dataSize = Uint32Array.BYTES_PER_ELEMENT;\n    const headerDataView = new DataView(this.arrayBuffer, 12, 13 * dataSize);\n    const endianness = headerDataView.getUint32(0, true);\n    const littleEndian = endianness === 0x04030201;\n    this.glType = headerDataView.getUint32(1 * dataSize, littleEndian); // must be 0 for compressed textures\n    this.glTypeSize = headerDataView.getUint32(2 * dataSize, littleEndian); // must be 1 for compressed textures\n    this.glFormat = headerDataView.getUint32(3 * dataSize, littleEndian); // must be 0 for compressed textures\n    this.glInternalFormat = headerDataView.getUint32(4 * dataSize, littleEndian); // the value of arg passed to gl.compressedTexImage2D(,,x,,,,)\n    this.glBaseInternalFormat = headerDataView.getUint32(5 * dataSize, littleEndian); // specify GL_RGB, GL_RGBA, GL_ALPHA, etc (un-compressed only)\n    this.pixelWidth = headerDataView.getUint32(6 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage2D(,,,x,,,)\n    this.pixelHeight = headerDataView.getUint32(7 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage2D(,,,,x,,)\n    this.pixelDepth = headerDataView.getUint32(8 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage3D(,,,,,x,,)\n    this.numberOfArrayElements = headerDataView.getUint32(9 * dataSize, littleEndian); // used for texture arrays\n    this.numberOfFaces = headerDataView.getUint32(10 * dataSize, littleEndian); // used for cubemap textures, should either be 1 or 6\n    this.numberOfMipmapLevels = headerDataView.getUint32(11 * dataSize, littleEndian); // number of levels; disregard possibility of 0 for compressed textures\n    this.bytesOfKeyValueData = headerDataView.getUint32(12 * dataSize, littleEndian); // the amount of space after the header for meta-data\n\n    // Make sure we have a compressed type.  Not only reduces work, but probably better to let dev know they are not compressing.\n    if (this.glType !== 0) {\n      console.warn('only compressed formats currently supported');\n      return;\n    } else {\n      // value of zero is an indication to generate mipmaps @ runtime.  Not usually allowed for compressed, so disregard.\n      this.numberOfMipmapLevels = Math.max(1, this.numberOfMipmapLevels);\n    }\n    if (this.pixelHeight === 0 || this.pixelDepth !== 0) {\n      console.warn('only 2D textures currently supported');\n      return;\n    }\n    if (this.numberOfArrayElements !== 0) {\n      console.warn('texture arrays not currently supported');\n      return;\n    }\n    if (this.numberOfFaces !== facesExpected) {\n      console.warn('number of faces expected' + facesExpected + ', but found ' + this.numberOfFaces);\n      return;\n    }\n\n    // we now have a completely validated file, so could use existence of loadType as success\n    // would need to make this more elaborate & adjust checks above to support more than one load type\n    this.loadType = COMPRESSED_2D;\n  }\n  mipmaps(loadMipmaps) {\n    const mipmaps = [];\n\n    // initialize width & height for level 1\n    let dataOffset = HEADER_LEN + this.bytesOfKeyValueData;\n    let width = this.pixelWidth;\n    let height = this.pixelHeight;\n    const mipmapCount = loadMipmaps ? this.numberOfMipmapLevels : 1;\n    for (let level = 0; level < mipmapCount; level++) {\n      const imageSize = new Int32Array(this.arrayBuffer, dataOffset, 1)[0]; // size per face, since not supporting array cubemaps\n      dataOffset += 4; // size of the image + 4 for the imageSize field\n\n      for (let face = 0; face < this.numberOfFaces; face++) {\n        const byteArray = new Uint8Array(this.arrayBuffer, dataOffset, imageSize);\n        mipmaps.push({\n          'data': byteArray,\n          'width': width,\n          'height': height\n        });\n        dataOffset += imageSize;\n        dataOffset += 3 - (imageSize + 3) % 4; // add padding for odd sized image\n      }\n      width = Math.max(1.0, width * 0.5);\n      height = Math.max(1.0, height * 0.5);\n    }\n    return mipmaps;\n  }\n}\nexport { KTXLoader };","map":{"version":3,"names":["CompressedTextureLoader","KTXLoader","constructor","manager","parse","buffer","loadMipmaps","ktx","KhronosTextureContainer","mipmaps","width","pixelWidth","height","pixelHeight","format","glInternalFormat","isCubemap","numberOfFaces","mipmapCount","numberOfMipmapLevels","HEADER_LEN","COMPRESSED_2D","arrayBuffer","facesExpected","identifier","Uint8Array","console","error","dataSize","Uint32Array","BYTES_PER_ELEMENT","headerDataView","DataView","endianness","getUint32","littleEndian","glType","glTypeSize","glFormat","glBaseInternalFormat","pixelDepth","numberOfArrayElements","bytesOfKeyValueData","warn","Math","max","loadType","dataOffset","level","imageSize","Int32Array","face","byteArray","push"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/loaders/KTXLoader.js"],"sourcesContent":["import {\n\tCompressedTextureLoader\n} from 'three';\n\n/**\n * A loader for the KTX texture compression format.\n *\n * References:\n * - [The KTX File Format and Tools]{@link https://www.khronos.org/opengles/sdk/tools/KTX/}\n * - [Babylon.JS khronosTextureContainer.ts]{@link https://github.com/BabylonJS/Babylon.js/blob/master/src/Misc/khronosTextureContainer.ts}\n *\n * ```js\n * const loader = new KTXLoader();\n *\n * const map = loader.load( 'textures/compressed/lensflare_ASTC8x8.ktx' )\n * map.colorSpace = THREE.SRGBColorSpace; // only for color textures\n * ```\n *\n * @augments CompressedTextureLoader\n * @three_import import { KTXLoader } from 'three/addons/loaders/KTXLoader.js';\n */\nclass KTXLoader extends CompressedTextureLoader {\n\n\t/**\n\t * Constructs a new KTX loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\t/**\n\t * Parses the given KTX texture data.\n\t *\n\t * @param {ArrayBuffer} buffer - The raw texture data.\n\t * @param {boolean} loadMipmaps - Whether to load mipmaps or not.\n\t * @return {CompressedTextureLoader~TexData} An object representing the parsed texture data.\n\t */\n\tparse( buffer, loadMipmaps ) {\n\n\t\tconst ktx = new KhronosTextureContainer( buffer, 1 );\n\n\t\treturn {\n\t\t\tmipmaps: ktx.mipmaps( loadMipmaps ),\n\t\t\twidth: ktx.pixelWidth,\n\t\t\theight: ktx.pixelHeight,\n\t\t\tformat: ktx.glInternalFormat,\n\t\t\tisCubemap: ktx.numberOfFaces === 6,\n\t\t\tmipmapCount: ktx.numberOfMipmapLevels\n\t\t};\n\n\t}\n\n}\n\nconst HEADER_LEN = 12 + ( 13 * 4 ); // identifier + header elements (not including key value meta-data pairs)\n// load types\nconst COMPRESSED_2D = 0; // uses a gl.compressedTexImage2D()\n//const COMPRESSED_3D = 1; // uses a gl.compressedTexImage3D()\n//const TEX_2D = 2; // uses a gl.texImage2D()\n//const TEX_3D = 3; // uses a gl.texImage3D()\n\nclass KhronosTextureContainer {\n\n\t/**\n\t * @private\n\t * @param {ArrayBuffer} arrayBuffer - contents of the KTX container file\n\t * @param {number} facesExpected - should be either 1 or 6, based whether a cube texture or or\n\t * @param {boolean} threeDExpected - provision for indicating that data should be a 3D texture, not implemented\n\t * @param {boolean} textureArrayExpected - provision for indicating that data should be a texture array, not implemented\n\t */\n\tconstructor( arrayBuffer, facesExpected /*, threeDExpected, textureArrayExpected */ ) {\n\n\t\tthis.arrayBuffer = arrayBuffer;\n\n\t\t// Test that it is a ktx formatted file, based on the first 12 bytes, character representation is:\n\t\t// '´', 'K', 'T', 'X', ' ', '1', '1', 'ª', '\\r', '\\n', '\\x1A', '\\n'\n\t\t// 0xAB, 0x4B, 0x54, 0x58, 0x20, 0x31, 0x31, 0xBB, 0x0D, 0x0A, 0x1A, 0x0A\n\t\tconst identifier = new Uint8Array( this.arrayBuffer, 0, 12 );\n\t\tif ( identifier[ 0 ] !== 0xAB ||\n\t\t\tidentifier[ 1 ] !== 0x4B ||\n\t\t\tidentifier[ 2 ] !== 0x54 ||\n\t\t\tidentifier[ 3 ] !== 0x58 ||\n\t\t\tidentifier[ 4 ] !== 0x20 ||\n\t\t\tidentifier[ 5 ] !== 0x31 ||\n\t\t\tidentifier[ 6 ] !== 0x31 ||\n\t\t\tidentifier[ 7 ] !== 0xBB ||\n\t\t\tidentifier[ 8 ] !== 0x0D ||\n\t\t\tidentifier[ 9 ] !== 0x0A ||\n\t\t\tidentifier[ 10 ] !== 0x1A ||\n\t\t\tidentifier[ 11 ] !== 0x0A ) {\n\n\t\t\tconsole.error( 'texture missing KTX identifier' );\n\t\t\treturn;\n\n\t\t}\n\n\t\t// load the reset of the header in native 32 bit uint\n\t\tconst dataSize = Uint32Array.BYTES_PER_ELEMENT;\n\t\tconst headerDataView = new DataView( this.arrayBuffer, 12, 13 * dataSize );\n\t\tconst endianness = headerDataView.getUint32( 0, true );\n\t\tconst littleEndian = endianness === 0x04030201;\n\n\t\tthis.glType = headerDataView.getUint32( 1 * dataSize, littleEndian ); // must be 0 for compressed textures\n\t\tthis.glTypeSize = headerDataView.getUint32( 2 * dataSize, littleEndian ); // must be 1 for compressed textures\n\t\tthis.glFormat = headerDataView.getUint32( 3 * dataSize, littleEndian ); // must be 0 for compressed textures\n\t\tthis.glInternalFormat = headerDataView.getUint32( 4 * dataSize, littleEndian ); // the value of arg passed to gl.compressedTexImage2D(,,x,,,,)\n\t\tthis.glBaseInternalFormat = headerDataView.getUint32( 5 * dataSize, littleEndian ); // specify GL_RGB, GL_RGBA, GL_ALPHA, etc (un-compressed only)\n\t\tthis.pixelWidth = headerDataView.getUint32( 6 * dataSize, littleEndian ); // level 0 value of arg passed to gl.compressedTexImage2D(,,,x,,,)\n\t\tthis.pixelHeight = headerDataView.getUint32( 7 * dataSize, littleEndian ); // level 0 value of arg passed to gl.compressedTexImage2D(,,,,x,,)\n\t\tthis.pixelDepth = headerDataView.getUint32( 8 * dataSize, littleEndian ); // level 0 value of arg passed to gl.compressedTexImage3D(,,,,,x,,)\n\t\tthis.numberOfArrayElements = headerDataView.getUint32( 9 * dataSize, littleEndian ); // used for texture arrays\n\t\tthis.numberOfFaces = headerDataView.getUint32( 10 * dataSize, littleEndian ); // used for cubemap textures, should either be 1 or 6\n\t\tthis.numberOfMipmapLevels = headerDataView.getUint32( 11 * dataSize, littleEndian ); // number of levels; disregard possibility of 0 for compressed textures\n\t\tthis.bytesOfKeyValueData = headerDataView.getUint32( 12 * dataSize, littleEndian ); // the amount of space after the header for meta-data\n\n\t\t// Make sure we have a compressed type.  Not only reduces work, but probably better to let dev know they are not compressing.\n\t\tif ( this.glType !== 0 ) {\n\n\t\t\tconsole.warn( 'only compressed formats currently supported' );\n\t\t\treturn;\n\n\t\t} else {\n\n\t\t\t// value of zero is an indication to generate mipmaps @ runtime.  Not usually allowed for compressed, so disregard.\n\t\t\tthis.numberOfMipmapLevels = Math.max( 1, this.numberOfMipmapLevels );\n\n\t\t}\n\n\t\tif ( this.pixelHeight === 0 || this.pixelDepth !== 0 ) {\n\n\t\t\tconsole.warn( 'only 2D textures currently supported' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( this.numberOfArrayElements !== 0 ) {\n\n\t\t\tconsole.warn( 'texture arrays not currently supported' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( this.numberOfFaces !== facesExpected ) {\n\n\t\t\tconsole.warn( 'number of faces expected' + facesExpected + ', but found ' + this.numberOfFaces );\n\t\t\treturn;\n\n\t\t}\n\n\t\t// we now have a completely validated file, so could use existence of loadType as success\n\t\t// would need to make this more elaborate & adjust checks above to support more than one load type\n\t\tthis.loadType = COMPRESSED_2D;\n\n\t}\n\n\tmipmaps( loadMipmaps ) {\n\n\t\tconst mipmaps = [];\n\n\t\t// initialize width & height for level 1\n\t\tlet dataOffset = HEADER_LEN + this.bytesOfKeyValueData;\n\t\tlet width = this.pixelWidth;\n\t\tlet height = this.pixelHeight;\n\t\tconst mipmapCount = loadMipmaps ? this.numberOfMipmapLevels : 1;\n\n\t\tfor ( let level = 0; level < mipmapCount; level ++ ) {\n\n\t\t\tconst imageSize = new Int32Array( this.arrayBuffer, dataOffset, 1 )[ 0 ]; // size per face, since not supporting array cubemaps\n\t\t\tdataOffset += 4; // size of the image + 4 for the imageSize field\n\n\t\t\tfor ( let face = 0; face < this.numberOfFaces; face ++ ) {\n\n\t\t\t\tconst byteArray = new Uint8Array( this.arrayBuffer, dataOffset, imageSize );\n\n\t\t\t\tmipmaps.push( { 'data': byteArray, 'width': width, 'height': height } );\n\n\t\t\t\tdataOffset += imageSize;\n\t\t\t\tdataOffset += 3 - ( ( imageSize + 3 ) % 4 ); // add padding for odd sized image\n\n\t\t\t}\n\n\t\t\twidth = Math.max( 1.0, width * 0.5 );\n\t\t\theight = Math.max( 1.0, height * 0.5 );\n\n\t\t}\n\n\t\treturn mipmaps;\n\n\t}\n\n}\n\nexport { KTXLoader };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}