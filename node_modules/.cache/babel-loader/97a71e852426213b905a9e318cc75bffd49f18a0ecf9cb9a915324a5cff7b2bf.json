{"ast":null,"code":"import { Color, HalfFloatType, MeshDepthMaterial, NearestFilter, NoBlending, RGBADepthPacking, ShaderMaterial, UniformsUtils, WebGLRenderTarget } from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { BokehShader } from '../shaders/BokehShader.js';\n\n/**\n * Pass for creating depth of field (DOF) effect.\n *\n * ```js\n * const bokehPass = new BokehPass( scene, camera, {\n * \tfocus: 500\n * \taperture: 5,\n * \tmaxblur: 0.01\n * } );\n * composer.addPass( bokehPass );\n * ```\n *\n * @augments Pass\n * @three_import import { BokehPass } from 'three/addons/postprocessing/BokehPass.js';\n */\nclass BokehPass extends Pass {\n  /**\n   * Constructs a new Bokeh pass.\n   *\n   * @param {Scene} scene - The scene to render the DOF for.\n   * @param {Camera} camera - The camera.\n   * @param {BokehPass~Options} params - The pass options.\n   */\n  constructor(scene, camera, params) {\n    super();\n\n    /**\n     * The scene to render the DOF for.\n     *\n     * @type {Scene}\n     */\n    this.scene = scene;\n\n    /**\n     * The camera.\n     *\n     * @type {Camera}\n     */\n    this.camera = camera;\n    const focus = params.focus !== undefined ? params.focus : 1.0;\n    const aperture = params.aperture !== undefined ? params.aperture : 0.025;\n    const maxblur = params.maxblur !== undefined ? params.maxblur : 1.0;\n\n    // render targets\n\n    this._renderTargetDepth = new WebGLRenderTarget(1, 1, {\n      // will be resized later\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType\n    });\n    this._renderTargetDepth.texture.name = 'BokehPass.depth';\n\n    // depth material\n\n    this._materialDepth = new MeshDepthMaterial();\n    this._materialDepth.depthPacking = RGBADepthPacking;\n    this._materialDepth.blending = NoBlending;\n\n    // bokeh material\n\n    const bokehUniforms = UniformsUtils.clone(BokehShader.uniforms);\n    bokehUniforms['tDepth'].value = this._renderTargetDepth.texture;\n    bokehUniforms['focus'].value = focus;\n    bokehUniforms['aspect'].value = camera.aspect;\n    bokehUniforms['aperture'].value = aperture;\n    bokehUniforms['maxblur'].value = maxblur;\n    bokehUniforms['nearClip'].value = camera.near;\n    bokehUniforms['farClip'].value = camera.far;\n\n    /**\n     * The pass bokeh material.\n     *\n     * @type {ShaderMaterial}\n     */\n    this.materialBokeh = new ShaderMaterial({\n      defines: Object.assign({}, BokehShader.defines),\n      uniforms: bokehUniforms,\n      vertexShader: BokehShader.vertexShader,\n      fragmentShader: BokehShader.fragmentShader\n    });\n\n    /**\n     * The pass uniforms.  Use this object if you want to update the\n     * `focus`, `aperture` or `maxblur` values at runtime.\n     *\n     * ```js\n     * pass.uniforms.focus.value = focus;\n     * pass.uniforms.aperture.value = aperture;\n     * pass.uniforms.maxblur.value = maxblur;\n     * ```\n     *\n     * @type {Object}\n     */\n    this.uniforms = bokehUniforms;\n\n    // internals\n\n    this._fsQuad = new FullScreenQuad(this.materialBokeh);\n    this._oldClearColor = new Color();\n  }\n\n  /**\n   * Performs the Bokeh pass.\n   *\n   * @param {WebGLRenderer} renderer - The renderer.\n   * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\n   * destination for the pass.\n   * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\n   * previous pass from this buffer.\n   * @param {number} deltaTime - The delta time in seconds.\n   * @param {boolean} maskActive - Whether masking is active or not.\n   */\n  render(renderer, writeBuffer, readBuffer /*, deltaTime, maskActive*/) {\n    // Render depth into texture\n\n    this.scene.overrideMaterial = this._materialDepth;\n    renderer.getClearColor(this._oldClearColor);\n    const oldClearAlpha = renderer.getClearAlpha();\n    const oldAutoClear = renderer.autoClear;\n    renderer.autoClear = false;\n    renderer.setClearColor(0xffffff);\n    renderer.setClearAlpha(1.0);\n    renderer.setRenderTarget(this._renderTargetDepth);\n    renderer.clear();\n    renderer.render(this.scene, this.camera);\n\n    // Render bokeh composite\n\n    this.uniforms['tColor'].value = readBuffer.texture;\n    this.uniforms['nearClip'].value = this.camera.near;\n    this.uniforms['farClip'].value = this.camera.far;\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this._fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      renderer.clear();\n      this._fsQuad.render(renderer);\n    }\n    this.scene.overrideMaterial = null;\n    renderer.setClearColor(this._oldClearColor);\n    renderer.setClearAlpha(oldClearAlpha);\n    renderer.autoClear = oldAutoClear;\n  }\n\n  /**\n   * Sets the size of the pass.\n   *\n   * @param {number} width - The width to set.\n   * @param {number} height - The height to set.\n   */\n  setSize(width, height) {\n    this.materialBokeh.uniforms['aspect'].value = width / height;\n    this._renderTargetDepth.setSize(width, height);\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever the pass is no longer used in your app.\n   */\n  dispose() {\n    this._renderTargetDepth.dispose();\n    this._materialDepth.dispose();\n    this.materialBokeh.dispose();\n    this._fsQuad.dispose();\n  }\n}\n\n/**\n * Constructor options of `BokehPass`.\n *\n * @typedef {Object} BokehPass~Options\n * @property {number} [focus=1] - Defines the effect's focus which is the distance along the camera's look direction in world units.\n * @property {number} [aperture=0.025] - Defines the effect's aperture.\n * @property {number} [maxblur=1] - Defines the effect's maximum blur.\n **/\n\nexport { BokehPass };","map":{"version":3,"names":["Color","HalfFloatType","MeshDepthMaterial","NearestFilter","NoBlending","RGBADepthPacking","ShaderMaterial","UniformsUtils","WebGLRenderTarget","Pass","FullScreenQuad","BokehShader","BokehPass","constructor","scene","camera","params","focus","undefined","aperture","maxblur","_renderTargetDepth","minFilter","magFilter","type","texture","name","_materialDepth","depthPacking","blending","bokehUniforms","clone","uniforms","value","aspect","near","far","materialBokeh","defines","Object","assign","vertexShader","fragmentShader","_fsQuad","_oldClearColor","render","renderer","writeBuffer","readBuffer","overrideMaterial","getClearColor","oldClearAlpha","getClearAlpha","oldAutoClear","autoClear","setClearColor","setClearAlpha","setRenderTarget","clear","renderToScreen","setSize","width","height","dispose"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/postprocessing/BokehPass.js"],"sourcesContent":["import {\n\tColor,\n\tHalfFloatType,\n\tMeshDepthMaterial,\n\tNearestFilter,\n\tNoBlending,\n\tRGBADepthPacking,\n\tShaderMaterial,\n\tUniformsUtils,\n\tWebGLRenderTarget\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { BokehShader } from '../shaders/BokehShader.js';\n\n/**\n * Pass for creating depth of field (DOF) effect.\n *\n * ```js\n * const bokehPass = new BokehPass( scene, camera, {\n * \tfocus: 500\n * \taperture: 5,\n * \tmaxblur: 0.01\n * } );\n * composer.addPass( bokehPass );\n * ```\n *\n * @augments Pass\n * @three_import import { BokehPass } from 'three/addons/postprocessing/BokehPass.js';\n */\nclass BokehPass extends Pass {\n\n\t/**\n\t * Constructs a new Bokeh pass.\n\t *\n\t * @param {Scene} scene - The scene to render the DOF for.\n\t * @param {Camera} camera - The camera.\n\t * @param {BokehPass~Options} params - The pass options.\n\t */\n\tconstructor( scene, camera, params ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The scene to render the DOF for.\n\t\t *\n\t\t * @type {Scene}\n\t\t */\n\t\tthis.scene = scene;\n\n\t\t/**\n\t\t * The camera.\n\t\t *\n\t\t * @type {Camera}\n\t\t */\n\t\tthis.camera = camera;\n\n\t\tconst focus = ( params.focus !== undefined ) ? params.focus : 1.0;\n\t\tconst aperture = ( params.aperture !== undefined ) ? params.aperture : 0.025;\n\t\tconst maxblur = ( params.maxblur !== undefined ) ? params.maxblur : 1.0;\n\n\t\t// render targets\n\n\t\tthis._renderTargetDepth = new WebGLRenderTarget( 1, 1, { // will be resized later\n\t\t\tminFilter: NearestFilter,\n\t\t\tmagFilter: NearestFilter,\n\t\t\ttype: HalfFloatType\n\t\t} );\n\n\t\tthis._renderTargetDepth.texture.name = 'BokehPass.depth';\n\n\t\t// depth material\n\n\t\tthis._materialDepth = new MeshDepthMaterial();\n\t\tthis._materialDepth.depthPacking = RGBADepthPacking;\n\t\tthis._materialDepth.blending = NoBlending;\n\n\t\t// bokeh material\n\n\t\tconst bokehUniforms = UniformsUtils.clone( BokehShader.uniforms );\n\n\t\tbokehUniforms[ 'tDepth' ].value = this._renderTargetDepth.texture;\n\n\t\tbokehUniforms[ 'focus' ].value = focus;\n\t\tbokehUniforms[ 'aspect' ].value = camera.aspect;\n\t\tbokehUniforms[ 'aperture' ].value = aperture;\n\t\tbokehUniforms[ 'maxblur' ].value = maxblur;\n\t\tbokehUniforms[ 'nearClip' ].value = camera.near;\n\t\tbokehUniforms[ 'farClip' ].value = camera.far;\n\n\t\t/**\n\t\t * The pass bokeh material.\n\t\t *\n\t\t * @type {ShaderMaterial}\n\t\t */\n\t\tthis.materialBokeh = new ShaderMaterial( {\n\t\t\tdefines: Object.assign( {}, BokehShader.defines ),\n\t\t\tuniforms: bokehUniforms,\n\t\t\tvertexShader: BokehShader.vertexShader,\n\t\t\tfragmentShader: BokehShader.fragmentShader\n\t\t} );\n\n\t\t/**\n\t\t * The pass uniforms.  Use this object if you want to update the\n\t\t * `focus`, `aperture` or `maxblur` values at runtime.\n\t\t *\n\t\t * ```js\n\t\t * pass.uniforms.focus.value = focus;\n\t\t * pass.uniforms.aperture.value = aperture;\n\t\t * pass.uniforms.maxblur.value = maxblur;\n\t\t * ```\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.uniforms = bokehUniforms;\n\n\t\t// internals\n\n\t\tthis._fsQuad = new FullScreenQuad( this.materialBokeh );\n\n\t\tthis._oldClearColor = new Color();\n\n\t}\n\n\t/**\n\t * Performs the Bokeh pass.\n\t *\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\n\t * destination for the pass.\n\t * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\n\t * previous pass from this buffer.\n\t * @param {number} deltaTime - The delta time in seconds.\n\t * @param {boolean} maskActive - Whether masking is active or not.\n\t */\n\trender( renderer, writeBuffer, readBuffer/*, deltaTime, maskActive*/ ) {\n\n\t\t// Render depth into texture\n\n\t\tthis.scene.overrideMaterial = this._materialDepth;\n\n\t\trenderer.getClearColor( this._oldClearColor );\n\t\tconst oldClearAlpha = renderer.getClearAlpha();\n\t\tconst oldAutoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\trenderer.setClearColor( 0xffffff );\n\t\trenderer.setClearAlpha( 1.0 );\n\t\trenderer.setRenderTarget( this._renderTargetDepth );\n\t\trenderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\t// Render bokeh composite\n\n\t\tthis.uniforms[ 'tColor' ].value = readBuffer.texture;\n\t\tthis.uniforms[ 'nearClip' ].value = this.camera.near;\n\t\tthis.uniforms[ 'farClip' ].value = this.camera.far;\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis._fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\trenderer.clear();\n\t\t\tthis._fsQuad.render( renderer );\n\n\t\t}\n\n\t\tthis.scene.overrideMaterial = null;\n\t\trenderer.setClearColor( this._oldClearColor );\n\t\trenderer.setClearAlpha( oldClearAlpha );\n\t\trenderer.autoClear = oldAutoClear;\n\n\t}\n\n\t/**\n\t * Sets the size of the pass.\n\t *\n\t * @param {number} width - The width to set.\n\t * @param {number} height - The height to set.\n\t */\n\tsetSize( width, height ) {\n\n\t\tthis.materialBokeh.uniforms[ 'aspect' ].value = width / height;\n\n\t\tthis._renderTargetDepth.setSize( width, height );\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever the pass is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis._renderTargetDepth.dispose();\n\n\t\tthis._materialDepth.dispose();\n\t\tthis.materialBokeh.dispose();\n\n\t\tthis._fsQuad.dispose();\n\n\t}\n\n}\n\n/**\n * Constructor options of `BokehPass`.\n *\n * @typedef {Object} BokehPass~Options\n * @property {number} [focus=1] - Defines the effect's focus which is the distance along the camera's look direction in world units.\n * @property {number} [aperture=0.025] - Defines the effect's aperture.\n * @property {number} [maxblur=1] - Defines the effect's maximum blur.\n **/\n\nexport { BokehPass };\n"],"mappings":"AAAA,SACCA,KAAK,EACLC,aAAa,EACbC,iBAAiB,EACjBC,aAAa,EACbC,UAAU,EACVC,gBAAgB,EAChBC,cAAc,EACdC,aAAa,EACbC,iBAAiB,QACX,OAAO;AACd,SAASC,IAAI,EAAEC,cAAc,QAAQ,WAAW;AAChD,SAASC,WAAW,QAAQ,2BAA2B;;AAEvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,SAAS,SAASH,IAAI,CAAC;EAE5B;AACD;AACA;AACA;AACA;AACA;AACA;EACCI,WAAWA,CAAEC,KAAK,EAAEC,MAAM,EAAEC,MAAM,EAAG;IAEpC,KAAK,CAAC,CAAC;;IAEP;AACF;AACA;AACA;AACA;IACE,IAAI,CAACF,KAAK,GAAGA,KAAK;;IAElB;AACF;AACA;AACA;AACA;IACE,IAAI,CAACC,MAAM,GAAGA,MAAM;IAEpB,MAAME,KAAK,GAAKD,MAAM,CAACC,KAAK,KAAKC,SAAS,GAAKF,MAAM,CAACC,KAAK,GAAG,GAAG;IACjE,MAAME,QAAQ,GAAKH,MAAM,CAACG,QAAQ,KAAKD,SAAS,GAAKF,MAAM,CAACG,QAAQ,GAAG,KAAK;IAC5E,MAAMC,OAAO,GAAKJ,MAAM,CAACI,OAAO,KAAKF,SAAS,GAAKF,MAAM,CAACI,OAAO,GAAG,GAAG;;IAEvE;;IAEA,IAAI,CAACC,kBAAkB,GAAG,IAAIb,iBAAiB,CAAE,CAAC,EAAE,CAAC,EAAE;MAAE;MACxDc,SAAS,EAAEnB,aAAa;MACxBoB,SAAS,EAAEpB,aAAa;MACxBqB,IAAI,EAAEvB;IACP,CAAE,CAAC;IAEH,IAAI,CAACoB,kBAAkB,CAACI,OAAO,CAACC,IAAI,GAAG,iBAAiB;;IAExD;;IAEA,IAAI,CAACC,cAAc,GAAG,IAAIzB,iBAAiB,CAAC,CAAC;IAC7C,IAAI,CAACyB,cAAc,CAACC,YAAY,GAAGvB,gBAAgB;IACnD,IAAI,CAACsB,cAAc,CAACE,QAAQ,GAAGzB,UAAU;;IAEzC;;IAEA,MAAM0B,aAAa,GAAGvB,aAAa,CAACwB,KAAK,CAAEpB,WAAW,CAACqB,QAAS,CAAC;IAEjEF,aAAa,CAAE,QAAQ,CAAE,CAACG,KAAK,GAAG,IAAI,CAACZ,kBAAkB,CAACI,OAAO;IAEjEK,aAAa,CAAE,OAAO,CAAE,CAACG,KAAK,GAAGhB,KAAK;IACtCa,aAAa,CAAE,QAAQ,CAAE,CAACG,KAAK,GAAGlB,MAAM,CAACmB,MAAM;IAC/CJ,aAAa,CAAE,UAAU,CAAE,CAACG,KAAK,GAAGd,QAAQ;IAC5CW,aAAa,CAAE,SAAS,CAAE,CAACG,KAAK,GAAGb,OAAO;IAC1CU,aAAa,CAAE,UAAU,CAAE,CAACG,KAAK,GAAGlB,MAAM,CAACoB,IAAI;IAC/CL,aAAa,CAAE,SAAS,CAAE,CAACG,KAAK,GAAGlB,MAAM,CAACqB,GAAG;;IAE7C;AACF;AACA;AACA;AACA;IACE,IAAI,CAACC,aAAa,GAAG,IAAI/B,cAAc,CAAE;MACxCgC,OAAO,EAAEC,MAAM,CAACC,MAAM,CAAE,CAAC,CAAC,EAAE7B,WAAW,CAAC2B,OAAQ,CAAC;MACjDN,QAAQ,EAAEF,aAAa;MACvBW,YAAY,EAAE9B,WAAW,CAAC8B,YAAY;MACtCC,cAAc,EAAE/B,WAAW,CAAC+B;IAC7B,CAAE,CAAC;;IAEH;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACV,QAAQ,GAAGF,aAAa;;IAE7B;;IAEA,IAAI,CAACa,OAAO,GAAG,IAAIjC,cAAc,CAAE,IAAI,CAAC2B,aAAc,CAAC;IAEvD,IAAI,CAACO,cAAc,GAAG,IAAI5C,KAAK,CAAC,CAAC;EAElC;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC6C,MAAMA,CAAEC,QAAQ,EAAEC,WAAW,EAAEC,UAAU,8BAA8B;IAEtE;;IAEA,IAAI,CAAClC,KAAK,CAACmC,gBAAgB,GAAG,IAAI,CAACtB,cAAc;IAEjDmB,QAAQ,CAACI,aAAa,CAAE,IAAI,CAACN,cAAe,CAAC;IAC7C,MAAMO,aAAa,GAAGL,QAAQ,CAACM,aAAa,CAAC,CAAC;IAC9C,MAAMC,YAAY,GAAGP,QAAQ,CAACQ,SAAS;IACvCR,QAAQ,CAACQ,SAAS,GAAG,KAAK;IAE1BR,QAAQ,CAACS,aAAa,CAAE,QAAS,CAAC;IAClCT,QAAQ,CAACU,aAAa,CAAE,GAAI,CAAC;IAC7BV,QAAQ,CAACW,eAAe,CAAE,IAAI,CAACpC,kBAAmB,CAAC;IACnDyB,QAAQ,CAACY,KAAK,CAAC,CAAC;IAChBZ,QAAQ,CAACD,MAAM,CAAE,IAAI,CAAC/B,KAAK,EAAE,IAAI,CAACC,MAAO,CAAC;;IAE1C;;IAEA,IAAI,CAACiB,QAAQ,CAAE,QAAQ,CAAE,CAACC,KAAK,GAAGe,UAAU,CAACvB,OAAO;IACpD,IAAI,CAACO,QAAQ,CAAE,UAAU,CAAE,CAACC,KAAK,GAAG,IAAI,CAAClB,MAAM,CAACoB,IAAI;IACpD,IAAI,CAACH,QAAQ,CAAE,SAAS,CAAE,CAACC,KAAK,GAAG,IAAI,CAAClB,MAAM,CAACqB,GAAG;IAElD,IAAK,IAAI,CAACuB,cAAc,EAAG;MAE1Bb,QAAQ,CAACW,eAAe,CAAE,IAAK,CAAC;MAChC,IAAI,CAACd,OAAO,CAACE,MAAM,CAAEC,QAAS,CAAC;IAEhC,CAAC,MAAM;MAENA,QAAQ,CAACW,eAAe,CAAEV,WAAY,CAAC;MACvCD,QAAQ,CAACY,KAAK,CAAC,CAAC;MAChB,IAAI,CAACf,OAAO,CAACE,MAAM,CAAEC,QAAS,CAAC;IAEhC;IAEA,IAAI,CAAChC,KAAK,CAACmC,gBAAgB,GAAG,IAAI;IAClCH,QAAQ,CAACS,aAAa,CAAE,IAAI,CAACX,cAAe,CAAC;IAC7CE,QAAQ,CAACU,aAAa,CAAEL,aAAc,CAAC;IACvCL,QAAQ,CAACQ,SAAS,GAAGD,YAAY;EAElC;;EAEA;AACD;AACA;AACA;AACA;AACA;EACCO,OAAOA,CAAEC,KAAK,EAAEC,MAAM,EAAG;IAExB,IAAI,CAACzB,aAAa,CAACL,QAAQ,CAAE,QAAQ,CAAE,CAACC,KAAK,GAAG4B,KAAK,GAAGC,MAAM;IAE9D,IAAI,CAACzC,kBAAkB,CAACuC,OAAO,CAAEC,KAAK,EAAEC,MAAO,CAAC;EAEjD;;EAEA;AACD;AACA;AACA;EACCC,OAAOA,CAAA,EAAG;IAET,IAAI,CAAC1C,kBAAkB,CAAC0C,OAAO,CAAC,CAAC;IAEjC,IAAI,CAACpC,cAAc,CAACoC,OAAO,CAAC,CAAC;IAC7B,IAAI,CAAC1B,aAAa,CAAC0B,OAAO,CAAC,CAAC;IAE5B,IAAI,CAACpB,OAAO,CAACoB,OAAO,CAAC,CAAC;EAEvB;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASnD,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}