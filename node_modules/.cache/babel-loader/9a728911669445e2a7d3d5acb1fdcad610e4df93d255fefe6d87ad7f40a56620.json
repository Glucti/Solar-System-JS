{"ast":null,"code":"import { BufferGeometry, Color, Data3DTexture, FileLoader, Float32BufferAttribute, Loader, LinearFilter, Mesh, MeshStandardMaterial, NearestFilter, RedFormat, SRGBColorSpace } from 'three';\n\n/**\n * A loader for the VOX format.\n *\n * ```js\n * const loader = new VOXLoader();\n * const chunks = await loader.loadAsync( 'models/vox/monu10.vox' );\n *\n * for ( let i = 0; i < chunks.length; i ++ ) {\n *\n * \tconst chunk = chunks[ i ];\n * \tconst mesh = new VOXMesh( chunk );\n * \tmesh.scale.setScalar( 0.0015 );\n * \tscene.add( mesh );\n *\n * }\n * ```\n * @augments Loader\n * @three_import import { VOXLoader } from 'three/addons/loaders/VOXLoader.js';\n */\nclass VOXLoader extends Loader {\n  /**\n   * Starts loading from the given URL and passes the loaded VOX asset\n   * to the `onLoad()` callback.\n   *\n   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n   * @param {function(Array<Object>)} onLoad - Executed when the loading process has been finished.\n   * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n   * @param {onErrorCallback} onError - Executed when errors occur.\n   */\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(scope.requestHeader);\n    loader.load(url, function (buffer) {\n      try {\n        onLoad(scope.parse(buffer));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  /**\n   * Parses the given VOX data and returns the resulting chunks.\n   *\n   * @param {ArrayBuffer} buffer - The raw VOX data as an array buffer.\n   * @return {Array<Object>} The parsed chunks.\n   */\n  parse(buffer) {\n    const data = new DataView(buffer);\n    const id = data.getUint32(0, true);\n    const version = data.getUint32(4, true);\n    if (id !== 542658390) {\n      console.error('THREE.VOXLoader: Invalid VOX file.');\n      return;\n    }\n    if (version !== 150) {\n      console.error('THREE.VOXLoader: Invalid VOX file. Unsupported version:', version);\n      return;\n    }\n    const DEFAULT_PALETTE = [0x00000000, 0xffffffff, 0xffccffff, 0xff99ffff, 0xff66ffff, 0xff33ffff, 0xff00ffff, 0xffffccff, 0xffccccff, 0xff99ccff, 0xff66ccff, 0xff33ccff, 0xff00ccff, 0xffff99ff, 0xffcc99ff, 0xff9999ff, 0xff6699ff, 0xff3399ff, 0xff0099ff, 0xffff66ff, 0xffcc66ff, 0xff9966ff, 0xff6666ff, 0xff3366ff, 0xff0066ff, 0xffff33ff, 0xffcc33ff, 0xff9933ff, 0xff6633ff, 0xff3333ff, 0xff0033ff, 0xffff00ff, 0xffcc00ff, 0xff9900ff, 0xff6600ff, 0xff3300ff, 0xff0000ff, 0xffffffcc, 0xffccffcc, 0xff99ffcc, 0xff66ffcc, 0xff33ffcc, 0xff00ffcc, 0xffffcccc, 0xffcccccc, 0xff99cccc, 0xff66cccc, 0xff33cccc, 0xff00cccc, 0xffff99cc, 0xffcc99cc, 0xff9999cc, 0xff6699cc, 0xff3399cc, 0xff0099cc, 0xffff66cc, 0xffcc66cc, 0xff9966cc, 0xff6666cc, 0xff3366cc, 0xff0066cc, 0xffff33cc, 0xffcc33cc, 0xff9933cc, 0xff6633cc, 0xff3333cc, 0xff0033cc, 0xffff00cc, 0xffcc00cc, 0xff9900cc, 0xff6600cc, 0xff3300cc, 0xff0000cc, 0xffffff99, 0xffccff99, 0xff99ff99, 0xff66ff99, 0xff33ff99, 0xff00ff99, 0xffffcc99, 0xffcccc99, 0xff99cc99, 0xff66cc99, 0xff33cc99, 0xff00cc99, 0xffff9999, 0xffcc9999, 0xff999999, 0xff669999, 0xff339999, 0xff009999, 0xffff6699, 0xffcc6699, 0xff996699, 0xff666699, 0xff336699, 0xff006699, 0xffff3399, 0xffcc3399, 0xff993399, 0xff663399, 0xff333399, 0xff003399, 0xffff0099, 0xffcc0099, 0xff990099, 0xff660099, 0xff330099, 0xff000099, 0xffffff66, 0xffccff66, 0xff99ff66, 0xff66ff66, 0xff33ff66, 0xff00ff66, 0xffffcc66, 0xffcccc66, 0xff99cc66, 0xff66cc66, 0xff33cc66, 0xff00cc66, 0xffff9966, 0xffcc9966, 0xff999966, 0xff669966, 0xff339966, 0xff009966, 0xffff6666, 0xffcc6666, 0xff996666, 0xff666666, 0xff336666, 0xff006666, 0xffff3366, 0xffcc3366, 0xff993366, 0xff663366, 0xff333366, 0xff003366, 0xffff0066, 0xffcc0066, 0xff990066, 0xff660066, 0xff330066, 0xff000066, 0xffffff33, 0xffccff33, 0xff99ff33, 0xff66ff33, 0xff33ff33, 0xff00ff33, 0xffffcc33, 0xffcccc33, 0xff99cc33, 0xff66cc33, 0xff33cc33, 0xff00cc33, 0xffff9933, 0xffcc9933, 0xff999933, 0xff669933, 0xff339933, 0xff009933, 0xffff6633, 0xffcc6633, 0xff996633, 0xff666633, 0xff336633, 0xff006633, 0xffff3333, 0xffcc3333, 0xff993333, 0xff663333, 0xff333333, 0xff003333, 0xffff0033, 0xffcc0033, 0xff990033, 0xff660033, 0xff330033, 0xff000033, 0xffffff00, 0xffccff00, 0xff99ff00, 0xff66ff00, 0xff33ff00, 0xff00ff00, 0xffffcc00, 0xffcccc00, 0xff99cc00, 0xff66cc00, 0xff33cc00, 0xff00cc00, 0xffff9900, 0xffcc9900, 0xff999900, 0xff669900, 0xff339900, 0xff009900, 0xffff6600, 0xffcc6600, 0xff996600, 0xff666600, 0xff336600, 0xff006600, 0xffff3300, 0xffcc3300, 0xff993300, 0xff663300, 0xff333300, 0xff003300, 0xffff0000, 0xffcc0000, 0xff990000, 0xff660000, 0xff330000, 0xff0000ee, 0xff0000dd, 0xff0000bb, 0xff0000aa, 0xff000088, 0xff000077, 0xff000055, 0xff000044, 0xff000022, 0xff000011, 0xff00ee00, 0xff00dd00, 0xff00bb00, 0xff00aa00, 0xff008800, 0xff007700, 0xff005500, 0xff004400, 0xff002200, 0xff001100, 0xffee0000, 0xffdd0000, 0xffbb0000, 0xffaa0000, 0xff880000, 0xff770000, 0xff550000, 0xff440000, 0xff220000, 0xff110000, 0xffeeeeee, 0xffdddddd, 0xffbbbbbb, 0xffaaaaaa, 0xff888888, 0xff777777, 0xff555555, 0xff444444, 0xff222222, 0xff111111];\n    let i = 8;\n    let chunk;\n    const chunks = [];\n    while (i < data.byteLength) {\n      let id = '';\n      for (let j = 0; j < 4; j++) {\n        id += String.fromCharCode(data.getUint8(i++));\n      }\n      const chunkSize = data.getUint32(i, true);\n      i += 4;\n      i += 4; // childChunks\n\n      if (id === 'SIZE') {\n        const x = data.getUint32(i, true);\n        i += 4;\n        const y = data.getUint32(i, true);\n        i += 4;\n        const z = data.getUint32(i, true);\n        i += 4;\n        chunk = {\n          palette: DEFAULT_PALETTE,\n          size: {\n            x: x,\n            y: y,\n            z: z\n          }\n        };\n        chunks.push(chunk);\n        i += chunkSize - 3 * 4;\n      } else if (id === 'XYZI') {\n        const numVoxels = data.getUint32(i, true);\n        i += 4;\n        chunk.data = new Uint8Array(buffer, i, numVoxels * 4);\n        i += numVoxels * 4;\n      } else if (id === 'RGBA') {\n        const palette = [0];\n        for (let j = 0; j < 256; j++) {\n          palette[j + 1] = data.getUint32(i, true);\n          i += 4;\n        }\n        chunk.palette = palette;\n      } else {\n        // console.log( id, chunkSize, childChunks );\n\n        i += chunkSize;\n      }\n    }\n    return chunks;\n  }\n}\n\n/**\n * A VOX mesh.\n *\n * Instances of this class are created from the loaded chunks of {@link VOXLoader}.\n *\n * @augments Mesh\n */\nclass VOXMesh extends Mesh {\n  /**\n   * Constructs a new VOX mesh.\n   *\n   * @param {Object} chunk - A VOX chunk loaded via {@link VOXLoader}.\n   */\n  constructor(chunk) {\n    const data = chunk.data;\n    const size = chunk.size;\n    const palette = chunk.palette;\n\n    //\n\n    const vertices = [];\n    const colors = [];\n    const nx = [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1];\n    const px = [1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0];\n    const py = [0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1];\n    const ny = [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0];\n    const nz = [0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0];\n    const pz = [0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1];\n    const _color = new Color();\n    function add(tile, x, y, z, r, g, b) {\n      x -= size.x / 2;\n      y -= size.z / 2;\n      z += size.y / 2;\n      for (let i = 0; i < 18; i += 3) {\n        _color.setRGB(r, g, b, SRGBColorSpace);\n        vertices.push(tile[i + 0] + x, tile[i + 1] + y, tile[i + 2] + z);\n        colors.push(_color.r, _color.g, _color.b);\n      }\n    }\n\n    // Store data in a volume for sampling\n\n    const offsety = size.x;\n    const offsetz = size.x * size.y;\n    const array = new Uint8Array(size.x * size.y * size.z);\n    for (let j = 0; j < data.length; j += 4) {\n      const x = data[j + 0];\n      const y = data[j + 1];\n      const z = data[j + 2];\n      const index = x + y * offsety + z * offsetz;\n      array[index] = 255;\n    }\n\n    // Construct geometry\n\n    let hasColors = false;\n    for (let j = 0; j < data.length; j += 4) {\n      const x = data[j + 0];\n      const y = data[j + 1];\n      const z = data[j + 2];\n      const c = data[j + 3];\n      const hex = palette[c];\n      const r = (hex >> 0 & 0xff) / 0xff;\n      const g = (hex >> 8 & 0xff) / 0xff;\n      const b = (hex >> 16 & 0xff) / 0xff;\n      if (r > 0 || g > 0 || b > 0) hasColors = true;\n      const index = x + y * offsety + z * offsetz;\n      if (array[index + 1] === 0 || x === size.x - 1) add(px, x, z, -y, r, g, b);\n      if (array[index - 1] === 0 || x === 0) add(nx, x, z, -y, r, g, b);\n      if (array[index + offsety] === 0 || y === size.y - 1) add(ny, x, z, -y, r, g, b);\n      if (array[index - offsety] === 0 || y === 0) add(py, x, z, -y, r, g, b);\n      if (array[index + offsetz] === 0 || z === size.z - 1) add(pz, x, z, -y, r, g, b);\n      if (array[index - offsetz] === 0 || z === 0) add(nz, x, z, -y, r, g, b);\n    }\n    const geometry = new BufferGeometry();\n    geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    geometry.computeVertexNormals();\n    const material = new MeshStandardMaterial();\n    if (hasColors) {\n      geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n      material.vertexColors = true;\n    }\n    super(geometry, material);\n  }\n}\n\n/**\n * A VOX 3D texture.\n *\n * Instances of this class are created from the loaded chunks of {@link VOXLoader}.\n *\n * @augments Data3DTexture\n */\nclass VOXData3DTexture extends Data3DTexture {\n  /**\n   * Constructs a new VOX 3D texture.\n   *\n   * @param {Object} chunk - A VOX chunk loaded via {@link VOXLoader}.\n   */\n  constructor(chunk) {\n    const data = chunk.data;\n    const size = chunk.size;\n    const offsety = size.x;\n    const offsetz = size.x * size.y;\n    const array = new Uint8Array(size.x * size.y * size.z);\n    for (let j = 0; j < data.length; j += 4) {\n      const x = data[j + 0];\n      const y = data[j + 1];\n      const z = data[j + 2];\n      const index = x + y * offsety + z * offsetz;\n      array[index] = 255;\n    }\n    super(array, size.x, size.y, size.z);\n    this.format = RedFormat;\n    this.minFilter = NearestFilter;\n    this.magFilter = LinearFilter;\n    this.unpackAlignment = 1;\n    this.needsUpdate = true;\n  }\n}\nexport { VOXLoader, VOXMesh, VOXData3DTexture };","map":{"version":3,"names":["BufferGeometry","Color","Data3DTexture","FileLoader","Float32BufferAttribute","Loader","LinearFilter","Mesh","MeshStandardMaterial","NearestFilter","RedFormat","SRGBColorSpace","VOXLoader","load","url","onLoad","onProgress","onError","scope","loader","manager","setPath","path","setResponseType","setRequestHeader","requestHeader","buffer","parse","e","console","error","itemError","data","DataView","id","getUint32","version","DEFAULT_PALETTE","i","chunk","chunks","byteLength","j","String","fromCharCode","getUint8","chunkSize","x","y","z","palette","size","push","numVoxels","Uint8Array","VOXMesh","constructor","vertices","colors","nx","px","py","ny","nz","pz","_color","add","tile","r","g","b","setRGB","offsety","offsetz","array","length","index","hasColors","c","hex","geometry","setAttribute","computeVertexNormals","material","vertexColors","VOXData3DTexture","format","minFilter","magFilter","unpackAlignment","needsUpdate"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/loaders/VOXLoader.js"],"sourcesContent":["import {\n\tBufferGeometry,\n\tColor,\n\tData3DTexture,\n\tFileLoader,\n\tFloat32BufferAttribute,\n\tLoader,\n\tLinearFilter,\n\tMesh,\n\tMeshStandardMaterial,\n\tNearestFilter,\n\tRedFormat,\n\tSRGBColorSpace\n} from 'three';\n\n/**\n * A loader for the VOX format.\n *\n * ```js\n * const loader = new VOXLoader();\n * const chunks = await loader.loadAsync( 'models/vox/monu10.vox' );\n *\n * for ( let i = 0; i < chunks.length; i ++ ) {\n *\n * \tconst chunk = chunks[ i ];\n * \tconst mesh = new VOXMesh( chunk );\n * \tmesh.scale.setScalar( 0.0015 );\n * \tscene.add( mesh );\n *\n * }\n * ```\n * @augments Loader\n * @three_import import { VOXLoader } from 'three/addons/loaders/VOXLoader.js';\n */\nclass VOXLoader extends Loader {\n\n\t/**\n\t * Starts loading from the given URL and passes the loaded VOX asset\n\t * to the `onLoad()` callback.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(Array<Object>)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( scope.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( scope.requestHeader );\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( buffer ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\t/**\n\t * Parses the given VOX data and returns the resulting chunks.\n\t *\n\t * @param {ArrayBuffer} buffer - The raw VOX data as an array buffer.\n\t * @return {Array<Object>} The parsed chunks.\n\t */\n\tparse( buffer ) {\n\n\t\tconst data = new DataView( buffer );\n\n\t\tconst id = data.getUint32( 0, true );\n\t\tconst version = data.getUint32( 4, true );\n\n\t\tif ( id !== 542658390 ) {\n\n\t\t\tconsole.error( 'THREE.VOXLoader: Invalid VOX file.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( version !== 150 ) {\n\n\t\t\tconsole.error( 'THREE.VOXLoader: Invalid VOX file. Unsupported version:', version );\n\t\t\treturn;\n\n\t\t}\n\n\t\tconst DEFAULT_PALETTE = [\n\t\t\t0x00000000, 0xffffffff, 0xffccffff, 0xff99ffff, 0xff66ffff, 0xff33ffff, 0xff00ffff, 0xffffccff,\n\t\t\t0xffccccff, 0xff99ccff, 0xff66ccff, 0xff33ccff, 0xff00ccff, 0xffff99ff, 0xffcc99ff, 0xff9999ff,\n\t\t\t0xff6699ff, 0xff3399ff, 0xff0099ff, 0xffff66ff, 0xffcc66ff, 0xff9966ff, 0xff6666ff, 0xff3366ff,\n\t\t\t0xff0066ff, 0xffff33ff, 0xffcc33ff, 0xff9933ff, 0xff6633ff, 0xff3333ff, 0xff0033ff, 0xffff00ff,\n\t\t\t0xffcc00ff, 0xff9900ff, 0xff6600ff, 0xff3300ff, 0xff0000ff, 0xffffffcc, 0xffccffcc, 0xff99ffcc,\n\t\t\t0xff66ffcc, 0xff33ffcc, 0xff00ffcc, 0xffffcccc, 0xffcccccc, 0xff99cccc, 0xff66cccc, 0xff33cccc,\n\t\t\t0xff00cccc, 0xffff99cc, 0xffcc99cc, 0xff9999cc, 0xff6699cc, 0xff3399cc, 0xff0099cc, 0xffff66cc,\n\t\t\t0xffcc66cc, 0xff9966cc, 0xff6666cc, 0xff3366cc, 0xff0066cc, 0xffff33cc, 0xffcc33cc, 0xff9933cc,\n\t\t\t0xff6633cc, 0xff3333cc, 0xff0033cc, 0xffff00cc, 0xffcc00cc, 0xff9900cc, 0xff6600cc, 0xff3300cc,\n\t\t\t0xff0000cc, 0xffffff99, 0xffccff99, 0xff99ff99, 0xff66ff99, 0xff33ff99, 0xff00ff99, 0xffffcc99,\n\t\t\t0xffcccc99, 0xff99cc99, 0xff66cc99, 0xff33cc99, 0xff00cc99, 0xffff9999, 0xffcc9999, 0xff999999,\n\t\t\t0xff669999, 0xff339999, 0xff009999, 0xffff6699, 0xffcc6699, 0xff996699, 0xff666699, 0xff336699,\n\t\t\t0xff006699, 0xffff3399, 0xffcc3399, 0xff993399, 0xff663399, 0xff333399, 0xff003399, 0xffff0099,\n\t\t\t0xffcc0099, 0xff990099, 0xff660099, 0xff330099, 0xff000099, 0xffffff66, 0xffccff66, 0xff99ff66,\n\t\t\t0xff66ff66, 0xff33ff66, 0xff00ff66, 0xffffcc66, 0xffcccc66, 0xff99cc66, 0xff66cc66, 0xff33cc66,\n\t\t\t0xff00cc66, 0xffff9966, 0xffcc9966, 0xff999966, 0xff669966, 0xff339966, 0xff009966, 0xffff6666,\n\t\t\t0xffcc6666, 0xff996666, 0xff666666, 0xff336666, 0xff006666, 0xffff3366, 0xffcc3366, 0xff993366,\n\t\t\t0xff663366, 0xff333366, 0xff003366, 0xffff0066, 0xffcc0066, 0xff990066, 0xff660066, 0xff330066,\n\t\t\t0xff000066, 0xffffff33, 0xffccff33, 0xff99ff33, 0xff66ff33, 0xff33ff33, 0xff00ff33, 0xffffcc33,\n\t\t\t0xffcccc33, 0xff99cc33, 0xff66cc33, 0xff33cc33, 0xff00cc33, 0xffff9933, 0xffcc9933, 0xff999933,\n\t\t\t0xff669933, 0xff339933, 0xff009933, 0xffff6633, 0xffcc6633, 0xff996633, 0xff666633, 0xff336633,\n\t\t\t0xff006633, 0xffff3333, 0xffcc3333, 0xff993333, 0xff663333, 0xff333333, 0xff003333, 0xffff0033,\n\t\t\t0xffcc0033, 0xff990033, 0xff660033, 0xff330033, 0xff000033, 0xffffff00, 0xffccff00, 0xff99ff00,\n\t\t\t0xff66ff00, 0xff33ff00, 0xff00ff00, 0xffffcc00, 0xffcccc00, 0xff99cc00, 0xff66cc00, 0xff33cc00,\n\t\t\t0xff00cc00, 0xffff9900, 0xffcc9900, 0xff999900, 0xff669900, 0xff339900, 0xff009900, 0xffff6600,\n\t\t\t0xffcc6600, 0xff996600, 0xff666600, 0xff336600, 0xff006600, 0xffff3300, 0xffcc3300, 0xff993300,\n\t\t\t0xff663300, 0xff333300, 0xff003300, 0xffff0000, 0xffcc0000, 0xff990000, 0xff660000, 0xff330000,\n\t\t\t0xff0000ee, 0xff0000dd, 0xff0000bb, 0xff0000aa, 0xff000088, 0xff000077, 0xff000055, 0xff000044,\n\t\t\t0xff000022, 0xff000011, 0xff00ee00, 0xff00dd00, 0xff00bb00, 0xff00aa00, 0xff008800, 0xff007700,\n\t\t\t0xff005500, 0xff004400, 0xff002200, 0xff001100, 0xffee0000, 0xffdd0000, 0xffbb0000, 0xffaa0000,\n\t\t\t0xff880000, 0xff770000, 0xff550000, 0xff440000, 0xff220000, 0xff110000, 0xffeeeeee, 0xffdddddd,\n\t\t\t0xffbbbbbb, 0xffaaaaaa, 0xff888888, 0xff777777, 0xff555555, 0xff444444, 0xff222222, 0xff111111\n\t\t];\n\n\t\tlet i = 8;\n\n\t\tlet chunk;\n\t\tconst chunks = [];\n\n\t\twhile ( i < data.byteLength ) {\n\n\t\t\tlet id = '';\n\n\t\t\tfor ( let j = 0; j < 4; j ++ ) {\n\n\t\t\t\tid += String.fromCharCode( data.getUint8( i ++ ) );\n\n\t\t\t}\n\n\t\t\tconst chunkSize = data.getUint32( i, true ); i += 4;\n\t\t\ti += 4; // childChunks\n\n\t\t\tif ( id === 'SIZE' ) {\n\n\t\t\t\tconst x = data.getUint32( i, true ); i += 4;\n\t\t\t\tconst y = data.getUint32( i, true ); i += 4;\n\t\t\t\tconst z = data.getUint32( i, true ); i += 4;\n\n\t\t\t\tchunk = {\n\t\t\t\t\tpalette: DEFAULT_PALETTE,\n\t\t\t\t\tsize: { x: x, y: y, z: z },\n\t\t\t\t};\n\n\t\t\t\tchunks.push( chunk );\n\n\t\t\t\ti += chunkSize - ( 3 * 4 );\n\n\t\t\t} else if ( id === 'XYZI' ) {\n\n\t\t\t\tconst numVoxels = data.getUint32( i, true ); i += 4;\n\t\t\t\tchunk.data = new Uint8Array( buffer, i, numVoxels * 4 );\n\n\t\t\t\ti += numVoxels * 4;\n\n\t\t\t} else if ( id === 'RGBA' ) {\n\n\t\t\t\tconst palette = [ 0 ];\n\n\t\t\t\tfor ( let j = 0; j < 256; j ++ ) {\n\n\t\t\t\t\tpalette[ j + 1 ] = data.getUint32( i, true ); i += 4;\n\n\t\t\t\t}\n\n\t\t\t\tchunk.palette = palette;\n\n\t\t\t} else {\n\n\t\t\t\t// console.log( id, chunkSize, childChunks );\n\n\t\t\t\ti += chunkSize;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn chunks;\n\n\t}\n\n}\n\n/**\n * A VOX mesh.\n *\n * Instances of this class are created from the loaded chunks of {@link VOXLoader}.\n *\n * @augments Mesh\n */\nclass VOXMesh extends Mesh {\n\n\t/**\n\t * Constructs a new VOX mesh.\n\t *\n\t * @param {Object} chunk - A VOX chunk loaded via {@link VOXLoader}.\n\t */\n\tconstructor( chunk ) {\n\n\t\tconst data = chunk.data;\n\t\tconst size = chunk.size;\n\t\tconst palette = chunk.palette;\n\n\t\t//\n\n\t\tconst vertices = [];\n\t\tconst colors = [];\n\n\t\tconst nx = [ 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1 ];\n\t\tconst px = [ 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0 ];\n\t\tconst py = [ 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1 ];\n\t\tconst ny = [ 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0 ];\n\t\tconst nz = [ 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0 ];\n\t\tconst pz = [ 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1 ];\n\n\t\tconst _color = new Color();\n\n\t\tfunction add( tile, x, y, z, r, g, b ) {\n\n\t\t\tx -= size.x / 2;\n\t\t\ty -= size.z / 2;\n\t\t\tz += size.y / 2;\n\n\t\t\tfor ( let i = 0; i < 18; i += 3 ) {\n\n\t\t\t\t_color.setRGB( r, g, b, SRGBColorSpace );\n\n\t\t\t\tvertices.push( tile[ i + 0 ] + x, tile[ i + 1 ] + y, tile[ i + 2 ] + z );\n\t\t\t\tcolors.push( _color.r, _color.g, _color.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Store data in a volume for sampling\n\n\t\tconst offsety = size.x;\n\t\tconst offsetz = size.x * size.y;\n\n\t\tconst array = new Uint8Array( size.x * size.y * size.z );\n\n\t\tfor ( let j = 0; j < data.length; j += 4 ) {\n\n\t\t\tconst x = data[ j + 0 ];\n\t\t\tconst y = data[ j + 1 ];\n\t\t\tconst z = data[ j + 2 ];\n\n\t\t\tconst index = x + ( y * offsety ) + ( z * offsetz );\n\n\t\t\tarray[ index ] = 255;\n\n\t\t}\n\n\t\t// Construct geometry\n\n\t\tlet hasColors = false;\n\n\t\tfor ( let j = 0; j < data.length; j += 4 ) {\n\n\t\t\tconst x = data[ j + 0 ];\n\t\t\tconst y = data[ j + 1 ];\n\t\t\tconst z = data[ j + 2 ];\n\t\t\tconst c = data[ j + 3 ];\n\n\t\t\tconst hex = palette[ c ];\n\t\t\tconst r = ( hex >> 0 & 0xff ) / 0xff;\n\t\t\tconst g = ( hex >> 8 & 0xff ) / 0xff;\n\t\t\tconst b = ( hex >> 16 & 0xff ) / 0xff;\n\n\t\t\tif ( r > 0 || g > 0 || b > 0 ) hasColors = true;\n\n\t\t\tconst index = x + ( y * offsety ) + ( z * offsetz );\n\n\t\t\tif ( array[ index + 1 ] === 0 || x === size.x - 1 ) add( px, x, z, - y, r, g, b );\n\t\t\tif ( array[ index - 1 ] === 0 || x === 0 ) add( nx, x, z, - y, r, g, b );\n\t\t\tif ( array[ index + offsety ] === 0 || y === size.y - 1 ) add( ny, x, z, - y, r, g, b );\n\t\t\tif ( array[ index - offsety ] === 0 || y === 0 ) add( py, x, z, - y, r, g, b );\n\t\t\tif ( array[ index + offsetz ] === 0 || z === size.z - 1 ) add( pz, x, z, - y, r, g, b );\n\t\t\tif ( array[ index - offsetz ] === 0 || z === 0 ) add( nz, x, z, - y, r, g, b );\n\n\t\t}\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.computeVertexNormals();\n\n\t\tconst material = new MeshStandardMaterial();\n\n\t\tif ( hasColors ) {\n\n\t\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\t\t\tmaterial.vertexColors = true;\n\n\t\t}\n\n\t\tsuper( geometry, material );\n\n\t}\n\n}\n\n/**\n * A VOX 3D texture.\n *\n * Instances of this class are created from the loaded chunks of {@link VOXLoader}.\n *\n * @augments Data3DTexture\n */\nclass VOXData3DTexture extends Data3DTexture {\n\n\t/**\n\t * Constructs a new VOX 3D texture.\n\t *\n\t * @param {Object} chunk - A VOX chunk loaded via {@link VOXLoader}.\n\t */\n\tconstructor( chunk ) {\n\n\t\tconst data = chunk.data;\n\t\tconst size = chunk.size;\n\n\t\tconst offsety = size.x;\n\t\tconst offsetz = size.x * size.y;\n\n\t\tconst array = new Uint8Array( size.x * size.y * size.z );\n\n\t\tfor ( let j = 0; j < data.length; j += 4 ) {\n\n\t\t\tconst x = data[ j + 0 ];\n\t\t\tconst y = data[ j + 1 ];\n\t\t\tconst z = data[ j + 2 ];\n\n\t\t\tconst index = x + ( y * offsety ) + ( z * offsetz );\n\n\t\t\tarray[ index ] = 255;\n\n\t\t}\n\n\t\tsuper( array, size.x, size.y, size.z );\n\n\t\tthis.format = RedFormat;\n\t\tthis.minFilter = NearestFilter;\n\t\tthis.magFilter = LinearFilter;\n\t\tthis.unpackAlignment = 1;\n\t\tthis.needsUpdate = true;\n\n\t}\n\n}\n\nexport { VOXLoader, VOXMesh, VOXData3DTexture };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}