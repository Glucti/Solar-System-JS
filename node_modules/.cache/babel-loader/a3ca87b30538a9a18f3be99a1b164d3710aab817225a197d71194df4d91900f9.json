{"ast":null,"code":"import { CylinderGeometry, CanvasTexture, Color, Euler, Mesh, MeshBasicMaterial, Object3D, OrthographicCamera, Quaternion, Raycaster, Sprite, SpriteMaterial, SRGBColorSpace, Vector2, Vector3, Vector4 } from 'three';\n\n/**\n * A special type of helper that visualizes the camera's transformation\n * in a small viewport area as an axes helper. Such a helper is often wanted\n * in 3D modeling tools or scene editors like the [three.js editor]{@link https://threejs.org/editor}.\n *\n * The helper allows to click on the X, Y and Z axes which animates the camera\n * so it looks along the selected axis.\n *\n * @augments Object3D\n * @three_import import { ViewHelper } from 'three/addons/helpers/ViewHelper.js';\n */\nclass ViewHelper extends Object3D {\n  /**\n   * Constructs a new view helper.\n   *\n   * @param {Camera} camera - The camera whose transformation should be visualized.\n   * @param {HTMLDOMElement} [domElement] - The DOM element that is used to render the view.\n   */\n  constructor(camera, domElement) {\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isViewHelper = true;\n\n    /**\n     * Whether the helper is currently animating or not.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default false\n     */\n    this.animating = false;\n\n    /**\n     * The helper's center point.\n     *\n     * @type {Vector3}\n     */\n    this.center = new Vector3();\n    const color1 = new Color('#ff4466');\n    const color2 = new Color('#88ff44');\n    const color3 = new Color('#4488ff');\n    const color4 = new Color('#000000');\n    const options = {};\n    const interactiveObjects = [];\n    const raycaster = new Raycaster();\n    const mouse = new Vector2();\n    const dummy = new Object3D();\n    const orthoCamera = new OrthographicCamera(-2, 2, 2, -2, 0, 4);\n    orthoCamera.position.set(0, 0, 2);\n    const geometry = new CylinderGeometry(0.04, 0.04, 0.8, 5).rotateZ(-Math.PI / 2).translate(0.4, 0, 0);\n    const xAxis = new Mesh(geometry, getAxisMaterial(color1));\n    const yAxis = new Mesh(geometry, getAxisMaterial(color2));\n    const zAxis = new Mesh(geometry, getAxisMaterial(color3));\n    yAxis.rotation.z = Math.PI / 2;\n    zAxis.rotation.y = -Math.PI / 2;\n    this.add(xAxis);\n    this.add(zAxis);\n    this.add(yAxis);\n    const spriteMaterial1 = getSpriteMaterial(color1);\n    const spriteMaterial2 = getSpriteMaterial(color2);\n    const spriteMaterial3 = getSpriteMaterial(color3);\n    const spriteMaterial4 = getSpriteMaterial(color4);\n    const posXAxisHelper = new Sprite(spriteMaterial1);\n    const posYAxisHelper = new Sprite(spriteMaterial2);\n    const posZAxisHelper = new Sprite(spriteMaterial3);\n    const negXAxisHelper = new Sprite(spriteMaterial4);\n    const negYAxisHelper = new Sprite(spriteMaterial4);\n    const negZAxisHelper = new Sprite(spriteMaterial4);\n    posXAxisHelper.position.x = 1;\n    posYAxisHelper.position.y = 1;\n    posZAxisHelper.position.z = 1;\n    negXAxisHelper.position.x = -1;\n    negYAxisHelper.position.y = -1;\n    negZAxisHelper.position.z = -1;\n    negXAxisHelper.material.opacity = 0.2;\n    negYAxisHelper.material.opacity = 0.2;\n    negZAxisHelper.material.opacity = 0.2;\n    posXAxisHelper.userData.type = 'posX';\n    posYAxisHelper.userData.type = 'posY';\n    posZAxisHelper.userData.type = 'posZ';\n    negXAxisHelper.userData.type = 'negX';\n    negYAxisHelper.userData.type = 'negY';\n    negZAxisHelper.userData.type = 'negZ';\n    this.add(posXAxisHelper);\n    this.add(posYAxisHelper);\n    this.add(posZAxisHelper);\n    this.add(negXAxisHelper);\n    this.add(negYAxisHelper);\n    this.add(negZAxisHelper);\n    interactiveObjects.push(posXAxisHelper);\n    interactiveObjects.push(posYAxisHelper);\n    interactiveObjects.push(posZAxisHelper);\n    interactiveObjects.push(negXAxisHelper);\n    interactiveObjects.push(negYAxisHelper);\n    interactiveObjects.push(negZAxisHelper);\n    const point = new Vector3();\n    const dim = 128;\n    const turnRate = 2 * Math.PI; // turn rate in angles per second\n\n    /**\n     * Renders the helper in a separate view in the bottom-right corner\n     * of the viewport.\n     *\n     * @param {WebGLRenderer|WebGPURenderer} renderer - The renderer.\n     */\n    this.render = function (renderer) {\n      this.quaternion.copy(camera.quaternion).invert();\n      this.updateMatrixWorld();\n      point.set(0, 0, 1);\n      point.applyQuaternion(camera.quaternion);\n\n      //\n\n      const x = domElement.offsetWidth - dim;\n      const y = renderer.isWebGPURenderer ? domElement.offsetHeight - dim : 0;\n      renderer.clearDepth();\n      renderer.getViewport(viewport);\n      renderer.setViewport(x, y, dim, dim);\n      renderer.render(this, orthoCamera);\n      renderer.setViewport(viewport.x, viewport.y, viewport.z, viewport.w);\n    };\n    const targetPosition = new Vector3();\n    const targetQuaternion = new Quaternion();\n    const q1 = new Quaternion();\n    const q2 = new Quaternion();\n    const viewport = new Vector4();\n    let radius = 0;\n\n    /**\n     * This method should be called when a click or pointer event\n     * has happened in the app.\n     *\n     * @param {PointerEvent} event - The event to process.\n     * @return {boolean} Whether an intersection with the helper has been detected or not.\n     */\n    this.handleClick = function (event) {\n      if (this.animating === true) return false;\n      const rect = domElement.getBoundingClientRect();\n      const offsetX = rect.left + (domElement.offsetWidth - dim);\n      const offsetY = rect.top + (domElement.offsetHeight - dim);\n      mouse.x = (event.clientX - offsetX) / (rect.right - offsetX) * 2 - 1;\n      mouse.y = -((event.clientY - offsetY) / (rect.bottom - offsetY)) * 2 + 1;\n      raycaster.setFromCamera(mouse, orthoCamera);\n      const intersects = raycaster.intersectObjects(interactiveObjects);\n      if (intersects.length > 0) {\n        const intersection = intersects[0];\n        const object = intersection.object;\n        prepareAnimationData(object, this.center);\n        this.animating = true;\n        return true;\n      } else {\n        return false;\n      }\n    };\n\n    /**\n     * Sets labels for each axis. By default, they are unlabeled.\n     *\n     * @param {string|undefined} labelX - The label for the x-axis.\n     * @param {string|undefined} labelY - The label for the y-axis.\n     * @param {string|undefined} labelZ - The label for the z-axis.\n     */\n    this.setLabels = function (labelX, labelY, labelZ) {\n      options.labelX = labelX;\n      options.labelY = labelY;\n      options.labelZ = labelZ;\n      updateLabels();\n    };\n\n    /**\n     * Sets the label style. Has no effect when the axes are unlabeled.\n     *\n     * @param {string} [font='24px Arial'] - The label font.\n     * @param {string} [color='#000000'] - The label color.\n     * @param {number} [radius=14] - The label radius.\n     */\n    this.setLabelStyle = function (font, color, radius) {\n      options.font = font;\n      options.color = color;\n      options.radius = radius;\n      updateLabels();\n    };\n\n    /**\n     * Updates the helper. This method should be called in the app's animation\n     * loop.\n     *\n     * @param {number} delta - The delta time in seconds.\n     */\n    this.update = function (delta) {\n      const step = delta * turnRate;\n\n      // animate position by doing a slerp and then scaling the position on the unit sphere\n\n      q1.rotateTowards(q2, step);\n      camera.position.set(0, 0, 1).applyQuaternion(q1).multiplyScalar(radius).add(this.center);\n\n      // animate orientation\n\n      camera.quaternion.rotateTowards(targetQuaternion, step);\n      if (q1.angleTo(q2) === 0) {\n        this.animating = false;\n      }\n    };\n\n    /**\n     * Frees the GPU-related resources allocated by this instance. Call this\n     * method whenever this instance is no longer used in your app.\n     */\n    this.dispose = function () {\n      geometry.dispose();\n      xAxis.material.dispose();\n      yAxis.material.dispose();\n      zAxis.material.dispose();\n      posXAxisHelper.material.map.dispose();\n      posYAxisHelper.material.map.dispose();\n      posZAxisHelper.material.map.dispose();\n      negXAxisHelper.material.map.dispose();\n      negYAxisHelper.material.map.dispose();\n      negZAxisHelper.material.map.dispose();\n      posXAxisHelper.material.dispose();\n      posYAxisHelper.material.dispose();\n      posZAxisHelper.material.dispose();\n      negXAxisHelper.material.dispose();\n      negYAxisHelper.material.dispose();\n      negZAxisHelper.material.dispose();\n    };\n    function prepareAnimationData(object, focusPoint) {\n      switch (object.userData.type) {\n        case 'posX':\n          targetPosition.set(1, 0, 0);\n          targetQuaternion.setFromEuler(new Euler(0, Math.PI * 0.5, 0));\n          break;\n        case 'posY':\n          targetPosition.set(0, 1, 0);\n          targetQuaternion.setFromEuler(new Euler(-Math.PI * 0.5, 0, 0));\n          break;\n        case 'posZ':\n          targetPosition.set(0, 0, 1);\n          targetQuaternion.setFromEuler(new Euler());\n          break;\n        case 'negX':\n          targetPosition.set(-1, 0, 0);\n          targetQuaternion.setFromEuler(new Euler(0, -Math.PI * 0.5, 0));\n          break;\n        case 'negY':\n          targetPosition.set(0, -1, 0);\n          targetQuaternion.setFromEuler(new Euler(Math.PI * 0.5, 0, 0));\n          break;\n        case 'negZ':\n          targetPosition.set(0, 0, -1);\n          targetQuaternion.setFromEuler(new Euler(0, Math.PI, 0));\n          break;\n        default:\n          console.error('ViewHelper: Invalid axis.');\n      }\n\n      //\n\n      radius = camera.position.distanceTo(focusPoint);\n      targetPosition.multiplyScalar(radius).add(focusPoint);\n      dummy.position.copy(focusPoint);\n      dummy.lookAt(camera.position);\n      q1.copy(dummy.quaternion);\n      dummy.lookAt(targetPosition);\n      q2.copy(dummy.quaternion);\n    }\n    function getAxisMaterial(color) {\n      return new MeshBasicMaterial({\n        color: color,\n        toneMapped: false\n      });\n    }\n    function getSpriteMaterial(color, text) {\n      const {\n        font = '24px Arial',\n        color: labelColor = '#000000',\n        radius = 14\n      } = options;\n      const canvas = document.createElement('canvas');\n      canvas.width = 64;\n      canvas.height = 64;\n      const context = canvas.getContext('2d');\n      context.beginPath();\n      context.arc(32, 32, radius, 0, 2 * Math.PI);\n      context.closePath();\n      context.fillStyle = color.getStyle();\n      context.fill();\n      if (text) {\n        context.font = font;\n        context.textAlign = 'center';\n        context.fillStyle = labelColor;\n        context.fillText(text, 32, 41);\n      }\n      const texture = new CanvasTexture(canvas);\n      texture.colorSpace = SRGBColorSpace;\n      return new SpriteMaterial({\n        map: texture,\n        toneMapped: false\n      });\n    }\n    function updateLabels() {\n      posXAxisHelper.material.map.dispose();\n      posYAxisHelper.material.map.dispose();\n      posZAxisHelper.material.map.dispose();\n      posXAxisHelper.material.dispose();\n      posYAxisHelper.material.dispose();\n      posZAxisHelper.material.dispose();\n      posXAxisHelper.material = getSpriteMaterial(color1, options.labelX);\n      posYAxisHelper.material = getSpriteMaterial(color2, options.labelY);\n      posZAxisHelper.material = getSpriteMaterial(color3, options.labelZ);\n    }\n  }\n}\nexport { ViewHelper };","map":{"version":3,"names":["CylinderGeometry","CanvasTexture","Color","Euler","Mesh","MeshBasicMaterial","Object3D","OrthographicCamera","Quaternion","Raycaster","Sprite","SpriteMaterial","SRGBColorSpace","Vector2","Vector3","Vector4","ViewHelper","constructor","camera","domElement","isViewHelper","animating","center","color1","color2","color3","color4","options","interactiveObjects","raycaster","mouse","dummy","orthoCamera","position","set","geometry","rotateZ","Math","PI","translate","xAxis","getAxisMaterial","yAxis","zAxis","rotation","z","y","add","spriteMaterial1","getSpriteMaterial","spriteMaterial2","spriteMaterial3","spriteMaterial4","posXAxisHelper","posYAxisHelper","posZAxisHelper","negXAxisHelper","negYAxisHelper","negZAxisHelper","x","material","opacity","userData","type","push","point","dim","turnRate","render","renderer","quaternion","copy","invert","updateMatrixWorld","applyQuaternion","offsetWidth","isWebGPURenderer","offsetHeight","clearDepth","getViewport","viewport","setViewport","w","targetPosition","targetQuaternion","q1","q2","radius","handleClick","event","rect","getBoundingClientRect","offsetX","left","offsetY","top","clientX","right","clientY","bottom","setFromCamera","intersects","intersectObjects","length","intersection","object","prepareAnimationData","setLabels","labelX","labelY","labelZ","updateLabels","setLabelStyle","font","color","update","delta","step","rotateTowards","multiplyScalar","angleTo","dispose","map","focusPoint","setFromEuler","console","error","distanceTo","lookAt","toneMapped","text","labelColor","canvas","document","createElement","width","height","context","getContext","beginPath","arc","closePath","fillStyle","getStyle","fill","textAlign","fillText","texture","colorSpace"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/helpers/ViewHelper.js"],"sourcesContent":["import {\n\tCylinderGeometry,\n\tCanvasTexture,\n\tColor,\n\tEuler,\n\tMesh,\n\tMeshBasicMaterial,\n\tObject3D,\n\tOrthographicCamera,\n\tQuaternion,\n\tRaycaster,\n\tSprite,\n\tSpriteMaterial,\n\tSRGBColorSpace,\n\tVector2,\n\tVector3,\n\tVector4\n} from 'three';\n\n/**\n * A special type of helper that visualizes the camera's transformation\n * in a small viewport area as an axes helper. Such a helper is often wanted\n * in 3D modeling tools or scene editors like the [three.js editor]{@link https://threejs.org/editor}.\n *\n * The helper allows to click on the X, Y and Z axes which animates the camera\n * so it looks along the selected axis.\n *\n * @augments Object3D\n * @three_import import { ViewHelper } from 'three/addons/helpers/ViewHelper.js';\n */\nclass ViewHelper extends Object3D {\n\n\t/**\n\t * Constructs a new view helper.\n\t *\n\t * @param {Camera} camera - The camera whose transformation should be visualized.\n\t * @param {HTMLDOMElement} [domElement] - The DOM element that is used to render the view.\n\t */\n\tconstructor( camera, domElement ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isViewHelper = true;\n\n\t\t/**\n\t\t * Whether the helper is currently animating or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default false\n\t\t */\n\t\tthis.animating = false;\n\n\t\t/**\n\t\t * The helper's center point.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.center = new Vector3();\n\n\t\tconst color1 = new Color( '#ff4466' );\n\t\tconst color2 = new Color( '#88ff44' );\n\t\tconst color3 = new Color( '#4488ff' );\n\t\tconst color4 = new Color( '#000000' );\n\n\t\tconst options = {};\n\n\t\tconst interactiveObjects = [];\n\t\tconst raycaster = new Raycaster();\n\t\tconst mouse = new Vector2();\n\t\tconst dummy = new Object3D();\n\n\t\tconst orthoCamera = new OrthographicCamera( - 2, 2, 2, - 2, 0, 4 );\n\t\torthoCamera.position.set( 0, 0, 2 );\n\n\t\tconst geometry = new CylinderGeometry( 0.04, 0.04, 0.8, 5 ).rotateZ( - Math.PI / 2 ).translate( 0.4, 0, 0 );\n\n\t\tconst xAxis = new Mesh( geometry, getAxisMaterial( color1 ) );\n\t\tconst yAxis = new Mesh( geometry, getAxisMaterial( color2 ) );\n\t\tconst zAxis = new Mesh( geometry, getAxisMaterial( color3 ) );\n\n\t\tyAxis.rotation.z = Math.PI / 2;\n\t\tzAxis.rotation.y = - Math.PI / 2;\n\n\t\tthis.add( xAxis );\n\t\tthis.add( zAxis );\n\t\tthis.add( yAxis );\n\n\t\tconst spriteMaterial1 = getSpriteMaterial( color1 );\n\t\tconst spriteMaterial2 = getSpriteMaterial( color2 );\n\t\tconst spriteMaterial3 = getSpriteMaterial( color3 );\n\t\tconst spriteMaterial4 = getSpriteMaterial( color4 );\n\n\t\tconst posXAxisHelper = new Sprite( spriteMaterial1 );\n\t\tconst posYAxisHelper = new Sprite( spriteMaterial2 );\n\t\tconst posZAxisHelper = new Sprite( spriteMaterial3 );\n\t\tconst negXAxisHelper = new Sprite( spriteMaterial4 );\n\t\tconst negYAxisHelper = new Sprite( spriteMaterial4 );\n\t\tconst negZAxisHelper = new Sprite( spriteMaterial4 );\n\n\t\tposXAxisHelper.position.x = 1;\n\t\tposYAxisHelper.position.y = 1;\n\t\tposZAxisHelper.position.z = 1;\n\t\tnegXAxisHelper.position.x = - 1;\n\t\tnegYAxisHelper.position.y = - 1;\n\t\tnegZAxisHelper.position.z = - 1;\n\n\t\tnegXAxisHelper.material.opacity = 0.2;\n\t\tnegYAxisHelper.material.opacity = 0.2;\n\t\tnegZAxisHelper.material.opacity = 0.2;\n\n\t\tposXAxisHelper.userData.type = 'posX';\n\t\tposYAxisHelper.userData.type = 'posY';\n\t\tposZAxisHelper.userData.type = 'posZ';\n\t\tnegXAxisHelper.userData.type = 'negX';\n\t\tnegYAxisHelper.userData.type = 'negY';\n\t\tnegZAxisHelper.userData.type = 'negZ';\n\n\t\tthis.add( posXAxisHelper );\n\t\tthis.add( posYAxisHelper );\n\t\tthis.add( posZAxisHelper );\n\t\tthis.add( negXAxisHelper );\n\t\tthis.add( negYAxisHelper );\n\t\tthis.add( negZAxisHelper );\n\n\t\tinteractiveObjects.push( posXAxisHelper );\n\t\tinteractiveObjects.push( posYAxisHelper );\n\t\tinteractiveObjects.push( posZAxisHelper );\n\t\tinteractiveObjects.push( negXAxisHelper );\n\t\tinteractiveObjects.push( negYAxisHelper );\n\t\tinteractiveObjects.push( negZAxisHelper );\n\n\t\tconst point = new Vector3();\n\t\tconst dim = 128;\n\t\tconst turnRate = 2 * Math.PI; // turn rate in angles per second\n\n\t\t/**\n\t\t * Renders the helper in a separate view in the bottom-right corner\n\t\t * of the viewport.\n\t\t *\n\t\t * @param {WebGLRenderer|WebGPURenderer} renderer - The renderer.\n\t\t */\n\t\tthis.render = function ( renderer ) {\n\n\t\t\tthis.quaternion.copy( camera.quaternion ).invert();\n\t\t\tthis.updateMatrixWorld();\n\n\t\t\tpoint.set( 0, 0, 1 );\n\t\t\tpoint.applyQuaternion( camera.quaternion );\n\n\t\t\t//\n\n\t\t\tconst x = domElement.offsetWidth - dim;\n\t\t\tconst y = renderer.isWebGPURenderer ? domElement.offsetHeight - dim : 0;\n\n\t\t\trenderer.clearDepth();\n\n\t\t\trenderer.getViewport( viewport );\n\t\t\trenderer.setViewport( x, y, dim, dim );\n\n\t\t\trenderer.render( this, orthoCamera );\n\n\t\t\trenderer.setViewport( viewport.x, viewport.y, viewport.z, viewport.w );\n\n\t\t};\n\n\t\tconst targetPosition = new Vector3();\n\t\tconst targetQuaternion = new Quaternion();\n\n\t\tconst q1 = new Quaternion();\n\t\tconst q2 = new Quaternion();\n\t\tconst viewport = new Vector4();\n\t\tlet radius = 0;\n\n\t\t/**\n\t\t * This method should be called when a click or pointer event\n\t\t * has happened in the app.\n\t\t *\n\t\t * @param {PointerEvent} event - The event to process.\n\t\t * @return {boolean} Whether an intersection with the helper has been detected or not.\n\t\t */\n\t\tthis.handleClick = function ( event ) {\n\n\t\t\tif ( this.animating === true ) return false;\n\n\t\t\tconst rect = domElement.getBoundingClientRect();\n\t\t\tconst offsetX = rect.left + ( domElement.offsetWidth - dim );\n\t\t\tconst offsetY = rect.top + ( domElement.offsetHeight - dim );\n\t\t\tmouse.x = ( ( event.clientX - offsetX ) / ( rect.right - offsetX ) ) * 2 - 1;\n\t\t\tmouse.y = - ( ( event.clientY - offsetY ) / ( rect.bottom - offsetY ) ) * 2 + 1;\n\n\t\t\traycaster.setFromCamera( mouse, orthoCamera );\n\n\t\t\tconst intersects = raycaster.intersectObjects( interactiveObjects );\n\n\t\t\tif ( intersects.length > 0 ) {\n\n\t\t\t\tconst intersection = intersects[ 0 ];\n\t\t\t\tconst object = intersection.object;\n\n\t\t\t\tprepareAnimationData( object, this.center );\n\n\t\t\t\tthis.animating = true;\n\n\t\t\t\treturn true;\n\n\t\t\t} else {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t};\n\n\t\t/**\n\t\t * Sets labels for each axis. By default, they are unlabeled.\n\t\t *\n\t\t * @param {string|undefined} labelX - The label for the x-axis.\n\t\t * @param {string|undefined} labelY - The label for the y-axis.\n\t\t * @param {string|undefined} labelZ - The label for the z-axis.\n\t\t */\n\t\tthis.setLabels = function ( labelX, labelY, labelZ ) {\n\n\t\t\toptions.labelX = labelX;\n\t\t\toptions.labelY = labelY;\n\t\t\toptions.labelZ = labelZ;\n\n\t\t\tupdateLabels();\n\n\t\t};\n\n\t\t/**\n\t\t * Sets the label style. Has no effect when the axes are unlabeled.\n\t\t *\n\t\t * @param {string} [font='24px Arial'] - The label font.\n\t\t * @param {string} [color='#000000'] - The label color.\n\t\t * @param {number} [radius=14] - The label radius.\n\t\t */\n\t\tthis.setLabelStyle = function ( font, color, radius ) {\n\n\t\t\toptions.font = font;\n\t\t\toptions.color = color;\n\t\t\toptions.radius = radius;\n\n\t\t\tupdateLabels();\n\n\t\t};\n\n\t\t/**\n\t\t * Updates the helper. This method should be called in the app's animation\n\t\t * loop.\n\t\t *\n\t\t * @param {number} delta - The delta time in seconds.\n\t\t */\n\t\tthis.update = function ( delta ) {\n\n\t\t\tconst step = delta * turnRate;\n\n\t\t\t// animate position by doing a slerp and then scaling the position on the unit sphere\n\n\t\t\tq1.rotateTowards( q2, step );\n\t\t\tcamera.position.set( 0, 0, 1 ).applyQuaternion( q1 ).multiplyScalar( radius ).add( this.center );\n\n\t\t\t// animate orientation\n\n\t\t\tcamera.quaternion.rotateTowards( targetQuaternion, step );\n\n\t\t\tif ( q1.angleTo( q2 ) === 0 ) {\n\n\t\t\t\tthis.animating = false;\n\n\t\t\t}\n\n\t\t};\n\n\t\t/**\n\t\t * Frees the GPU-related resources allocated by this instance. Call this\n\t\t * method whenever this instance is no longer used in your app.\n\t\t */\n\t\tthis.dispose = function () {\n\n\t\t\tgeometry.dispose();\n\n\t\t\txAxis.material.dispose();\n\t\t\tyAxis.material.dispose();\n\t\t\tzAxis.material.dispose();\n\n\t\t\tposXAxisHelper.material.map.dispose();\n\t\t\tposYAxisHelper.material.map.dispose();\n\t\t\tposZAxisHelper.material.map.dispose();\n\t\t\tnegXAxisHelper.material.map.dispose();\n\t\t\tnegYAxisHelper.material.map.dispose();\n\t\t\tnegZAxisHelper.material.map.dispose();\n\n\t\t\tposXAxisHelper.material.dispose();\n\t\t\tposYAxisHelper.material.dispose();\n\t\t\tposZAxisHelper.material.dispose();\n\t\t\tnegXAxisHelper.material.dispose();\n\t\t\tnegYAxisHelper.material.dispose();\n\t\t\tnegZAxisHelper.material.dispose();\n\n\t\t};\n\n\t\tfunction prepareAnimationData( object, focusPoint ) {\n\n\t\t\tswitch ( object.userData.type ) {\n\n\t\t\t\tcase 'posX':\n\t\t\t\t\ttargetPosition.set( 1, 0, 0 );\n\t\t\t\t\ttargetQuaternion.setFromEuler( new Euler( 0, Math.PI * 0.5, 0 ) );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'posY':\n\t\t\t\t\ttargetPosition.set( 0, 1, 0 );\n\t\t\t\t\ttargetQuaternion.setFromEuler( new Euler( - Math.PI * 0.5, 0, 0 ) );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'posZ':\n\t\t\t\t\ttargetPosition.set( 0, 0, 1 );\n\t\t\t\t\ttargetQuaternion.setFromEuler( new Euler() );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'negX':\n\t\t\t\t\ttargetPosition.set( - 1, 0, 0 );\n\t\t\t\t\ttargetQuaternion.setFromEuler( new Euler( 0, - Math.PI * 0.5, 0 ) );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'negY':\n\t\t\t\t\ttargetPosition.set( 0, - 1, 0 );\n\t\t\t\t\ttargetQuaternion.setFromEuler( new Euler( Math.PI * 0.5, 0, 0 ) );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'negZ':\n\t\t\t\t\ttargetPosition.set( 0, 0, - 1 );\n\t\t\t\t\ttargetQuaternion.setFromEuler( new Euler( 0, Math.PI, 0 ) );\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.error( 'ViewHelper: Invalid axis.' );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tradius = camera.position.distanceTo( focusPoint );\n\t\t\ttargetPosition.multiplyScalar( radius ).add( focusPoint );\n\n\t\t\tdummy.position.copy( focusPoint );\n\n\t\t\tdummy.lookAt( camera.position );\n\t\t\tq1.copy( dummy.quaternion );\n\n\t\t\tdummy.lookAt( targetPosition );\n\t\t\tq2.copy( dummy.quaternion );\n\n\t\t}\n\n\t\tfunction getAxisMaterial( color ) {\n\n\t\t\treturn new MeshBasicMaterial( { color: color, toneMapped: false } );\n\n\t\t}\n\n\t\tfunction getSpriteMaterial( color, text ) {\n\n\t\t\tconst { font = '24px Arial', color: labelColor = '#000000', radius = 14 } = options;\n\n\t\t\tconst canvas = document.createElement( 'canvas' );\n\t\t\tcanvas.width = 64;\n\t\t\tcanvas.height = 64;\n\n\t\t\tconst context = canvas.getContext( '2d' );\n\t\t\tcontext.beginPath();\n\t\t\tcontext.arc( 32, 32, radius, 0, 2 * Math.PI );\n\t\t\tcontext.closePath();\n\t\t\tcontext.fillStyle = color.getStyle();\n\t\t\tcontext.fill();\n\n\t\t\tif ( text ) {\n\n\t\t\t\tcontext.font = font;\n\t\t\t\tcontext.textAlign = 'center';\n\t\t\t\tcontext.fillStyle = labelColor;\n\t\t\t\tcontext.fillText( text, 32, 41 );\n\n\t\t\t}\n\n\t\t\tconst texture = new CanvasTexture( canvas );\n\t\t\ttexture.colorSpace = SRGBColorSpace;\n\n\t\t\treturn new SpriteMaterial( { map: texture, toneMapped: false } );\n\n\t\t}\n\n\t\tfunction updateLabels() {\n\n\t\t\tposXAxisHelper.material.map.dispose();\n\t\t\tposYAxisHelper.material.map.dispose();\n\t\t\tposZAxisHelper.material.map.dispose();\n\n\t\t\tposXAxisHelper.material.dispose();\n\t\t\tposYAxisHelper.material.dispose();\n\t\t\tposZAxisHelper.material.dispose();\n\n\t\t\tposXAxisHelper.material = getSpriteMaterial( color1, options.labelX );\n\t\t\tposYAxisHelper.material = getSpriteMaterial( color2, options.labelY );\n\t\t\tposZAxisHelper.material = getSpriteMaterial( color3, options.labelZ );\n\n\t\t}\n\n\t}\n\n}\n\nexport { ViewHelper };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}