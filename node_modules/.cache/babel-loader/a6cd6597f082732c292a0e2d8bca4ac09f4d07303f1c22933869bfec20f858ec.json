{"ast":null,"code":"import { ShaderMaterial, UniformsUtils } from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { DotScreenShader } from '../shaders/DotScreenShader.js';\n\n/**\n * Pass for creating a dot-screen effect.\n *\n * ```js\n * const pass = new DotScreenPass( new THREE.Vector2( 0, 0 ), 0.5, 0.8 );\n * composer.addPass( pass );\n * ```\n *\n * @augments Pass\n * @three_import import { DotScreenPass } from 'three/addons/postprocessing/DotScreenPass.js';\n */\nclass DotScreenPass extends Pass {\n  /**\n   * Constructs a new dot screen pass.\n   *\n   * @param {Vector2} center - The center point.\n   * @param {number} angle - The rotation of the effect in radians.\n   * @param {number} scale - The scale of the effect. A higher value means smaller dots.\n   */\n  constructor(center, angle, scale) {\n    super();\n\n    /**\n     * The pass uniforms. Use this object if you want to update the\n     * `center`, `angle` or `scale` values at runtime.\n     * ```js\n     * pass.uniforms.center.value.copy( center );\n     * pass.uniforms.angle.value = 0;\n     * pass.uniforms.scale.value = 0.5;\n     * ```\n     *\n     * @type {Object}\n     */\n    this.uniforms = UniformsUtils.clone(DotScreenShader.uniforms);\n    if (center !== undefined) this.uniforms['center'].value.copy(center);\n    if (angle !== undefined) this.uniforms['angle'].value = angle;\n    if (scale !== undefined) this.uniforms['scale'].value = scale;\n\n    /**\n     * The pass material.\n     *\n     * @type {ShaderMaterial}\n     */\n    this.material = new ShaderMaterial({\n      name: DotScreenShader.name,\n      uniforms: this.uniforms,\n      vertexShader: DotScreenShader.vertexShader,\n      fragmentShader: DotScreenShader.fragmentShader\n    });\n\n    // internals\n\n    this._fsQuad = new FullScreenQuad(this.material);\n  }\n\n  /**\n   * Performs the dot screen pass.\n   *\n   * @param {WebGLRenderer} renderer - The renderer.\n   * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\n   * destination for the pass.\n   * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\n   * previous pass from this buffer.\n   * @param {number} deltaTime - The delta time in seconds.\n   * @param {boolean} maskActive - Whether masking is active or not.\n   */\n  render(renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */) {\n    this.uniforms['tDiffuse'].value = readBuffer.texture;\n    this.uniforms['tSize'].value.set(readBuffer.width, readBuffer.height);\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this._fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      this._fsQuad.render(renderer);\n    }\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever the pass is no longer used in your app.\n   */\n  dispose() {\n    this.material.dispose();\n    this._fsQuad.dispose();\n  }\n}\nexport { DotScreenPass };","map":{"version":3,"names":["ShaderMaterial","UniformsUtils","Pass","FullScreenQuad","DotScreenShader","DotScreenPass","constructor","center","angle","scale","uniforms","clone","undefined","value","copy","material","name","vertexShader","fragmentShader","_fsQuad","render","renderer","writeBuffer","readBuffer","texture","set","width","height","renderToScreen","setRenderTarget","clear","dispose"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/postprocessing/DotScreenPass.js"],"sourcesContent":["import {\n\tShaderMaterial,\n\tUniformsUtils\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { DotScreenShader } from '../shaders/DotScreenShader.js';\n\n/**\n * Pass for creating a dot-screen effect.\n *\n * ```js\n * const pass = new DotScreenPass( new THREE.Vector2( 0, 0 ), 0.5, 0.8 );\n * composer.addPass( pass );\n * ```\n *\n * @augments Pass\n * @three_import import { DotScreenPass } from 'three/addons/postprocessing/DotScreenPass.js';\n */\nclass DotScreenPass extends Pass {\n\n\t/**\n\t * Constructs a new dot screen pass.\n\t *\n\t * @param {Vector2} center - The center point.\n\t * @param {number} angle - The rotation of the effect in radians.\n\t * @param {number} scale - The scale of the effect. A higher value means smaller dots.\n\t */\n\tconstructor( center, angle, scale ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The pass uniforms. Use this object if you want to update the\n\t\t * `center`, `angle` or `scale` values at runtime.\n\t\t * ```js\n\t\t * pass.uniforms.center.value.copy( center );\n\t\t * pass.uniforms.angle.value = 0;\n\t\t * pass.uniforms.scale.value = 0.5;\n\t\t * ```\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.uniforms = UniformsUtils.clone( DotScreenShader.uniforms );\n\n\t\tif ( center !== undefined ) this.uniforms[ 'center' ].value.copy( center );\n\t\tif ( angle !== undefined ) this.uniforms[ 'angle' ].value = angle;\n\t\tif ( scale !== undefined ) this.uniforms[ 'scale' ].value = scale;\n\n\t\t/**\n\t\t * The pass material.\n\t\t *\n\t\t * @type {ShaderMaterial}\n\t\t */\n\t\tthis.material = new ShaderMaterial( {\n\n\t\t\tname: DotScreenShader.name,\n\t\t\tuniforms: this.uniforms,\n\t\t\tvertexShader: DotScreenShader.vertexShader,\n\t\t\tfragmentShader: DotScreenShader.fragmentShader\n\n\t\t} );\n\n\t\t// internals\n\n\t\tthis._fsQuad = new FullScreenQuad( this.material );\n\n\t}\n\n\t/**\n\t * Performs the dot screen pass.\n\t *\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\n\t * destination for the pass.\n\t * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\n\t * previous pass from this buffer.\n\t * @param {number} deltaTime - The delta time in seconds.\n\t * @param {boolean} maskActive - Whether masking is active or not.\n\t */\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tthis.uniforms[ 'tDiffuse' ].value = readBuffer.texture;\n\t\tthis.uniforms[ 'tSize' ].value.set( readBuffer.width, readBuffer.height );\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis._fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\tif ( this.clear ) renderer.clear();\n\t\t\tthis._fsQuad.render( renderer );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever the pass is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.material.dispose();\n\n\t\tthis._fsQuad.dispose();\n\n\t}\n\n}\n\nexport { DotScreenPass };\n"],"mappings":"AAAA,SACCA,cAAc,EACdC,aAAa,QACP,OAAO;AACd,SAASC,IAAI,EAAEC,cAAc,QAAQ,WAAW;AAChD,SAASC,eAAe,QAAQ,+BAA+B;;AAE/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,aAAa,SAASH,IAAI,CAAC;EAEhC;AACD;AACA;AACA;AACA;AACA;AACA;EACCI,WAAWA,CAAEC,MAAM,EAAEC,KAAK,EAAEC,KAAK,EAAG;IAEnC,KAAK,CAAC,CAAC;;IAEP;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,QAAQ,GAAGT,aAAa,CAACU,KAAK,CAAEP,eAAe,CAACM,QAAS,CAAC;IAE/D,IAAKH,MAAM,KAAKK,SAAS,EAAG,IAAI,CAACF,QAAQ,CAAE,QAAQ,CAAE,CAACG,KAAK,CAACC,IAAI,CAAEP,MAAO,CAAC;IAC1E,IAAKC,KAAK,KAAKI,SAAS,EAAG,IAAI,CAACF,QAAQ,CAAE,OAAO,CAAE,CAACG,KAAK,GAAGL,KAAK;IACjE,IAAKC,KAAK,KAAKG,SAAS,EAAG,IAAI,CAACF,QAAQ,CAAE,OAAO,CAAE,CAACG,KAAK,GAAGJ,KAAK;;IAEjE;AACF;AACA;AACA;AACA;IACE,IAAI,CAACM,QAAQ,GAAG,IAAIf,cAAc,CAAE;MAEnCgB,IAAI,EAAEZ,eAAe,CAACY,IAAI;MAC1BN,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBO,YAAY,EAAEb,eAAe,CAACa,YAAY;MAC1CC,cAAc,EAAEd,eAAe,CAACc;IAEjC,CAAE,CAAC;;IAEH;;IAEA,IAAI,CAACC,OAAO,GAAG,IAAIhB,cAAc,CAAE,IAAI,CAACY,QAAS,CAAC;EAEnD;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCK,MAAMA,CAAEC,QAAQ,EAAEC,WAAW,EAAEC,UAAU,CAAC,8BAA+B;IAExE,IAAI,CAACb,QAAQ,CAAE,UAAU,CAAE,CAACG,KAAK,GAAGU,UAAU,CAACC,OAAO;IACtD,IAAI,CAACd,QAAQ,CAAE,OAAO,CAAE,CAACG,KAAK,CAACY,GAAG,CAAEF,UAAU,CAACG,KAAK,EAAEH,UAAU,CAACI,MAAO,CAAC;IAEzE,IAAK,IAAI,CAACC,cAAc,EAAG;MAE1BP,QAAQ,CAACQ,eAAe,CAAE,IAAK,CAAC;MAChC,IAAI,CAACV,OAAO,CAACC,MAAM,CAAEC,QAAS,CAAC;IAEhC,CAAC,MAAM;MAENA,QAAQ,CAACQ,eAAe,CAAEP,WAAY,CAAC;MACvC,IAAK,IAAI,CAACQ,KAAK,EAAGT,QAAQ,CAACS,KAAK,CAAC,CAAC;MAClC,IAAI,CAACX,OAAO,CAACC,MAAM,CAAEC,QAAS,CAAC;IAEhC;EAED;;EAEA;AACD;AACA;AACA;EACCU,OAAOA,CAAA,EAAG;IAET,IAAI,CAAChB,QAAQ,CAACgB,OAAO,CAAC,CAAC;IAEvB,IAAI,CAACZ,OAAO,CAACY,OAAO,CAAC,CAAC;EAEvB;AAED;AAEA,SAAS1B,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}