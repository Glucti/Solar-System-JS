{"ast":null,"code":"import { Color } from 'three';\nimport { Pass } from './Pass.js';\n\n/**\n * This class can be used to force a clear operation for the current read or\n * default framebuffer (when rendering to screen).\n *\n * ```js\n * const clearPass = new ClearPass();\n * composer.addPass( clearPass );\n * ```\n *\n * @augments Pass\n * @three_import import { ClearPass } from 'three/addons/postprocessing/ClearPass.js';\n */\nclass ClearPass extends Pass {\n  /**\n   * Constructs a new clear pass.\n   *\n   * @param {(number|Color|string)} [clearColor=0x000000] - The clear color.\n   * @param {number} [clearAlpha=0] - The clear alpha.\n   */\n  constructor(clearColor = 0x000000, clearAlpha = 0) {\n    super();\n\n    /**\n     * Overwritten to disable the swap.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.needsSwap = false;\n\n    /**\n     * The clear color.\n     *\n     * @type {(number|Color|string)}\n     * @default 0x000000\n     */\n    this.clearColor = clearColor;\n\n    /**\n     * The clear alpha.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.clearAlpha = clearAlpha;\n\n    // internals\n\n    this._oldClearColor = new Color();\n  }\n\n  /**\n   * Performs the clear operation. This affects the current read or the default framebuffer.\n   *\n   * @param {WebGLRenderer} renderer - The renderer.\n   * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\n   * destination for the pass.\n   * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\n   * previous pass from this buffer.\n   * @param {number} deltaTime - The delta time in seconds.\n   * @param {boolean} maskActive - Whether masking is active or not.\n   */\n  render(renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */) {\n    let oldClearAlpha;\n    if (this.clearColor) {\n      renderer.getClearColor(this._oldClearColor);\n      oldClearAlpha = renderer.getClearAlpha();\n      renderer.setClearColor(this.clearColor, this.clearAlpha);\n    }\n    renderer.setRenderTarget(this.renderToScreen ? null : readBuffer);\n    renderer.clear();\n    if (this.clearColor) {\n      renderer.setClearColor(this._oldClearColor, oldClearAlpha);\n    }\n  }\n}\nexport { ClearPass };","map":{"version":3,"names":["Color","Pass","ClearPass","constructor","clearColor","clearAlpha","needsSwap","_oldClearColor","render","renderer","writeBuffer","readBuffer","oldClearAlpha","getClearColor","getClearAlpha","setClearColor","setRenderTarget","renderToScreen","clear"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/postprocessing/ClearPass.js"],"sourcesContent":["import {\n\tColor\n} from 'three';\nimport { Pass } from './Pass.js';\n\n/**\n * This class can be used to force a clear operation for the current read or\n * default framebuffer (when rendering to screen).\n *\n * ```js\n * const clearPass = new ClearPass();\n * composer.addPass( clearPass );\n * ```\n *\n * @augments Pass\n * @three_import import { ClearPass } from 'three/addons/postprocessing/ClearPass.js';\n */\nclass ClearPass extends Pass {\n\n\t/**\n\t * Constructs a new clear pass.\n\t *\n\t * @param {(number|Color|string)} [clearColor=0x000000] - The clear color.\n\t * @param {number} [clearAlpha=0] - The clear alpha.\n\t */\n\tconstructor( clearColor = 0x000000, clearAlpha = 0 ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * Overwritten to disable the swap.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.needsSwap = false;\n\n\t\t/**\n\t\t * The clear color.\n\t\t *\n\t\t * @type {(number|Color|string)}\n\t\t * @default 0x000000\n\t\t */\n\t\tthis.clearColor = clearColor;\n\n\t\t/**\n\t\t * The clear alpha.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.clearAlpha = clearAlpha;\n\n\t\t// internals\n\n\t\tthis._oldClearColor = new Color();\n\n\t}\n\n\t/**\n\t * Performs the clear operation. This affects the current read or the default framebuffer.\n\t *\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\n\t * destination for the pass.\n\t * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\n\t * previous pass from this buffer.\n\t * @param {number} deltaTime - The delta time in seconds.\n\t * @param {boolean} maskActive - Whether masking is active or not.\n\t */\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tlet oldClearAlpha;\n\n\t\tif ( this.clearColor ) {\n\n\t\t\trenderer.getClearColor( this._oldClearColor );\n\t\t\toldClearAlpha = renderer.getClearAlpha();\n\n\t\t\trenderer.setClearColor( this.clearColor, this.clearAlpha );\n\n\t\t}\n\n\t\trenderer.setRenderTarget( this.renderToScreen ? null : readBuffer );\n\t\trenderer.clear();\n\n\t\tif ( this.clearColor ) {\n\n\t\t\trenderer.setClearColor( this._oldClearColor, oldClearAlpha );\n\n\t\t}\n\n\t}\n\n}\n\nexport { ClearPass };\n"],"mappings":"AAAA,SACCA,KAAK,QACC,OAAO;AACd,SAASC,IAAI,QAAQ,WAAW;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,SAAS,SAASD,IAAI,CAAC;EAE5B;AACD;AACA;AACA;AACA;AACA;EACCE,WAAWA,CAAEC,UAAU,GAAG,QAAQ,EAAEC,UAAU,GAAG,CAAC,EAAG;IAEpD,KAAK,CAAC,CAAC;;IAEP;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,SAAS,GAAG,KAAK;;IAEtB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACF,UAAU,GAAGA,UAAU;;IAE5B;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,UAAU,GAAGA,UAAU;;IAE5B;;IAEA,IAAI,CAACE,cAAc,GAAG,IAAIP,KAAK,CAAC,CAAC;EAElC;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCQ,MAAMA,CAAEC,QAAQ,EAAEC,WAAW,EAAEC,UAAU,CAAC,8BAA+B;IAExE,IAAIC,aAAa;IAEjB,IAAK,IAAI,CAACR,UAAU,EAAG;MAEtBK,QAAQ,CAACI,aAAa,CAAE,IAAI,CAACN,cAAe,CAAC;MAC7CK,aAAa,GAAGH,QAAQ,CAACK,aAAa,CAAC,CAAC;MAExCL,QAAQ,CAACM,aAAa,CAAE,IAAI,CAACX,UAAU,EAAE,IAAI,CAACC,UAAW,CAAC;IAE3D;IAEAI,QAAQ,CAACO,eAAe,CAAE,IAAI,CAACC,cAAc,GAAG,IAAI,GAAGN,UAAW,CAAC;IACnEF,QAAQ,CAACS,KAAK,CAAC,CAAC;IAEhB,IAAK,IAAI,CAACd,UAAU,EAAG;MAEtBK,QAAQ,CAACM,aAAa,CAAE,IAAI,CAACR,cAAc,EAAEK,aAAc,CAAC;IAE7D;EAED;AAED;AAEA,SAASV,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}