{"ast":null,"code":"import { AnimationClip, AnimationMixer, Mesh } from 'three';\n\n/**\n * A special type of an animated mesh with a simple interface\n * for animation playback. It allows to playback just one animation\n * without any transitions or fading between animation changes.\n *\n * @augments Mesh\n * @three_import import { MorphAnimMesh } from 'three/addons/misc/MorphAnimMesh.js';\n */\nclass MorphAnimMesh extends Mesh {\n  /**\n   * Constructs a new morph anim mesh.\n   *\n   * @param {BufferGeometry} [geometry] - The mesh geometry.\n   * @param {Material|Array<Material>} [material] - The mesh material.\n   */\n  constructor(geometry, material) {\n    super(geometry, material);\n    this.type = 'MorphAnimMesh';\n\n    /**\n     * The internal animation mixer.\n     *\n     * @type {AnimationMixer}\n     */\n    this.mixer = new AnimationMixer(this);\n\n    /**\n     * The current active animation action.\n     *\n     * @type {?AnimationAction}\n     * @default null\n     */\n    this.activeAction = null;\n  }\n\n  /**\n   * Sets the animation playback direction to \"forward\".\n   */\n  setDirectionForward() {\n    this.mixer.timeScale = 1.0;\n  }\n\n  /**\n   * Sets the animation playback direction to \"backward\".\n   */\n  setDirectionBackward() {\n    this.mixer.timeScale = -1.0;\n  }\n\n  /**\n   * Plays the defined animation clip. The implementation assumes the animation\n   * clips are stored in {@link Object3D#animations} or the geometry.\n   *\n   * @param {string} label - The name of the animation clip.\n   * @param {number} fps - The FPS of the animation clip.\n   */\n  playAnimation(label, fps) {\n    if (this.activeAction) {\n      this.activeAction.stop();\n      this.activeAction = null;\n    }\n    const clip = AnimationClip.findByName(this, label);\n    if (clip) {\n      const action = this.mixer.clipAction(clip);\n      action.timeScale = clip.tracks.length * fps / clip.duration;\n      this.activeAction = action.play();\n    } else {\n      throw new Error('THREE.MorphAnimMesh: animations[' + label + '] undefined in .playAnimation()');\n    }\n  }\n\n  /**\n   * Updates the animations of the mesh. Must be called inside the animation loop.\n   *\n   * @param {number} delta - The delta time in seconds.\n   */\n  updateAnimation(delta) {\n    this.mixer.update(delta);\n  }\n  copy(source, recursive) {\n    super.copy(source, recursive);\n    this.mixer = new AnimationMixer(this);\n    return this;\n  }\n}\nexport { MorphAnimMesh };","map":{"version":3,"names":["AnimationClip","AnimationMixer","Mesh","MorphAnimMesh","constructor","geometry","material","type","mixer","activeAction","setDirectionForward","timeScale","setDirectionBackward","playAnimation","label","fps","stop","clip","findByName","action","clipAction","tracks","length","duration","play","Error","updateAnimation","delta","update","copy","source","recursive"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/misc/MorphAnimMesh.js"],"sourcesContent":["import {\n\tAnimationClip,\n\tAnimationMixer,\n\tMesh\n} from 'three';\n\n/**\n * A special type of an animated mesh with a simple interface\n * for animation playback. It allows to playback just one animation\n * without any transitions or fading between animation changes.\n *\n * @augments Mesh\n * @three_import import { MorphAnimMesh } from 'three/addons/misc/MorphAnimMesh.js';\n */\nclass MorphAnimMesh extends Mesh {\n\n\t/**\n\t * Constructs a new morph anim mesh.\n\t *\n\t * @param {BufferGeometry} [geometry] - The mesh geometry.\n\t * @param {Material|Array<Material>} [material] - The mesh material.\n\t */\n\tconstructor( geometry, material ) {\n\n\t\tsuper( geometry, material );\n\n\t\tthis.type = 'MorphAnimMesh';\n\n\t\t/**\n\t\t * The internal animation mixer.\n\t\t *\n\t\t * @type {AnimationMixer}\n\t\t */\n\t\tthis.mixer = new AnimationMixer( this );\n\n\t\t/**\n\t\t * The current active animation action.\n\t\t *\n\t\t * @type {?AnimationAction}\n\t\t * @default null\n\t\t */\n\t\tthis.activeAction = null;\n\n\t}\n\n\t/**\n\t * Sets the animation playback direction to \"forward\".\n\t */\n\tsetDirectionForward() {\n\n\t\tthis.mixer.timeScale = 1.0;\n\n\t}\n\n\t/**\n\t * Sets the animation playback direction to \"backward\".\n\t */\n\tsetDirectionBackward() {\n\n\t\tthis.mixer.timeScale = - 1.0;\n\n\t}\n\n\t/**\n\t * Plays the defined animation clip. The implementation assumes the animation\n\t * clips are stored in {@link Object3D#animations} or the geometry.\n\t *\n\t * @param {string} label - The name of the animation clip.\n\t * @param {number} fps - The FPS of the animation clip.\n\t */\n\tplayAnimation( label, fps ) {\n\n\t\tif ( this.activeAction ) {\n\n\t\t\tthis.activeAction.stop();\n\t\t\tthis.activeAction = null;\n\n\t\t}\n\n\t\tconst clip = AnimationClip.findByName( this, label );\n\n\t\tif ( clip ) {\n\n\t\t\tconst action = this.mixer.clipAction( clip );\n\t\t\taction.timeScale = ( clip.tracks.length * fps ) / clip.duration;\n\t\t\tthis.activeAction = action.play();\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.MorphAnimMesh: animations[' + label + '] undefined in .playAnimation()' );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Updates the animations of the mesh. Must be called inside the animation loop.\n\t *\n\t * @param {number} delta - The delta time in seconds.\n\t */\n\tupdateAnimation( delta ) {\n\n\t\tthis.mixer.update( delta );\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.mixer = new AnimationMixer( this );\n\n\t\treturn this;\n\n\t}\n\n}\n\nexport { MorphAnimMesh };\n"],"mappings":"AAAA,SACCA,aAAa,EACbC,cAAc,EACdC,IAAI,QACE,OAAO;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,aAAa,SAASD,IAAI,CAAC;EAEhC;AACD;AACA;AACA;AACA;AACA;EACCE,WAAWA,CAAEC,QAAQ,EAAEC,QAAQ,EAAG;IAEjC,KAAK,CAAED,QAAQ,EAAEC,QAAS,CAAC;IAE3B,IAAI,CAACC,IAAI,GAAG,eAAe;;IAE3B;AACF;AACA;AACA;AACA;IACE,IAAI,CAACC,KAAK,GAAG,IAAIP,cAAc,CAAE,IAAK,CAAC;;IAEvC;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACQ,YAAY,GAAG,IAAI;EAEzB;;EAEA;AACD;AACA;EACCC,mBAAmBA,CAAA,EAAG;IAErB,IAAI,CAACF,KAAK,CAACG,SAAS,GAAG,GAAG;EAE3B;;EAEA;AACD;AACA;EACCC,oBAAoBA,CAAA,EAAG;IAEtB,IAAI,CAACJ,KAAK,CAACG,SAAS,GAAG,CAAE,GAAG;EAE7B;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;EACCE,aAAaA,CAAEC,KAAK,EAAEC,GAAG,EAAG;IAE3B,IAAK,IAAI,CAACN,YAAY,EAAG;MAExB,IAAI,CAACA,YAAY,CAACO,IAAI,CAAC,CAAC;MACxB,IAAI,CAACP,YAAY,GAAG,IAAI;IAEzB;IAEA,MAAMQ,IAAI,GAAGjB,aAAa,CAACkB,UAAU,CAAE,IAAI,EAAEJ,KAAM,CAAC;IAEpD,IAAKG,IAAI,EAAG;MAEX,MAAME,MAAM,GAAG,IAAI,CAACX,KAAK,CAACY,UAAU,CAAEH,IAAK,CAAC;MAC5CE,MAAM,CAACR,SAAS,GAAKM,IAAI,CAACI,MAAM,CAACC,MAAM,GAAGP,GAAG,GAAKE,IAAI,CAACM,QAAQ;MAC/D,IAAI,CAACd,YAAY,GAAGU,MAAM,CAACK,IAAI,CAAC,CAAC;IAElC,CAAC,MAAM;MAEN,MAAM,IAAIC,KAAK,CAAE,kCAAkC,GAAGX,KAAK,GAAG,iCAAkC,CAAC;IAElG;EAED;;EAEA;AACD;AACA;AACA;AACA;EACCY,eAAeA,CAAEC,KAAK,EAAG;IAExB,IAAI,CAACnB,KAAK,CAACoB,MAAM,CAAED,KAAM,CAAC;EAE3B;EAEAE,IAAIA,CAAEC,MAAM,EAAEC,SAAS,EAAG;IAEzB,KAAK,CAACF,IAAI,CAAEC,MAAM,EAAEC,SAAU,CAAC;IAE/B,IAAI,CAACvB,KAAK,GAAG,IAAIP,cAAc,CAAE,IAAK,CAAC;IAEvC,OAAO,IAAI;EAEZ;AAED;AAEA,SAASE,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}