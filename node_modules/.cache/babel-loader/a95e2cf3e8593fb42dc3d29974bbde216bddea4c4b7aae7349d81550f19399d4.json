{"ast":null,"code":"import { BoxGeometry, BufferGeometry, Controls, CylinderGeometry, DoubleSide, Euler, Float32BufferAttribute, Line, LineBasicMaterial, Matrix4, Mesh, MeshBasicMaterial, Object3D, OctahedronGeometry, PlaneGeometry, Quaternion, Raycaster, SphereGeometry, TorusGeometry, Vector3 } from 'three';\nconst _raycaster = new Raycaster();\nconst _tempVector = new Vector3();\nconst _tempVector2 = new Vector3();\nconst _tempQuaternion = new Quaternion();\nconst _unit = {\n  X: new Vector3(1, 0, 0),\n  Y: new Vector3(0, 1, 0),\n  Z: new Vector3(0, 0, 1)\n};\n\n/**\n * Fires if any type of change (object or property change) is performed. Property changes\n * are separate events you can add event listeners to. The event type is \"propertyname-changed\".\n *\n * @event TransformControls#change\n * @type {Object}\n */\nconst _changeEvent = {\n  type: 'change'\n};\n\n/**\n * Fires if a pointer (mouse/touch) becomes active.\n *\n * @event TransformControls#mouseDown\n * @type {Object}\n */\nconst _mouseDownEvent = {\n  type: 'mouseDown',\n  mode: null\n};\n\n/**\n * Fires if a pointer (mouse/touch) is no longer active.\n *\n * @event TransformControls#mouseUp\n * @type {Object}\n */\nconst _mouseUpEvent = {\n  type: 'mouseUp',\n  mode: null\n};\n\n/**\n * Fires if the controlled 3D object is changed.\n *\n * @event TransformControls#objectChange\n * @type {Object}\n */\nconst _objectChangeEvent = {\n  type: 'objectChange'\n};\n\n/**\n * This class can be used to transform objects in 3D space by adapting a similar interaction model\n * of DCC tools like Blender. Unlike other controls, it is not intended to transform the scene's camera.\n *\n * `TransformControls` expects that its attached 3D object is part of the scene graph.\n *\n * @augments Controls\n * @three_import import { TransformControls } from 'three/addons/controls/TransformControls.js';\n */\nclass TransformControls extends Controls {\n  /**\n   * Constructs a new controls instance.\n   *\n   * @param {Camera} camera - The camera of the rendered scene.\n   * @param {?HTMLDOMElement} domElement - The HTML element used for event listeners.\n   */\n  constructor(camera, domElement = null) {\n    super(undefined, domElement);\n    const root = new TransformControlsRoot(this);\n    this._root = root;\n    const gizmo = new TransformControlsGizmo();\n    this._gizmo = gizmo;\n    root.add(gizmo);\n    const plane = new TransformControlsPlane();\n    this._plane = plane;\n    root.add(plane);\n    const scope = this;\n\n    // Defined getter, setter and store for a property\n    function defineProperty(propName, defaultValue) {\n      let propValue = defaultValue;\n      Object.defineProperty(scope, propName, {\n        get: function () {\n          return propValue !== undefined ? propValue : defaultValue;\n        },\n        set: function (value) {\n          if (propValue !== value) {\n            propValue = value;\n            plane[propName] = value;\n            gizmo[propName] = value;\n            scope.dispatchEvent({\n              type: propName + '-changed',\n              value: value\n            });\n            scope.dispatchEvent(_changeEvent);\n          }\n        }\n      });\n      scope[propName] = defaultValue;\n      plane[propName] = defaultValue;\n      gizmo[propName] = defaultValue;\n    }\n\n    // Define properties with getters/setter\n    // Setting the defined property will automatically trigger change event\n    // Defined properties are passed down to gizmo and plane\n\n    /**\n     * The camera of the rendered scene.\n     *\n     * @name TransformControls#camera\n     * @type {Camera}\n     */\n    defineProperty('camera', camera);\n    defineProperty('object', undefined);\n    defineProperty('enabled', true);\n\n    /**\n     * The current transformation axis.\n     *\n     * @name TransformControls#axis\n     * @type {string}\n     */\n    defineProperty('axis', null);\n\n    /**\n     * The current transformation axis.\n     *\n     * @name TransformControls#mode\n     * @type {('translate'|'rotate'|'scale')}\n     * @default 'translate'\n     */\n    defineProperty('mode', 'translate');\n\n    /**\n     * By default, 3D objects are continuously translated. If you set this property to a numeric\n     * value (world units), you can define in which steps the 3D object should be translated.\n     *\n     * @name TransformControls#translationSnap\n     * @type {?number}\n     * @default null\n     */\n    defineProperty('translationSnap', null);\n\n    /**\n     * By default, 3D objects are continuously rotated. If you set this property to a numeric\n     * value (radians), you can define in which steps the 3D object should be rotated.\n     *\n     * @name TransformControls#rotationSnap\n     * @type {?number}\n     * @default null\n     */\n    defineProperty('rotationSnap', null);\n\n    /**\n     * By default, 3D objects are continuously scaled. If you set this property to a numeric\n     * value, you can define in which steps the 3D object should be scaled.\n     *\n     * @name TransformControls#scaleSnap\n     * @type {?number}\n     * @default null\n     */\n    defineProperty('scaleSnap', null);\n\n    /**\n     * Defines in which coordinate space transformations should be performed.\n     *\n     * @name TransformControls#space\n     * @type {('world'|'local')}\n     * @default 'world'\n     */\n    defineProperty('space', 'world');\n\n    /**\n     * The size of the helper UI (axes/planes).\n     *\n     * @name TransformControls#size\n     * @type {number}\n     * @default 1\n     */\n    defineProperty('size', 1);\n\n    /**\n     * Whether dragging is currently performed or not.\n     *\n     * @name TransformControls#dragging\n     * @type {boolean}\n     * @readonly\n     * @default false\n     */\n    defineProperty('dragging', false);\n\n    /**\n     * Whether the x-axis helper should be visible or not.\n     *\n     * @name TransformControls#showX\n     * @type {boolean}\n     * @default true\n     */\n    defineProperty('showX', true);\n\n    /**\n     * Whether the y-axis helper should be visible or not.\n     *\n     * @name TransformControls#showY\n     * @type {boolean}\n     * @default true\n     */\n    defineProperty('showY', true);\n\n    /**\n     * Whether the z-axis helper should be visible or not.\n     *\n     * @name TransformControls#showZ\n     * @type {boolean}\n     * @default true\n     */\n    defineProperty('showZ', true);\n\n    /**\n     * The minimum allowed X position during translation.\n     *\n     * @name TransformControls#minX\n     * @type {number}\n     * @default -Infinity\n     */\n    defineProperty('minX', -Infinity);\n\n    /**\n     * The maximum allowed X position during translation.\n     *\n     * @name TransformControls#maxX\n     * @type {number}\n     * @default Infinity\n     */\n    defineProperty('maxX', Infinity);\n\n    /**\n     * The minimum allowed y position during translation.\n     *\n     * @name TransformControls#minY\n     * @type {number}\n     * @default -Infinity\n     */\n    defineProperty('minY', -Infinity);\n\n    /**\n     * The maximum allowed Y position during translation.\n     *\n     * @name TransformControls#maxY\n     * @type {number}\n     * @default Infinity\n     */\n    defineProperty('maxY', Infinity);\n\n    /**\n     * The minimum allowed z position during translation.\n     *\n     * @name TransformControls#minZ\n     * @type {number}\n     * @default -Infinity\n     */\n    defineProperty('minZ', -Infinity);\n\n    /**\n     * The maximum allowed Z position during translation.\n     *\n     * @name TransformControls#maxZ\n     * @type {number}\n     * @default Infinity\n     */\n    defineProperty('maxZ', Infinity);\n\n    // Reusable utility variables\n\n    const worldPosition = new Vector3();\n    const worldPositionStart = new Vector3();\n    const worldQuaternion = new Quaternion();\n    const worldQuaternionStart = new Quaternion();\n    const cameraPosition = new Vector3();\n    const cameraQuaternion = new Quaternion();\n    const pointStart = new Vector3();\n    const pointEnd = new Vector3();\n    const rotationAxis = new Vector3();\n    const rotationAngle = 0;\n    const eye = new Vector3();\n\n    // TODO: remove properties unused in plane and gizmo\n\n    defineProperty('worldPosition', worldPosition);\n    defineProperty('worldPositionStart', worldPositionStart);\n    defineProperty('worldQuaternion', worldQuaternion);\n    defineProperty('worldQuaternionStart', worldQuaternionStart);\n    defineProperty('cameraPosition', cameraPosition);\n    defineProperty('cameraQuaternion', cameraQuaternion);\n    defineProperty('pointStart', pointStart);\n    defineProperty('pointEnd', pointEnd);\n    defineProperty('rotationAxis', rotationAxis);\n    defineProperty('rotationAngle', rotationAngle);\n    defineProperty('eye', eye);\n    this._offset = new Vector3();\n    this._startNorm = new Vector3();\n    this._endNorm = new Vector3();\n    this._cameraScale = new Vector3();\n    this._parentPosition = new Vector3();\n    this._parentQuaternion = new Quaternion();\n    this._parentQuaternionInv = new Quaternion();\n    this._parentScale = new Vector3();\n    this._worldScaleStart = new Vector3();\n    this._worldQuaternionInv = new Quaternion();\n    this._worldScale = new Vector3();\n    this._positionStart = new Vector3();\n    this._quaternionStart = new Quaternion();\n    this._scaleStart = new Vector3();\n    this._getPointer = getPointer.bind(this);\n    this._onPointerDown = onPointerDown.bind(this);\n    this._onPointerHover = onPointerHover.bind(this);\n    this._onPointerMove = onPointerMove.bind(this);\n    this._onPointerUp = onPointerUp.bind(this);\n    if (domElement !== null) {\n      this.connect(domElement);\n    }\n  }\n  connect(element) {\n    super.connect(element);\n    this.domElement.addEventListener('pointerdown', this._onPointerDown);\n    this.domElement.addEventListener('pointermove', this._onPointerHover);\n    this.domElement.addEventListener('pointerup', this._onPointerUp);\n    this.domElement.style.touchAction = 'none'; // disable touch scroll\n  }\n  disconnect() {\n    this.domElement.removeEventListener('pointerdown', this._onPointerDown);\n    this.domElement.removeEventListener('pointermove', this._onPointerHover);\n    this.domElement.removeEventListener('pointermove', this._onPointerMove);\n    this.domElement.removeEventListener('pointerup', this._onPointerUp);\n    this.domElement.style.touchAction = 'auto';\n  }\n\n  /**\n   * Returns the visual representation of the controls. Add the helper to your scene to\n   * visually transform the attached  3D object.\n   *\n   * @return {TransformControlsRoot} The helper.\n   */\n  getHelper() {\n    return this._root;\n  }\n  pointerHover(pointer) {\n    if (this.object === undefined || this.dragging === true) return;\n    if (pointer !== null) _raycaster.setFromCamera(pointer, this.camera);\n    const intersect = intersectObjectWithRay(this._gizmo.picker[this.mode], _raycaster);\n    if (intersect) {\n      this.axis = intersect.object.name;\n    } else {\n      this.axis = null;\n    }\n  }\n  pointerDown(pointer) {\n    if (this.object === undefined || this.dragging === true || pointer != null && pointer.button !== 0) return;\n    if (this.axis !== null) {\n      if (pointer !== null) _raycaster.setFromCamera(pointer, this.camera);\n      const planeIntersect = intersectObjectWithRay(this._plane, _raycaster, true);\n      if (planeIntersect) {\n        this.object.updateMatrixWorld();\n        this.object.parent.updateMatrixWorld();\n        this._positionStart.copy(this.object.position);\n        this._quaternionStart.copy(this.object.quaternion);\n        this._scaleStart.copy(this.object.scale);\n        this.object.matrixWorld.decompose(this.worldPositionStart, this.worldQuaternionStart, this._worldScaleStart);\n        this.pointStart.copy(planeIntersect.point).sub(this.worldPositionStart);\n      }\n      this.dragging = true;\n      _mouseDownEvent.mode = this.mode;\n      this.dispatchEvent(_mouseDownEvent);\n    }\n  }\n  pointerMove(pointer) {\n    const axis = this.axis;\n    const mode = this.mode;\n    const object = this.object;\n    let space = this.space;\n    if (mode === 'scale') {\n      space = 'local';\n    } else if (axis === 'E' || axis === 'XYZE' || axis === 'XYZ') {\n      space = 'world';\n    }\n    if (object === undefined || axis === null || this.dragging === false || pointer !== null && pointer.button !== -1) return;\n    if (pointer !== null) _raycaster.setFromCamera(pointer, this.camera);\n    const planeIntersect = intersectObjectWithRay(this._plane, _raycaster, true);\n    if (!planeIntersect) return;\n    this.pointEnd.copy(planeIntersect.point).sub(this.worldPositionStart);\n    if (mode === 'translate') {\n      // Apply translate\n\n      this._offset.copy(this.pointEnd).sub(this.pointStart);\n      if (space === 'local' && axis !== 'XYZ') {\n        this._offset.applyQuaternion(this._worldQuaternionInv);\n      }\n      if (axis.indexOf('X') === -1) this._offset.x = 0;\n      if (axis.indexOf('Y') === -1) this._offset.y = 0;\n      if (axis.indexOf('Z') === -1) this._offset.z = 0;\n      if (space === 'local' && axis !== 'XYZ') {\n        this._offset.applyQuaternion(this._quaternionStart).divide(this._parentScale);\n      } else {\n        this._offset.applyQuaternion(this._parentQuaternionInv).divide(this._parentScale);\n      }\n      object.position.copy(this._offset).add(this._positionStart);\n\n      // Apply translation snap\n\n      if (this.translationSnap) {\n        if (space === 'local') {\n          object.position.applyQuaternion(_tempQuaternion.copy(this._quaternionStart).invert());\n          if (axis.search('X') !== -1) {\n            object.position.x = Math.round(object.position.x / this.translationSnap) * this.translationSnap;\n          }\n          if (axis.search('Y') !== -1) {\n            object.position.y = Math.round(object.position.y / this.translationSnap) * this.translationSnap;\n          }\n          if (axis.search('Z') !== -1) {\n            object.position.z = Math.round(object.position.z / this.translationSnap) * this.translationSnap;\n          }\n          object.position.applyQuaternion(this._quaternionStart);\n        }\n        if (space === 'world') {\n          if (object.parent) {\n            object.position.add(_tempVector.setFromMatrixPosition(object.parent.matrixWorld));\n          }\n          if (axis.search('X') !== -1) {\n            object.position.x = Math.round(object.position.x / this.translationSnap) * this.translationSnap;\n          }\n          if (axis.search('Y') !== -1) {\n            object.position.y = Math.round(object.position.y / this.translationSnap) * this.translationSnap;\n          }\n          if (axis.search('Z') !== -1) {\n            object.position.z = Math.round(object.position.z / this.translationSnap) * this.translationSnap;\n          }\n          if (object.parent) {\n            object.position.sub(_tempVector.setFromMatrixPosition(object.parent.matrixWorld));\n          }\n        }\n      }\n      object.position.x = Math.max(this.minX, Math.min(this.maxX, object.position.x));\n      object.position.y = Math.max(this.minY, Math.min(this.maxY, object.position.y));\n      object.position.z = Math.max(this.minZ, Math.min(this.maxZ, object.position.z));\n    } else if (mode === 'scale') {\n      if (axis.search('XYZ') !== -1) {\n        let d = this.pointEnd.length() / this.pointStart.length();\n        if (this.pointEnd.dot(this.pointStart) < 0) d *= -1;\n        _tempVector2.set(d, d, d);\n      } else {\n        _tempVector.copy(this.pointStart);\n        _tempVector2.copy(this.pointEnd);\n        _tempVector.applyQuaternion(this._worldQuaternionInv);\n        _tempVector2.applyQuaternion(this._worldQuaternionInv);\n        _tempVector2.divide(_tempVector);\n        if (axis.search('X') === -1) {\n          _tempVector2.x = 1;\n        }\n        if (axis.search('Y') === -1) {\n          _tempVector2.y = 1;\n        }\n        if (axis.search('Z') === -1) {\n          _tempVector2.z = 1;\n        }\n      }\n\n      // Apply scale\n\n      object.scale.copy(this._scaleStart).multiply(_tempVector2);\n      if (this.scaleSnap) {\n        if (axis.search('X') !== -1) {\n          object.scale.x = Math.round(object.scale.x / this.scaleSnap) * this.scaleSnap || this.scaleSnap;\n        }\n        if (axis.search('Y') !== -1) {\n          object.scale.y = Math.round(object.scale.y / this.scaleSnap) * this.scaleSnap || this.scaleSnap;\n        }\n        if (axis.search('Z') !== -1) {\n          object.scale.z = Math.round(object.scale.z / this.scaleSnap) * this.scaleSnap || this.scaleSnap;\n        }\n      }\n    } else if (mode === 'rotate') {\n      this._offset.copy(this.pointEnd).sub(this.pointStart);\n      const ROTATION_SPEED = 20 / this.worldPosition.distanceTo(_tempVector.setFromMatrixPosition(this.camera.matrixWorld));\n      let _inPlaneRotation = false;\n      if (axis === 'XYZE') {\n        this.rotationAxis.copy(this._offset).cross(this.eye).normalize();\n        this.rotationAngle = this._offset.dot(_tempVector.copy(this.rotationAxis).cross(this.eye)) * ROTATION_SPEED;\n      } else if (axis === 'X' || axis === 'Y' || axis === 'Z') {\n        this.rotationAxis.copy(_unit[axis]);\n        _tempVector.copy(_unit[axis]);\n        if (space === 'local') {\n          _tempVector.applyQuaternion(this.worldQuaternion);\n        }\n        _tempVector.cross(this.eye);\n\n        // When _tempVector is 0 after cross with this.eye the vectors are parallel and should use in-plane rotation logic.\n        if (_tempVector.length() === 0) {\n          _inPlaneRotation = true;\n        } else {\n          this.rotationAngle = this._offset.dot(_tempVector.normalize()) * ROTATION_SPEED;\n        }\n      }\n      if (axis === 'E' || _inPlaneRotation) {\n        this.rotationAxis.copy(this.eye);\n        this.rotationAngle = this.pointEnd.angleTo(this.pointStart);\n        this._startNorm.copy(this.pointStart).normalize();\n        this._endNorm.copy(this.pointEnd).normalize();\n        this.rotationAngle *= this._endNorm.cross(this._startNorm).dot(this.eye) < 0 ? 1 : -1;\n      }\n\n      // Apply rotation snap\n\n      if (this.rotationSnap) this.rotationAngle = Math.round(this.rotationAngle / this.rotationSnap) * this.rotationSnap;\n\n      // Apply rotate\n      if (space === 'local' && axis !== 'E' && axis !== 'XYZE') {\n        object.quaternion.copy(this._quaternionStart);\n        object.quaternion.multiply(_tempQuaternion.setFromAxisAngle(this.rotationAxis, this.rotationAngle)).normalize();\n      } else {\n        this.rotationAxis.applyQuaternion(this._parentQuaternionInv);\n        object.quaternion.copy(_tempQuaternion.setFromAxisAngle(this.rotationAxis, this.rotationAngle));\n        object.quaternion.multiply(this._quaternionStart).normalize();\n      }\n    }\n    this.dispatchEvent(_changeEvent);\n    this.dispatchEvent(_objectChangeEvent);\n  }\n  pointerUp(pointer) {\n    if (pointer !== null && pointer.button !== 0) return;\n    if (this.dragging && this.axis !== null) {\n      _mouseUpEvent.mode = this.mode;\n      this.dispatchEvent(_mouseUpEvent);\n    }\n    this.dragging = false;\n    this.axis = null;\n  }\n  dispose() {\n    this.disconnect();\n    this._root.dispose();\n  }\n\n  /**\n   * Sets the 3D object that should be transformed and ensures the controls UI is visible.\n   *\n   * @param {Object3D} object -  The 3D object that should be transformed.\n   * @return {TransformControls} A reference to this controls.\n   */\n  attach(object) {\n    this.object = object;\n    this._root.visible = true;\n    return this;\n  }\n\n  /**\n   * Removes the current 3D object from the controls and makes the helper UI invisible.\n   *\n   * @return {TransformControls} A reference to this controls.\n   */\n  detach() {\n    this.object = undefined;\n    this.axis = null;\n    this._root.visible = false;\n    return this;\n  }\n\n  /**\n   * Resets the object's position, rotation and scale to when the current transform began.\n   */\n  reset() {\n    if (!this.enabled) return;\n    if (this.dragging) {\n      this.object.position.copy(this._positionStart);\n      this.object.quaternion.copy(this._quaternionStart);\n      this.object.scale.copy(this._scaleStart);\n      this.dispatchEvent(_changeEvent);\n      this.dispatchEvent(_objectChangeEvent);\n      this.pointStart.copy(this.pointEnd);\n    }\n  }\n\n  /**\n   * Returns the raycaster that is used for user interaction. This object is shared between all\n   * instances of `TransformControls`.\n   *\n   * @returns {Raycaster} The internal raycaster.\n   */\n  getRaycaster() {\n    return _raycaster;\n  }\n\n  /**\n   * Returns the transformation mode.\n   *\n   * @returns {'translate'|'rotate'|'scale'} The transformation mode.\n   */\n  getMode() {\n    return this.mode;\n  }\n\n  /**\n   * Sets the given transformation mode.\n   *\n   * @param {'translate'|'rotate'|'scale'} mode - The transformation mode to set.\n   */\n  setMode(mode) {\n    this.mode = mode;\n  }\n\n  /**\n   * Sets the translation snap.\n   *\n   * @param {?number} translationSnap - The translation snap to set.\n   */\n  setTranslationSnap(translationSnap) {\n    this.translationSnap = translationSnap;\n  }\n\n  /**\n   * Sets the rotation snap.\n   *\n   * @param {?number} rotationSnap - The rotation snap to set.\n   */\n  setRotationSnap(rotationSnap) {\n    this.rotationSnap = rotationSnap;\n  }\n\n  /**\n   * Sets the scale snap.\n   *\n   * @param {?number} scaleSnap - The scale snap to set.\n   */\n  setScaleSnap(scaleSnap) {\n    this.scaleSnap = scaleSnap;\n  }\n\n  /**\n   * Sets the size of the helper UI.\n   *\n   * @param {number} size - The size to set.\n   */\n  setSize(size) {\n    this.size = size;\n  }\n\n  /**\n   * Sets the coordinate space in which transformations are applied.\n   *\n   * @param {'world'|'local'} space - The space to set.\n   */\n  setSpace(space) {\n    this.space = space;\n  }\n}\n\n// mouse / touch event handlers\n\nfunction getPointer(event) {\n  if (this.domElement.ownerDocument.pointerLockElement) {\n    return {\n      x: 0,\n      y: 0,\n      button: event.button\n    };\n  } else {\n    const rect = this.domElement.getBoundingClientRect();\n    return {\n      x: (event.clientX - rect.left) / rect.width * 2 - 1,\n      y: -(event.clientY - rect.top) / rect.height * 2 + 1,\n      button: event.button\n    };\n  }\n}\nfunction onPointerHover(event) {\n  if (!this.enabled) return;\n  switch (event.pointerType) {\n    case 'mouse':\n    case 'pen':\n      this.pointerHover(this._getPointer(event));\n      break;\n  }\n}\nfunction onPointerDown(event) {\n  if (!this.enabled) return;\n  if (!document.pointerLockElement) {\n    this.domElement.setPointerCapture(event.pointerId);\n  }\n  this.domElement.addEventListener('pointermove', this._onPointerMove);\n  this.pointerHover(this._getPointer(event));\n  this.pointerDown(this._getPointer(event));\n}\nfunction onPointerMove(event) {\n  if (!this.enabled) return;\n  this.pointerMove(this._getPointer(event));\n}\nfunction onPointerUp(event) {\n  if (!this.enabled) return;\n  this.domElement.releasePointerCapture(event.pointerId);\n  this.domElement.removeEventListener('pointermove', this._onPointerMove);\n  this.pointerUp(this._getPointer(event));\n}\nfunction intersectObjectWithRay(object, raycaster, includeInvisible) {\n  const allIntersections = raycaster.intersectObject(object, true);\n  for (let i = 0; i < allIntersections.length; i++) {\n    if (allIntersections[i].object.visible || includeInvisible) {\n      return allIntersections[i];\n    }\n  }\n  return false;\n}\n\n//\n\n// Reusable utility variables\n\nconst _tempEuler = new Euler();\nconst _alignVector = new Vector3(0, 1, 0);\nconst _zeroVector = new Vector3(0, 0, 0);\nconst _lookAtMatrix = new Matrix4();\nconst _tempQuaternion2 = new Quaternion();\nconst _identityQuaternion = new Quaternion();\nconst _dirVector = new Vector3();\nconst _tempMatrix = new Matrix4();\nconst _unitX = new Vector3(1, 0, 0);\nconst _unitY = new Vector3(0, 1, 0);\nconst _unitZ = new Vector3(0, 0, 1);\nconst _v1 = new Vector3();\nconst _v2 = new Vector3();\nconst _v3 = new Vector3();\nclass TransformControlsRoot extends Object3D {\n  constructor(controls) {\n    super();\n    this.isTransformControlsRoot = true;\n    this.controls = controls;\n    this.visible = false;\n  }\n\n  // updateMatrixWorld updates key transformation variables\n  updateMatrixWorld(force) {\n    const controls = this.controls;\n    if (controls.object !== undefined) {\n      controls.object.updateMatrixWorld();\n      if (controls.object.parent === null) {\n        console.error('TransformControls: The attached 3D object must be a part of the scene graph.');\n      } else {\n        controls.object.parent.matrixWorld.decompose(controls._parentPosition, controls._parentQuaternion, controls._parentScale);\n      }\n      controls.object.matrixWorld.decompose(controls.worldPosition, controls.worldQuaternion, controls._worldScale);\n      controls._parentQuaternionInv.copy(controls._parentQuaternion).invert();\n      controls._worldQuaternionInv.copy(controls.worldQuaternion).invert();\n    }\n    controls.camera.updateMatrixWorld();\n    controls.camera.matrixWorld.decompose(controls.cameraPosition, controls.cameraQuaternion, controls._cameraScale);\n    if (controls.camera.isOrthographicCamera) {\n      controls.camera.getWorldDirection(controls.eye).negate();\n    } else {\n      controls.eye.copy(controls.cameraPosition).sub(controls.worldPosition).normalize();\n    }\n    super.updateMatrixWorld(force);\n  }\n  dispose() {\n    this.traverse(function (child) {\n      if (child.geometry) child.geometry.dispose();\n      if (child.material) child.material.dispose();\n    });\n  }\n}\nclass TransformControlsGizmo extends Object3D {\n  constructor() {\n    super();\n    this.isTransformControlsGizmo = true;\n    this.type = 'TransformControlsGizmo';\n\n    // shared materials\n\n    const gizmoMaterial = new MeshBasicMaterial({\n      depthTest: false,\n      depthWrite: false,\n      fog: false,\n      toneMapped: false,\n      transparent: true\n    });\n    const gizmoLineMaterial = new LineBasicMaterial({\n      depthTest: false,\n      depthWrite: false,\n      fog: false,\n      toneMapped: false,\n      transparent: true\n    });\n\n    // Make unique material for each axis/color\n\n    const matInvisible = gizmoMaterial.clone();\n    matInvisible.opacity = 0.15;\n    const matHelper = gizmoLineMaterial.clone();\n    matHelper.opacity = 0.5;\n    const matRed = gizmoMaterial.clone();\n    matRed.color.setHex(0xff0000);\n    const matGreen = gizmoMaterial.clone();\n    matGreen.color.setHex(0x00ff00);\n    const matBlue = gizmoMaterial.clone();\n    matBlue.color.setHex(0x0000ff);\n    const matRedTransparent = gizmoMaterial.clone();\n    matRedTransparent.color.setHex(0xff0000);\n    matRedTransparent.opacity = 0.5;\n    const matGreenTransparent = gizmoMaterial.clone();\n    matGreenTransparent.color.setHex(0x00ff00);\n    matGreenTransparent.opacity = 0.5;\n    const matBlueTransparent = gizmoMaterial.clone();\n    matBlueTransparent.color.setHex(0x0000ff);\n    matBlueTransparent.opacity = 0.5;\n    const matWhiteTransparent = gizmoMaterial.clone();\n    matWhiteTransparent.opacity = 0.25;\n    const matYellowTransparent = gizmoMaterial.clone();\n    matYellowTransparent.color.setHex(0xffff00);\n    matYellowTransparent.opacity = 0.25;\n    const matYellow = gizmoMaterial.clone();\n    matYellow.color.setHex(0xffff00);\n    const matGray = gizmoMaterial.clone();\n    matGray.color.setHex(0x787878);\n\n    // reusable geometry\n\n    const arrowGeometry = new CylinderGeometry(0, 0.04, 0.1, 12);\n    arrowGeometry.translate(0, 0.05, 0);\n    const scaleHandleGeometry = new BoxGeometry(0.08, 0.08, 0.08);\n    scaleHandleGeometry.translate(0, 0.04, 0);\n    const lineGeometry = new BufferGeometry();\n    lineGeometry.setAttribute('position', new Float32BufferAttribute([0, 0, 0, 1, 0, 0], 3));\n    const lineGeometry2 = new CylinderGeometry(0.0075, 0.0075, 0.5, 3);\n    lineGeometry2.translate(0, 0.25, 0);\n    function CircleGeometry(radius, arc) {\n      const geometry = new TorusGeometry(radius, 0.0075, 3, 64, arc * Math.PI * 2);\n      geometry.rotateY(Math.PI / 2);\n      geometry.rotateX(Math.PI / 2);\n      return geometry;\n    }\n\n    // Special geometry for transform helper. If scaled with position vector it spans from [0,0,0] to position\n\n    function TranslateHelperGeometry() {\n      const geometry = new BufferGeometry();\n      geometry.setAttribute('position', new Float32BufferAttribute([0, 0, 0, 1, 1, 1], 3));\n      return geometry;\n    }\n\n    // Gizmo definitions - custom hierarchy definitions for setupGizmo() function\n\n    const gizmoTranslate = {\n      X: [[new Mesh(arrowGeometry, matRed), [0.5, 0, 0], [0, 0, -Math.PI / 2]], [new Mesh(arrowGeometry, matRed), [-0.5, 0, 0], [0, 0, Math.PI / 2]], [new Mesh(lineGeometry2, matRed), [0, 0, 0], [0, 0, -Math.PI / 2]]],\n      Y: [[new Mesh(arrowGeometry, matGreen), [0, 0.5, 0]], [new Mesh(arrowGeometry, matGreen), [0, -0.5, 0], [Math.PI, 0, 0]], [new Mesh(lineGeometry2, matGreen)]],\n      Z: [[new Mesh(arrowGeometry, matBlue), [0, 0, 0.5], [Math.PI / 2, 0, 0]], [new Mesh(arrowGeometry, matBlue), [0, 0, -0.5], [-Math.PI / 2, 0, 0]], [new Mesh(lineGeometry2, matBlue), null, [Math.PI / 2, 0, 0]]],\n      XYZ: [[new Mesh(new OctahedronGeometry(0.1, 0), matWhiteTransparent.clone()), [0, 0, 0]]],\n      XY: [[new Mesh(new BoxGeometry(0.15, 0.15, 0.01), matBlueTransparent.clone()), [0.15, 0.15, 0]]],\n      YZ: [[new Mesh(new BoxGeometry(0.15, 0.15, 0.01), matRedTransparent.clone()), [0, 0.15, 0.15], [0, Math.PI / 2, 0]]],\n      XZ: [[new Mesh(new BoxGeometry(0.15, 0.15, 0.01), matGreenTransparent.clone()), [0.15, 0, 0.15], [-Math.PI / 2, 0, 0]]]\n    };\n    const pickerTranslate = {\n      X: [[new Mesh(new CylinderGeometry(0.2, 0, 0.6, 4), matInvisible), [0.3, 0, 0], [0, 0, -Math.PI / 2]], [new Mesh(new CylinderGeometry(0.2, 0, 0.6, 4), matInvisible), [-0.3, 0, 0], [0, 0, Math.PI / 2]]],\n      Y: [[new Mesh(new CylinderGeometry(0.2, 0, 0.6, 4), matInvisible), [0, 0.3, 0]], [new Mesh(new CylinderGeometry(0.2, 0, 0.6, 4), matInvisible), [0, -0.3, 0], [0, 0, Math.PI]]],\n      Z: [[new Mesh(new CylinderGeometry(0.2, 0, 0.6, 4), matInvisible), [0, 0, 0.3], [Math.PI / 2, 0, 0]], [new Mesh(new CylinderGeometry(0.2, 0, 0.6, 4), matInvisible), [0, 0, -0.3], [-Math.PI / 2, 0, 0]]],\n      XYZ: [[new Mesh(new OctahedronGeometry(0.2, 0), matInvisible)]],\n      XY: [[new Mesh(new BoxGeometry(0.2, 0.2, 0.01), matInvisible), [0.15, 0.15, 0]]],\n      YZ: [[new Mesh(new BoxGeometry(0.2, 0.2, 0.01), matInvisible), [0, 0.15, 0.15], [0, Math.PI / 2, 0]]],\n      XZ: [[new Mesh(new BoxGeometry(0.2, 0.2, 0.01), matInvisible), [0.15, 0, 0.15], [-Math.PI / 2, 0, 0]]]\n    };\n    const helperTranslate = {\n      START: [[new Mesh(new OctahedronGeometry(0.01, 2), matHelper), null, null, null, 'helper']],\n      END: [[new Mesh(new OctahedronGeometry(0.01, 2), matHelper), null, null, null, 'helper']],\n      DELTA: [[new Line(TranslateHelperGeometry(), matHelper), null, null, null, 'helper']],\n      X: [[new Line(lineGeometry, matHelper.clone()), [-1e3, 0, 0], null, [1e6, 1, 1], 'helper']],\n      Y: [[new Line(lineGeometry, matHelper.clone()), [0, -1e3, 0], [0, 0, Math.PI / 2], [1e6, 1, 1], 'helper']],\n      Z: [[new Line(lineGeometry, matHelper.clone()), [0, 0, -1e3], [0, -Math.PI / 2, 0], [1e6, 1, 1], 'helper']]\n    };\n    const gizmoRotate = {\n      XYZE: [[new Mesh(CircleGeometry(0.5, 1), matGray), null, [0, Math.PI / 2, 0]]],\n      X: [[new Mesh(CircleGeometry(0.5, 0.5), matRed)]],\n      Y: [[new Mesh(CircleGeometry(0.5, 0.5), matGreen), null, [0, 0, -Math.PI / 2]]],\n      Z: [[new Mesh(CircleGeometry(0.5, 0.5), matBlue), null, [0, Math.PI / 2, 0]]],\n      E: [[new Mesh(CircleGeometry(0.75, 1), matYellowTransparent), null, [0, Math.PI / 2, 0]]]\n    };\n    const helperRotate = {\n      AXIS: [[new Line(lineGeometry, matHelper.clone()), [-1e3, 0, 0], null, [1e6, 1, 1], 'helper']]\n    };\n    const pickerRotate = {\n      XYZE: [[new Mesh(new SphereGeometry(0.25, 10, 8), matInvisible)]],\n      X: [[new Mesh(new TorusGeometry(0.5, 0.1, 4, 24), matInvisible), [0, 0, 0], [0, -Math.PI / 2, -Math.PI / 2]]],\n      Y: [[new Mesh(new TorusGeometry(0.5, 0.1, 4, 24), matInvisible), [0, 0, 0], [Math.PI / 2, 0, 0]]],\n      Z: [[new Mesh(new TorusGeometry(0.5, 0.1, 4, 24), matInvisible), [0, 0, 0], [0, 0, -Math.PI / 2]]],\n      E: [[new Mesh(new TorusGeometry(0.75, 0.1, 2, 24), matInvisible)]]\n    };\n    const gizmoScale = {\n      X: [[new Mesh(scaleHandleGeometry, matRed), [0.5, 0, 0], [0, 0, -Math.PI / 2]], [new Mesh(lineGeometry2, matRed), [0, 0, 0], [0, 0, -Math.PI / 2]], [new Mesh(scaleHandleGeometry, matRed), [-0.5, 0, 0], [0, 0, Math.PI / 2]]],\n      Y: [[new Mesh(scaleHandleGeometry, matGreen), [0, 0.5, 0]], [new Mesh(lineGeometry2, matGreen)], [new Mesh(scaleHandleGeometry, matGreen), [0, -0.5, 0], [0, 0, Math.PI]]],\n      Z: [[new Mesh(scaleHandleGeometry, matBlue), [0, 0, 0.5], [Math.PI / 2, 0, 0]], [new Mesh(lineGeometry2, matBlue), [0, 0, 0], [Math.PI / 2, 0, 0]], [new Mesh(scaleHandleGeometry, matBlue), [0, 0, -0.5], [-Math.PI / 2, 0, 0]]],\n      XY: [[new Mesh(new BoxGeometry(0.15, 0.15, 0.01), matBlueTransparent), [0.15, 0.15, 0]]],\n      YZ: [[new Mesh(new BoxGeometry(0.15, 0.15, 0.01), matRedTransparent), [0, 0.15, 0.15], [0, Math.PI / 2, 0]]],\n      XZ: [[new Mesh(new BoxGeometry(0.15, 0.15, 0.01), matGreenTransparent), [0.15, 0, 0.15], [-Math.PI / 2, 0, 0]]],\n      XYZ: [[new Mesh(new BoxGeometry(0.1, 0.1, 0.1), matWhiteTransparent.clone())]]\n    };\n    const pickerScale = {\n      X: [[new Mesh(new CylinderGeometry(0.2, 0, 0.6, 4), matInvisible), [0.3, 0, 0], [0, 0, -Math.PI / 2]], [new Mesh(new CylinderGeometry(0.2, 0, 0.6, 4), matInvisible), [-0.3, 0, 0], [0, 0, Math.PI / 2]]],\n      Y: [[new Mesh(new CylinderGeometry(0.2, 0, 0.6, 4), matInvisible), [0, 0.3, 0]], [new Mesh(new CylinderGeometry(0.2, 0, 0.6, 4), matInvisible), [0, -0.3, 0], [0, 0, Math.PI]]],\n      Z: [[new Mesh(new CylinderGeometry(0.2, 0, 0.6, 4), matInvisible), [0, 0, 0.3], [Math.PI / 2, 0, 0]], [new Mesh(new CylinderGeometry(0.2, 0, 0.6, 4), matInvisible), [0, 0, -0.3], [-Math.PI / 2, 0, 0]]],\n      XY: [[new Mesh(new BoxGeometry(0.2, 0.2, 0.01), matInvisible), [0.15, 0.15, 0]]],\n      YZ: [[new Mesh(new BoxGeometry(0.2, 0.2, 0.01), matInvisible), [0, 0.15, 0.15], [0, Math.PI / 2, 0]]],\n      XZ: [[new Mesh(new BoxGeometry(0.2, 0.2, 0.01), matInvisible), [0.15, 0, 0.15], [-Math.PI / 2, 0, 0]]],\n      XYZ: [[new Mesh(new BoxGeometry(0.2, 0.2, 0.2), matInvisible), [0, 0, 0]]]\n    };\n    const helperScale = {\n      X: [[new Line(lineGeometry, matHelper.clone()), [-1e3, 0, 0], null, [1e6, 1, 1], 'helper']],\n      Y: [[new Line(lineGeometry, matHelper.clone()), [0, -1e3, 0], [0, 0, Math.PI / 2], [1e6, 1, 1], 'helper']],\n      Z: [[new Line(lineGeometry, matHelper.clone()), [0, 0, -1e3], [0, -Math.PI / 2, 0], [1e6, 1, 1], 'helper']]\n    };\n\n    // Creates an Object3D with gizmos described in custom hierarchy definition.\n\n    function setupGizmo(gizmoMap) {\n      const gizmo = new Object3D();\n      for (const name in gizmoMap) {\n        for (let i = gizmoMap[name].length; i--;) {\n          const object = gizmoMap[name][i][0].clone();\n          const position = gizmoMap[name][i][1];\n          const rotation = gizmoMap[name][i][2];\n          const scale = gizmoMap[name][i][3];\n          const tag = gizmoMap[name][i][4];\n\n          // name and tag properties are essential for picking and updating logic.\n          object.name = name;\n          object.tag = tag;\n          if (position) {\n            object.position.set(position[0], position[1], position[2]);\n          }\n          if (rotation) {\n            object.rotation.set(rotation[0], rotation[1], rotation[2]);\n          }\n          if (scale) {\n            object.scale.set(scale[0], scale[1], scale[2]);\n          }\n          object.updateMatrix();\n          const tempGeometry = object.geometry.clone();\n          tempGeometry.applyMatrix4(object.matrix);\n          object.geometry = tempGeometry;\n          object.renderOrder = Infinity;\n          object.position.set(0, 0, 0);\n          object.rotation.set(0, 0, 0);\n          object.scale.set(1, 1, 1);\n          gizmo.add(object);\n        }\n      }\n      return gizmo;\n    }\n\n    // Gizmo creation\n\n    this.gizmo = {};\n    this.picker = {};\n    this.helper = {};\n    this.add(this.gizmo['translate'] = setupGizmo(gizmoTranslate));\n    this.add(this.gizmo['rotate'] = setupGizmo(gizmoRotate));\n    this.add(this.gizmo['scale'] = setupGizmo(gizmoScale));\n    this.add(this.picker['translate'] = setupGizmo(pickerTranslate));\n    this.add(this.picker['rotate'] = setupGizmo(pickerRotate));\n    this.add(this.picker['scale'] = setupGizmo(pickerScale));\n    this.add(this.helper['translate'] = setupGizmo(helperTranslate));\n    this.add(this.helper['rotate'] = setupGizmo(helperRotate));\n    this.add(this.helper['scale'] = setupGizmo(helperScale));\n\n    // Pickers should be hidden always\n\n    this.picker['translate'].visible = false;\n    this.picker['rotate'].visible = false;\n    this.picker['scale'].visible = false;\n  }\n\n  // updateMatrixWorld will update transformations and appearance of individual handles\n\n  updateMatrixWorld(force) {\n    const space = this.mode === 'scale' ? 'local' : this.space; // scale always oriented to local rotation\n\n    const quaternion = space === 'local' ? this.worldQuaternion : _identityQuaternion;\n\n    // Show only gizmos for current transform mode\n\n    this.gizmo['translate'].visible = this.mode === 'translate';\n    this.gizmo['rotate'].visible = this.mode === 'rotate';\n    this.gizmo['scale'].visible = this.mode === 'scale';\n    this.helper['translate'].visible = this.mode === 'translate';\n    this.helper['rotate'].visible = this.mode === 'rotate';\n    this.helper['scale'].visible = this.mode === 'scale';\n    let handles = [];\n    handles = handles.concat(this.picker[this.mode].children);\n    handles = handles.concat(this.gizmo[this.mode].children);\n    handles = handles.concat(this.helper[this.mode].children);\n    for (let i = 0; i < handles.length; i++) {\n      const handle = handles[i];\n\n      // hide aligned to camera\n\n      handle.visible = true;\n      handle.rotation.set(0, 0, 0);\n      handle.position.copy(this.worldPosition);\n      let factor;\n      if (this.camera.isOrthographicCamera) {\n        factor = (this.camera.top - this.camera.bottom) / this.camera.zoom;\n      } else {\n        factor = this.worldPosition.distanceTo(this.cameraPosition) * Math.min(1.9 * Math.tan(Math.PI * this.camera.fov / 360) / this.camera.zoom, 7);\n      }\n      handle.scale.set(1, 1, 1).multiplyScalar(factor * this.size / 4);\n\n      // TODO: simplify helpers and consider decoupling from gizmo\n\n      if (handle.tag === 'helper') {\n        handle.visible = false;\n        if (handle.name === 'AXIS') {\n          handle.visible = !!this.axis;\n          if (this.axis === 'X') {\n            _tempQuaternion.setFromEuler(_tempEuler.set(0, 0, 0));\n            handle.quaternion.copy(quaternion).multiply(_tempQuaternion);\n            if (Math.abs(_alignVector.copy(_unitX).applyQuaternion(quaternion).dot(this.eye)) > 0.9) {\n              handle.visible = false;\n            }\n          }\n          if (this.axis === 'Y') {\n            _tempQuaternion.setFromEuler(_tempEuler.set(0, 0, Math.PI / 2));\n            handle.quaternion.copy(quaternion).multiply(_tempQuaternion);\n            if (Math.abs(_alignVector.copy(_unitY).applyQuaternion(quaternion).dot(this.eye)) > 0.9) {\n              handle.visible = false;\n            }\n          }\n          if (this.axis === 'Z') {\n            _tempQuaternion.setFromEuler(_tempEuler.set(0, Math.PI / 2, 0));\n            handle.quaternion.copy(quaternion).multiply(_tempQuaternion);\n            if (Math.abs(_alignVector.copy(_unitZ).applyQuaternion(quaternion).dot(this.eye)) > 0.9) {\n              handle.visible = false;\n            }\n          }\n          if (this.axis === 'XYZE') {\n            _tempQuaternion.setFromEuler(_tempEuler.set(0, Math.PI / 2, 0));\n            _alignVector.copy(this.rotationAxis);\n            handle.quaternion.setFromRotationMatrix(_lookAtMatrix.lookAt(_zeroVector, _alignVector, _unitY));\n            handle.quaternion.multiply(_tempQuaternion);\n            handle.visible = this.dragging;\n          }\n          if (this.axis === 'E') {\n            handle.visible = false;\n          }\n        } else if (handle.name === 'START') {\n          handle.position.copy(this.worldPositionStart);\n          handle.visible = this.dragging;\n        } else if (handle.name === 'END') {\n          handle.position.copy(this.worldPosition);\n          handle.visible = this.dragging;\n        } else if (handle.name === 'DELTA') {\n          handle.position.copy(this.worldPositionStart);\n          handle.quaternion.copy(this.worldQuaternionStart);\n          _tempVector.set(1e-10, 1e-10, 1e-10).add(this.worldPositionStart).sub(this.worldPosition).multiplyScalar(-1);\n          _tempVector.applyQuaternion(this.worldQuaternionStart.clone().invert());\n          handle.scale.copy(_tempVector);\n          handle.visible = this.dragging;\n        } else {\n          handle.quaternion.copy(quaternion);\n          if (this.dragging) {\n            handle.position.copy(this.worldPositionStart);\n          } else {\n            handle.position.copy(this.worldPosition);\n          }\n          if (this.axis) {\n            handle.visible = this.axis.search(handle.name) !== -1;\n          }\n        }\n\n        // If updating helper, skip rest of the loop\n        continue;\n      }\n\n      // Align handles to current local or world rotation\n\n      handle.quaternion.copy(quaternion);\n      if (this.mode === 'translate' || this.mode === 'scale') {\n        // Hide translate and scale axis facing the camera\n\n        const AXIS_HIDE_THRESHOLD = 0.99;\n        const PLANE_HIDE_THRESHOLD = 0.2;\n        if (handle.name === 'X') {\n          if (Math.abs(_alignVector.copy(_unitX).applyQuaternion(quaternion).dot(this.eye)) > AXIS_HIDE_THRESHOLD) {\n            handle.scale.set(1e-10, 1e-10, 1e-10);\n            handle.visible = false;\n          }\n        }\n        if (handle.name === 'Y') {\n          if (Math.abs(_alignVector.copy(_unitY).applyQuaternion(quaternion).dot(this.eye)) > AXIS_HIDE_THRESHOLD) {\n            handle.scale.set(1e-10, 1e-10, 1e-10);\n            handle.visible = false;\n          }\n        }\n        if (handle.name === 'Z') {\n          if (Math.abs(_alignVector.copy(_unitZ).applyQuaternion(quaternion).dot(this.eye)) > AXIS_HIDE_THRESHOLD) {\n            handle.scale.set(1e-10, 1e-10, 1e-10);\n            handle.visible = false;\n          }\n        }\n        if (handle.name === 'XY') {\n          if (Math.abs(_alignVector.copy(_unitZ).applyQuaternion(quaternion).dot(this.eye)) < PLANE_HIDE_THRESHOLD) {\n            handle.scale.set(1e-10, 1e-10, 1e-10);\n            handle.visible = false;\n          }\n        }\n        if (handle.name === 'YZ') {\n          if (Math.abs(_alignVector.copy(_unitX).applyQuaternion(quaternion).dot(this.eye)) < PLANE_HIDE_THRESHOLD) {\n            handle.scale.set(1e-10, 1e-10, 1e-10);\n            handle.visible = false;\n          }\n        }\n        if (handle.name === 'XZ') {\n          if (Math.abs(_alignVector.copy(_unitY).applyQuaternion(quaternion).dot(this.eye)) < PLANE_HIDE_THRESHOLD) {\n            handle.scale.set(1e-10, 1e-10, 1e-10);\n            handle.visible = false;\n          }\n        }\n      } else if (this.mode === 'rotate') {\n        // Align handles to current local or world rotation\n\n        _tempQuaternion2.copy(quaternion);\n        _alignVector.copy(this.eye).applyQuaternion(_tempQuaternion.copy(quaternion).invert());\n        if (handle.name.search('E') !== -1) {\n          handle.quaternion.setFromRotationMatrix(_lookAtMatrix.lookAt(this.eye, _zeroVector, _unitY));\n        }\n        if (handle.name === 'X') {\n          _tempQuaternion.setFromAxisAngle(_unitX, Math.atan2(-_alignVector.y, _alignVector.z));\n          _tempQuaternion.multiplyQuaternions(_tempQuaternion2, _tempQuaternion);\n          handle.quaternion.copy(_tempQuaternion);\n        }\n        if (handle.name === 'Y') {\n          _tempQuaternion.setFromAxisAngle(_unitY, Math.atan2(_alignVector.x, _alignVector.z));\n          _tempQuaternion.multiplyQuaternions(_tempQuaternion2, _tempQuaternion);\n          handle.quaternion.copy(_tempQuaternion);\n        }\n        if (handle.name === 'Z') {\n          _tempQuaternion.setFromAxisAngle(_unitZ, Math.atan2(_alignVector.y, _alignVector.x));\n          _tempQuaternion.multiplyQuaternions(_tempQuaternion2, _tempQuaternion);\n          handle.quaternion.copy(_tempQuaternion);\n        }\n      }\n\n      // Hide disabled axes\n      handle.visible = handle.visible && (handle.name.indexOf('X') === -1 || this.showX);\n      handle.visible = handle.visible && (handle.name.indexOf('Y') === -1 || this.showY);\n      handle.visible = handle.visible && (handle.name.indexOf('Z') === -1 || this.showZ);\n      handle.visible = handle.visible && (handle.name.indexOf('E') === -1 || this.showX && this.showY && this.showZ);\n\n      // highlight selected axis\n\n      handle.material._color = handle.material._color || handle.material.color.clone();\n      handle.material._opacity = handle.material._opacity || handle.material.opacity;\n      handle.material.color.copy(handle.material._color);\n      handle.material.opacity = handle.material._opacity;\n      if (this.enabled && this.axis) {\n        if (handle.name === this.axis) {\n          handle.material.color.setHex(0xffff00);\n          handle.material.opacity = 1.0;\n        } else if (this.axis.split('').some(function (a) {\n          return handle.name === a;\n        })) {\n          handle.material.color.setHex(0xffff00);\n          handle.material.opacity = 1.0;\n        }\n      }\n    }\n    super.updateMatrixWorld(force);\n  }\n}\n\n//\n\nclass TransformControlsPlane extends Mesh {\n  constructor() {\n    super(new PlaneGeometry(100000, 100000, 2, 2), new MeshBasicMaterial({\n      visible: false,\n      wireframe: true,\n      side: DoubleSide,\n      transparent: true,\n      opacity: 0.1,\n      toneMapped: false\n    }));\n    this.isTransformControlsPlane = true;\n    this.type = 'TransformControlsPlane';\n  }\n  updateMatrixWorld(force) {\n    let space = this.space;\n    this.position.copy(this.worldPosition);\n    if (this.mode === 'scale') space = 'local'; // scale always oriented to local rotation\n\n    _v1.copy(_unitX).applyQuaternion(space === 'local' ? this.worldQuaternion : _identityQuaternion);\n    _v2.copy(_unitY).applyQuaternion(space === 'local' ? this.worldQuaternion : _identityQuaternion);\n    _v3.copy(_unitZ).applyQuaternion(space === 'local' ? this.worldQuaternion : _identityQuaternion);\n\n    // Align the plane for current transform mode, axis and space.\n\n    _alignVector.copy(_v2);\n    switch (this.mode) {\n      case 'translate':\n      case 'scale':\n        switch (this.axis) {\n          case 'X':\n            _alignVector.copy(this.eye).cross(_v1);\n            _dirVector.copy(_v1).cross(_alignVector);\n            break;\n          case 'Y':\n            _alignVector.copy(this.eye).cross(_v2);\n            _dirVector.copy(_v2).cross(_alignVector);\n            break;\n          case 'Z':\n            _alignVector.copy(this.eye).cross(_v3);\n            _dirVector.copy(_v3).cross(_alignVector);\n            break;\n          case 'XY':\n            _dirVector.copy(_v3);\n            break;\n          case 'YZ':\n            _dirVector.copy(_v1);\n            break;\n          case 'XZ':\n            _alignVector.copy(_v3);\n            _dirVector.copy(_v2);\n            break;\n          case 'XYZ':\n          case 'E':\n            _dirVector.set(0, 0, 0);\n            break;\n        }\n        break;\n      case 'rotate':\n      default:\n        // special case for rotate\n        _dirVector.set(0, 0, 0);\n    }\n    if (_dirVector.length() === 0) {\n      // If in rotate mode, make the plane parallel to camera\n      this.quaternion.copy(this.cameraQuaternion);\n    } else {\n      _tempMatrix.lookAt(_tempVector.set(0, 0, 0), _dirVector, _alignVector);\n      this.quaternion.setFromRotationMatrix(_tempMatrix);\n    }\n    super.updateMatrixWorld(force);\n  }\n}\nexport { TransformControls, TransformControlsGizmo, TransformControlsPlane };","map":{"version":3,"names":["BoxGeometry","BufferGeometry","Controls","CylinderGeometry","DoubleSide","Euler","Float32BufferAttribute","Line","LineBasicMaterial","Matrix4","Mesh","MeshBasicMaterial","Object3D","OctahedronGeometry","PlaneGeometry","Quaternion","Raycaster","SphereGeometry","TorusGeometry","Vector3","_raycaster","_tempVector","_tempVector2","_tempQuaternion","_unit","X","Y","Z","_changeEvent","type","_mouseDownEvent","mode","_mouseUpEvent","_objectChangeEvent","TransformControls","constructor","camera","domElement","undefined","root","TransformControlsRoot","_root","gizmo","TransformControlsGizmo","_gizmo","add","plane","TransformControlsPlane","_plane","scope","defineProperty","propName","defaultValue","propValue","Object","get","set","value","dispatchEvent","Infinity","worldPosition","worldPositionStart","worldQuaternion","worldQuaternionStart","cameraPosition","cameraQuaternion","pointStart","pointEnd","rotationAxis","rotationAngle","eye","_offset","_startNorm","_endNorm","_cameraScale","_parentPosition","_parentQuaternion","_parentQuaternionInv","_parentScale","_worldScaleStart","_worldQuaternionInv","_worldScale","_positionStart","_quaternionStart","_scaleStart","_getPointer","getPointer","bind","_onPointerDown","onPointerDown","_onPointerHover","onPointerHover","_onPointerMove","onPointerMove","_onPointerUp","onPointerUp","connect","element","addEventListener","style","touchAction","disconnect","removeEventListener","getHelper","pointerHover","pointer","object","dragging","setFromCamera","intersect","intersectObjectWithRay","picker","axis","name","pointerDown","button","planeIntersect","updateMatrixWorld","parent","copy","position","quaternion","scale","matrixWorld","decompose","point","sub","pointerMove","space","applyQuaternion","indexOf","x","y","z","divide","translationSnap","invert","search","Math","round","setFromMatrixPosition","max","minX","min","maxX","minY","maxY","minZ","maxZ","d","length","dot","multiply","scaleSnap","ROTATION_SPEED","distanceTo","_inPlaneRotation","cross","normalize","angleTo","rotationSnap","setFromAxisAngle","pointerUp","dispose","attach","visible","detach","reset","enabled","getRaycaster","getMode","setMode","setTranslationSnap","setRotationSnap","setScaleSnap","setSize","size","setSpace","event","ownerDocument","pointerLockElement","rect","getBoundingClientRect","clientX","left","width","clientY","top","height","pointerType","document","setPointerCapture","pointerId","releasePointerCapture","raycaster","includeInvisible","allIntersections","intersectObject","i","_tempEuler","_alignVector","_zeroVector","_lookAtMatrix","_tempQuaternion2","_identityQuaternion","_dirVector","_tempMatrix","_unitX","_unitY","_unitZ","_v1","_v2","_v3","controls","isTransformControlsRoot","force","console","error","isOrthographicCamera","getWorldDirection","negate","traverse","child","geometry","material","isTransformControlsGizmo","gizmoMaterial","depthTest","depthWrite","fog","toneMapped","transparent","gizmoLineMaterial","matInvisible","clone","opacity","matHelper","matRed","color","setHex","matGreen","matBlue","matRedTransparent","matGreenTransparent","matBlueTransparent","matWhiteTransparent","matYellowTransparent","matYellow","matGray","arrowGeometry","translate","scaleHandleGeometry","lineGeometry","setAttribute","lineGeometry2","CircleGeometry","radius","arc","PI","rotateY","rotateX","TranslateHelperGeometry","gizmoTranslate","XYZ","XY","YZ","XZ","pickerTranslate","helperTranslate","START","END","DELTA","gizmoRotate","XYZE","E","helperRotate","AXIS","pickerRotate","gizmoScale","pickerScale","helperScale","setupGizmo","gizmoMap","rotation","tag","updateMatrix","tempGeometry","applyMatrix4","matrix","renderOrder","helper","handles","concat","children","handle","factor","bottom","zoom","tan","fov","multiplyScalar","setFromEuler","abs","setFromRotationMatrix","lookAt","AXIS_HIDE_THRESHOLD","PLANE_HIDE_THRESHOLD","atan2","multiplyQuaternions","showX","showY","showZ","_color","_opacity","split","some","a","wireframe","side","isTransformControlsPlane"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/controls/TransformControls.js"],"sourcesContent":["import {\n\tBoxGeometry,\n\tBufferGeometry,\n\tControls,\n\tCylinderGeometry,\n\tDoubleSide,\n\tEuler,\n\tFloat32BufferAttribute,\n\tLine,\n\tLineBasicMaterial,\n\tMatrix4,\n\tMesh,\n\tMeshBasicMaterial,\n\tObject3D,\n\tOctahedronGeometry,\n\tPlaneGeometry,\n\tQuaternion,\n\tRaycaster,\n\tSphereGeometry,\n\tTorusGeometry,\n\tVector3\n} from 'three';\n\nconst _raycaster = new Raycaster();\n\nconst _tempVector = new Vector3();\nconst _tempVector2 = new Vector3();\nconst _tempQuaternion = new Quaternion();\nconst _unit = {\n\tX: new Vector3( 1, 0, 0 ),\n\tY: new Vector3( 0, 1, 0 ),\n\tZ: new Vector3( 0, 0, 1 )\n};\n\n/**\n * Fires if any type of change (object or property change) is performed. Property changes\n * are separate events you can add event listeners to. The event type is \"propertyname-changed\".\n *\n * @event TransformControls#change\n * @type {Object}\n */\nconst _changeEvent = { type: 'change' };\n\n/**\n * Fires if a pointer (mouse/touch) becomes active.\n *\n * @event TransformControls#mouseDown\n * @type {Object}\n */\nconst _mouseDownEvent = { type: 'mouseDown', mode: null };\n\n/**\n * Fires if a pointer (mouse/touch) is no longer active.\n *\n * @event TransformControls#mouseUp\n * @type {Object}\n */\nconst _mouseUpEvent = { type: 'mouseUp', mode: null };\n\n/**\n * Fires if the controlled 3D object is changed.\n *\n * @event TransformControls#objectChange\n * @type {Object}\n */\nconst _objectChangeEvent = { type: 'objectChange' };\n\n/**\n * This class can be used to transform objects in 3D space by adapting a similar interaction model\n * of DCC tools like Blender. Unlike other controls, it is not intended to transform the scene's camera.\n *\n * `TransformControls` expects that its attached 3D object is part of the scene graph.\n *\n * @augments Controls\n * @three_import import { TransformControls } from 'three/addons/controls/TransformControls.js';\n */\nclass TransformControls extends Controls {\n\n\t/**\n\t * Constructs a new controls instance.\n\t *\n\t * @param {Camera} camera - The camera of the rendered scene.\n\t * @param {?HTMLDOMElement} domElement - The HTML element used for event listeners.\n\t */\n\tconstructor( camera, domElement = null ) {\n\n\t\tsuper( undefined, domElement );\n\n\t\tconst root = new TransformControlsRoot( this );\n\t\tthis._root = root;\n\n\t\tconst gizmo = new TransformControlsGizmo();\n\t\tthis._gizmo = gizmo;\n\t\troot.add( gizmo );\n\n\t\tconst plane = new TransformControlsPlane();\n\t\tthis._plane = plane;\n\t\troot.add( plane );\n\n\t\tconst scope = this;\n\n\t\t// Defined getter, setter and store for a property\n\t\tfunction defineProperty( propName, defaultValue ) {\n\n\t\t\tlet propValue = defaultValue;\n\n\t\t\tObject.defineProperty( scope, propName, {\n\n\t\t\t\tget: function () {\n\n\t\t\t\t\treturn propValue !== undefined ? propValue : defaultValue;\n\n\t\t\t\t},\n\n\t\t\t\tset: function ( value ) {\n\n\t\t\t\t\tif ( propValue !== value ) {\n\n\t\t\t\t\t\tpropValue = value;\n\t\t\t\t\t\tplane[ propName ] = value;\n\t\t\t\t\t\tgizmo[ propName ] = value;\n\n\t\t\t\t\t\tscope.dispatchEvent( { type: propName + '-changed', value: value } );\n\t\t\t\t\t\tscope.dispatchEvent( _changeEvent );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tscope[ propName ] = defaultValue;\n\t\t\tplane[ propName ] = defaultValue;\n\t\t\tgizmo[ propName ] = defaultValue;\n\n\t\t}\n\n\t\t// Define properties with getters/setter\n\t\t// Setting the defined property will automatically trigger change event\n\t\t// Defined properties are passed down to gizmo and plane\n\n\t\t/**\n\t\t * The camera of the rendered scene.\n\t\t *\n\t\t * @name TransformControls#camera\n\t\t * @type {Camera}\n\t\t */\n\t\tdefineProperty( 'camera', camera );\n\t\tdefineProperty( 'object', undefined );\n\t\tdefineProperty( 'enabled', true );\n\n\t\t/**\n\t\t * The current transformation axis.\n\t\t *\n\t\t * @name TransformControls#axis\n\t\t * @type {string}\n\t\t */\n\t\tdefineProperty( 'axis', null );\n\n\t\t/**\n\t\t * The current transformation axis.\n\t\t *\n\t\t * @name TransformControls#mode\n\t\t * @type {('translate'|'rotate'|'scale')}\n\t\t * @default 'translate'\n\t\t */\n\t\tdefineProperty( 'mode', 'translate' );\n\n\t\t/**\n\t\t * By default, 3D objects are continuously translated. If you set this property to a numeric\n\t\t * value (world units), you can define in which steps the 3D object should be translated.\n\t\t *\n\t\t * @name TransformControls#translationSnap\n\t\t * @type {?number}\n\t\t * @default null\n\t\t */\n\t\tdefineProperty( 'translationSnap', null );\n\n\t\t/**\n\t\t * By default, 3D objects are continuously rotated. If you set this property to a numeric\n\t\t * value (radians), you can define in which steps the 3D object should be rotated.\n\t\t *\n\t\t * @name TransformControls#rotationSnap\n\t\t * @type {?number}\n\t\t * @default null\n\t\t */\n\t\tdefineProperty( 'rotationSnap', null );\n\n\t\t/**\n\t\t * By default, 3D objects are continuously scaled. If you set this property to a numeric\n\t\t * value, you can define in which steps the 3D object should be scaled.\n\t\t *\n\t\t * @name TransformControls#scaleSnap\n\t\t * @type {?number}\n\t\t * @default null\n\t\t */\n\t\tdefineProperty( 'scaleSnap', null );\n\n\t\t/**\n\t\t * Defines in which coordinate space transformations should be performed.\n\t\t *\n\t\t * @name TransformControls#space\n\t\t * @type {('world'|'local')}\n\t\t * @default 'world'\n\t\t */\n\t\tdefineProperty( 'space', 'world' );\n\n\t\t/**\n\t\t * The size of the helper UI (axes/planes).\n\t\t *\n\t\t * @name TransformControls#size\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tdefineProperty( 'size', 1 );\n\n\t\t/**\n\t\t * Whether dragging is currently performed or not.\n\t\t *\n\t\t * @name TransformControls#dragging\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default false\n\t\t */\n\t\tdefineProperty( 'dragging', false );\n\n\t\t/**\n\t\t * Whether the x-axis helper should be visible or not.\n\t\t *\n\t\t * @name TransformControls#showX\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tdefineProperty( 'showX', true );\n\n\t\t/**\n\t\t * Whether the y-axis helper should be visible or not.\n\t\t *\n\t\t * @name TransformControls#showY\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tdefineProperty( 'showY', true );\n\n\t\t/**\n\t\t * Whether the z-axis helper should be visible or not.\n\t\t *\n\t\t * @name TransformControls#showZ\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tdefineProperty( 'showZ', true );\n\n\t\t/**\n\t\t * The minimum allowed X position during translation.\n\t\t *\n\t\t * @name TransformControls#minX\n\t\t * @type {number}\n\t\t * @default -Infinity\n\t\t */\n\t\tdefineProperty( 'minX', - Infinity );\n\n\t\t/**\n\t\t * The maximum allowed X position during translation.\n\t\t *\n\t\t * @name TransformControls#maxX\n\t\t * @type {number}\n\t\t * @default Infinity\n\t\t */\n\t\tdefineProperty( 'maxX', Infinity );\n\n\t\t/**\n\t\t * The minimum allowed y position during translation.\n\t\t *\n\t\t * @name TransformControls#minY\n\t\t * @type {number}\n\t\t * @default -Infinity\n\t\t */\n\t\tdefineProperty( 'minY', - Infinity );\n\n\t\t/**\n\t\t * The maximum allowed Y position during translation.\n\t\t *\n\t\t * @name TransformControls#maxY\n\t\t * @type {number}\n\t\t * @default Infinity\n\t\t */\n\t\tdefineProperty( 'maxY', Infinity );\n\n\t\t/**\n\t\t * The minimum allowed z position during translation.\n\t\t *\n\t\t * @name TransformControls#minZ\n\t\t * @type {number}\n\t\t * @default -Infinity\n\t\t */\n\t\tdefineProperty( 'minZ', - Infinity );\n\n\t\t/**\n\t\t * The maximum allowed Z position during translation.\n\t\t *\n\t\t * @name TransformControls#maxZ\n\t\t * @type {number}\n\t\t * @default Infinity\n\t\t */\n\t\tdefineProperty( 'maxZ', Infinity );\n\n\t\t// Reusable utility variables\n\n\t\tconst worldPosition = new Vector3();\n\t\tconst worldPositionStart = new Vector3();\n\t\tconst worldQuaternion = new Quaternion();\n\t\tconst worldQuaternionStart = new Quaternion();\n\t\tconst cameraPosition = new Vector3();\n\t\tconst cameraQuaternion = new Quaternion();\n\t\tconst pointStart = new Vector3();\n\t\tconst pointEnd = new Vector3();\n\t\tconst rotationAxis = new Vector3();\n\t\tconst rotationAngle = 0;\n\t\tconst eye = new Vector3();\n\n\t\t// TODO: remove properties unused in plane and gizmo\n\n\t\tdefineProperty( 'worldPosition', worldPosition );\n\t\tdefineProperty( 'worldPositionStart', worldPositionStart );\n\t\tdefineProperty( 'worldQuaternion', worldQuaternion );\n\t\tdefineProperty( 'worldQuaternionStart', worldQuaternionStart );\n\t\tdefineProperty( 'cameraPosition', cameraPosition );\n\t\tdefineProperty( 'cameraQuaternion', cameraQuaternion );\n\t\tdefineProperty( 'pointStart', pointStart );\n\t\tdefineProperty( 'pointEnd', pointEnd );\n\t\tdefineProperty( 'rotationAxis', rotationAxis );\n\t\tdefineProperty( 'rotationAngle', rotationAngle );\n\t\tdefineProperty( 'eye', eye );\n\n\t\tthis._offset = new Vector3();\n\t\tthis._startNorm = new Vector3();\n\t\tthis._endNorm = new Vector3();\n\t\tthis._cameraScale = new Vector3();\n\n\t\tthis._parentPosition = new Vector3();\n\t\tthis._parentQuaternion = new Quaternion();\n\t\tthis._parentQuaternionInv = new Quaternion();\n\t\tthis._parentScale = new Vector3();\n\n\t\tthis._worldScaleStart = new Vector3();\n\t\tthis._worldQuaternionInv = new Quaternion();\n\t\tthis._worldScale = new Vector3();\n\n\t\tthis._positionStart = new Vector3();\n\t\tthis._quaternionStart = new Quaternion();\n\t\tthis._scaleStart = new Vector3();\n\n\t\tthis._getPointer = getPointer.bind( this );\n\t\tthis._onPointerDown = onPointerDown.bind( this );\n\t\tthis._onPointerHover = onPointerHover.bind( this );\n\t\tthis._onPointerMove = onPointerMove.bind( this );\n\t\tthis._onPointerUp = onPointerUp.bind( this );\n\n\t\tif ( domElement !== null ) {\n\n\t\t\tthis.connect( domElement );\n\n\t\t}\n\n\t}\n\n\tconnect( element ) {\n\n\t\tsuper.connect( element );\n\n\t\tthis.domElement.addEventListener( 'pointerdown', this._onPointerDown );\n\t\tthis.domElement.addEventListener( 'pointermove', this._onPointerHover );\n\t\tthis.domElement.addEventListener( 'pointerup', this._onPointerUp );\n\n\t\tthis.domElement.style.touchAction = 'none'; // disable touch scroll\n\n\t}\n\n\tdisconnect() {\n\n\t\tthis.domElement.removeEventListener( 'pointerdown', this._onPointerDown );\n\t\tthis.domElement.removeEventListener( 'pointermove', this._onPointerHover );\n\t\tthis.domElement.removeEventListener( 'pointermove', this._onPointerMove );\n\t\tthis.domElement.removeEventListener( 'pointerup', this._onPointerUp );\n\n\t\tthis.domElement.style.touchAction = 'auto';\n\n\t}\n\n\t/**\n\t * Returns the visual representation of the controls. Add the helper to your scene to\n\t * visually transform the attached  3D object.\n\t *\n\t * @return {TransformControlsRoot} The helper.\n\t */\n\tgetHelper() {\n\n\t\treturn this._root;\n\n\t}\n\n\tpointerHover( pointer ) {\n\n\t\tif ( this.object === undefined || this.dragging === true ) return;\n\n\t\tif ( pointer !== null ) _raycaster.setFromCamera( pointer, this.camera );\n\n\t\tconst intersect = intersectObjectWithRay( this._gizmo.picker[ this.mode ], _raycaster );\n\n\t\tif ( intersect ) {\n\n\t\t\tthis.axis = intersect.object.name;\n\n\t\t} else {\n\n\t\t\tthis.axis = null;\n\n\t\t}\n\n\t}\n\n\tpointerDown( pointer ) {\n\n\t\tif ( this.object === undefined || this.dragging === true || ( pointer != null && pointer.button !== 0 ) ) return;\n\n\t\tif ( this.axis !== null ) {\n\n\t\t\tif ( pointer !== null ) _raycaster.setFromCamera( pointer, this.camera );\n\n\t\t\tconst planeIntersect = intersectObjectWithRay( this._plane, _raycaster, true );\n\n\t\t\tif ( planeIntersect ) {\n\n\t\t\t\tthis.object.updateMatrixWorld();\n\t\t\t\tthis.object.parent.updateMatrixWorld();\n\n\t\t\t\tthis._positionStart.copy( this.object.position );\n\t\t\t\tthis._quaternionStart.copy( this.object.quaternion );\n\t\t\t\tthis._scaleStart.copy( this.object.scale );\n\n\t\t\t\tthis.object.matrixWorld.decompose( this.worldPositionStart, this.worldQuaternionStart, this._worldScaleStart );\n\n\t\t\t\tthis.pointStart.copy( planeIntersect.point ).sub( this.worldPositionStart );\n\n\t\t\t}\n\n\t\t\tthis.dragging = true;\n\t\t\t_mouseDownEvent.mode = this.mode;\n\t\t\tthis.dispatchEvent( _mouseDownEvent );\n\n\t\t}\n\n\t}\n\n\tpointerMove( pointer ) {\n\n\t\tconst axis = this.axis;\n\t\tconst mode = this.mode;\n\t\tconst object = this.object;\n\t\tlet space = this.space;\n\n\t\tif ( mode === 'scale' ) {\n\n\t\t\tspace = 'local';\n\n\t\t} else if ( axis === 'E' || axis === 'XYZE' || axis === 'XYZ' ) {\n\n\t\t\tspace = 'world';\n\n\t\t}\n\n\t\tif ( object === undefined || axis === null || this.dragging === false || ( pointer !== null && pointer.button !== - 1 ) ) return;\n\n\t\tif ( pointer !== null ) _raycaster.setFromCamera( pointer, this.camera );\n\n\t\tconst planeIntersect = intersectObjectWithRay( this._plane, _raycaster, true );\n\n\t\tif ( ! planeIntersect ) return;\n\n\t\tthis.pointEnd.copy( planeIntersect.point ).sub( this.worldPositionStart );\n\n\t\tif ( mode === 'translate' ) {\n\n\t\t\t// Apply translate\n\n\t\t\tthis._offset.copy( this.pointEnd ).sub( this.pointStart );\n\n\t\t\tif ( space === 'local' && axis !== 'XYZ' ) {\n\n\t\t\t\tthis._offset.applyQuaternion( this._worldQuaternionInv );\n\n\t\t\t}\n\n\t\t\tif ( axis.indexOf( 'X' ) === - 1 ) this._offset.x = 0;\n\t\t\tif ( axis.indexOf( 'Y' ) === - 1 ) this._offset.y = 0;\n\t\t\tif ( axis.indexOf( 'Z' ) === - 1 ) this._offset.z = 0;\n\n\t\t\tif ( space === 'local' && axis !== 'XYZ' ) {\n\n\t\t\t\tthis._offset.applyQuaternion( this._quaternionStart ).divide( this._parentScale );\n\n\t\t\t} else {\n\n\t\t\t\tthis._offset.applyQuaternion( this._parentQuaternionInv ).divide( this._parentScale );\n\n\t\t\t}\n\n\t\t\tobject.position.copy( this._offset ).add( this._positionStart );\n\n\t\t\t// Apply translation snap\n\n\t\t\tif ( this.translationSnap ) {\n\n\t\t\t\tif ( space === 'local' ) {\n\n\t\t\t\t\tobject.position.applyQuaternion( _tempQuaternion.copy( this._quaternionStart ).invert() );\n\n\t\t\t\t\tif ( axis.search( 'X' ) !== - 1 ) {\n\n\t\t\t\t\t\tobject.position.x = Math.round( object.position.x / this.translationSnap ) * this.translationSnap;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( axis.search( 'Y' ) !== - 1 ) {\n\n\t\t\t\t\t\tobject.position.y = Math.round( object.position.y / this.translationSnap ) * this.translationSnap;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( axis.search( 'Z' ) !== - 1 ) {\n\n\t\t\t\t\t\tobject.position.z = Math.round( object.position.z / this.translationSnap ) * this.translationSnap;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tobject.position.applyQuaternion( this._quaternionStart );\n\n\t\t\t\t}\n\n\t\t\t\tif ( space === 'world' ) {\n\n\t\t\t\t\tif ( object.parent ) {\n\n\t\t\t\t\t\tobject.position.add( _tempVector.setFromMatrixPosition( object.parent.matrixWorld ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( axis.search( 'X' ) !== - 1 ) {\n\n\t\t\t\t\t\tobject.position.x = Math.round( object.position.x / this.translationSnap ) * this.translationSnap;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( axis.search( 'Y' ) !== - 1 ) {\n\n\t\t\t\t\t\tobject.position.y = Math.round( object.position.y / this.translationSnap ) * this.translationSnap;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( axis.search( 'Z' ) !== - 1 ) {\n\n\t\t\t\t\t\tobject.position.z = Math.round( object.position.z / this.translationSnap ) * this.translationSnap;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( object.parent ) {\n\n\t\t\t\t\t\tobject.position.sub( _tempVector.setFromMatrixPosition( object.parent.matrixWorld ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tobject.position.x = Math.max( this.minX, Math.min( this.maxX, object.position.x ) );\n\t\t\tobject.position.y = Math.max( this.minY, Math.min( this.maxY, object.position.y ) );\n\t\t\tobject.position.z = Math.max( this.minZ, Math.min( this.maxZ, object.position.z ) );\n\n\t\t} else if ( mode === 'scale' ) {\n\n\t\t\tif ( axis.search( 'XYZ' ) !== - 1 ) {\n\n\t\t\t\tlet d = this.pointEnd.length() / this.pointStart.length();\n\n\t\t\t\tif ( this.pointEnd.dot( this.pointStart ) < 0 ) d *= - 1;\n\n\t\t\t\t_tempVector2.set( d, d, d );\n\n\t\t\t} else {\n\n\t\t\t\t_tempVector.copy( this.pointStart );\n\t\t\t\t_tempVector2.copy( this.pointEnd );\n\n\t\t\t\t_tempVector.applyQuaternion( this._worldQuaternionInv );\n\t\t\t\t_tempVector2.applyQuaternion( this._worldQuaternionInv );\n\n\t\t\t\t_tempVector2.divide( _tempVector );\n\n\t\t\t\tif ( axis.search( 'X' ) === - 1 ) {\n\n\t\t\t\t\t_tempVector2.x = 1;\n\n\t\t\t\t}\n\n\t\t\t\tif ( axis.search( 'Y' ) === - 1 ) {\n\n\t\t\t\t\t_tempVector2.y = 1;\n\n\t\t\t\t}\n\n\t\t\t\tif ( axis.search( 'Z' ) === - 1 ) {\n\n\t\t\t\t\t_tempVector2.z = 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Apply scale\n\n\t\t\tobject.scale.copy( this._scaleStart ).multiply( _tempVector2 );\n\n\t\t\tif ( this.scaleSnap ) {\n\n\t\t\t\tif ( axis.search( 'X' ) !== - 1 ) {\n\n\t\t\t\t\tobject.scale.x = Math.round( object.scale.x / this.scaleSnap ) * this.scaleSnap || this.scaleSnap;\n\n\t\t\t\t}\n\n\t\t\t\tif ( axis.search( 'Y' ) !== - 1 ) {\n\n\t\t\t\t\tobject.scale.y = Math.round( object.scale.y / this.scaleSnap ) * this.scaleSnap || this.scaleSnap;\n\n\t\t\t\t}\n\n\t\t\t\tif ( axis.search( 'Z' ) !== - 1 ) {\n\n\t\t\t\t\tobject.scale.z = Math.round( object.scale.z / this.scaleSnap ) * this.scaleSnap || this.scaleSnap;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( mode === 'rotate' ) {\n\n\t\t\tthis._offset.copy( this.pointEnd ).sub( this.pointStart );\n\n\t\t\tconst ROTATION_SPEED = 20 / this.worldPosition.distanceTo( _tempVector.setFromMatrixPosition( this.camera.matrixWorld ) );\n\n\t\t\tlet _inPlaneRotation = false;\n\n\t\t\tif ( axis === 'XYZE' ) {\n\n\t\t\t\tthis.rotationAxis.copy( this._offset ).cross( this.eye ).normalize();\n\t\t\t\tthis.rotationAngle = this._offset.dot( _tempVector.copy( this.rotationAxis ).cross( this.eye ) ) * ROTATION_SPEED;\n\n\t\t\t} else if ( axis === 'X' || axis === 'Y' || axis === 'Z' ) {\n\n\t\t\t\tthis.rotationAxis.copy( _unit[ axis ] );\n\n\t\t\t\t_tempVector.copy( _unit[ axis ] );\n\n\t\t\t\tif ( space === 'local' ) {\n\n\t\t\t\t\t_tempVector.applyQuaternion( this.worldQuaternion );\n\n\t\t\t\t}\n\n\t\t\t\t_tempVector.cross( this.eye );\n\n\t\t\t\t// When _tempVector is 0 after cross with this.eye the vectors are parallel and should use in-plane rotation logic.\n\t\t\t\tif ( _tempVector.length() === 0 ) {\n\n\t\t\t\t\t_inPlaneRotation = true;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.rotationAngle = this._offset.dot( _tempVector.normalize() ) * ROTATION_SPEED;\n\n\t\t\t\t}\n\n\n\t\t\t}\n\n\t\t\tif ( axis === 'E' || _inPlaneRotation ) {\n\n\t\t\t\tthis.rotationAxis.copy( this.eye );\n\t\t\t\tthis.rotationAngle = this.pointEnd.angleTo( this.pointStart );\n\n\t\t\t\tthis._startNorm.copy( this.pointStart ).normalize();\n\t\t\t\tthis._endNorm.copy( this.pointEnd ).normalize();\n\n\t\t\t\tthis.rotationAngle *= ( this._endNorm.cross( this._startNorm ).dot( this.eye ) < 0 ? 1 : - 1 );\n\n\t\t\t}\n\n\t\t\t// Apply rotation snap\n\n\t\t\tif ( this.rotationSnap ) this.rotationAngle = Math.round( this.rotationAngle / this.rotationSnap ) * this.rotationSnap;\n\n\t\t\t// Apply rotate\n\t\t\tif ( space === 'local' && axis !== 'E' && axis !== 'XYZE' ) {\n\n\t\t\t\tobject.quaternion.copy( this._quaternionStart );\n\t\t\t\tobject.quaternion.multiply( _tempQuaternion.setFromAxisAngle( this.rotationAxis, this.rotationAngle ) ).normalize();\n\n\t\t\t} else {\n\n\t\t\t\tthis.rotationAxis.applyQuaternion( this._parentQuaternionInv );\n\t\t\t\tobject.quaternion.copy( _tempQuaternion.setFromAxisAngle( this.rotationAxis, this.rotationAngle ) );\n\t\t\t\tobject.quaternion.multiply( this._quaternionStart ).normalize();\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.dispatchEvent( _changeEvent );\n\t\tthis.dispatchEvent( _objectChangeEvent );\n\n\t}\n\n\tpointerUp( pointer ) {\n\n\t\tif ( pointer !== null && pointer.button !== 0 ) return;\n\n\t\tif ( this.dragging && ( this.axis !== null ) ) {\n\n\t\t\t_mouseUpEvent.mode = this.mode;\n\t\t\tthis.dispatchEvent( _mouseUpEvent );\n\n\t\t}\n\n\t\tthis.dragging = false;\n\t\tthis.axis = null;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.disconnect();\n\n\t\tthis._root.dispose();\n\n\t}\n\n\t/**\n\t * Sets the 3D object that should be transformed and ensures the controls UI is visible.\n\t *\n\t * @param {Object3D} object -  The 3D object that should be transformed.\n\t * @return {TransformControls} A reference to this controls.\n\t */\n\tattach( object ) {\n\n\t\tthis.object = object;\n\t\tthis._root.visible = true;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Removes the current 3D object from the controls and makes the helper UI invisible.\n\t *\n\t * @return {TransformControls} A reference to this controls.\n\t */\n\tdetach() {\n\n\t\tthis.object = undefined;\n\t\tthis.axis = null;\n\n\t\tthis._root.visible = false;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Resets the object's position, rotation and scale to when the current transform began.\n\t */\n\treset() {\n\n\t\tif ( ! this.enabled ) return;\n\n\t\tif ( this.dragging ) {\n\n\t\t\tthis.object.position.copy( this._positionStart );\n\t\t\tthis.object.quaternion.copy( this._quaternionStart );\n\t\t\tthis.object.scale.copy( this._scaleStart );\n\n\t\t\tthis.dispatchEvent( _changeEvent );\n\t\t\tthis.dispatchEvent( _objectChangeEvent );\n\n\t\t\tthis.pointStart.copy( this.pointEnd );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns the raycaster that is used for user interaction. This object is shared between all\n\t * instances of `TransformControls`.\n\t *\n\t * @returns {Raycaster} The internal raycaster.\n\t */\n\tgetRaycaster() {\n\n\t\treturn _raycaster;\n\n\t}\n\n\t/**\n\t * Returns the transformation mode.\n\t *\n\t * @returns {'translate'|'rotate'|'scale'} The transformation mode.\n\t */\n\tgetMode() {\n\n\t\treturn this.mode;\n\n\t}\n\n\t/**\n\t * Sets the given transformation mode.\n\t *\n\t * @param {'translate'|'rotate'|'scale'} mode - The transformation mode to set.\n\t */\n\tsetMode( mode ) {\n\n\t\tthis.mode = mode;\n\n\t}\n\n\t/**\n\t * Sets the translation snap.\n\t *\n\t * @param {?number} translationSnap - The translation snap to set.\n\t */\n\tsetTranslationSnap( translationSnap ) {\n\n\t\tthis.translationSnap = translationSnap;\n\n\t}\n\n\t/**\n\t * Sets the rotation snap.\n\t *\n\t * @param {?number} rotationSnap - The rotation snap to set.\n\t */\n\tsetRotationSnap( rotationSnap ) {\n\n\t\tthis.rotationSnap = rotationSnap;\n\n\t}\n\n\t/**\n\t * Sets the scale snap.\n\t *\n\t * @param {?number} scaleSnap - The scale snap to set.\n\t */\n\tsetScaleSnap( scaleSnap ) {\n\n\t\tthis.scaleSnap = scaleSnap;\n\n\t}\n\n\t/**\n\t * Sets the size of the helper UI.\n\t *\n\t * @param {number} size - The size to set.\n\t */\n\tsetSize( size ) {\n\n\t\tthis.size = size;\n\n\t}\n\n\t/**\n\t * Sets the coordinate space in which transformations are applied.\n\t *\n\t * @param {'world'|'local'} space - The space to set.\n\t */\n\tsetSpace( space ) {\n\n\t\tthis.space = space;\n\n\t}\n\n}\n\n// mouse / touch event handlers\n\nfunction getPointer( event ) {\n\n\tif ( this.domElement.ownerDocument.pointerLockElement ) {\n\n\t\treturn {\n\t\t\tx: 0,\n\t\t\ty: 0,\n\t\t\tbutton: event.button\n\t\t};\n\n\t} else {\n\n\t\tconst rect = this.domElement.getBoundingClientRect();\n\n\t\treturn {\n\t\t\tx: ( event.clientX - rect.left ) / rect.width * 2 - 1,\n\t\t\ty: - ( event.clientY - rect.top ) / rect.height * 2 + 1,\n\t\t\tbutton: event.button\n\t\t};\n\n\t}\n\n}\n\nfunction onPointerHover( event ) {\n\n\tif ( ! this.enabled ) return;\n\n\tswitch ( event.pointerType ) {\n\n\t\tcase 'mouse':\n\t\tcase 'pen':\n\t\t\tthis.pointerHover( this._getPointer( event ) );\n\t\t\tbreak;\n\n\t}\n\n}\n\nfunction onPointerDown( event ) {\n\n\tif ( ! this.enabled ) return;\n\n\tif ( ! document.pointerLockElement ) {\n\n\t\tthis.domElement.setPointerCapture( event.pointerId );\n\n\t}\n\n\tthis.domElement.addEventListener( 'pointermove', this._onPointerMove );\n\n\tthis.pointerHover( this._getPointer( event ) );\n\tthis.pointerDown( this._getPointer( event ) );\n\n}\n\nfunction onPointerMove( event ) {\n\n\tif ( ! this.enabled ) return;\n\n\tthis.pointerMove( this._getPointer( event ) );\n\n}\n\nfunction onPointerUp( event ) {\n\n\tif ( ! this.enabled ) return;\n\n\tthis.domElement.releasePointerCapture( event.pointerId );\n\n\tthis.domElement.removeEventListener( 'pointermove', this._onPointerMove );\n\n\tthis.pointerUp( this._getPointer( event ) );\n\n}\n\nfunction intersectObjectWithRay( object, raycaster, includeInvisible ) {\n\n\tconst allIntersections = raycaster.intersectObject( object, true );\n\n\tfor ( let i = 0; i < allIntersections.length; i ++ ) {\n\n\t\tif ( allIntersections[ i ].object.visible || includeInvisible ) {\n\n\t\t\treturn allIntersections[ i ];\n\n\t\t}\n\n\t}\n\n\treturn false;\n\n}\n\n//\n\n// Reusable utility variables\n\nconst _tempEuler = new Euler();\nconst _alignVector = new Vector3( 0, 1, 0 );\nconst _zeroVector = new Vector3( 0, 0, 0 );\nconst _lookAtMatrix = new Matrix4();\nconst _tempQuaternion2 = new Quaternion();\nconst _identityQuaternion = new Quaternion();\nconst _dirVector = new Vector3();\nconst _tempMatrix = new Matrix4();\n\nconst _unitX = new Vector3( 1, 0, 0 );\nconst _unitY = new Vector3( 0, 1, 0 );\nconst _unitZ = new Vector3( 0, 0, 1 );\n\nconst _v1 = new Vector3();\nconst _v2 = new Vector3();\nconst _v3 = new Vector3();\n\nclass TransformControlsRoot extends Object3D {\n\n\tconstructor( controls ) {\n\n\t\tsuper();\n\n\t\tthis.isTransformControlsRoot = true;\n\n\t\tthis.controls = controls;\n\t\tthis.visible = false;\n\n\t}\n\n\t// updateMatrixWorld updates key transformation variables\n\tupdateMatrixWorld( force ) {\n\n\t\tconst controls = this.controls;\n\n\t\tif ( controls.object !== undefined ) {\n\n\t\t\tcontrols.object.updateMatrixWorld();\n\n\t\t\tif ( controls.object.parent === null ) {\n\n\t\t\t\tconsole.error( 'TransformControls: The attached 3D object must be a part of the scene graph.' );\n\n\t\t\t} else {\n\n\t\t\t\tcontrols.object.parent.matrixWorld.decompose( controls._parentPosition, controls._parentQuaternion, controls._parentScale );\n\n\t\t\t}\n\n\t\t\tcontrols.object.matrixWorld.decompose( controls.worldPosition, controls.worldQuaternion, controls._worldScale );\n\n\t\t\tcontrols._parentQuaternionInv.copy( controls._parentQuaternion ).invert();\n\t\t\tcontrols._worldQuaternionInv.copy( controls.worldQuaternion ).invert();\n\n\t\t}\n\n\t\tcontrols.camera.updateMatrixWorld();\n\t\tcontrols.camera.matrixWorld.decompose( controls.cameraPosition, controls.cameraQuaternion, controls._cameraScale );\n\n\t\tif ( controls.camera.isOrthographicCamera ) {\n\n\t\t\tcontrols.camera.getWorldDirection( controls.eye ).negate();\n\n\t\t} else {\n\n\t\t\tcontrols.eye.copy( controls.cameraPosition ).sub( controls.worldPosition ).normalize();\n\n\t\t}\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.traverse( function ( child ) {\n\n\t\t\tif ( child.geometry ) child.geometry.dispose();\n\t\t\tif ( child.material ) child.material.dispose();\n\n\t\t} );\n\n\t}\n\n}\n\nclass TransformControlsGizmo extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isTransformControlsGizmo = true;\n\n\t\tthis.type = 'TransformControlsGizmo';\n\n\t\t// shared materials\n\n\t\tconst gizmoMaterial = new MeshBasicMaterial( {\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\tfog: false,\n\t\t\ttoneMapped: false,\n\t\t\ttransparent: true\n\t\t} );\n\n\t\tconst gizmoLineMaterial = new LineBasicMaterial( {\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\tfog: false,\n\t\t\ttoneMapped: false,\n\t\t\ttransparent: true\n\t\t} );\n\n\t\t// Make unique material for each axis/color\n\n\t\tconst matInvisible = gizmoMaterial.clone();\n\t\tmatInvisible.opacity = 0.15;\n\n\t\tconst matHelper = gizmoLineMaterial.clone();\n\t\tmatHelper.opacity = 0.5;\n\n\t\tconst matRed = gizmoMaterial.clone();\n\t\tmatRed.color.setHex( 0xff0000 );\n\n\t\tconst matGreen = gizmoMaterial.clone();\n\t\tmatGreen.color.setHex( 0x00ff00 );\n\n\t\tconst matBlue = gizmoMaterial.clone();\n\t\tmatBlue.color.setHex( 0x0000ff );\n\n\t\tconst matRedTransparent = gizmoMaterial.clone();\n\t\tmatRedTransparent.color.setHex( 0xff0000 );\n\t\tmatRedTransparent.opacity = 0.5;\n\n\t\tconst matGreenTransparent = gizmoMaterial.clone();\n\t\tmatGreenTransparent.color.setHex( 0x00ff00 );\n\t\tmatGreenTransparent.opacity = 0.5;\n\n\t\tconst matBlueTransparent = gizmoMaterial.clone();\n\t\tmatBlueTransparent.color.setHex( 0x0000ff );\n\t\tmatBlueTransparent.opacity = 0.5;\n\n\t\tconst matWhiteTransparent = gizmoMaterial.clone();\n\t\tmatWhiteTransparent.opacity = 0.25;\n\n\t\tconst matYellowTransparent = gizmoMaterial.clone();\n\t\tmatYellowTransparent.color.setHex( 0xffff00 );\n\t\tmatYellowTransparent.opacity = 0.25;\n\n\t\tconst matYellow = gizmoMaterial.clone();\n\t\tmatYellow.color.setHex( 0xffff00 );\n\n\t\tconst matGray = gizmoMaterial.clone();\n\t\tmatGray.color.setHex( 0x787878 );\n\n\t\t// reusable geometry\n\n\t\tconst arrowGeometry = new CylinderGeometry( 0, 0.04, 0.1, 12 );\n\t\tarrowGeometry.translate( 0, 0.05, 0 );\n\n\t\tconst scaleHandleGeometry = new BoxGeometry( 0.08, 0.08, 0.08 );\n\t\tscaleHandleGeometry.translate( 0, 0.04, 0 );\n\n\t\tconst lineGeometry = new BufferGeometry();\n\t\tlineGeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0,\t1, 0, 0 ], 3 ) );\n\n\t\tconst lineGeometry2 = new CylinderGeometry( 0.0075, 0.0075, 0.5, 3 );\n\t\tlineGeometry2.translate( 0, 0.25, 0 );\n\n\t\tfunction CircleGeometry( radius, arc ) {\n\n\t\t\tconst geometry = new TorusGeometry( radius, 0.0075, 3, 64, arc * Math.PI * 2 );\n\t\t\tgeometry.rotateY( Math.PI / 2 );\n\t\t\tgeometry.rotateX( Math.PI / 2 );\n\t\t\treturn geometry;\n\n\t\t}\n\n\t\t// Special geometry for transform helper. If scaled with position vector it spans from [0,0,0] to position\n\n\t\tfunction TranslateHelperGeometry() {\n\n\t\t\tconst geometry = new BufferGeometry();\n\n\t\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 1, 1, 1 ], 3 ) );\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t\t// Gizmo definitions - custom hierarchy definitions for setupGizmo() function\n\n\t\tconst gizmoTranslate = {\n\t\t\tX: [\n\t\t\t\t[ new Mesh( arrowGeometry, matRed ), [ 0.5, 0, 0 ], [ 0, 0, - Math.PI / 2 ]],\n\t\t\t\t[ new Mesh( arrowGeometry, matRed ), [ - 0.5, 0, 0 ], [ 0, 0, Math.PI / 2 ]],\n\t\t\t\t[ new Mesh( lineGeometry2, matRed ), [ 0, 0, 0 ], [ 0, 0, - Math.PI / 2 ]]\n\t\t\t],\n\t\t\tY: [\n\t\t\t\t[ new Mesh( arrowGeometry, matGreen ), [ 0, 0.5, 0 ]],\n\t\t\t\t[ new Mesh( arrowGeometry, matGreen ), [ 0, - 0.5, 0 ], [ Math.PI, 0, 0 ]],\n\t\t\t\t[ new Mesh( lineGeometry2, matGreen ) ]\n\t\t\t],\n\t\t\tZ: [\n\t\t\t\t[ new Mesh( arrowGeometry, matBlue ), [ 0, 0, 0.5 ], [ Math.PI / 2, 0, 0 ]],\n\t\t\t\t[ new Mesh( arrowGeometry, matBlue ), [ 0, 0, - 0.5 ], [ - Math.PI / 2, 0, 0 ]],\n\t\t\t\t[ new Mesh( lineGeometry2, matBlue ), null, [ Math.PI / 2, 0, 0 ]]\n\t\t\t],\n\t\t\tXYZ: [\n\t\t\t\t[ new Mesh( new OctahedronGeometry( 0.1, 0 ), matWhiteTransparent.clone() ), [ 0, 0, 0 ]]\n\t\t\t],\n\t\t\tXY: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.15, 0.15, 0.01 ), matBlueTransparent.clone() ), [ 0.15, 0.15, 0 ]]\n\t\t\t],\n\t\t\tYZ: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.15, 0.15, 0.01 ), matRedTransparent.clone() ), [ 0, 0.15, 0.15 ], [ 0, Math.PI / 2, 0 ]]\n\t\t\t],\n\t\t\tXZ: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.15, 0.15, 0.01 ), matGreenTransparent.clone() ), [ 0.15, 0, 0.15 ], [ - Math.PI / 2, 0, 0 ]]\n\t\t\t]\n\t\t};\n\n\t\tconst pickerTranslate = {\n\t\t\tX: [\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ 0.3, 0, 0 ], [ 0, 0, - Math.PI / 2 ]],\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ - 0.3, 0, 0 ], [ 0, 0, Math.PI / 2 ]]\n\t\t\t],\n\t\t\tY: [\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ 0, 0.3, 0 ]],\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ 0, - 0.3, 0 ], [ 0, 0, Math.PI ]]\n\t\t\t],\n\t\t\tZ: [\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ 0, 0, 0.3 ], [ Math.PI / 2, 0, 0 ]],\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ 0, 0, - 0.3 ], [ - Math.PI / 2, 0, 0 ]]\n\t\t\t],\n\t\t\tXYZ: [\n\t\t\t\t[ new Mesh( new OctahedronGeometry( 0.2, 0 ), matInvisible ) ]\n\t\t\t],\n\t\t\tXY: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.2, 0.2, 0.01 ), matInvisible ), [ 0.15, 0.15, 0 ]]\n\t\t\t],\n\t\t\tYZ: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.2, 0.2, 0.01 ), matInvisible ), [ 0, 0.15, 0.15 ], [ 0, Math.PI / 2, 0 ]]\n\t\t\t],\n\t\t\tXZ: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.2, 0.2, 0.01 ), matInvisible ), [ 0.15, 0, 0.15 ], [ - Math.PI / 2, 0, 0 ]]\n\t\t\t]\n\t\t};\n\n\t\tconst helperTranslate = {\n\t\t\tSTART: [\n\t\t\t\t[ new Mesh( new OctahedronGeometry( 0.01, 2 ), matHelper ), null, null, null, 'helper' ]\n\t\t\t],\n\t\t\tEND: [\n\t\t\t\t[ new Mesh( new OctahedronGeometry( 0.01, 2 ), matHelper ), null, null, null, 'helper' ]\n\t\t\t],\n\t\t\tDELTA: [\n\t\t\t\t[ new Line( TranslateHelperGeometry(), matHelper ), null, null, null, 'helper' ]\n\t\t\t],\n\t\t\tX: [\n\t\t\t\t[ new Line( lineGeometry, matHelper.clone() ), [ - 1e3, 0, 0 ], null, [ 1e6, 1, 1 ], 'helper' ]\n\t\t\t],\n\t\t\tY: [\n\t\t\t\t[ new Line( lineGeometry, matHelper.clone() ), [ 0, - 1e3, 0 ], [ 0, 0, Math.PI / 2 ], [ 1e6, 1, 1 ], 'helper' ]\n\t\t\t],\n\t\t\tZ: [\n\t\t\t\t[ new Line( lineGeometry, matHelper.clone() ), [ 0, 0, - 1e3 ], [ 0, - Math.PI / 2, 0 ], [ 1e6, 1, 1 ], 'helper' ]\n\t\t\t]\n\t\t};\n\n\t\tconst gizmoRotate = {\n\t\t\tXYZE: [\n\t\t\t\t[ new Mesh( CircleGeometry( 0.5, 1 ), matGray ), null, [ 0, Math.PI / 2, 0 ]]\n\t\t\t],\n\t\t\tX: [\n\t\t\t\t[ new Mesh( CircleGeometry( 0.5, 0.5 ), matRed ) ]\n\t\t\t],\n\t\t\tY: [\n\t\t\t\t[ new Mesh( CircleGeometry( 0.5, 0.5 ), matGreen ), null, [ 0, 0, - Math.PI / 2 ]]\n\t\t\t],\n\t\t\tZ: [\n\t\t\t\t[ new Mesh( CircleGeometry( 0.5, 0.5 ), matBlue ), null, [ 0, Math.PI / 2, 0 ]]\n\t\t\t],\n\t\t\tE: [\n\t\t\t\t[ new Mesh( CircleGeometry( 0.75, 1 ), matYellowTransparent ), null, [ 0, Math.PI / 2, 0 ]]\n\t\t\t]\n\t\t};\n\n\t\tconst helperRotate = {\n\t\t\tAXIS: [\n\t\t\t\t[ new Line( lineGeometry, matHelper.clone() ), [ - 1e3, 0, 0 ], null, [ 1e6, 1, 1 ], 'helper' ]\n\t\t\t]\n\t\t};\n\n\t\tconst pickerRotate = {\n\t\t\tXYZE: [\n\t\t\t\t[ new Mesh( new SphereGeometry( 0.25, 10, 8 ), matInvisible ) ]\n\t\t\t],\n\t\t\tX: [\n\t\t\t\t[ new Mesh( new TorusGeometry( 0.5, 0.1, 4, 24 ), matInvisible ), [ 0, 0, 0 ], [ 0, - Math.PI / 2, - Math.PI / 2 ]],\n\t\t\t],\n\t\t\tY: [\n\t\t\t\t[ new Mesh( new TorusGeometry( 0.5, 0.1, 4, 24 ), matInvisible ), [ 0, 0, 0 ], [ Math.PI / 2, 0, 0 ]],\n\t\t\t],\n\t\t\tZ: [\n\t\t\t\t[ new Mesh( new TorusGeometry( 0.5, 0.1, 4, 24 ), matInvisible ), [ 0, 0, 0 ], [ 0, 0, - Math.PI / 2 ]],\n\t\t\t],\n\t\t\tE: [\n\t\t\t\t[ new Mesh( new TorusGeometry( 0.75, 0.1, 2, 24 ), matInvisible ) ]\n\t\t\t]\n\t\t};\n\n\t\tconst gizmoScale = {\n\t\t\tX: [\n\t\t\t\t[ new Mesh( scaleHandleGeometry, matRed ), [ 0.5, 0, 0 ], [ 0, 0, - Math.PI / 2 ]],\n\t\t\t\t[ new Mesh( lineGeometry2, matRed ), [ 0, 0, 0 ], [ 0, 0, - Math.PI / 2 ]],\n\t\t\t\t[ new Mesh( scaleHandleGeometry, matRed ), [ - 0.5, 0, 0 ], [ 0, 0, Math.PI / 2 ]],\n\t\t\t],\n\t\t\tY: [\n\t\t\t\t[ new Mesh( scaleHandleGeometry, matGreen ), [ 0, 0.5, 0 ]],\n\t\t\t\t[ new Mesh( lineGeometry2, matGreen ) ],\n\t\t\t\t[ new Mesh( scaleHandleGeometry, matGreen ), [ 0, - 0.5, 0 ], [ 0, 0, Math.PI ]],\n\t\t\t],\n\t\t\tZ: [\n\t\t\t\t[ new Mesh( scaleHandleGeometry, matBlue ), [ 0, 0, 0.5 ], [ Math.PI / 2, 0, 0 ]],\n\t\t\t\t[ new Mesh( lineGeometry2, matBlue ), [ 0, 0, 0 ], [ Math.PI / 2, 0, 0 ]],\n\t\t\t\t[ new Mesh( scaleHandleGeometry, matBlue ), [ 0, 0, - 0.5 ], [ - Math.PI / 2, 0, 0 ]]\n\t\t\t],\n\t\t\tXY: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.15, 0.15, 0.01 ), matBlueTransparent ), [ 0.15, 0.15, 0 ]]\n\t\t\t],\n\t\t\tYZ: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.15, 0.15, 0.01 ), matRedTransparent ), [ 0, 0.15, 0.15 ], [ 0, Math.PI / 2, 0 ]]\n\t\t\t],\n\t\t\tXZ: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.15, 0.15, 0.01 ), matGreenTransparent ), [ 0.15, 0, 0.15 ], [ - Math.PI / 2, 0, 0 ]]\n\t\t\t],\n\t\t\tXYZ: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.1, 0.1, 0.1 ), matWhiteTransparent.clone() ) ],\n\t\t\t]\n\t\t};\n\n\t\tconst pickerScale = {\n\t\t\tX: [\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ 0.3, 0, 0 ], [ 0, 0, - Math.PI / 2 ]],\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ - 0.3, 0, 0 ], [ 0, 0, Math.PI / 2 ]]\n\t\t\t],\n\t\t\tY: [\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ 0, 0.3, 0 ]],\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ 0, - 0.3, 0 ], [ 0, 0, Math.PI ]]\n\t\t\t],\n\t\t\tZ: [\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ 0, 0, 0.3 ], [ Math.PI / 2, 0, 0 ]],\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ 0, 0, - 0.3 ], [ - Math.PI / 2, 0, 0 ]]\n\t\t\t],\n\t\t\tXY: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.2, 0.2, 0.01 ), matInvisible ), [ 0.15, 0.15, 0 ]],\n\t\t\t],\n\t\t\tYZ: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.2, 0.2, 0.01 ), matInvisible ), [ 0, 0.15, 0.15 ], [ 0, Math.PI / 2, 0 ]],\n\t\t\t],\n\t\t\tXZ: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.2, 0.2, 0.01 ), matInvisible ), [ 0.15, 0, 0.15 ], [ - Math.PI / 2, 0, 0 ]],\n\t\t\t],\n\t\t\tXYZ: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.2, 0.2, 0.2 ), matInvisible ), [ 0, 0, 0 ]],\n\t\t\t]\n\t\t};\n\n\t\tconst helperScale = {\n\t\t\tX: [\n\t\t\t\t[ new Line( lineGeometry, matHelper.clone() ), [ - 1e3, 0, 0 ], null, [ 1e6, 1, 1 ], 'helper' ]\n\t\t\t],\n\t\t\tY: [\n\t\t\t\t[ new Line( lineGeometry, matHelper.clone() ), [ 0, - 1e3, 0 ], [ 0, 0, Math.PI / 2 ], [ 1e6, 1, 1 ], 'helper' ]\n\t\t\t],\n\t\t\tZ: [\n\t\t\t\t[ new Line( lineGeometry, matHelper.clone() ), [ 0, 0, - 1e3 ], [ 0, - Math.PI / 2, 0 ], [ 1e6, 1, 1 ], 'helper' ]\n\t\t\t]\n\t\t};\n\n\t\t// Creates an Object3D with gizmos described in custom hierarchy definition.\n\n\t\tfunction setupGizmo( gizmoMap ) {\n\n\t\t\tconst gizmo = new Object3D();\n\n\t\t\tfor ( const name in gizmoMap ) {\n\n\t\t\t\tfor ( let i = gizmoMap[ name ].length; i --; ) {\n\n\t\t\t\t\tconst object = gizmoMap[ name ][ i ][ 0 ].clone();\n\t\t\t\t\tconst position = gizmoMap[ name ][ i ][ 1 ];\n\t\t\t\t\tconst rotation = gizmoMap[ name ][ i ][ 2 ];\n\t\t\t\t\tconst scale = gizmoMap[ name ][ i ][ 3 ];\n\t\t\t\t\tconst tag = gizmoMap[ name ][ i ][ 4 ];\n\n\t\t\t\t\t// name and tag properties are essential for picking and updating logic.\n\t\t\t\t\tobject.name = name;\n\t\t\t\t\tobject.tag = tag;\n\n\t\t\t\t\tif ( position ) {\n\n\t\t\t\t\t\tobject.position.set( position[ 0 ], position[ 1 ], position[ 2 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( rotation ) {\n\n\t\t\t\t\t\tobject.rotation.set( rotation[ 0 ], rotation[ 1 ], rotation[ 2 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( scale ) {\n\n\t\t\t\t\t\tobject.scale.set( scale[ 0 ], scale[ 1 ], scale[ 2 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tobject.updateMatrix();\n\n\t\t\t\t\tconst tempGeometry = object.geometry.clone();\n\t\t\t\t\ttempGeometry.applyMatrix4( object.matrix );\n\t\t\t\t\tobject.geometry = tempGeometry;\n\t\t\t\t\tobject.renderOrder = Infinity;\n\n\t\t\t\t\tobject.position.set( 0, 0, 0 );\n\t\t\t\t\tobject.rotation.set( 0, 0, 0 );\n\t\t\t\t\tobject.scale.set( 1, 1, 1 );\n\n\t\t\t\t\tgizmo.add( object );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn gizmo;\n\n\t\t}\n\n\t\t// Gizmo creation\n\n\t\tthis.gizmo = {};\n\t\tthis.picker = {};\n\t\tthis.helper = {};\n\n\t\tthis.add( this.gizmo[ 'translate' ] = setupGizmo( gizmoTranslate ) );\n\t\tthis.add( this.gizmo[ 'rotate' ] = setupGizmo( gizmoRotate ) );\n\t\tthis.add( this.gizmo[ 'scale' ] = setupGizmo( gizmoScale ) );\n\t\tthis.add( this.picker[ 'translate' ] = setupGizmo( pickerTranslate ) );\n\t\tthis.add( this.picker[ 'rotate' ] = setupGizmo( pickerRotate ) );\n\t\tthis.add( this.picker[ 'scale' ] = setupGizmo( pickerScale ) );\n\t\tthis.add( this.helper[ 'translate' ] = setupGizmo( helperTranslate ) );\n\t\tthis.add( this.helper[ 'rotate' ] = setupGizmo( helperRotate ) );\n\t\tthis.add( this.helper[ 'scale' ] = setupGizmo( helperScale ) );\n\n\t\t// Pickers should be hidden always\n\n\t\tthis.picker[ 'translate' ].visible = false;\n\t\tthis.picker[ 'rotate' ].visible = false;\n\t\tthis.picker[ 'scale' ].visible = false;\n\n\t}\n\n\t// updateMatrixWorld will update transformations and appearance of individual handles\n\n\tupdateMatrixWorld( force ) {\n\n\t\tconst space = ( this.mode === 'scale' ) ? 'local' : this.space; // scale always oriented to local rotation\n\n\t\tconst quaternion = ( space === 'local' ) ? this.worldQuaternion : _identityQuaternion;\n\n\t\t// Show only gizmos for current transform mode\n\n\t\tthis.gizmo[ 'translate' ].visible = this.mode === 'translate';\n\t\tthis.gizmo[ 'rotate' ].visible = this.mode === 'rotate';\n\t\tthis.gizmo[ 'scale' ].visible = this.mode === 'scale';\n\n\t\tthis.helper[ 'translate' ].visible = this.mode === 'translate';\n\t\tthis.helper[ 'rotate' ].visible = this.mode === 'rotate';\n\t\tthis.helper[ 'scale' ].visible = this.mode === 'scale';\n\n\n\t\tlet handles = [];\n\t\thandles = handles.concat( this.picker[ this.mode ].children );\n\t\thandles = handles.concat( this.gizmo[ this.mode ].children );\n\t\thandles = handles.concat( this.helper[ this.mode ].children );\n\n\t\tfor ( let i = 0; i < handles.length; i ++ ) {\n\n\t\t\tconst handle = handles[ i ];\n\n\t\t\t// hide aligned to camera\n\n\t\t\thandle.visible = true;\n\t\t\thandle.rotation.set( 0, 0, 0 );\n\t\t\thandle.position.copy( this.worldPosition );\n\n\t\t\tlet factor;\n\n\t\t\tif ( this.camera.isOrthographicCamera ) {\n\n\t\t\t\tfactor = ( this.camera.top - this.camera.bottom ) / this.camera.zoom;\n\n\t\t\t} else {\n\n\t\t\t\tfactor = this.worldPosition.distanceTo( this.cameraPosition ) * Math.min( 1.9 * Math.tan( Math.PI * this.camera.fov / 360 ) / this.camera.zoom, 7 );\n\n\t\t\t}\n\n\t\t\thandle.scale.set( 1, 1, 1 ).multiplyScalar( factor * this.size / 4 );\n\n\t\t\t// TODO: simplify helpers and consider decoupling from gizmo\n\n\t\t\tif ( handle.tag === 'helper' ) {\n\n\t\t\t\thandle.visible = false;\n\n\t\t\t\tif ( handle.name === 'AXIS' ) {\n\n\t\t\t\t\thandle.visible = !! this.axis;\n\n\t\t\t\t\tif ( this.axis === 'X' ) {\n\n\t\t\t\t\t\t_tempQuaternion.setFromEuler( _tempEuler.set( 0, 0, 0 ) );\n\t\t\t\t\t\thandle.quaternion.copy( quaternion ).multiply( _tempQuaternion );\n\n\t\t\t\t\t\tif ( Math.abs( _alignVector.copy( _unitX ).applyQuaternion( quaternion ).dot( this.eye ) ) > 0.9 ) {\n\n\t\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.axis === 'Y' ) {\n\n\t\t\t\t\t\t_tempQuaternion.setFromEuler( _tempEuler.set( 0, 0, Math.PI / 2 ) );\n\t\t\t\t\t\thandle.quaternion.copy( quaternion ).multiply( _tempQuaternion );\n\n\t\t\t\t\t\tif ( Math.abs( _alignVector.copy( _unitY ).applyQuaternion( quaternion ).dot( this.eye ) ) > 0.9 ) {\n\n\t\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.axis === 'Z' ) {\n\n\t\t\t\t\t\t_tempQuaternion.setFromEuler( _tempEuler.set( 0, Math.PI / 2, 0 ) );\n\t\t\t\t\t\thandle.quaternion.copy( quaternion ).multiply( _tempQuaternion );\n\n\t\t\t\t\t\tif ( Math.abs( _alignVector.copy( _unitZ ).applyQuaternion( quaternion ).dot( this.eye ) ) > 0.9 ) {\n\n\t\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.axis === 'XYZE' ) {\n\n\t\t\t\t\t\t_tempQuaternion.setFromEuler( _tempEuler.set( 0, Math.PI / 2, 0 ) );\n\t\t\t\t\t\t_alignVector.copy( this.rotationAxis );\n\t\t\t\t\t\thandle.quaternion.setFromRotationMatrix( _lookAtMatrix.lookAt( _zeroVector, _alignVector, _unitY ) );\n\t\t\t\t\t\thandle.quaternion.multiply( _tempQuaternion );\n\t\t\t\t\t\thandle.visible = this.dragging;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.axis === 'E' ) {\n\n\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t}\n\n\n\t\t\t\t} else if ( handle.name === 'START' ) {\n\n\t\t\t\t\thandle.position.copy( this.worldPositionStart );\n\t\t\t\t\thandle.visible = this.dragging;\n\n\t\t\t\t} else if ( handle.name === 'END' ) {\n\n\t\t\t\t\thandle.position.copy( this.worldPosition );\n\t\t\t\t\thandle.visible = this.dragging;\n\n\t\t\t\t} else if ( handle.name === 'DELTA' ) {\n\n\t\t\t\t\thandle.position.copy( this.worldPositionStart );\n\t\t\t\t\thandle.quaternion.copy( this.worldQuaternionStart );\n\t\t\t\t\t_tempVector.set( 1e-10, 1e-10, 1e-10 ).add( this.worldPositionStart ).sub( this.worldPosition ).multiplyScalar( - 1 );\n\t\t\t\t\t_tempVector.applyQuaternion( this.worldQuaternionStart.clone().invert() );\n\t\t\t\t\thandle.scale.copy( _tempVector );\n\t\t\t\t\thandle.visible = this.dragging;\n\n\t\t\t\t} else {\n\n\t\t\t\t\thandle.quaternion.copy( quaternion );\n\n\t\t\t\t\tif ( this.dragging ) {\n\n\t\t\t\t\t\thandle.position.copy( this.worldPositionStart );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\thandle.position.copy( this.worldPosition );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.axis ) {\n\n\t\t\t\t\t\thandle.visible = this.axis.search( handle.name ) !== - 1;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// If updating helper, skip rest of the loop\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\t// Align handles to current local or world rotation\n\n\t\t\thandle.quaternion.copy( quaternion );\n\n\t\t\tif ( this.mode === 'translate' || this.mode === 'scale' ) {\n\n\t\t\t\t// Hide translate and scale axis facing the camera\n\n\t\t\t\tconst AXIS_HIDE_THRESHOLD = 0.99;\n\t\t\t\tconst PLANE_HIDE_THRESHOLD = 0.2;\n\n\t\t\t\tif ( handle.name === 'X' ) {\n\n\t\t\t\t\tif ( Math.abs( _alignVector.copy( _unitX ).applyQuaternion( quaternion ).dot( this.eye ) ) > AXIS_HIDE_THRESHOLD ) {\n\n\t\t\t\t\t\thandle.scale.set( 1e-10, 1e-10, 1e-10 );\n\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name === 'Y' ) {\n\n\t\t\t\t\tif ( Math.abs( _alignVector.copy( _unitY ).applyQuaternion( quaternion ).dot( this.eye ) ) > AXIS_HIDE_THRESHOLD ) {\n\n\t\t\t\t\t\thandle.scale.set( 1e-10, 1e-10, 1e-10 );\n\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name === 'Z' ) {\n\n\t\t\t\t\tif ( Math.abs( _alignVector.copy( _unitZ ).applyQuaternion( quaternion ).dot( this.eye ) ) > AXIS_HIDE_THRESHOLD ) {\n\n\t\t\t\t\t\thandle.scale.set( 1e-10, 1e-10, 1e-10 );\n\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name === 'XY' ) {\n\n\t\t\t\t\tif ( Math.abs( _alignVector.copy( _unitZ ).applyQuaternion( quaternion ).dot( this.eye ) ) < PLANE_HIDE_THRESHOLD ) {\n\n\t\t\t\t\t\thandle.scale.set( 1e-10, 1e-10, 1e-10 );\n\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name === 'YZ' ) {\n\n\t\t\t\t\tif ( Math.abs( _alignVector.copy( _unitX ).applyQuaternion( quaternion ).dot( this.eye ) ) < PLANE_HIDE_THRESHOLD ) {\n\n\t\t\t\t\t\thandle.scale.set( 1e-10, 1e-10, 1e-10 );\n\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name === 'XZ' ) {\n\n\t\t\t\t\tif ( Math.abs( _alignVector.copy( _unitY ).applyQuaternion( quaternion ).dot( this.eye ) ) < PLANE_HIDE_THRESHOLD ) {\n\n\t\t\t\t\t\thandle.scale.set( 1e-10, 1e-10, 1e-10 );\n\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( this.mode === 'rotate' ) {\n\n\t\t\t\t// Align handles to current local or world rotation\n\n\t\t\t\t_tempQuaternion2.copy( quaternion );\n\t\t\t\t_alignVector.copy( this.eye ).applyQuaternion( _tempQuaternion.copy( quaternion ).invert() );\n\n\t\t\t\tif ( handle.name.search( 'E' ) !== - 1 ) {\n\n\t\t\t\t\thandle.quaternion.setFromRotationMatrix( _lookAtMatrix.lookAt( this.eye, _zeroVector, _unitY ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name === 'X' ) {\n\n\t\t\t\t\t_tempQuaternion.setFromAxisAngle( _unitX, Math.atan2( - _alignVector.y, _alignVector.z ) );\n\t\t\t\t\t_tempQuaternion.multiplyQuaternions( _tempQuaternion2, _tempQuaternion );\n\t\t\t\t\thandle.quaternion.copy( _tempQuaternion );\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name === 'Y' ) {\n\n\t\t\t\t\t_tempQuaternion.setFromAxisAngle( _unitY, Math.atan2( _alignVector.x, _alignVector.z ) );\n\t\t\t\t\t_tempQuaternion.multiplyQuaternions( _tempQuaternion2, _tempQuaternion );\n\t\t\t\t\thandle.quaternion.copy( _tempQuaternion );\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name === 'Z' ) {\n\n\t\t\t\t\t_tempQuaternion.setFromAxisAngle( _unitZ, Math.atan2( _alignVector.y, _alignVector.x ) );\n\t\t\t\t\t_tempQuaternion.multiplyQuaternions( _tempQuaternion2, _tempQuaternion );\n\t\t\t\t\thandle.quaternion.copy( _tempQuaternion );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Hide disabled axes\n\t\t\thandle.visible = handle.visible && ( handle.name.indexOf( 'X' ) === - 1 || this.showX );\n\t\t\thandle.visible = handle.visible && ( handle.name.indexOf( 'Y' ) === - 1 || this.showY );\n\t\t\thandle.visible = handle.visible && ( handle.name.indexOf( 'Z' ) === - 1 || this.showZ );\n\t\t\thandle.visible = handle.visible && ( handle.name.indexOf( 'E' ) === - 1 || ( this.showX && this.showY && this.showZ ) );\n\n\t\t\t// highlight selected axis\n\n\t\t\thandle.material._color = handle.material._color || handle.material.color.clone();\n\t\t\thandle.material._opacity = handle.material._opacity || handle.material.opacity;\n\n\t\t\thandle.material.color.copy( handle.material._color );\n\t\t\thandle.material.opacity = handle.material._opacity;\n\n\t\t\tif ( this.enabled && this.axis ) {\n\n\t\t\t\tif ( handle.name === this.axis ) {\n\n\t\t\t\t\thandle.material.color.setHex( 0xffff00 );\n\t\t\t\t\thandle.material.opacity = 1.0;\n\n\t\t\t\t} else if ( this.axis.split( '' ).some( function ( a ) {\n\n\t\t\t\t\treturn handle.name === a;\n\n\t\t\t\t} ) ) {\n\n\t\t\t\t\thandle.material.color.setHex( 0xffff00 );\n\t\t\t\t\thandle.material.opacity = 1.0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t}\n\n}\n\n//\n\nclass TransformControlsPlane extends Mesh {\n\n\tconstructor() {\n\n\t\tsuper(\n\t\t\tnew PlaneGeometry( 100000, 100000, 2, 2 ),\n\t\t\tnew MeshBasicMaterial( { visible: false, wireframe: true, side: DoubleSide, transparent: true, opacity: 0.1, toneMapped: false } )\n\t\t);\n\n\t\tthis.isTransformControlsPlane = true;\n\n\t\tthis.type = 'TransformControlsPlane';\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tlet space = this.space;\n\n\t\tthis.position.copy( this.worldPosition );\n\n\t\tif ( this.mode === 'scale' ) space = 'local'; // scale always oriented to local rotation\n\n\t\t_v1.copy( _unitX ).applyQuaternion( space === 'local' ? this.worldQuaternion : _identityQuaternion );\n\t\t_v2.copy( _unitY ).applyQuaternion( space === 'local' ? this.worldQuaternion : _identityQuaternion );\n\t\t_v3.copy( _unitZ ).applyQuaternion( space === 'local' ? this.worldQuaternion : _identityQuaternion );\n\n\t\t// Align the plane for current transform mode, axis and space.\n\n\t\t_alignVector.copy( _v2 );\n\n\t\tswitch ( this.mode ) {\n\n\t\t\tcase 'translate':\n\t\t\tcase 'scale':\n\t\t\t\tswitch ( this.axis ) {\n\n\t\t\t\t\tcase 'X':\n\t\t\t\t\t\t_alignVector.copy( this.eye ).cross( _v1 );\n\t\t\t\t\t\t_dirVector.copy( _v1 ).cross( _alignVector );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Y':\n\t\t\t\t\t\t_alignVector.copy( this.eye ).cross( _v2 );\n\t\t\t\t\t\t_dirVector.copy( _v2 ).cross( _alignVector );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Z':\n\t\t\t\t\t\t_alignVector.copy( this.eye ).cross( _v3 );\n\t\t\t\t\t\t_dirVector.copy( _v3 ).cross( _alignVector );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'XY':\n\t\t\t\t\t\t_dirVector.copy( _v3 );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'YZ':\n\t\t\t\t\t\t_dirVector.copy( _v1 );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'XZ':\n\t\t\t\t\t\t_alignVector.copy( _v3 );\n\t\t\t\t\t\t_dirVector.copy( _v2 );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'XYZ':\n\t\t\t\t\tcase 'E':\n\t\t\t\t\t\t_dirVector.set( 0, 0, 0 );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\tcase 'rotate':\n\t\t\tdefault:\n\t\t\t\t// special case for rotate\n\t\t\t\t_dirVector.set( 0, 0, 0 );\n\n\t\t}\n\n\t\tif ( _dirVector.length() === 0 ) {\n\n\t\t\t// If in rotate mode, make the plane parallel to camera\n\t\t\tthis.quaternion.copy( this.cameraQuaternion );\n\n\t\t} else {\n\n\t\t\t_tempMatrix.lookAt( _tempVector.set( 0, 0, 0 ), _dirVector, _alignVector );\n\n\t\t\tthis.quaternion.setFromRotationMatrix( _tempMatrix );\n\n\t\t}\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t}\n\n}\n\nexport { TransformControls, TransformControlsGizmo, TransformControlsPlane };\n"],"mappings":"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AACA;AACA;AACA;IACEA,cAAc,CAAE,MAAM,EAAE,IAAK,CAAC;;IAE9B;AACF;AACA;AACA;AACA;AACA;AACA;IACEA,cAAc,CAAE,MAAM,EAAE,WAAY,CAAC;;IAErC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;IACEA,cAAc,CAAE,iBAAiB,EAAE,IAAK,CAAC;;IAEzC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;IACEA,cAAc,CAAE,cAAc,EAAE,IAAK,CAAC;;IAEtC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;IACEA,cAAc,CAAE,WAAW,EAAE,IAAK,CAAC;;IAEnC;AACF;AACA;AACA;AACA;AACA;AACA;IACEA,cAAc,CAAE,OAAO,EAAE,OAAQ,CAAC;;IAElC;AACF;AACA;AACA;AACA;AACA;AACA;IACEA,cAAc,CAAE,MAAM,EAAE,CAAE,CAAC;;IAE3B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;IACEA,cAAc,CAAE,UAAU,EAAE,KAAM,CAAC;;IAEnC;AACF;AACA;AACA;AACA;AACA;AACA;IACEA,cAAc,CAAE,OAAO,EAAE,IAAK,CAAC;;IAE/B;AACF;AACA;AACA;AACA;AACA;AACA;IACEA,cAAc,CAAE,OAAO,EAAE,IAAK,CAAC;;IAE/B;AACF;AACA;AACA;AACA;AACA;AACA;IACEA,cAAc,CAAE,OAAO,EAAE,IAAK,CAAC;;IAE/B;AACF;AACA;AACA;AACA;AACA;AACA;IACEA,cAAc,CAAE,MAAM,EAAE,CAAES,QAAS,CAAC;;IAEpC;AACF;AACA;AACA;AACA;AACA;AACA;IACET,cAAc,CAAE,MAAM,EAAES,QAAS,CAAC;;IAElC;AACF;AACA;AACA;AACA;AACA;AACA;IACET,cAAc,CAAE,MAAM,EAAE,CAAES,QAAS,CAAC;;IAEpC;AACF;AACA;AACA;AACA;AACA;AACA;IACET,cAAc,CAAE,MAAM,EAAES,QAAS,CAAC;;IAElC;AACF;AACA;AACA;AACA;AACA;AACA;IACET,cAAc,CAAE,MAAM,EAAE,CAAES,QAAS,CAAC;;IAEpC;AACF;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}