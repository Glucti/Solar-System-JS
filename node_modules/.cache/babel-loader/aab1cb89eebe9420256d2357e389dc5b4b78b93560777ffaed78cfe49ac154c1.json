{"ast":null,"code":"import { BufferAttribute, BufferGeometry, Color, DynamicDrawUsage, Matrix4, Mesh, MeshStandardMaterial, Vector3 } from 'three';\n\n/**\n * @classdesc This module can be used to paint tube-like meshes\n * along a sequence of points. This module is used in a XR\n * painter demo.\n *\n * ```js\n * const painter = new TubePainter();\n * scene.add( painter.mesh );\n * ```\n *\n * @name TubePainter\n * @class\n * @three_import import { TubePainter } from 'three/addons/misc/TubePainter.js';\n */\nfunction TubePainter() {\n  const BUFFER_SIZE = 1000000 * 3;\n  const positions = new BufferAttribute(new Float32Array(BUFFER_SIZE), 3);\n  positions.usage = DynamicDrawUsage;\n  const normals = new BufferAttribute(new Float32Array(BUFFER_SIZE), 3);\n  normals.usage = DynamicDrawUsage;\n  const colors = new BufferAttribute(new Float32Array(BUFFER_SIZE), 3);\n  colors.usage = DynamicDrawUsage;\n  const geometry = new BufferGeometry();\n  geometry.setAttribute('position', positions);\n  geometry.setAttribute('normal', normals);\n  geometry.setAttribute('color', colors);\n  geometry.drawRange.count = 0;\n  const material = new MeshStandardMaterial({\n    vertexColors: true\n  });\n  const mesh = new Mesh(geometry, material);\n  mesh.frustumCulled = false;\n\n  //\n\n  function getPoints(size) {\n    const PI2 = Math.PI * 2;\n    const sides = 10;\n    const array = [];\n    const radius = 0.01 * size;\n    for (let i = 0; i < sides; i++) {\n      const angle = i / sides * PI2;\n      array.push(new Vector3(Math.sin(angle) * radius, Math.cos(angle) * radius, 0));\n    }\n    return array;\n  }\n\n  //\n\n  const vector1 = new Vector3();\n  const vector2 = new Vector3();\n  const vector3 = new Vector3();\n  const vector4 = new Vector3();\n  const color = new Color(0xffffff);\n  let size = 1;\n  function stroke(position1, position2, matrix1, matrix2) {\n    if (position1.distanceToSquared(position2) === 0) return;\n    let count = geometry.drawRange.count;\n    const points = getPoints(size);\n    for (let i = 0, il = points.length; i < il; i++) {\n      const vertex1 = points[i];\n      const vertex2 = points[(i + 1) % il];\n\n      // positions\n\n      vector1.copy(vertex1).applyMatrix4(matrix2).add(position2);\n      vector2.copy(vertex2).applyMatrix4(matrix2).add(position2);\n      vector3.copy(vertex2).applyMatrix4(matrix1).add(position1);\n      vector4.copy(vertex1).applyMatrix4(matrix1).add(position1);\n      vector1.toArray(positions.array, (count + 0) * 3);\n      vector2.toArray(positions.array, (count + 1) * 3);\n      vector4.toArray(positions.array, (count + 2) * 3);\n      vector2.toArray(positions.array, (count + 3) * 3);\n      vector3.toArray(positions.array, (count + 4) * 3);\n      vector4.toArray(positions.array, (count + 5) * 3);\n\n      // normals\n\n      vector1.copy(vertex1).applyMatrix4(matrix2).normalize();\n      vector2.copy(vertex2).applyMatrix4(matrix2).normalize();\n      vector3.copy(vertex2).applyMatrix4(matrix1).normalize();\n      vector4.copy(vertex1).applyMatrix4(matrix1).normalize();\n      vector1.toArray(normals.array, (count + 0) * 3);\n      vector2.toArray(normals.array, (count + 1) * 3);\n      vector4.toArray(normals.array, (count + 2) * 3);\n      vector2.toArray(normals.array, (count + 3) * 3);\n      vector3.toArray(normals.array, (count + 4) * 3);\n      vector4.toArray(normals.array, (count + 5) * 3);\n\n      // colors\n\n      color.toArray(colors.array, (count + 0) * 3);\n      color.toArray(colors.array, (count + 1) * 3);\n      color.toArray(colors.array, (count + 2) * 3);\n      color.toArray(colors.array, (count + 3) * 3);\n      color.toArray(colors.array, (count + 4) * 3);\n      color.toArray(colors.array, (count + 5) * 3);\n      count += 6;\n    }\n    geometry.drawRange.count = count;\n  }\n\n  //\n\n  const up = new Vector3(0, 1, 0);\n  const point1 = new Vector3();\n  const point2 = new Vector3();\n  const matrix1 = new Matrix4();\n  const matrix2 = new Matrix4();\n  function moveTo(position) {\n    point1.copy(position);\n    matrix1.lookAt(point2, point1, up);\n    point2.copy(position);\n    matrix2.copy(matrix1);\n  }\n  function lineTo(position) {\n    point1.copy(position);\n    matrix1.lookAt(point2, point1, up);\n    stroke(point1, point2, matrix1, matrix2);\n    point2.copy(point1);\n    matrix2.copy(matrix1);\n  }\n  function setSize(value) {\n    size = value;\n  }\n\n  //\n\n  let count = 0;\n  function update() {\n    const start = count;\n    const end = geometry.drawRange.count;\n    if (start === end) return;\n    positions.addUpdateRange(start * 3, (end - start) * 3);\n    positions.needsUpdate = true;\n    normals.addUpdateRange(start * 3, (end - start) * 3);\n    normals.needsUpdate = true;\n    colors.addUpdateRange(start * 3, (end - start) * 3);\n    colors.needsUpdate = true;\n    count = geometry.drawRange.count;\n  }\n  return {\n    /**\n     * The \"painted\" tube mesh. Must be added to the scene.\n     *\n     * @name TubePainter#mesh\n     * @type {Mesh}\n     */\n    mesh: mesh,\n    /**\n     * Moves the current painting position to the given value.\n     *\n     * @method\n     * @name TubePainter#moveTo\n     * @param {Vector3} position The new painting position.\n     */\n    moveTo: moveTo,\n    /**\n     * Draw a stroke from the current position to the given one.\n     * This method extends the tube while drawing with the XR\n     * controllers.\n     *\n     * @method\n     * @name TubePainter#lineTo\n     * @param {Vector3} position The destination position.\n     */\n    lineTo: lineTo,\n    /**\n     * Sets the size of newly rendered tube segments.\n     *\n     * @method\n     * @name TubePainter#setSize\n     * @param {number} size The size.\n     */\n    setSize: setSize,\n    /**\n     * Updates the internal geometry buffers so the new painted\n     * segments are rendered.\n     *\n     * @method\n     * @name TubePainter#update\n     */\n    update: update\n  };\n}\nexport { TubePainter };","map":{"version":3,"names":["BufferAttribute","BufferGeometry","Color","DynamicDrawUsage","Matrix4","Mesh","MeshStandardMaterial","Vector3","TubePainter","BUFFER_SIZE","positions","Float32Array","usage","normals","colors","geometry","setAttribute","drawRange","count","material","vertexColors","mesh","frustumCulled","getPoints","size","PI2","Math","PI","sides","array","radius","i","angle","push","sin","cos","vector1","vector2","vector3","vector4","color","stroke","position1","position2","matrix1","matrix2","distanceToSquared","points","il","length","vertex1","vertex2","copy","applyMatrix4","add","toArray","normalize","up","point1","point2","moveTo","position","lookAt","lineTo","setSize","value","update","start","end","addUpdateRange","needsUpdate"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/misc/TubePainter.js"],"sourcesContent":["import {\n\tBufferAttribute,\n\tBufferGeometry,\n\tColor,\n\tDynamicDrawUsage,\n\tMatrix4,\n\tMesh,\n\tMeshStandardMaterial,\n\tVector3\n} from 'three';\n\n/**\n * @classdesc This module can be used to paint tube-like meshes\n * along a sequence of points. This module is used in a XR\n * painter demo.\n *\n * ```js\n * const painter = new TubePainter();\n * scene.add( painter.mesh );\n * ```\n *\n * @name TubePainter\n * @class\n * @three_import import { TubePainter } from 'three/addons/misc/TubePainter.js';\n */\nfunction TubePainter() {\n\n\tconst BUFFER_SIZE = 1000000 * 3;\n\n\tconst positions = new BufferAttribute( new Float32Array( BUFFER_SIZE ), 3 );\n\tpositions.usage = DynamicDrawUsage;\n\n\tconst normals = new BufferAttribute( new Float32Array( BUFFER_SIZE ), 3 );\n\tnormals.usage = DynamicDrawUsage;\n\n\tconst colors = new BufferAttribute( new Float32Array( BUFFER_SIZE ), 3 );\n\tcolors.usage = DynamicDrawUsage;\n\n\tconst geometry = new BufferGeometry();\n\tgeometry.setAttribute( 'position', positions );\n\tgeometry.setAttribute( 'normal', normals );\n\tgeometry.setAttribute( 'color', colors );\n\tgeometry.drawRange.count = 0;\n\n\tconst material = new MeshStandardMaterial( {\n\t\tvertexColors: true\n\t} );\n\n\tconst mesh = new Mesh( geometry, material );\n\tmesh.frustumCulled = false;\n\n\t//\n\n\tfunction getPoints( size ) {\n\n\t\tconst PI2 = Math.PI * 2;\n\n\t\tconst sides = 10;\n\t\tconst array = [];\n\t\tconst radius = 0.01 * size;\n\n\t\tfor ( let i = 0; i < sides; i ++ ) {\n\n\t\t\tconst angle = ( i / sides ) * PI2;\n\t\t\tarray.push( new Vector3( Math.sin( angle ) * radius, Math.cos( angle ) * radius, 0 ) );\n\n\t\t}\n\n\t\treturn array;\n\n\t}\n\n\t//\n\n\tconst vector1 = new Vector3();\n\tconst vector2 = new Vector3();\n\tconst vector3 = new Vector3();\n\tconst vector4 = new Vector3();\n\n\tconst color = new Color( 0xffffff );\n\tlet size = 1;\n\n\tfunction stroke( position1, position2, matrix1, matrix2 ) {\n\n\t\tif ( position1.distanceToSquared( position2 ) === 0 ) return;\n\n\t\tlet count = geometry.drawRange.count;\n\n\t\tconst points = getPoints( size );\n\n\t\tfor ( let i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tconst vertex1 = points[ i ];\n\t\t\tconst vertex2 = points[ ( i + 1 ) % il ];\n\n\t\t\t// positions\n\n\t\t\tvector1.copy( vertex1 ).applyMatrix4( matrix2 ).add( position2 );\n\t\t\tvector2.copy( vertex2 ).applyMatrix4( matrix2 ).add( position2 );\n\t\t\tvector3.copy( vertex2 ).applyMatrix4( matrix1 ).add( position1 );\n\t\t\tvector4.copy( vertex1 ).applyMatrix4( matrix1 ).add( position1 );\n\n\t\t\tvector1.toArray( positions.array, ( count + 0 ) * 3 );\n\t\t\tvector2.toArray( positions.array, ( count + 1 ) * 3 );\n\t\t\tvector4.toArray( positions.array, ( count + 2 ) * 3 );\n\n\t\t\tvector2.toArray( positions.array, ( count + 3 ) * 3 );\n\t\t\tvector3.toArray( positions.array, ( count + 4 ) * 3 );\n\t\t\tvector4.toArray( positions.array, ( count + 5 ) * 3 );\n\n\t\t\t// normals\n\n\t\t\tvector1.copy( vertex1 ).applyMatrix4( matrix2 ).normalize();\n\t\t\tvector2.copy( vertex2 ).applyMatrix4( matrix2 ).normalize();\n\t\t\tvector3.copy( vertex2 ).applyMatrix4( matrix1 ).normalize();\n\t\t\tvector4.copy( vertex1 ).applyMatrix4( matrix1 ).normalize();\n\n\t\t\tvector1.toArray( normals.array, ( count + 0 ) * 3 );\n\t\t\tvector2.toArray( normals.array, ( count + 1 ) * 3 );\n\t\t\tvector4.toArray( normals.array, ( count + 2 ) * 3 );\n\n\t\t\tvector2.toArray( normals.array, ( count + 3 ) * 3 );\n\t\t\tvector3.toArray( normals.array, ( count + 4 ) * 3 );\n\t\t\tvector4.toArray( normals.array, ( count + 5 ) * 3 );\n\n\t\t\t// colors\n\n\t\t\tcolor.toArray( colors.array, ( count + 0 ) * 3 );\n\t\t\tcolor.toArray( colors.array, ( count + 1 ) * 3 );\n\t\t\tcolor.toArray( colors.array, ( count + 2 ) * 3 );\n\n\t\t\tcolor.toArray( colors.array, ( count + 3 ) * 3 );\n\t\t\tcolor.toArray( colors.array, ( count + 4 ) * 3 );\n\t\t\tcolor.toArray( colors.array, ( count + 5 ) * 3 );\n\n\t\t\tcount += 6;\n\n\t\t}\n\n\t\tgeometry.drawRange.count = count;\n\n\t}\n\n\t//\n\n\tconst up = new Vector3( 0, 1, 0 );\n\n\tconst point1 = new Vector3();\n\tconst point2 = new Vector3();\n\n\tconst matrix1 = new Matrix4();\n\tconst matrix2 = new Matrix4();\n\n\tfunction moveTo( position ) {\n\n\t\tpoint1.copy( position );\n\t\tmatrix1.lookAt( point2, point1, up );\n\n\t\tpoint2.copy( position );\n\t\tmatrix2.copy( matrix1 );\n\n\t}\n\n\tfunction lineTo( position ) {\n\n\t\tpoint1.copy( position );\n\t\tmatrix1.lookAt( point2, point1, up );\n\n\t\tstroke( point1, point2, matrix1, matrix2 );\n\n\t\tpoint2.copy( point1 );\n\t\tmatrix2.copy( matrix1 );\n\n\t}\n\n\tfunction setSize( value ) {\n\n\t\tsize = value;\n\n\t}\n\n\t//\n\n\tlet count = 0;\n\n\tfunction update() {\n\n\t\tconst start = count;\n\t\tconst end = geometry.drawRange.count;\n\n\t\tif ( start === end ) return;\n\n\t\tpositions.addUpdateRange( start * 3, ( end - start ) * 3 );\n\t\tpositions.needsUpdate = true;\n\n\t\tnormals.addUpdateRange( start * 3, ( end - start ) * 3 );\n\t\tnormals.needsUpdate = true;\n\n\t\tcolors.addUpdateRange( start * 3, ( end - start ) * 3 );\n\t\tcolors.needsUpdate = true;\n\n\t\tcount = geometry.drawRange.count;\n\n\t}\n\n\treturn {\n\t\t/**\n\t\t * The \"painted\" tube mesh. Must be added to the scene.\n\t\t *\n\t\t * @name TubePainter#mesh\n\t\t * @type {Mesh}\n\t\t */\n\t\tmesh: mesh,\n\n\t\t/**\n\t\t * Moves the current painting position to the given value.\n\t\t *\n\t\t * @method\n\t\t * @name TubePainter#moveTo\n\t\t * @param {Vector3} position The new painting position.\n\t\t */\n\t\tmoveTo: moveTo,\n\n\t\t/**\n\t\t * Draw a stroke from the current position to the given one.\n\t\t * This method extends the tube while drawing with the XR\n\t\t * controllers.\n\t\t *\n\t\t * @method\n\t\t * @name TubePainter#lineTo\n\t\t * @param {Vector3} position The destination position.\n\t\t */\n\t\tlineTo: lineTo,\n\n\t\t/**\n\t\t * Sets the size of newly rendered tube segments.\n\t\t *\n\t\t * @method\n\t\t * @name TubePainter#setSize\n\t\t * @param {number} size The size.\n\t\t */\n\t\tsetSize: setSize,\n\n\t\t/**\n\t\t * Updates the internal geometry buffers so the new painted\n\t\t * segments are rendered.\n\t\t *\n\t\t * @method\n\t\t * @name TubePainter#update\n\t\t */\n\t\tupdate: update\n\t};\n\n}\n\nexport { TubePainter };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}