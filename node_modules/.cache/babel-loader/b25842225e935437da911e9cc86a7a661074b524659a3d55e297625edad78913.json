{"ast":null,"code":"import { ClampToEdgeWrapping, Data3DTexture, FileLoader, LinearFilter, Loader, UnsignedByteType, Vector3 } from 'three';\n\n/**\n * A loader for the Cube LUT format.\n *\n * References:\n * - [Cube LUT Specification]{@link https://web.archive.org/web/20220220033515/https://wwwimages2.adobe.com/content/dam/acom/en/products/speedgrade/cc/pdfs/cube-lut-specification-1.0.pdf}\n *\n * ```js\n * const loader = new LUTCubeLoader();\n * const map = loader.loadAsync( 'luts/Bourbon 64.CUBE' );\n * ```\n *\n * @augments Loader\n * @three_import import { LUTCubeLoader } from 'three/addons/loaders/LUTCubeLoader.js';\n */\nexport class LUTCubeLoader extends Loader {\n  /**\n   * Constructs a new Cube LUT loader.\n   *\n   * @param {LoadingManager} [manager] - The loading manager.\n   */\n  constructor(manager) {\n    super(manager);\n\n    /**\n     * The texture type.\n     *\n     * @type {(UnsignedByteType|FloatType)}\n     * @default UnsignedByteType\n     */\n    this.type = UnsignedByteType;\n  }\n\n  /**\n   * Sets the texture type.\n   *\n   * @param {(UnsignedByteType|FloatType)} type - The texture type to set.\n   * @return {LUTCubeLoader} A reference to this loader.\n   */\n  setType(type) {\n    this.type = type;\n    return this;\n  }\n\n  /**\n   * Starts loading from the given URL and passes the loaded Cube LUT asset\n   * to the `onLoad()` callback.\n   *\n   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n   * @param {function({title:string,size:number,domainMin:Vector3,domainMax:Vector3,texture3D:Data3DTexture})} onLoad - Executed when the loading process has been finished.\n   * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n   * @param {onErrorCallback} onError - Executed when errors occur.\n   */\n  load(url, onLoad, onProgress, onError) {\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType('text');\n    loader.load(url, text => {\n      try {\n        onLoad(this.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        this.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  /**\n   * Parses the given Cube LUT data and returns the resulting 3D data texture.\n   *\n   * @param {string} input - The raw Cube LUT data as a string.\n   * @return {{title:string,size:number,domainMin:Vector3,domainMax:Vector3,texture3D:Data3DTexture}} The parsed Cube LUT.\n   */\n  parse(input) {\n    const regExpTitle = /TITLE +\"([^\"]*)\"/;\n    const regExpSize = /LUT_3D_SIZE +(\\d+)/;\n    const regExpDomainMin = /DOMAIN_MIN +([\\d.]+) +([\\d.]+) +([\\d.]+)/;\n    const regExpDomainMax = /DOMAIN_MAX +([\\d.]+) +([\\d.]+) +([\\d.]+)/;\n    const regExpDataPoints = /^([\\d.e+-]+) +([\\d.e+-]+) +([\\d.e+-]+) *$/gm;\n    let result = regExpTitle.exec(input);\n    const title = result !== null ? result[1] : null;\n    result = regExpSize.exec(input);\n    if (result === null) {\n      throw new Error('LUTCubeLoader: Missing LUT_3D_SIZE information');\n    }\n    const size = Number(result[1]);\n    const length = size ** 3 * 4;\n    const data = this.type === UnsignedByteType ? new Uint8Array(length) : new Float32Array(length);\n    const domainMin = new Vector3(0, 0, 0);\n    const domainMax = new Vector3(1, 1, 1);\n    result = regExpDomainMin.exec(input);\n    if (result !== null) {\n      domainMin.set(Number(result[1]), Number(result[2]), Number(result[3]));\n    }\n    result = regExpDomainMax.exec(input);\n    if (result !== null) {\n      domainMax.set(Number(result[1]), Number(result[2]), Number(result[3]));\n    }\n    if (domainMin.x > domainMax.x || domainMin.y > domainMax.y || domainMin.z > domainMax.z) {\n      throw new Error('LUTCubeLoader: Invalid input domain');\n    }\n    const scale = this.type === UnsignedByteType ? 255 : 1;\n    let i = 0;\n    while ((result = regExpDataPoints.exec(input)) !== null) {\n      data[i++] = Number(result[1]) * scale;\n      data[i++] = Number(result[2]) * scale;\n      data[i++] = Number(result[3]) * scale;\n      data[i++] = scale;\n    }\n    const texture3D = new Data3DTexture();\n    texture3D.image.data = data;\n    texture3D.image.width = size;\n    texture3D.image.height = size;\n    texture3D.image.depth = size;\n    texture3D.type = this.type;\n    texture3D.magFilter = LinearFilter;\n    texture3D.minFilter = LinearFilter;\n    texture3D.wrapS = ClampToEdgeWrapping;\n    texture3D.wrapT = ClampToEdgeWrapping;\n    texture3D.wrapR = ClampToEdgeWrapping;\n    texture3D.generateMipmaps = false;\n    texture3D.needsUpdate = true;\n    return {\n      title,\n      size,\n      domainMin,\n      domainMax,\n      texture3D\n    };\n  }\n}","map":{"version":3,"names":["ClampToEdgeWrapping","Data3DTexture","FileLoader","LinearFilter","Loader","UnsignedByteType","Vector3","LUTCubeLoader","constructor","manager","type","setType","load","url","onLoad","onProgress","onError","loader","setPath","path","setResponseType","text","parse","e","console","error","itemError","input","regExpTitle","regExpSize","regExpDomainMin","regExpDomainMax","regExpDataPoints","result","exec","title","Error","size","Number","length","data","Uint8Array","Float32Array","domainMin","domainMax","set","x","y","z","scale","i","texture3D","image","width","height","depth","magFilter","minFilter","wrapS","wrapT","wrapR","generateMipmaps","needsUpdate"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/loaders/LUTCubeLoader.js"],"sourcesContent":["import {\n\tClampToEdgeWrapping,\n\tData3DTexture,\n\tFileLoader,\n\tLinearFilter,\n\tLoader,\n\tUnsignedByteType,\n\tVector3,\n} from 'three';\n\n/**\n * A loader for the Cube LUT format.\n *\n * References:\n * - [Cube LUT Specification]{@link https://web.archive.org/web/20220220033515/https://wwwimages2.adobe.com/content/dam/acom/en/products/speedgrade/cc/pdfs/cube-lut-specification-1.0.pdf}\n *\n * ```js\n * const loader = new LUTCubeLoader();\n * const map = loader.loadAsync( 'luts/Bourbon 64.CUBE' );\n * ```\n *\n * @augments Loader\n * @three_import import { LUTCubeLoader } from 'three/addons/loaders/LUTCubeLoader.js';\n */\nexport class LUTCubeLoader extends Loader {\n\n\t/**\n\t * Constructs a new Cube LUT loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\t/**\n\t\t * The texture type.\n\t\t *\n\t\t * @type {(UnsignedByteType|FloatType)}\n\t\t * @default UnsignedByteType\n\t\t */\n\t\tthis.type = UnsignedByteType;\n\n\t}\n\n\t/**\n\t * Sets the texture type.\n\t *\n\t * @param {(UnsignedByteType|FloatType)} type - The texture type to set.\n\t * @return {LUTCubeLoader} A reference to this loader.\n\t */\n\tsetType( type ) {\n\n\t\tthis.type = type;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Starts loading from the given URL and passes the loaded Cube LUT asset\n\t * to the `onLoad()` callback.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function({title:string,size:number,domainMin:Vector3,domainMax:Vector3,texture3D:Data3DTexture})} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'text' );\n\t\tloader.load( url, text => {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( this.parse( text ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tthis.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\t/**\n\t * Parses the given Cube LUT data and returns the resulting 3D data texture.\n\t *\n\t * @param {string} input - The raw Cube LUT data as a string.\n\t * @return {{title:string,size:number,domainMin:Vector3,domainMax:Vector3,texture3D:Data3DTexture}} The parsed Cube LUT.\n\t */\n\tparse( input ) {\n\n\t\tconst regExpTitle = /TITLE +\"([^\"]*)\"/;\n\t\tconst regExpSize = /LUT_3D_SIZE +(\\d+)/;\n\t\tconst regExpDomainMin = /DOMAIN_MIN +([\\d.]+) +([\\d.]+) +([\\d.]+)/;\n\t\tconst regExpDomainMax = /DOMAIN_MAX +([\\d.]+) +([\\d.]+) +([\\d.]+)/;\n\t\tconst regExpDataPoints = /^([\\d.e+-]+) +([\\d.e+-]+) +([\\d.e+-]+) *$/gm;\n\n\t\tlet result = regExpTitle.exec( input );\n\t\tconst title = ( result !== null ) ? result[ 1 ] : null;\n\n\t\tresult = regExpSize.exec( input );\n\n\t\tif ( result === null ) {\n\n\t\t\tthrow new Error( 'LUTCubeLoader: Missing LUT_3D_SIZE information' );\n\n\t\t}\n\n\t\tconst size = Number( result[ 1 ] );\n\t\tconst length = size ** 3 * 4;\n\t\tconst data = this.type === UnsignedByteType ? new Uint8Array( length ) : new Float32Array( length );\n\n\t\tconst domainMin = new Vector3( 0, 0, 0 );\n\t\tconst domainMax = new Vector3( 1, 1, 1 );\n\n\t\tresult = regExpDomainMin.exec( input );\n\n\t\tif ( result !== null ) {\n\n\t\t\tdomainMin.set( Number( result[ 1 ] ), Number( result[ 2 ] ), Number( result[ 3 ] ) );\n\n\t\t}\n\n\t\tresult = regExpDomainMax.exec( input );\n\n\t\tif ( result !== null ) {\n\n\t\t\tdomainMax.set( Number( result[ 1 ] ), Number( result[ 2 ] ), Number( result[ 3 ] ) );\n\n\t\t}\n\n\t\tif ( domainMin.x > domainMax.x || domainMin.y > domainMax.y || domainMin.z > domainMax.z ) {\n\n\t\t\tthrow new Error( 'LUTCubeLoader: Invalid input domain' );\n\n\t\t}\n\n\t\tconst scale = this.type === UnsignedByteType ? 255 : 1;\n\t\tlet i = 0;\n\n\t\twhile ( ( result = regExpDataPoints.exec( input ) ) !== null ) {\n\n\t\t\tdata[ i ++ ] = Number( result[ 1 ] ) * scale;\n\t\t\tdata[ i ++ ] = Number( result[ 2 ] ) * scale;\n\t\t\tdata[ i ++ ] = Number( result[ 3 ] ) * scale;\n\t\t\tdata[ i ++ ] = scale;\n\n\t\t}\n\n\t\tconst texture3D = new Data3DTexture();\n\t\ttexture3D.image.data = data;\n\t\ttexture3D.image.width = size;\n\t\ttexture3D.image.height = size;\n\t\ttexture3D.image.depth = size;\n\t\ttexture3D.type = this.type;\n\t\ttexture3D.magFilter = LinearFilter;\n\t\ttexture3D.minFilter = LinearFilter;\n\t\ttexture3D.wrapS = ClampToEdgeWrapping;\n\t\ttexture3D.wrapT = ClampToEdgeWrapping;\n\t\ttexture3D.wrapR = ClampToEdgeWrapping;\n\t\ttexture3D.generateMipmaps = false;\n\t\ttexture3D.needsUpdate = true;\n\n\t\treturn {\n\t\t\ttitle,\n\t\t\tsize,\n\t\t\tdomainMin,\n\t\t\tdomainMax,\n\t\t\ttexture3D,\n\t\t};\n\n\t}\n\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}