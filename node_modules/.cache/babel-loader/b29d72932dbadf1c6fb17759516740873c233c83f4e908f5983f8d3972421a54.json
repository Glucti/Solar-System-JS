{"ast":null,"code":"import { ColorManagement, RawShaderMaterial, UniformsUtils, LinearToneMapping, ReinhardToneMapping, CineonToneMapping, AgXToneMapping, ACESFilmicToneMapping, NeutralToneMapping, CustomToneMapping, SRGBTransfer } from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { OutputShader } from '../shaders/OutputShader.js';\n\n/**\n * This pass is responsible for including tone mapping and color space conversion\n * into your pass chain. In most cases, this pass should be included at the end\n * of each pass chain. If a pass requires sRGB input (e.g. like FXAA), the pass\n * must follow `OutputPass` in the pass chain.\n *\n * The tone mapping and color space settings are extracted from the renderer.\n *\n * ```js\n * const outputPass = new OutputPass();\n * composer.addPass( outputPass );\n * ```\n *\n * @augments Pass\n * @three_import import { OutputPass } from 'three/addons/postprocessing/OutputPass.js';\n */\nclass OutputPass extends Pass {\n  /**\n   * Constructs a new output pass.\n   */\n  constructor() {\n    super();\n\n    /**\n     * The pass uniforms.\n     *\n     * @type {Object}\n     */\n    this.uniforms = UniformsUtils.clone(OutputShader.uniforms);\n\n    /**\n     * The pass material.\n     *\n     * @type {RawShaderMaterial}\n     */\n    this.material = new RawShaderMaterial({\n      name: OutputShader.name,\n      uniforms: this.uniforms,\n      vertexShader: OutputShader.vertexShader,\n      fragmentShader: OutputShader.fragmentShader\n    });\n\n    // internals\n\n    this._fsQuad = new FullScreenQuad(this.material);\n    this._outputColorSpace = null;\n    this._toneMapping = null;\n  }\n\n  /**\n   * Performs the output pass.\n   *\n   * @param {WebGLRenderer} renderer - The renderer.\n   * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\n   * destination for the pass.\n   * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\n   * previous pass from this buffer.\n   * @param {number} deltaTime - The delta time in seconds.\n   * @param {boolean} maskActive - Whether masking is active or not.\n   */\n  render(renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */) {\n    this.uniforms['tDiffuse'].value = readBuffer.texture;\n    this.uniforms['toneMappingExposure'].value = renderer.toneMappingExposure;\n\n    // rebuild defines if required\n\n    if (this._outputColorSpace !== renderer.outputColorSpace || this._toneMapping !== renderer.toneMapping) {\n      this._outputColorSpace = renderer.outputColorSpace;\n      this._toneMapping = renderer.toneMapping;\n      this.material.defines = {};\n      if (ColorManagement.getTransfer(this._outputColorSpace) === SRGBTransfer) this.material.defines.SRGB_TRANSFER = '';\n      if (this._toneMapping === LinearToneMapping) this.material.defines.LINEAR_TONE_MAPPING = '';else if (this._toneMapping === ReinhardToneMapping) this.material.defines.REINHARD_TONE_MAPPING = '';else if (this._toneMapping === CineonToneMapping) this.material.defines.CINEON_TONE_MAPPING = '';else if (this._toneMapping === ACESFilmicToneMapping) this.material.defines.ACES_FILMIC_TONE_MAPPING = '';else if (this._toneMapping === AgXToneMapping) this.material.defines.AGX_TONE_MAPPING = '';else if (this._toneMapping === NeutralToneMapping) this.material.defines.NEUTRAL_TONE_MAPPING = '';else if (this._toneMapping === CustomToneMapping) this.material.defines.CUSTOM_TONE_MAPPING = '';\n      this.material.needsUpdate = true;\n    }\n\n    //\n\n    if (this.renderToScreen === true) {\n      renderer.setRenderTarget(null);\n      this._fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\n      this._fsQuad.render(renderer);\n    }\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever the pass is no longer used in your app.\n   */\n  dispose() {\n    this.material.dispose();\n    this._fsQuad.dispose();\n  }\n}\nexport { OutputPass };","map":{"version":3,"names":["ColorManagement","RawShaderMaterial","UniformsUtils","LinearToneMapping","ReinhardToneMapping","CineonToneMapping","AgXToneMapping","ACESFilmicToneMapping","NeutralToneMapping","CustomToneMapping","SRGBTransfer","Pass","FullScreenQuad","OutputShader","OutputPass","constructor","uniforms","clone","material","name","vertexShader","fragmentShader","_fsQuad","_outputColorSpace","_toneMapping","render","renderer","writeBuffer","readBuffer","value","texture","toneMappingExposure","outputColorSpace","toneMapping","defines","getTransfer","SRGB_TRANSFER","LINEAR_TONE_MAPPING","REINHARD_TONE_MAPPING","CINEON_TONE_MAPPING","ACES_FILMIC_TONE_MAPPING","AGX_TONE_MAPPING","NEUTRAL_TONE_MAPPING","CUSTOM_TONE_MAPPING","needsUpdate","renderToScreen","setRenderTarget","clear","autoClearColor","autoClearDepth","autoClearStencil","dispose"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/postprocessing/OutputPass.js"],"sourcesContent":["import {\n\tColorManagement,\n\tRawShaderMaterial,\n\tUniformsUtils,\n\tLinearToneMapping,\n\tReinhardToneMapping,\n\tCineonToneMapping,\n\tAgXToneMapping,\n\tACESFilmicToneMapping,\n\tNeutralToneMapping,\n\tCustomToneMapping,\n\tSRGBTransfer\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { OutputShader } from '../shaders/OutputShader.js';\n\n/**\n * This pass is responsible for including tone mapping and color space conversion\n * into your pass chain. In most cases, this pass should be included at the end\n * of each pass chain. If a pass requires sRGB input (e.g. like FXAA), the pass\n * must follow `OutputPass` in the pass chain.\n *\n * The tone mapping and color space settings are extracted from the renderer.\n *\n * ```js\n * const outputPass = new OutputPass();\n * composer.addPass( outputPass );\n * ```\n *\n * @augments Pass\n * @three_import import { OutputPass } from 'three/addons/postprocessing/OutputPass.js';\n */\nclass OutputPass extends Pass {\n\n\t/**\n\t * Constructs a new output pass.\n\t */\n\tconstructor() {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The pass uniforms.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.uniforms = UniformsUtils.clone( OutputShader.uniforms );\n\n\t\t/**\n\t\t * The pass material.\n\t\t *\n\t\t * @type {RawShaderMaterial}\n\t\t */\n\t\tthis.material = new RawShaderMaterial( {\n\t\t\tname: OutputShader.name,\n\t\t\tuniforms: this.uniforms,\n\t\t\tvertexShader: OutputShader.vertexShader,\n\t\t\tfragmentShader: OutputShader.fragmentShader\n\t\t} );\n\n\t\t// internals\n\n\t\tthis._fsQuad = new FullScreenQuad( this.material );\n\n\t\tthis._outputColorSpace = null;\n\t\tthis._toneMapping = null;\n\n\t}\n\n\t/**\n\t * Performs the output pass.\n\t *\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\n\t * destination for the pass.\n\t * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\n\t * previous pass from this buffer.\n\t * @param {number} deltaTime - The delta time in seconds.\n\t * @param {boolean} maskActive - Whether masking is active or not.\n\t */\n\trender( renderer, writeBuffer, readBuffer/*, deltaTime, maskActive */ ) {\n\n\t\tthis.uniforms[ 'tDiffuse' ].value = readBuffer.texture;\n\t\tthis.uniforms[ 'toneMappingExposure' ].value = renderer.toneMappingExposure;\n\n\t\t// rebuild defines if required\n\n\t\tif ( this._outputColorSpace !== renderer.outputColorSpace || this._toneMapping !== renderer.toneMapping ) {\n\n\t\t\tthis._outputColorSpace = renderer.outputColorSpace;\n\t\t\tthis._toneMapping = renderer.toneMapping;\n\n\t\t\tthis.material.defines = {};\n\n\t\t\tif ( ColorManagement.getTransfer( this._outputColorSpace ) === SRGBTransfer ) this.material.defines.SRGB_TRANSFER = '';\n\n\t\t\tif ( this._toneMapping === LinearToneMapping ) this.material.defines.LINEAR_TONE_MAPPING = '';\n\t\t\telse if ( this._toneMapping === ReinhardToneMapping ) this.material.defines.REINHARD_TONE_MAPPING = '';\n\t\t\telse if ( this._toneMapping === CineonToneMapping ) this.material.defines.CINEON_TONE_MAPPING = '';\n\t\t\telse if ( this._toneMapping === ACESFilmicToneMapping ) this.material.defines.ACES_FILMIC_TONE_MAPPING = '';\n\t\t\telse if ( this._toneMapping === AgXToneMapping ) this.material.defines.AGX_TONE_MAPPING = '';\n\t\t\telse if ( this._toneMapping === NeutralToneMapping ) this.material.defines.NEUTRAL_TONE_MAPPING = '';\n\t\t\telse if ( this._toneMapping === CustomToneMapping ) this.material.defines.CUSTOM_TONE_MAPPING = '';\n\n\t\t\tthis.material.needsUpdate = true;\n\n\t\t}\n\n\t\t//\n\n\t\tif ( this.renderToScreen === true ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis._fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\t\tthis._fsQuad.render( renderer );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever the pass is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.material.dispose();\n\t\tthis._fsQuad.dispose();\n\n\t}\n\n}\n\nexport { OutputPass };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}