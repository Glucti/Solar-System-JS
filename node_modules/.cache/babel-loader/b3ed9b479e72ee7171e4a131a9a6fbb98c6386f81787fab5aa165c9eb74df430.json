{"ast":null,"code":"import { ColorManagement, FloatType, HalfFloatType, UnsignedByteType, RGBAFormat, RGFormat, RGIntegerFormat, RedFormat, RedIntegerFormat, NoColorSpace, LinearSRGBColorSpace, SRGBColorSpace, SRGBTransfer, DataTexture, REVISION } from 'three';\nimport { write, KTX2Container, KHR_DF_CHANNEL_RGBSDA_ALPHA, KHR_DF_CHANNEL_RGBSDA_BLUE, KHR_DF_CHANNEL_RGBSDA_GREEN, KHR_DF_CHANNEL_RGBSDA_RED, KHR_DF_MODEL_RGBSDA, KHR_DF_PRIMARIES_BT709, KHR_DF_PRIMARIES_UNSPECIFIED, KHR_DF_SAMPLE_DATATYPE_FLOAT, KHR_DF_SAMPLE_DATATYPE_LINEAR, KHR_DF_SAMPLE_DATATYPE_SIGNED, KHR_DF_TRANSFER_LINEAR, KHR_DF_TRANSFER_SRGB, VK_FORMAT_R16_SFLOAT, VK_FORMAT_R16G16_SFLOAT, VK_FORMAT_R16G16B16A16_SFLOAT, VK_FORMAT_R32_SFLOAT, VK_FORMAT_R32G32_SFLOAT, VK_FORMAT_R32G32B32A32_SFLOAT, VK_FORMAT_R8_SRGB, VK_FORMAT_R8_UNORM, VK_FORMAT_R8G8_SRGB, VK_FORMAT_R8G8_UNORM, VK_FORMAT_R8G8B8A8_SRGB, VK_FORMAT_R8G8B8A8_UNORM } from '../libs/ktx-parse.module.js';\n\n/**\n * References:\n * - https://github.khronos.org/KTX-Specification/ktxspec.v2.html\n * - https://registry.khronos.org/DataFormat/specs/1.3/dataformat.1.3.html\n * - https://github.com/donmccurdy/KTX-Parse\n */\n\nconst VK_FORMAT_MAP = {\n  [RGBAFormat]: {\n    [FloatType]: {\n      [NoColorSpace]: VK_FORMAT_R32G32B32A32_SFLOAT,\n      [LinearSRGBColorSpace]: VK_FORMAT_R32G32B32A32_SFLOAT\n    },\n    [HalfFloatType]: {\n      [NoColorSpace]: VK_FORMAT_R16G16B16A16_SFLOAT,\n      [LinearSRGBColorSpace]: VK_FORMAT_R16G16B16A16_SFLOAT\n    },\n    [UnsignedByteType]: {\n      [NoColorSpace]: VK_FORMAT_R8G8B8A8_UNORM,\n      [LinearSRGBColorSpace]: VK_FORMAT_R8G8B8A8_UNORM,\n      [SRGBColorSpace]: VK_FORMAT_R8G8B8A8_SRGB\n    }\n  },\n  [RGFormat]: {\n    [FloatType]: {\n      [NoColorSpace]: VK_FORMAT_R32G32_SFLOAT,\n      [LinearSRGBColorSpace]: VK_FORMAT_R32G32_SFLOAT\n    },\n    [HalfFloatType]: {\n      [NoColorSpace]: VK_FORMAT_R16G16_SFLOAT,\n      [LinearSRGBColorSpace]: VK_FORMAT_R16G16_SFLOAT\n    },\n    [UnsignedByteType]: {\n      [NoColorSpace]: VK_FORMAT_R8G8_UNORM,\n      [LinearSRGBColorSpace]: VK_FORMAT_R8G8_UNORM,\n      [SRGBColorSpace]: VK_FORMAT_R8G8_SRGB\n    }\n  },\n  [RedFormat]: {\n    [FloatType]: {\n      [NoColorSpace]: VK_FORMAT_R32_SFLOAT,\n      [LinearSRGBColorSpace]: VK_FORMAT_R32_SFLOAT\n    },\n    [HalfFloatType]: {\n      [NoColorSpace]: VK_FORMAT_R16_SFLOAT,\n      [LinearSRGBColorSpace]: VK_FORMAT_R16_SFLOAT\n    },\n    [UnsignedByteType]: {\n      [NoColorSpace]: VK_FORMAT_R8_UNORM,\n      [LinearSRGBColorSpace]: VK_FORMAT_R8_UNORM,\n      [SRGBColorSpace]: VK_FORMAT_R8_SRGB\n    }\n  }\n};\nconst KHR_DF_CHANNEL_MAP = [KHR_DF_CHANNEL_RGBSDA_RED, KHR_DF_CHANNEL_RGBSDA_GREEN, KHR_DF_CHANNEL_RGBSDA_BLUE, KHR_DF_CHANNEL_RGBSDA_ALPHA];\n\n// TODO: sampleLower and sampleUpper may change based on color space.\nconst KHR_DF_CHANNEL_SAMPLE_LOWER_UPPER = {\n  [FloatType]: [0xbf800000, 0x3f800000],\n  [HalfFloatType]: [0xbf800000, 0x3f800000],\n  [UnsignedByteType]: [0, 255]\n};\nconst ERROR_INPUT = 'THREE.KTX2Exporter: Supported inputs are DataTexture, Data3DTexture, or WebGLRenderer and WebGLRenderTarget.';\nconst ERROR_FORMAT = 'THREE.KTX2Exporter: Supported formats are RGBAFormat, RGFormat, or RedFormat.';\nconst ERROR_TYPE = 'THREE.KTX2Exporter: Supported types are FloatType, HalfFloatType, or UnsignedByteType.\"';\nconst ERROR_COLOR_SPACE = 'THREE.KTX2Exporter: Supported color spaces are SRGBColorSpace (UnsignedByteType only), LinearSRGBColorSpace, or NoColorSpace.';\n\n/**\n * An exporter for KTX2.\n *\n * ```js\n * const exporter = new KTX2Exporter();\n * const result = await exporter.parse( dataTexture );\n * ```\n *\n * @three_import import { KTX2Exporter } from 'three/addons/exporters/KTX2Exporter.js';\n */\nexport class KTX2Exporter {\n  /**\n   * This method has two variants.\n   *\n   * - When exporting a data texture, it receives one parameter. The data or 3D data texture.\n   * - When exporting a render target (e.g. a PMREM), it receives two parameters. The renderer and the\n   * render target.\n   *\n   * @async\n   * @param {(DataTexture|Data3DTexture|WebGPURenderer|WebGLRenderer)} arg1 - The data texture to export or a renderer.\n   * @param {RenderTarget} [arg2] - The render target that should be exported\n   * @return {Promise<Uint8Array>} A Promise that resolves with the exported KTX2.\n   */\n  async parse(arg1, arg2) {\n    let texture;\n    if (arg1.isDataTexture || arg1.isData3DTexture) {\n      texture = arg1;\n    } else if ((arg1.isWebGLRenderer || arg1.isWebGPURenderer) && arg2.isRenderTarget) {\n      texture = await toDataTexture(arg1, arg2);\n    } else {\n      throw new Error(ERROR_INPUT);\n    }\n    if (VK_FORMAT_MAP[texture.format] === undefined) {\n      throw new Error(ERROR_FORMAT);\n    }\n    if (VK_FORMAT_MAP[texture.format][texture.type] === undefined) {\n      throw new Error(ERROR_TYPE);\n    }\n    if (VK_FORMAT_MAP[texture.format][texture.type][texture.colorSpace] === undefined) {\n      throw new Error(ERROR_COLOR_SPACE);\n    }\n\n    //\n\n    const array = texture.image.data;\n    const channelCount = getChannelCount(texture);\n    const container = new KTX2Container();\n    container.vkFormat = VK_FORMAT_MAP[texture.format][texture.type][texture.colorSpace];\n    container.typeSize = array.BYTES_PER_ELEMENT;\n    container.pixelWidth = texture.image.width;\n    container.pixelHeight = texture.image.height;\n    if (texture.isData3DTexture) {\n      container.pixelDepth = texture.image.depth;\n    }\n\n    //\n\n    const basicDesc = container.dataFormatDescriptor[0];\n    basicDesc.colorModel = KHR_DF_MODEL_RGBSDA;\n    basicDesc.colorPrimaries = texture.colorSpace === NoColorSpace ? KHR_DF_PRIMARIES_UNSPECIFIED : KHR_DF_PRIMARIES_BT709;\n    basicDesc.transferFunction = ColorManagement.getTransfer(texture.colorSpace) === SRGBTransfer ? KHR_DF_TRANSFER_SRGB : KHR_DF_TRANSFER_LINEAR;\n    basicDesc.texelBlockDimension = [0, 0, 0, 0];\n    basicDesc.bytesPlane = [container.typeSize * channelCount, 0, 0, 0, 0, 0, 0, 0];\n    for (let i = 0; i < channelCount; ++i) {\n      let channelType = KHR_DF_CHANNEL_MAP[i];\n\n      // Assign KHR_DF_SAMPLE_DATATYPE_LINEAR if the channel is linear _and_ differs from the transfer function.\n      if (channelType === KHR_DF_CHANNEL_RGBSDA_ALPHA && basicDesc.transferFunction !== KHR_DF_TRANSFER_LINEAR) {\n        channelType |= KHR_DF_SAMPLE_DATATYPE_LINEAR;\n      }\n      if (texture.type === FloatType || texture.type === HalfFloatType) {\n        channelType |= KHR_DF_SAMPLE_DATATYPE_FLOAT;\n        channelType |= KHR_DF_SAMPLE_DATATYPE_SIGNED;\n      }\n      basicDesc.samples.push({\n        channelType: channelType,\n        bitOffset: i * array.BYTES_PER_ELEMENT * 8,\n        bitLength: array.BYTES_PER_ELEMENT * 8 - 1,\n        samplePosition: [0, 0, 0, 0],\n        sampleLower: KHR_DF_CHANNEL_SAMPLE_LOWER_UPPER[texture.type][0],\n        sampleUpper: KHR_DF_CHANNEL_SAMPLE_LOWER_UPPER[texture.type][1]\n      });\n    }\n\n    //\n\n    container.levels = [{\n      levelData: new Uint8Array(array.buffer, array.byteOffset, array.byteLength),\n      uncompressedByteLength: array.byteLength\n    }];\n\n    //\n\n    container.keyValue['KTXwriter'] = `three.js ${REVISION}`;\n\n    //\n\n    return write(container, {\n      keepWriter: true\n    });\n  }\n}\nasync function toDataTexture(renderer, rtt) {\n  const channelCount = getChannelCount(rtt.texture);\n  let view;\n  if (renderer.isWebGLRenderer) {\n    if (rtt.texture.type === FloatType) {\n      view = new Float32Array(rtt.width * rtt.height * channelCount);\n    } else if (rtt.texture.type === HalfFloatType) {\n      view = new Uint16Array(rtt.width * rtt.height * channelCount);\n    } else if (rtt.texture.type === UnsignedByteType) {\n      view = new Uint8Array(rtt.width * rtt.height * channelCount);\n    } else {\n      throw new Error(ERROR_TYPE);\n    }\n    await renderer.readRenderTargetPixelsAsync(rtt, 0, 0, rtt.width, rtt.height, view);\n  } else {\n    view = await renderer.readRenderTargetPixelsAsync(rtt, 0, 0, rtt.width, rtt.height);\n  }\n  const texture = new DataTexture(view, rtt.width, rtt.height, rtt.texture.format, rtt.texture.type);\n  texture.colorSpace = rtt.texture.colorSpace;\n  return texture;\n}\nfunction getChannelCount(texture) {\n  switch (texture.format) {\n    case RGBAFormat:\n      return 4;\n    case RGFormat:\n    case RGIntegerFormat:\n      return 2;\n    case RedFormat:\n    case RedIntegerFormat:\n      return 1;\n    default:\n      throw new Error(ERROR_FORMAT);\n  }\n}","map":{"version":3,"names":["ColorManagement","FloatType","HalfFloatType","UnsignedByteType","RGBAFormat","RGFormat","RGIntegerFormat","RedFormat","RedIntegerFormat","NoColorSpace","LinearSRGBColorSpace","SRGBColorSpace","SRGBTransfer","DataTexture","REVISION","write","KTX2Container","KHR_DF_CHANNEL_RGBSDA_ALPHA","KHR_DF_CHANNEL_RGBSDA_BLUE","KHR_DF_CHANNEL_RGBSDA_GREEN","KHR_DF_CHANNEL_RGBSDA_RED","KHR_DF_MODEL_RGBSDA","KHR_DF_PRIMARIES_BT709","KHR_DF_PRIMARIES_UNSPECIFIED","KHR_DF_SAMPLE_DATATYPE_FLOAT","KHR_DF_SAMPLE_DATATYPE_LINEAR","KHR_DF_SAMPLE_DATATYPE_SIGNED","KHR_DF_TRANSFER_LINEAR","KHR_DF_TRANSFER_SRGB","VK_FORMAT_R16_SFLOAT","VK_FORMAT_R16G16_SFLOAT","VK_FORMAT_R16G16B16A16_SFLOAT","VK_FORMAT_R32_SFLOAT","VK_FORMAT_R32G32_SFLOAT","VK_FORMAT_R32G32B32A32_SFLOAT","VK_FORMAT_R8_SRGB","VK_FORMAT_R8_UNORM","VK_FORMAT_R8G8_SRGB","VK_FORMAT_R8G8_UNORM","VK_FORMAT_R8G8B8A8_SRGB","VK_FORMAT_R8G8B8A8_UNORM","VK_FORMAT_MAP","KHR_DF_CHANNEL_MAP","KHR_DF_CHANNEL_SAMPLE_LOWER_UPPER","ERROR_INPUT","ERROR_FORMAT","ERROR_TYPE","ERROR_COLOR_SPACE","KTX2Exporter","parse","arg1","arg2","texture","isDataTexture","isData3DTexture","isWebGLRenderer","isWebGPURenderer","isRenderTarget","toDataTexture","Error","format","undefined","type","colorSpace","array","image","data","channelCount","getChannelCount","container","vkFormat","typeSize","BYTES_PER_ELEMENT","pixelWidth","width","pixelHeight","height","pixelDepth","depth","basicDesc","dataFormatDescriptor","colorModel","colorPrimaries","transferFunction","getTransfer","texelBlockDimension","bytesPlane","i","channelType","samples","push","bitOffset","bitLength","samplePosition","sampleLower","sampleUpper","levels","levelData","Uint8Array","buffer","byteOffset","byteLength","uncompressedByteLength","keyValue","keepWriter","renderer","rtt","view","Float32Array","Uint16Array","readRenderTargetPixelsAsync"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/exporters/KTX2Exporter.js"],"sourcesContent":["import {\n\tColorManagement,\n\tFloatType,\n\tHalfFloatType,\n\tUnsignedByteType,\n\tRGBAFormat,\n\tRGFormat,\n\tRGIntegerFormat,\n\tRedFormat,\n\tRedIntegerFormat,\n\tNoColorSpace,\n\tLinearSRGBColorSpace,\n\tSRGBColorSpace,\n\tSRGBTransfer,\n\tDataTexture,\n\tREVISION,\n} from 'three';\n\nimport {\n\twrite,\n\tKTX2Container,\n\tKHR_DF_CHANNEL_RGBSDA_ALPHA,\n\tKHR_DF_CHANNEL_RGBSDA_BLUE,\n\tKHR_DF_CHANNEL_RGBSDA_GREEN,\n\tKHR_DF_CHANNEL_RGBSDA_RED,\n\tKHR_DF_MODEL_RGBSDA,\n\tKHR_DF_PRIMARIES_BT709,\n\tKHR_DF_PRIMARIES_UNSPECIFIED,\n\tKHR_DF_SAMPLE_DATATYPE_FLOAT,\n\tKHR_DF_SAMPLE_DATATYPE_LINEAR,\n\tKHR_DF_SAMPLE_DATATYPE_SIGNED,\n\tKHR_DF_TRANSFER_LINEAR,\n\tKHR_DF_TRANSFER_SRGB,\n\tVK_FORMAT_R16_SFLOAT,\n\tVK_FORMAT_R16G16_SFLOAT,\n\tVK_FORMAT_R16G16B16A16_SFLOAT,\n\tVK_FORMAT_R32_SFLOAT,\n\tVK_FORMAT_R32G32_SFLOAT,\n\tVK_FORMAT_R32G32B32A32_SFLOAT,\n\tVK_FORMAT_R8_SRGB,\n\tVK_FORMAT_R8_UNORM,\n\tVK_FORMAT_R8G8_SRGB,\n\tVK_FORMAT_R8G8_UNORM,\n\tVK_FORMAT_R8G8B8A8_SRGB,\n\tVK_FORMAT_R8G8B8A8_UNORM,\n} from '../libs/ktx-parse.module.js';\n\n/**\n * References:\n * - https://github.khronos.org/KTX-Specification/ktxspec.v2.html\n * - https://registry.khronos.org/DataFormat/specs/1.3/dataformat.1.3.html\n * - https://github.com/donmccurdy/KTX-Parse\n */\n\nconst VK_FORMAT_MAP = {\n\n\t[ RGBAFormat ]: {\n\t\t[ FloatType ]: {\n\t\t\t[ NoColorSpace ]: VK_FORMAT_R32G32B32A32_SFLOAT,\n\t\t\t[ LinearSRGBColorSpace ]: VK_FORMAT_R32G32B32A32_SFLOAT,\n\t\t},\n\t\t[ HalfFloatType ]: {\n\t\t\t[ NoColorSpace ]: VK_FORMAT_R16G16B16A16_SFLOAT,\n\t\t\t[ LinearSRGBColorSpace ]: VK_FORMAT_R16G16B16A16_SFLOAT,\n\t\t},\n\t\t[ UnsignedByteType ]: {\n\t\t\t[ NoColorSpace ]: VK_FORMAT_R8G8B8A8_UNORM,\n\t\t\t[ LinearSRGBColorSpace ]: VK_FORMAT_R8G8B8A8_UNORM,\n\t\t\t[ SRGBColorSpace ]: VK_FORMAT_R8G8B8A8_SRGB,\n\t\t},\n\t},\n\n\t[ RGFormat ]: {\n\t\t[ FloatType ]: {\n\t\t\t[ NoColorSpace ]: VK_FORMAT_R32G32_SFLOAT,\n\t\t\t[ LinearSRGBColorSpace ]: VK_FORMAT_R32G32_SFLOAT,\n\t\t},\n\t\t[ HalfFloatType ]: {\n\t\t\t[ NoColorSpace ]: VK_FORMAT_R16G16_SFLOAT,\n\t\t\t[ LinearSRGBColorSpace ]: VK_FORMAT_R16G16_SFLOAT,\n\t\t},\n\t\t[ UnsignedByteType ]: {\n\t\t\t[ NoColorSpace ]: VK_FORMAT_R8G8_UNORM,\n\t\t\t[ LinearSRGBColorSpace ]: VK_FORMAT_R8G8_UNORM,\n\t\t\t[ SRGBColorSpace ]: VK_FORMAT_R8G8_SRGB,\n\t\t},\n\t},\n\n\t[ RedFormat ]: {\n\t\t[ FloatType ]: {\n\t\t\t[ NoColorSpace ]: VK_FORMAT_R32_SFLOAT,\n\t\t\t[ LinearSRGBColorSpace ]: VK_FORMAT_R32_SFLOAT,\n\t\t},\n\t\t[ HalfFloatType ]: {\n\t\t\t[ NoColorSpace ]: VK_FORMAT_R16_SFLOAT,\n\t\t\t[ LinearSRGBColorSpace ]: VK_FORMAT_R16_SFLOAT,\n\t\t},\n\t\t[ UnsignedByteType ]: {\n\t\t\t[ NoColorSpace ]: VK_FORMAT_R8_UNORM,\n\t\t\t[ LinearSRGBColorSpace ]: VK_FORMAT_R8_UNORM,\n\t\t\t[ SRGBColorSpace ]: VK_FORMAT_R8_SRGB,\n\t\t},\n\t},\n\n};\n\nconst KHR_DF_CHANNEL_MAP = [\n\n\tKHR_DF_CHANNEL_RGBSDA_RED,\n\tKHR_DF_CHANNEL_RGBSDA_GREEN,\n\tKHR_DF_CHANNEL_RGBSDA_BLUE,\n\tKHR_DF_CHANNEL_RGBSDA_ALPHA,\n\n];\n\n// TODO: sampleLower and sampleUpper may change based on color space.\nconst KHR_DF_CHANNEL_SAMPLE_LOWER_UPPER = {\n\n\t[ FloatType ]: [ 0xbf800000, 0x3f800000 ],\n\t[ HalfFloatType ]: [ 0xbf800000, 0x3f800000 ],\n\t[ UnsignedByteType ]: [ 0, 255 ],\n\n};\n\nconst ERROR_INPUT = 'THREE.KTX2Exporter: Supported inputs are DataTexture, Data3DTexture, or WebGLRenderer and WebGLRenderTarget.';\nconst ERROR_FORMAT = 'THREE.KTX2Exporter: Supported formats are RGBAFormat, RGFormat, or RedFormat.';\nconst ERROR_TYPE = 'THREE.KTX2Exporter: Supported types are FloatType, HalfFloatType, or UnsignedByteType.\"';\nconst ERROR_COLOR_SPACE = 'THREE.KTX2Exporter: Supported color spaces are SRGBColorSpace (UnsignedByteType only), LinearSRGBColorSpace, or NoColorSpace.';\n\n/**\n * An exporter for KTX2.\n *\n * ```js\n * const exporter = new KTX2Exporter();\n * const result = await exporter.parse( dataTexture );\n * ```\n *\n * @three_import import { KTX2Exporter } from 'three/addons/exporters/KTX2Exporter.js';\n */\nexport class KTX2Exporter {\n\n\t/**\n\t * This method has two variants.\n\t *\n\t * - When exporting a data texture, it receives one parameter. The data or 3D data texture.\n\t * - When exporting a render target (e.g. a PMREM), it receives two parameters. The renderer and the\n\t * render target.\n\t *\n\t * @async\n\t * @param {(DataTexture|Data3DTexture|WebGPURenderer|WebGLRenderer)} arg1 - The data texture to export or a renderer.\n\t * @param {RenderTarget} [arg2] - The render target that should be exported\n\t * @return {Promise<Uint8Array>} A Promise that resolves with the exported KTX2.\n\t */\n\tasync parse( arg1, arg2 ) {\n\n\t\tlet texture;\n\n\t\tif ( arg1.isDataTexture || arg1.isData3DTexture ) {\n\n\t\t\ttexture = arg1;\n\n\t\t} else if ( ( arg1.isWebGLRenderer || arg1.isWebGPURenderer ) && arg2.isRenderTarget ) {\n\n\t\t\ttexture = await toDataTexture( arg1, arg2 );\n\n\t\t} else {\n\n\t\t\tthrow new Error( ERROR_INPUT );\n\n\t\t}\n\n\t\tif ( VK_FORMAT_MAP[ texture.format ] === undefined ) {\n\n\t\t\tthrow new Error( ERROR_FORMAT );\n\n\t\t}\n\n\t\tif ( VK_FORMAT_MAP[ texture.format ][ texture.type ] === undefined ) {\n\n\t\t\tthrow new Error( ERROR_TYPE );\n\n\t\t}\n\n\t\tif ( VK_FORMAT_MAP[ texture.format ][ texture.type ][ texture.colorSpace ] === undefined ) {\n\n\t\t\tthrow new Error( ERROR_COLOR_SPACE );\n\n\t\t}\n\n\t\t//\n\n\t\tconst array = texture.image.data;\n\t\tconst channelCount = getChannelCount( texture );\n\t\tconst container = new KTX2Container();\n\n\t\tcontainer.vkFormat = VK_FORMAT_MAP[ texture.format ][ texture.type ][ texture.colorSpace ];\n\t\tcontainer.typeSize = array.BYTES_PER_ELEMENT;\n\t\tcontainer.pixelWidth = texture.image.width;\n\t\tcontainer.pixelHeight = texture.image.height;\n\n\t\tif ( texture.isData3DTexture ) {\n\n\t\t\tcontainer.pixelDepth = texture.image.depth;\n\n\t\t}\n\n\t\t//\n\n\t\tconst basicDesc = container.dataFormatDescriptor[ 0 ];\n\n\t\tbasicDesc.colorModel = KHR_DF_MODEL_RGBSDA;\n\t\tbasicDesc.colorPrimaries = texture.colorSpace === NoColorSpace\n\t\t\t? KHR_DF_PRIMARIES_UNSPECIFIED\n\t\t\t: KHR_DF_PRIMARIES_BT709;\n\t\tbasicDesc.transferFunction = ColorManagement.getTransfer( texture.colorSpace ) === SRGBTransfer\n\t\t\t? KHR_DF_TRANSFER_SRGB\n\t\t\t: KHR_DF_TRANSFER_LINEAR;\n\n\t\tbasicDesc.texelBlockDimension = [ 0, 0, 0, 0 ];\n\n\t\tbasicDesc.bytesPlane = [\n\n\t\t\tcontainer.typeSize * channelCount, 0, 0, 0, 0, 0, 0, 0,\n\n\t\t];\n\n\t\tfor ( let i = 0; i < channelCount; ++ i ) {\n\n\t\t\tlet channelType = KHR_DF_CHANNEL_MAP[ i ];\n\n\t\t\t// Assign KHR_DF_SAMPLE_DATATYPE_LINEAR if the channel is linear _and_ differs from the transfer function.\n\t\t\tif ( channelType === KHR_DF_CHANNEL_RGBSDA_ALPHA && basicDesc.transferFunction !== KHR_DF_TRANSFER_LINEAR ) {\n\n\t\t\t\tchannelType |= KHR_DF_SAMPLE_DATATYPE_LINEAR;\n\n\t\t\t}\n\n\t\t\tif ( texture.type === FloatType || texture.type === HalfFloatType ) {\n\n\t\t\t\tchannelType |= KHR_DF_SAMPLE_DATATYPE_FLOAT;\n\t\t\t\tchannelType |= KHR_DF_SAMPLE_DATATYPE_SIGNED;\n\n\t\t\t}\n\n\t\t\tbasicDesc.samples.push( {\n\n\t\t\t\tchannelType: channelType,\n\t\t\t\tbitOffset: i * array.BYTES_PER_ELEMENT * 8,\n\t\t\t\tbitLength: array.BYTES_PER_ELEMENT * 8 - 1,\n\t\t\t\tsamplePosition: [ 0, 0, 0, 0 ],\n\t\t\t\tsampleLower: KHR_DF_CHANNEL_SAMPLE_LOWER_UPPER[ texture.type ][ 0 ],\n\t\t\t\tsampleUpper: KHR_DF_CHANNEL_SAMPLE_LOWER_UPPER[ texture.type ][ 1 ],\n\n\t\t\t} );\n\n\t\t}\n\n\t\t//\n\n\t\tcontainer.levels = [ {\n\n\t\t\tlevelData: new Uint8Array( array.buffer, array.byteOffset, array.byteLength ),\n\t\t\tuncompressedByteLength: array.byteLength,\n\n\t\t} ];\n\n\t\t//\n\n\t\tcontainer.keyValue[ 'KTXwriter' ] = `three.js ${ REVISION }`;\n\n\t\t//\n\n\t\treturn write( container, { keepWriter: true } );\n\n\t}\n\n}\n\nasync function toDataTexture( renderer, rtt ) {\n\n\tconst channelCount = getChannelCount( rtt.texture );\n\n\tlet view;\n\n\tif ( renderer.isWebGLRenderer ) {\n\n\t\tif ( rtt.texture.type === FloatType ) {\n\n\t\t\tview = new Float32Array( rtt.width * rtt.height * channelCount );\n\n\t\t} else if ( rtt.texture.type === HalfFloatType ) {\n\n\t\t\tview = new Uint16Array( rtt.width * rtt.height * channelCount );\n\n\t\t} else if ( rtt.texture.type === UnsignedByteType ) {\n\n\t\t\tview = new Uint8Array( rtt.width * rtt.height * channelCount );\n\n\t\t} else {\n\n\t\t\tthrow new Error( ERROR_TYPE );\n\n\t\t}\n\n\t\tawait renderer.readRenderTargetPixelsAsync( rtt, 0, 0, rtt.width, rtt.height, view );\n\n\t} else {\n\n\t\tview = await renderer.readRenderTargetPixelsAsync( rtt, 0, 0, rtt.width, rtt.height );\n\n\t}\n\n\tconst texture = new DataTexture( view, rtt.width, rtt.height, rtt.texture.format, rtt.texture.type );\n\n\ttexture.colorSpace = rtt.texture.colorSpace;\n\n\treturn texture;\n\n}\n\nfunction getChannelCount( texture ) {\n\n\tswitch ( texture.format ) {\n\n\t\tcase RGBAFormat:\n\n\t\t\treturn 4;\n\n\t\tcase RGFormat:\n\t\tcase RGIntegerFormat:\n\n\t\t\treturn 2;\n\n\t\tcase RedFormat:\n\t\tcase RedIntegerFormat:\n\n\t\t\treturn 1;\n\n\t\tdefault:\n\n\t\t\tthrow new Error( ERROR_FORMAT );\n\n\t}\n\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}