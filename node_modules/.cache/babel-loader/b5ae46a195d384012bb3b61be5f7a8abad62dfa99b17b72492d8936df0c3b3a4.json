{"ast":null,"code":"import { Box3, MathUtils, MeshLambertMaterial, Object3D, TextureLoader, UVMapping, SRGBColorSpace } from 'three';\nimport { MD2Loader } from '../loaders/MD2Loader.js';\nimport { MorphBlendMesh } from '../misc/MorphBlendMesh.js';\n\n/**\n * This class represents a management component for animated MD2\n * character assets. It provides a larger API compared to {@link MD2Character}.\n *\n * @three_import import { MD2CharacterComplex } from 'three/addons/misc/MD2CharacterComplex.js';\n */\nclass MD2CharacterComplex {\n  /**\n   * Constructs a new MD2 character.\n   */\n  constructor() {\n    /**\n     * The mesh scale.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.scale = 1;\n\n    /**\n     * The FPS\n     *\n     * @type {number}\n     * @default 6\n     */\n    this.animationFPS = 6;\n\n    /**\n     * The transition frames.\n     *\n     * @type {number}\n     * @default 15\n     */\n    this.transitionFrames = 15;\n\n    /**\n     * The character's maximum speed.\n     *\n     * @type {number}\n     * @default 275\n     */\n    this.maxSpeed = 275;\n\n    /**\n     * The character's maximum reverse speed.\n     *\n     * @type {number}\n     * @default - 275\n     */\n    this.maxReverseSpeed = -275;\n\n    /**\n     * The character's front acceleration.\n     *\n     * @type {number}\n     * @default 600\n     */\n    this.frontAcceleration = 600;\n\n    /**\n     * The character's back acceleration.\n     *\n     * @type {number}\n     * @default 600\n     */\n    this.backAcceleration = 600;\n\n    /**\n     * The character's front deceleration.\n     *\n     * @type {number}\n     * @default 600\n     */\n    this.frontDeceleration = 600;\n\n    /**\n     * The character's angular speed.\n     *\n     * @type {number}\n     * @default 2.5\n     */\n    this.angularSpeed = 2.5;\n\n    /**\n     * The root 3D object\n     *\n     * @type {Object3D}\n     */\n    this.root = new Object3D();\n\n    /**\n     * The body mesh.\n     *\n     * @type {?Mesh}\n     * @default null\n     */\n    this.meshBody = null;\n\n    /**\n     * The weapon mesh.\n     *\n     * @type {?Mesh}\n     * @default null\n     */\n    this.meshWeapon = null;\n\n    /**\n     * The movement controls.\n     *\n     * @type {Object}\n     * @default null\n     */\n    this.controls = null;\n\n    /**\n     * The body skins.\n     *\n     * @type {Array<Texture>}\n     */\n    this.skinsBody = [];\n\n    /**\n     * The weapon skins.\n     *\n     * @type {Array<Texture>}\n     */\n    this.skinsWeapon = [];\n\n    /**\n     * The weapon meshes.\n     *\n     * @type {Array<Mesh>}\n     */\n    this.weapons = [];\n\n    /**\n     * The current skin.\n     *\n     * @type {Texture}\n     * @default undefined\n     */\n    this.currentSkin = undefined;\n\n    //\n\n    this.onLoadComplete = function () {};\n\n    // internals\n\n    this.meshes = [];\n    this.animations = {};\n    this.loadCounter = 0;\n\n    // internal movement control variables\n\n    this.speed = 0;\n    this.bodyOrientation = 0;\n    this.walkSpeed = this.maxSpeed;\n    this.crouchSpeed = this.maxSpeed * 0.5;\n\n    // internal animation parameters\n\n    this.activeAnimation = null;\n    this.oldAnimation = null;\n\n    // API\n  }\n\n  /**\n   * Toggles shadow casting and receiving on the character's meshes.\n   *\n   * @param {boolean} enable - Whether to enable shadows or not.\n   */\n  enableShadows(enable) {\n    for (let i = 0; i < this.meshes.length; i++) {\n      this.meshes[i].castShadow = enable;\n      this.meshes[i].receiveShadow = enable;\n    }\n  }\n\n  /**\n   * Toggles visibility on the character's meshes.\n   *\n   * @param {boolean} enable - Whether the character is visible or not.\n   */\n  setVisible(enable) {\n    for (let i = 0; i < this.meshes.length; i++) {\n      this.meshes[i].visible = enable;\n      this.meshes[i].visible = enable;\n    }\n  }\n\n  /**\n   * Shares certain resources from a different character model.\n   *\n   * @param {MD2CharacterComplex} original - The original MD2 character.\n   */\n  shareParts(original) {\n    this.animations = original.animations;\n    this.walkSpeed = original.walkSpeed;\n    this.crouchSpeed = original.crouchSpeed;\n    this.skinsBody = original.skinsBody;\n    this.skinsWeapon = original.skinsWeapon;\n\n    // BODY\n\n    const mesh = this._createPart(original.meshBody.geometry, this.skinsBody[0]);\n    mesh.scale.set(this.scale, this.scale, this.scale);\n    this.root.position.y = original.root.position.y;\n    this.root.add(mesh);\n    this.meshBody = mesh;\n    this.meshes.push(mesh);\n\n    // WEAPONS\n\n    for (let i = 0; i < original.weapons.length; i++) {\n      const meshWeapon = this._createPart(original.weapons[i].geometry, this.skinsWeapon[i]);\n      meshWeapon.scale.set(this.scale, this.scale, this.scale);\n      meshWeapon.visible = false;\n      meshWeapon.name = original.weapons[i].name;\n      this.root.add(meshWeapon);\n      this.weapons[i] = meshWeapon;\n      this.meshWeapon = meshWeapon;\n      this.meshes.push(meshWeapon);\n    }\n  }\n\n  /**\n   * Loads the character model for the given config.\n   *\n   * @param {Object} config - The config which defines the model and textures paths.\n   */\n  loadParts(config) {\n    const scope = this;\n    function loadTextures(baseUrl, textureUrls) {\n      const textureLoader = new TextureLoader();\n      const textures = [];\n      for (let i = 0; i < textureUrls.length; i++) {\n        textures[i] = textureLoader.load(baseUrl + textureUrls[i], checkLoadingComplete);\n        textures[i].mapping = UVMapping;\n        textures[i].name = textureUrls[i];\n        textures[i].colorSpace = SRGBColorSpace;\n      }\n      return textures;\n    }\n    function checkLoadingComplete() {\n      scope.loadCounter -= 1;\n      if (scope.loadCounter === 0) scope.onLoadComplete();\n    }\n    this.animations = config.animations;\n    this.walkSpeed = config.walkSpeed;\n    this.crouchSpeed = config.crouchSpeed;\n    this.loadCounter = config.weapons.length * 2 + config.skins.length + 1;\n    const weaponsTextures = [];\n    for (let i = 0; i < config.weapons.length; i++) weaponsTextures[i] = config.weapons[i][1];\n\n    // SKINS\n\n    this.skinsBody = loadTextures(config.baseUrl + 'skins/', config.skins);\n    this.skinsWeapon = loadTextures(config.baseUrl + 'skins/', weaponsTextures);\n\n    // BODY\n\n    const loader = new MD2Loader();\n    loader.load(config.baseUrl + config.body, function (geo) {\n      const boundingBox = new Box3();\n      boundingBox.setFromBufferAttribute(geo.attributes.position);\n      scope.root.position.y = -scope.scale * boundingBox.min.y;\n      const mesh = scope._createPart(geo, scope.skinsBody[0]);\n      mesh.scale.set(scope.scale, scope.scale, scope.scale);\n      scope.root.add(mesh);\n      scope.meshBody = mesh;\n      scope.meshes.push(mesh);\n      checkLoadingComplete();\n    });\n\n    // WEAPONS\n\n    const generateCallback = function (index, name) {\n      return function (geo) {\n        const mesh = scope._createPart(geo, scope.skinsWeapon[index]);\n        mesh.scale.set(scope.scale, scope.scale, scope.scale);\n        mesh.visible = false;\n        mesh.name = name;\n        scope.root.add(mesh);\n        scope.weapons[index] = mesh;\n        scope.meshWeapon = mesh;\n        scope.meshes.push(mesh);\n        checkLoadingComplete();\n      };\n    };\n    for (let i = 0; i < config.weapons.length; i++) {\n      loader.load(config.baseUrl + config.weapons[i][0], generateCallback(i, config.weapons[i][0]));\n    }\n  }\n\n  /**\n   * Sets the animation playback rate.\n   *\n   * @param {number} rate - The playback rate to set.\n   */\n  setPlaybackRate(rate) {\n    if (this.meshBody) this.meshBody.duration = this.meshBody.baseDuration / rate;\n    if (this.meshWeapon) this.meshWeapon.duration = this.meshWeapon.baseDuration / rate;\n  }\n\n  /**\n   * Sets the wireframe material flag.\n   *\n   * @param {boolean} wireframeEnabled - Whether to enable wireframe rendering or not.\n   */\n  setWireframe(wireframeEnabled) {\n    if (wireframeEnabled) {\n      if (this.meshBody) this.meshBody.material = this.meshBody.materialWireframe;\n      if (this.meshWeapon) this.meshWeapon.material = this.meshWeapon.materialWireframe;\n    } else {\n      if (this.meshBody) this.meshBody.material = this.meshBody.materialTexture;\n      if (this.meshWeapon) this.meshWeapon.material = this.meshWeapon.materialTexture;\n    }\n  }\n\n  /**\n   * Sets the skin defined by the given skin index. This will result in a different texture\n   * for the body mesh.\n   *\n   * @param {number} index - The skin index.\n   */\n  setSkin(index) {\n    if (this.meshBody && this.meshBody.material.wireframe === false) {\n      this.meshBody.material.map = this.skinsBody[index];\n      this.currentSkin = index;\n    }\n  }\n\n  /**\n   * Sets the weapon defined by the given weapon index. This will result in a different weapon\n   * hold by the character.\n   *\n   * @param {number} index - The weapon index.\n   */\n  setWeapon(index) {\n    for (let i = 0; i < this.weapons.length; i++) this.weapons[i].visible = false;\n    const activeWeapon = this.weapons[index];\n    if (activeWeapon) {\n      activeWeapon.visible = true;\n      this.meshWeapon = activeWeapon;\n      if (this.activeAnimation) {\n        activeWeapon.playAnimation(this.activeAnimation);\n        this.meshWeapon.setAnimationTime(this.activeAnimation, this.meshBody.getAnimationTime(this.activeAnimation));\n      }\n    }\n  }\n\n  /**\n   * Sets the defined animation clip as the active animation.\n   *\n   * @param {string} animationName - The name of the animation clip.\n   */\n  setAnimation(animationName) {\n    if (animationName === this.activeAnimation || !animationName) return;\n    if (this.meshBody) {\n      this.meshBody.setAnimationWeight(animationName, 0);\n      this.meshBody.playAnimation(animationName);\n      this.oldAnimation = this.activeAnimation;\n      this.activeAnimation = animationName;\n      this.blendCounter = this.transitionFrames;\n    }\n    if (this.meshWeapon) {\n      this.meshWeapon.setAnimationWeight(animationName, 0);\n      this.meshWeapon.playAnimation(animationName);\n    }\n  }\n  update(delta) {\n    if (this.controls) this.updateMovementModel(delta);\n    if (this.animations) {\n      this.updateBehaviors();\n      this.updateAnimations(delta);\n    }\n  }\n\n  /**\n   * Updates the animations of the mesh. Must be called inside the animation loop.\n   *\n   * @param {number} delta - The delta time in seconds.\n   */\n  updateAnimations(delta) {\n    let mix = 1;\n    if (this.blendCounter > 0) {\n      mix = (this.transitionFrames - this.blendCounter) / this.transitionFrames;\n      this.blendCounter -= 1;\n    }\n    if (this.meshBody) {\n      this.meshBody.update(delta);\n      this.meshBody.setAnimationWeight(this.activeAnimation, mix);\n      this.meshBody.setAnimationWeight(this.oldAnimation, 1 - mix);\n    }\n    if (this.meshWeapon) {\n      this.meshWeapon.update(delta);\n      this.meshWeapon.setAnimationWeight(this.activeAnimation, mix);\n      this.meshWeapon.setAnimationWeight(this.oldAnimation, 1 - mix);\n    }\n  }\n\n  /**\n   * Updates the animation state based on the control inputs.\n   */\n  updateBehaviors() {\n    const controls = this.controls;\n    const animations = this.animations;\n    let moveAnimation, idleAnimation;\n\n    // crouch vs stand\n\n    if (controls.crouch) {\n      moveAnimation = animations['crouchMove'];\n      idleAnimation = animations['crouchIdle'];\n    } else {\n      moveAnimation = animations['move'];\n      idleAnimation = animations['idle'];\n    }\n\n    // actions\n\n    if (controls.jump) {\n      moveAnimation = animations['jump'];\n      idleAnimation = animations['jump'];\n    }\n    if (controls.attack) {\n      if (controls.crouch) {\n        moveAnimation = animations['crouchAttack'];\n        idleAnimation = animations['crouchAttack'];\n      } else {\n        moveAnimation = animations['attack'];\n        idleAnimation = animations['attack'];\n      }\n    }\n\n    // set animations\n\n    if (controls.moveForward || controls.moveBackward || controls.moveLeft || controls.moveRight) {\n      if (this.activeAnimation !== moveAnimation) {\n        this.setAnimation(moveAnimation);\n      }\n    }\n    if (Math.abs(this.speed) < 0.2 * this.maxSpeed && !(controls.moveLeft || controls.moveRight || controls.moveForward || controls.moveBackward)) {\n      if (this.activeAnimation !== idleAnimation) {\n        this.setAnimation(idleAnimation);\n      }\n    }\n\n    // set animation direction\n\n    if (controls.moveForward) {\n      if (this.meshBody) {\n        this.meshBody.setAnimationDirectionForward(this.activeAnimation);\n        this.meshBody.setAnimationDirectionForward(this.oldAnimation);\n      }\n      if (this.meshWeapon) {\n        this.meshWeapon.setAnimationDirectionForward(this.activeAnimation);\n        this.meshWeapon.setAnimationDirectionForward(this.oldAnimation);\n      }\n    }\n    if (controls.moveBackward) {\n      if (this.meshBody) {\n        this.meshBody.setAnimationDirectionBackward(this.activeAnimation);\n        this.meshBody.setAnimationDirectionBackward(this.oldAnimation);\n      }\n      if (this.meshWeapon) {\n        this.meshWeapon.setAnimationDirectionBackward(this.activeAnimation);\n        this.meshWeapon.setAnimationDirectionBackward(this.oldAnimation);\n      }\n    }\n  }\n\n  /**\n   * Transforms the character model based on the control input.\n   *\n   * @param {number} delta - The delta time in seconds.\n   */\n  updateMovementModel(delta) {\n    function exponentialEaseOut(k) {\n      return k === 1 ? 1 : -Math.pow(2, -10 * k) + 1;\n    }\n    const controls = this.controls;\n\n    // speed based on controls\n\n    if (controls.crouch) this.maxSpeed = this.crouchSpeed;else this.maxSpeed = this.walkSpeed;\n    this.maxReverseSpeed = -this.maxSpeed;\n    if (controls.moveForward) this.speed = MathUtils.clamp(this.speed + delta * this.frontAcceleration, this.maxReverseSpeed, this.maxSpeed);\n    if (controls.moveBackward) this.speed = MathUtils.clamp(this.speed - delta * this.backAcceleration, this.maxReverseSpeed, this.maxSpeed);\n\n    // orientation based on controls\n    // (don't just stand while turning)\n\n    const dir = 1;\n    if (controls.moveLeft) {\n      this.bodyOrientation += delta * this.angularSpeed;\n      this.speed = MathUtils.clamp(this.speed + dir * delta * this.frontAcceleration, this.maxReverseSpeed, this.maxSpeed);\n    }\n    if (controls.moveRight) {\n      this.bodyOrientation -= delta * this.angularSpeed;\n      this.speed = MathUtils.clamp(this.speed + dir * delta * this.frontAcceleration, this.maxReverseSpeed, this.maxSpeed);\n    }\n\n    // speed decay\n\n    if (!(controls.moveForward || controls.moveBackward)) {\n      if (this.speed > 0) {\n        const k = exponentialEaseOut(this.speed / this.maxSpeed);\n        this.speed = MathUtils.clamp(this.speed - k * delta * this.frontDeceleration, 0, this.maxSpeed);\n      } else {\n        const k = exponentialEaseOut(this.speed / this.maxReverseSpeed);\n        this.speed = MathUtils.clamp(this.speed + k * delta * this.backAcceleration, this.maxReverseSpeed, 0);\n      }\n    }\n\n    // displacement\n\n    const forwardDelta = this.speed * delta;\n    this.root.position.x += Math.sin(this.bodyOrientation) * forwardDelta;\n    this.root.position.z += Math.cos(this.bodyOrientation) * forwardDelta;\n\n    // steering\n\n    this.root.rotation.y = this.bodyOrientation;\n  }\n\n  // internal\n\n  _createPart(geometry, skinMap) {\n    const materialWireframe = new MeshLambertMaterial({\n      color: 0xffaa00,\n      wireframe: true\n    });\n    const materialTexture = new MeshLambertMaterial({\n      color: 0xffffff,\n      wireframe: false,\n      map: skinMap\n    });\n\n    //\n\n    const mesh = new MorphBlendMesh(geometry, materialTexture);\n    mesh.rotation.y = -Math.PI / 2;\n\n    //\n\n    mesh.materialTexture = materialTexture;\n    mesh.materialWireframe = materialWireframe;\n\n    //\n\n    mesh.autoCreateAnimations(this.animationFPS);\n    return mesh;\n  }\n}\nexport { MD2CharacterComplex };","map":{"version":3,"names":["Box3","MathUtils","MeshLambertMaterial","Object3D","TextureLoader","UVMapping","SRGBColorSpace","MD2Loader","MorphBlendMesh","MD2CharacterComplex","constructor","scale","animationFPS","transitionFrames","maxSpeed","maxReverseSpeed","frontAcceleration","backAcceleration","frontDeceleration","angularSpeed","root","meshBody","meshWeapon","controls","skinsBody","skinsWeapon","weapons","currentSkin","undefined","onLoadComplete","meshes","animations","loadCounter","speed","bodyOrientation","walkSpeed","crouchSpeed","activeAnimation","oldAnimation","enableShadows","enable","i","length","castShadow","receiveShadow","setVisible","visible","shareParts","original","mesh","_createPart","geometry","set","position","y","add","push","name","loadParts","config","scope","loadTextures","baseUrl","textureUrls","textureLoader","textures","load","checkLoadingComplete","mapping","colorSpace","skins","weaponsTextures","loader","body","geo","boundingBox","setFromBufferAttribute","attributes","min","generateCallback","index","setPlaybackRate","rate","duration","baseDuration","setWireframe","wireframeEnabled","material","materialWireframe","materialTexture","setSkin","wireframe","map","setWeapon","activeWeapon","playAnimation","setAnimationTime","getAnimationTime","setAnimation","animationName","setAnimationWeight","blendCounter","update","delta","updateMovementModel","updateBehaviors","updateAnimations","mix","moveAnimation","idleAnimation","crouch","jump","attack","moveForward","moveBackward","moveLeft","moveRight","Math","abs","setAnimationDirectionForward","setAnimationDirectionBackward","exponentialEaseOut","k","pow","clamp","dir","forwardDelta","x","sin","z","cos","rotation","skinMap","color","PI","autoCreateAnimations"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/misc/MD2CharacterComplex.js"],"sourcesContent":["import {\n\tBox3,\n\tMathUtils,\n\tMeshLambertMaterial,\n\tObject3D,\n\tTextureLoader,\n\tUVMapping,\n\tSRGBColorSpace\n} from 'three';\nimport { MD2Loader } from '../loaders/MD2Loader.js';\nimport { MorphBlendMesh } from '../misc/MorphBlendMesh.js';\n\n/**\n * This class represents a management component for animated MD2\n * character assets. It provides a larger API compared to {@link MD2Character}.\n *\n * @three_import import { MD2CharacterComplex } from 'three/addons/misc/MD2CharacterComplex.js';\n */\nclass MD2CharacterComplex {\n\n\t/**\n\t * Constructs a new MD2 character.\n\t */\n\tconstructor() {\n\n\t\t/**\n\t\t * The mesh scale.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.scale = 1;\n\n\t\t/**\n\t\t * The FPS\n\t\t *\n\t\t * @type {number}\n\t\t * @default 6\n\t\t */\n\t\tthis.animationFPS = 6;\n\n\t\t/**\n\t\t * The transition frames.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 15\n\t\t */\n\t\tthis.transitionFrames = 15;\n\n\t\t/**\n\t\t * The character's maximum speed.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 275\n\t\t */\n\t\tthis.maxSpeed = 275;\n\n\t\t/**\n\t\t * The character's maximum reverse speed.\n\t\t *\n\t\t * @type {number}\n\t\t * @default - 275\n\t\t */\n\t\tthis.maxReverseSpeed = - 275;\n\n\t\t/**\n\t\t * The character's front acceleration.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 600\n\t\t */\n\t\tthis.frontAcceleration = 600;\n\n\t\t/**\n\t\t * The character's back acceleration.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 600\n\t\t */\n\t\tthis.backAcceleration = 600;\n\n\t\t/**\n\t\t * The character's front deceleration.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 600\n\t\t */\n\t\tthis.frontDeceleration = 600;\n\n\t\t/**\n\t\t * The character's angular speed.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 2.5\n\t\t */\n\t\tthis.angularSpeed = 2.5;\n\n\t\t/**\n\t\t * The root 3D object\n\t\t *\n\t\t * @type {Object3D}\n\t\t */\n\t\tthis.root = new Object3D();\n\n\t\t/**\n\t\t * The body mesh.\n\t\t *\n\t\t * @type {?Mesh}\n\t\t * @default null\n\t\t */\n\t\tthis.meshBody = null;\n\n\t\t/**\n\t\t * The weapon mesh.\n\t\t *\n\t\t * @type {?Mesh}\n\t\t * @default null\n\t\t */\n\t\tthis.meshWeapon = null;\n\n\t\t/**\n\t\t * The movement controls.\n\t\t *\n\t\t * @type {Object}\n\t\t * @default null\n\t\t */\n\t\tthis.controls = null;\n\n\t\t/**\n\t\t * The body skins.\n\t\t *\n\t\t * @type {Array<Texture>}\n\t\t */\n\t\tthis.skinsBody = [];\n\n\t\t/**\n\t\t * The weapon skins.\n\t\t *\n\t\t * @type {Array<Texture>}\n\t\t */\n\t\tthis.skinsWeapon = [];\n\n\t\t/**\n\t\t * The weapon meshes.\n\t\t *\n\t\t * @type {Array<Mesh>}\n\t\t */\n\t\tthis.weapons = [];\n\n\t\t/**\n\t\t * The current skin.\n\t\t *\n\t\t * @type {Texture}\n\t\t * @default undefined\n\t\t */\n\t\tthis.currentSkin = undefined;\n\n\t\t//\n\n\t\tthis.onLoadComplete = function () {};\n\n\t\t// internals\n\n\t\tthis.meshes = [];\n\t\tthis.animations = {};\n\n\t\tthis.loadCounter = 0;\n\n\t\t// internal movement control variables\n\n\t\tthis.speed = 0;\n\t\tthis.bodyOrientation = 0;\n\n\t\tthis.walkSpeed = this.maxSpeed;\n\t\tthis.crouchSpeed = this.maxSpeed * 0.5;\n\n\t\t// internal animation parameters\n\n\t\tthis.activeAnimation = null;\n\t\tthis.oldAnimation = null;\n\n\t\t// API\n\n\t}\n\n\t/**\n\t * Toggles shadow casting and receiving on the character's meshes.\n\t *\n\t * @param {boolean} enable - Whether to enable shadows or not.\n\t */\n\tenableShadows( enable ) {\n\n\t\tfor ( let i = 0; i < this.meshes.length; i ++ ) {\n\n\t\t\tthis.meshes[ i ].castShadow = enable;\n\t\t\tthis.meshes[ i ].receiveShadow = enable;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Toggles visibility on the character's meshes.\n\t *\n\t * @param {boolean} enable - Whether the character is visible or not.\n\t */\n\tsetVisible( enable ) {\n\n\t\tfor ( let i = 0; i < this.meshes.length; i ++ ) {\n\n\t\t\tthis.meshes[ i ].visible = enable;\n\t\t\tthis.meshes[ i ].visible = enable;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Shares certain resources from a different character model.\n\t *\n\t * @param {MD2CharacterComplex} original - The original MD2 character.\n\t */\n\tshareParts( original ) {\n\n\t\tthis.animations = original.animations;\n\t\tthis.walkSpeed = original.walkSpeed;\n\t\tthis.crouchSpeed = original.crouchSpeed;\n\n\t\tthis.skinsBody = original.skinsBody;\n\t\tthis.skinsWeapon = original.skinsWeapon;\n\n\t\t// BODY\n\n\t\tconst mesh = this._createPart( original.meshBody.geometry, this.skinsBody[ 0 ] );\n\t\tmesh.scale.set( this.scale, this.scale, this.scale );\n\n\t\tthis.root.position.y = original.root.position.y;\n\t\tthis.root.add( mesh );\n\n\t\tthis.meshBody = mesh;\n\n\t\tthis.meshes.push( mesh );\n\n\t\t// WEAPONS\n\n\t\tfor ( let i = 0; i < original.weapons.length; i ++ ) {\n\n\t\t\tconst meshWeapon = this._createPart( original.weapons[ i ].geometry, this.skinsWeapon[ i ] );\n\t\t\tmeshWeapon.scale.set( this.scale, this.scale, this.scale );\n\t\t\tmeshWeapon.visible = false;\n\n\t\t\tmeshWeapon.name = original.weapons[ i ].name;\n\n\t\t\tthis.root.add( meshWeapon );\n\n\t\t\tthis.weapons[ i ] = meshWeapon;\n\t\t\tthis.meshWeapon = meshWeapon;\n\n\t\t\tthis.meshes.push( meshWeapon );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Loads the character model for the given config.\n\t *\n\t * @param {Object} config - The config which defines the model and textures paths.\n\t */\n\tloadParts( config ) {\n\n\t\tconst scope = this;\n\n\t\tfunction loadTextures( baseUrl, textureUrls ) {\n\n\t\t\tconst textureLoader = new TextureLoader();\n\t\t\tconst textures = [];\n\n\t\t\tfor ( let i = 0; i < textureUrls.length; i ++ ) {\n\n\t\t\t\ttextures[ i ] = textureLoader.load( baseUrl + textureUrls[ i ], checkLoadingComplete );\n\t\t\t\ttextures[ i ].mapping = UVMapping;\n\t\t\t\ttextures[ i ].name = textureUrls[ i ];\n\t\t\t\ttextures[ i ].colorSpace = SRGBColorSpace;\n\n\t\t\t}\n\n\t\t\treturn textures;\n\n\t\t}\n\n\t\tfunction checkLoadingComplete() {\n\n\t\t\tscope.loadCounter -= 1;\n\t\t\tif ( scope.loadCounter === 0 ) \tscope.onLoadComplete();\n\n\t\t}\n\n\t\tthis.animations = config.animations;\n\t\tthis.walkSpeed = config.walkSpeed;\n\t\tthis.crouchSpeed = config.crouchSpeed;\n\n\t\tthis.loadCounter = config.weapons.length * 2 + config.skins.length + 1;\n\n\t\tconst weaponsTextures = [];\n\t\tfor ( let i = 0; i < config.weapons.length; i ++ ) weaponsTextures[ i ] = config.weapons[ i ][ 1 ];\n\n\t\t// SKINS\n\n\t\tthis.skinsBody = loadTextures( config.baseUrl + 'skins/', config.skins );\n\t\tthis.skinsWeapon = loadTextures( config.baseUrl + 'skins/', weaponsTextures );\n\n\t\t// BODY\n\n\t\tconst loader = new MD2Loader();\n\n\t\tloader.load( config.baseUrl + config.body, function ( geo ) {\n\n\t\t\tconst boundingBox = new Box3();\n\t\t\tboundingBox.setFromBufferAttribute( geo.attributes.position );\n\n\t\t\tscope.root.position.y = - scope.scale * boundingBox.min.y;\n\n\t\t\tconst mesh = scope._createPart( geo, scope.skinsBody[ 0 ] );\n\t\t\tmesh.scale.set( scope.scale, scope.scale, scope.scale );\n\n\t\t\tscope.root.add( mesh );\n\n\t\t\tscope.meshBody = mesh;\n\t\t\tscope.meshes.push( mesh );\n\n\t\t\tcheckLoadingComplete();\n\n\t\t} );\n\n\t\t// WEAPONS\n\n\t\tconst generateCallback = function ( index, name ) {\n\n\t\t\treturn function ( geo ) {\n\n\t\t\t\tconst mesh = scope._createPart( geo, scope.skinsWeapon[ index ] );\n\t\t\t\tmesh.scale.set( scope.scale, scope.scale, scope.scale );\n\t\t\t\tmesh.visible = false;\n\n\t\t\t\tmesh.name = name;\n\n\t\t\t\tscope.root.add( mesh );\n\n\t\t\t\tscope.weapons[ index ] = mesh;\n\t\t\t\tscope.meshWeapon = mesh;\n\t\t\t\tscope.meshes.push( mesh );\n\n\t\t\t\tcheckLoadingComplete();\n\n\t\t\t};\n\n\t\t};\n\n\t\tfor ( let i = 0; i < config.weapons.length; i ++ ) {\n\n\t\t\tloader.load( config.baseUrl + config.weapons[ i ][ 0 ], generateCallback( i, config.weapons[ i ][ 0 ] ) );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Sets the animation playback rate.\n\t *\n\t * @param {number} rate - The playback rate to set.\n\t */\n\tsetPlaybackRate( rate ) {\n\n\t\tif ( this.meshBody ) this.meshBody.duration = this.meshBody.baseDuration / rate;\n\t\tif ( this.meshWeapon ) this.meshWeapon.duration = this.meshWeapon.baseDuration / rate;\n\n\t}\n\n\t/**\n\t * Sets the wireframe material flag.\n\t *\n\t * @param {boolean} wireframeEnabled - Whether to enable wireframe rendering or not.\n\t */\n\tsetWireframe( wireframeEnabled ) {\n\n\t\tif ( wireframeEnabled ) {\n\n\t\t\tif ( this.meshBody ) this.meshBody.material = this.meshBody.materialWireframe;\n\t\t\tif ( this.meshWeapon ) this.meshWeapon.material = this.meshWeapon.materialWireframe;\n\n\t\t} else {\n\n\t\t\tif ( this.meshBody ) this.meshBody.material = this.meshBody.materialTexture;\n\t\t\tif ( this.meshWeapon ) this.meshWeapon.material = this.meshWeapon.materialTexture;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Sets the skin defined by the given skin index. This will result in a different texture\n\t * for the body mesh.\n\t *\n\t * @param {number} index - The skin index.\n\t */\n\tsetSkin( index ) {\n\n\t\tif ( this.meshBody && this.meshBody.material.wireframe === false ) {\n\n\t\t\tthis.meshBody.material.map = this.skinsBody[ index ];\n\t\t\tthis.currentSkin = index;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Sets the weapon defined by the given weapon index. This will result in a different weapon\n\t * hold by the character.\n\t *\n\t * @param {number} index - The weapon index.\n\t */\n\tsetWeapon( index ) {\n\n\t\tfor ( let i = 0; i < this.weapons.length; i ++ ) this.weapons[ i ].visible = false;\n\n\t\tconst activeWeapon = this.weapons[ index ];\n\n\t\tif ( activeWeapon ) {\n\n\t\t\tactiveWeapon.visible = true;\n\t\t\tthis.meshWeapon = activeWeapon;\n\n\t\t\tif ( this.activeAnimation ) {\n\n\t\t\t\tactiveWeapon.playAnimation( this.activeAnimation );\n\t\t\t\tthis.meshWeapon.setAnimationTime( this.activeAnimation, this.meshBody.getAnimationTime( this.activeAnimation ) );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Sets the defined animation clip as the active animation.\n\t *\n\t * @param {string} animationName - The name of the animation clip.\n\t */\n\tsetAnimation( animationName ) {\n\n\t\tif ( animationName === this.activeAnimation || ! animationName ) return;\n\n\t\tif ( this.meshBody ) {\n\n\t\t\tthis.meshBody.setAnimationWeight( animationName, 0 );\n\t\t\tthis.meshBody.playAnimation( animationName );\n\n\t\t\tthis.oldAnimation = this.activeAnimation;\n\t\t\tthis.activeAnimation = animationName;\n\n\t\t\tthis.blendCounter = this.transitionFrames;\n\n\t\t}\n\n\t\tif ( this.meshWeapon ) {\n\n\t\t\tthis.meshWeapon.setAnimationWeight( animationName, 0 );\n\t\t\tthis.meshWeapon.playAnimation( animationName );\n\n\t\t}\n\n\n\t}\n\n\tupdate( delta ) {\n\n\t\tif ( this.controls ) this.updateMovementModel( delta );\n\n\t\tif ( this.animations ) {\n\n\t\t\tthis.updateBehaviors();\n\t\t\tthis.updateAnimations( delta );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Updates the animations of the mesh. Must be called inside the animation loop.\n\t *\n\t * @param {number} delta - The delta time in seconds.\n\t */\n\tupdateAnimations( delta ) {\n\n\t\tlet mix = 1;\n\n\t\tif ( this.blendCounter > 0 ) {\n\n\t\t\tmix = ( this.transitionFrames - this.blendCounter ) / this.transitionFrames;\n\t\t\tthis.blendCounter -= 1;\n\n\t\t}\n\n\t\tif ( this.meshBody ) {\n\n\t\t\tthis.meshBody.update( delta );\n\n\t\t\tthis.meshBody.setAnimationWeight( this.activeAnimation, mix );\n\t\t\tthis.meshBody.setAnimationWeight( this.oldAnimation, 1 - mix );\n\n\t\t}\n\n\t\tif ( this.meshWeapon ) {\n\n\t\t\tthis.meshWeapon.update( delta );\n\n\t\t\tthis.meshWeapon.setAnimationWeight( this.activeAnimation, mix );\n\t\t\tthis.meshWeapon.setAnimationWeight( this.oldAnimation, 1 - mix );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Updates the animation state based on the control inputs.\n\t */\n\tupdateBehaviors() {\n\n\t\tconst controls = this.controls;\n\t\tconst animations = this.animations;\n\n\t\tlet moveAnimation, idleAnimation;\n\n\t\t// crouch vs stand\n\n\t\tif ( controls.crouch ) {\n\n\t\t\tmoveAnimation = animations[ 'crouchMove' ];\n\t\t\tidleAnimation = animations[ 'crouchIdle' ];\n\n\t\t} else {\n\n\t\t\tmoveAnimation = animations[ 'move' ];\n\t\t\tidleAnimation = animations[ 'idle' ];\n\n\t\t}\n\n\t\t// actions\n\n\t\tif ( controls.jump ) {\n\n\t\t\tmoveAnimation = animations[ 'jump' ];\n\t\t\tidleAnimation = animations[ 'jump' ];\n\n\t\t}\n\n\t\tif ( controls.attack ) {\n\n\t\t\tif ( controls.crouch ) {\n\n\t\t\t\tmoveAnimation = animations[ 'crouchAttack' ];\n\t\t\t\tidleAnimation = animations[ 'crouchAttack' ];\n\n\t\t\t} else {\n\n\t\t\t\tmoveAnimation = animations[ 'attack' ];\n\t\t\t\tidleAnimation = animations[ 'attack' ];\n\n\t\t\t}\n\n\t\t}\n\n\t\t// set animations\n\n\t\tif ( controls.moveForward || controls.moveBackward || controls.moveLeft || controls.moveRight ) {\n\n\t\t\tif ( this.activeAnimation !== moveAnimation ) {\n\n\t\t\t\tthis.setAnimation( moveAnimation );\n\n\t\t\t}\n\n\t\t}\n\n\n\t\tif ( Math.abs( this.speed ) < 0.2 * this.maxSpeed && ! ( controls.moveLeft || controls.moveRight || controls.moveForward || controls.moveBackward ) ) {\n\n\t\t\tif ( this.activeAnimation !== idleAnimation ) {\n\n\t\t\t\tthis.setAnimation( idleAnimation );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// set animation direction\n\n\t\tif ( controls.moveForward ) {\n\n\t\t\tif ( this.meshBody ) {\n\n\t\t\t\tthis.meshBody.setAnimationDirectionForward( this.activeAnimation );\n\t\t\t\tthis.meshBody.setAnimationDirectionForward( this.oldAnimation );\n\n\t\t\t}\n\n\t\t\tif ( this.meshWeapon ) {\n\n\t\t\t\tthis.meshWeapon.setAnimationDirectionForward( this.activeAnimation );\n\t\t\t\tthis.meshWeapon.setAnimationDirectionForward( this.oldAnimation );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( controls.moveBackward ) {\n\n\t\t\tif ( this.meshBody ) {\n\n\t\t\t\tthis.meshBody.setAnimationDirectionBackward( this.activeAnimation );\n\t\t\t\tthis.meshBody.setAnimationDirectionBackward( this.oldAnimation );\n\n\t\t\t}\n\n\t\t\tif ( this.meshWeapon ) {\n\n\t\t\t\tthis.meshWeapon.setAnimationDirectionBackward( this.activeAnimation );\n\t\t\t\tthis.meshWeapon.setAnimationDirectionBackward( this.oldAnimation );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Transforms the character model based on the control input.\n\t *\n\t * @param {number} delta - The delta time in seconds.\n\t */\n\tupdateMovementModel( delta ) {\n\n\t\tfunction exponentialEaseOut( k ) {\n\n\t\t\treturn k === 1 ? 1 : - Math.pow( 2, - 10 * k ) + 1;\n\n\t\t}\n\n\t\tconst controls = this.controls;\n\n\t\t// speed based on controls\n\n\t\tif ( controls.crouch ) \tthis.maxSpeed = this.crouchSpeed;\n\t\telse this.maxSpeed = this.walkSpeed;\n\n\t\tthis.maxReverseSpeed = - this.maxSpeed;\n\n\t\tif ( controls.moveForward ) this.speed = MathUtils.clamp( this.speed + delta * this.frontAcceleration, this.maxReverseSpeed, this.maxSpeed );\n\t\tif ( controls.moveBackward ) this.speed = MathUtils.clamp( this.speed - delta * this.backAcceleration, this.maxReverseSpeed, this.maxSpeed );\n\n\t\t// orientation based on controls\n\t\t// (don't just stand while turning)\n\n\t\tconst dir = 1;\n\n\t\tif ( controls.moveLeft ) {\n\n\t\t\tthis.bodyOrientation += delta * this.angularSpeed;\n\t\t\tthis.speed = MathUtils.clamp( this.speed + dir * delta * this.frontAcceleration, this.maxReverseSpeed, this.maxSpeed );\n\n\t\t}\n\n\t\tif ( controls.moveRight ) {\n\n\t\t\tthis.bodyOrientation -= delta * this.angularSpeed;\n\t\t\tthis.speed = MathUtils.clamp( this.speed + dir * delta * this.frontAcceleration, this.maxReverseSpeed, this.maxSpeed );\n\n\t\t}\n\n\t\t// speed decay\n\n\t\tif ( ! ( controls.moveForward || controls.moveBackward ) ) {\n\n\t\t\tif ( this.speed > 0 ) {\n\n\t\t\t\tconst k = exponentialEaseOut( this.speed / this.maxSpeed );\n\t\t\t\tthis.speed = MathUtils.clamp( this.speed - k * delta * this.frontDeceleration, 0, this.maxSpeed );\n\n\t\t\t} else {\n\n\t\t\t\tconst k = exponentialEaseOut( this.speed / this.maxReverseSpeed );\n\t\t\t\tthis.speed = MathUtils.clamp( this.speed + k * delta * this.backAcceleration, this.maxReverseSpeed, 0 );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// displacement\n\n\t\tconst forwardDelta = this.speed * delta;\n\n\t\tthis.root.position.x += Math.sin( this.bodyOrientation ) * forwardDelta;\n\t\tthis.root.position.z += Math.cos( this.bodyOrientation ) * forwardDelta;\n\n\t\t// steering\n\n\t\tthis.root.rotation.y = this.bodyOrientation;\n\n\t}\n\n\t// internal\n\n\t_createPart( geometry, skinMap ) {\n\n\t\tconst materialWireframe = new MeshLambertMaterial( { color: 0xffaa00, wireframe: true } );\n\t\tconst materialTexture = new MeshLambertMaterial( { color: 0xffffff, wireframe: false, map: skinMap } );\n\n\t\t//\n\n\t\tconst mesh = new MorphBlendMesh( geometry, materialTexture );\n\t\tmesh.rotation.y = - Math.PI / 2;\n\n\t\t//\n\n\t\tmesh.materialTexture = materialTexture;\n\t\tmesh.materialWireframe = materialWireframe;\n\n\t\t//\n\n\t\tmesh.autoCreateAnimations( this.animationFPS );\n\n\t\treturn mesh;\n\n\t}\n\n}\n\nexport { MD2CharacterComplex };\n"],"mappings":"AAAA,SACCA,IAAI,EACJC,SAAS,EACTC,mBAAmB,EACnBC,QAAQ,EACRC,aAAa,EACbC,SAAS,EACTC,cAAc,QACR,OAAO;AACd,SAASC,SAAS,QAAQ,yBAAyB;AACnD,SAASC,cAAc,QAAQ,2BAA2B;;AAE1D;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,mBAAmB,CAAC;EAEzB;AACD;AACA;EACCC,WAAWA,CAAA,EAAG;IAEb;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,KAAK,GAAG,CAAC;;IAEd;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,YAAY,GAAG,CAAC;;IAErB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,gBAAgB,GAAG,EAAE;;IAE1B;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,QAAQ,GAAG,GAAG;;IAEnB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,eAAe,GAAG,CAAE,GAAG;;IAE5B;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,iBAAiB,GAAG,GAAG;;IAE5B;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,gBAAgB,GAAG,GAAG;;IAE3B;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,iBAAiB,GAAG,GAAG;;IAE5B;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,YAAY,GAAG,GAAG;;IAEvB;AACF;AACA;AACA;AACA;IACE,IAAI,CAACC,IAAI,GAAG,IAAIjB,QAAQ,CAAC,CAAC;;IAE1B;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACkB,QAAQ,GAAG,IAAI;;IAEpB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,UAAU,GAAG,IAAI;;IAEtB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,QAAQ,GAAG,IAAI;;IAEpB;AACF;AACA;AACA;AACA;IACE,IAAI,CAACC,SAAS,GAAG,EAAE;;IAEnB;AACF;AACA;AACA;AACA;IACE,IAAI,CAACC,WAAW,GAAG,EA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}