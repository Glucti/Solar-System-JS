{"ast":null,"code":"import { BufferAttribute, BufferGeometry, Matrix4, Vector3, Vector4 } from 'three';\n\n/**\n * Tessellates the famous Utah teapot database by Martin Newell into triangles.\n *\n * The teapot should normally be rendered as a double sided object, since for some\n * patches both sides can be seen, e.g., the gap around the lid and inside the spout.\n *\n * Segments 'n' determines the number of triangles output. Total triangles = 32*2*n*n - 8*n\n * (degenerates at the top and bottom cusps are deleted).\n *\n * Code based on [SPD software]{@link http://tog.acm.org/resources/SPD/}\n * Created for the Udacity course [Interactive Rendering]{@link http://bit.ly/ericity}\n *\n * ```js\n * const geometry = new TeapotGeometry( 50, 18 );\n * const material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n * const teapot = new THREE.Mesh( geometry, material );\n * scene.add( teapot );\n * ```\n *\n * @augments BufferGeometry\n * @three_import import { TeapotGeometry } from 'three/addons/geometries/TeapotGeometry.js';\n */\nclass TeapotGeometry extends BufferGeometry {\n  /**\n   * Constructs a new teapot geometry.\n   *\n   * @param {number} [size=50] - Relative scale of the teapot.\n   * @param {number} [segments=10] - Number of line segments to subdivide each patch edge.\n   * @param {boolean} [bottom=true] - Whether the bottom of the teapot is generated or not.\n   * @param {boolean} [lid=true] - Whether the lid is generated or not.\n   * @param {boolean} [body=true] - Whether the body is generated or not.\n   * @param {boolean} [fitLid=true] - Whether the lid is slightly stretched to prevent gaps between the body and lid or not.\n   * @param {boolean} [blinn=true] -  Whether the teapot is scaled vertically for better aesthetics or not.\n   */\n  constructor(size = 50, segments = 10, bottom = true, lid = true, body = true, fitLid = true, blinn = true) {\n    // 32 * 4 * 4 Bezier spline patches\n    const teapotPatches = [/*rim*/\n    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 3, 16, 17, 18, 7, 19, 20, 21, 11, 22, 23, 24, 15, 25, 26, 27, 18, 28, 29, 30, 21, 31, 32, 33, 24, 34, 35, 36, 27, 37, 38, 39, 30, 40, 41, 0, 33, 42, 43, 4, 36, 44, 45, 8, 39, 46, 47, 12, /*body*/\n    12, 13, 14, 15, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 15, 25, 26, 27, 51, 60, 61, 62, 55, 63, 64, 65, 59, 66, 67, 68, 27, 37, 38, 39, 62, 69, 70, 71, 65, 72, 73, 74, 68, 75, 76, 77, 39, 46, 47, 12, 71, 78, 79, 48, 74, 80, 81, 52, 77, 82, 83, 56, 56, 57, 58, 59, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 59, 66, 67, 68, 87, 96, 97, 98, 91, 99, 100, 101, 95, 102, 103, 104, 68, 75, 76, 77, 98, 105, 106, 107, 101, 108, 109, 110, 104, 111, 112, 113, 77, 82, 83, 56, 107, 114, 115, 84, 110, 116, 117, 88, 113, 118, 119, 92, /*handle*/\n    120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 123, 136, 137, 120, 127, 138, 139, 124, 131, 140, 141, 128, 135, 142, 143, 132, 132, 133, 134, 135, 144, 145, 146, 147, 148, 149, 150, 151, 68, 152, 153, 154, 135, 142, 143, 132, 147, 155, 156, 144, 151, 157, 158, 148, 154, 159, 160, 68, /*spout*/\n    161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 164, 177, 178, 161, 168, 179, 180, 165, 172, 181, 182, 169, 176, 183, 184, 173, 173, 174, 175, 176, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 176, 183, 184, 173, 188, 197, 198, 185, 192, 199, 200, 189, 196, 201, 202, 193, /*lid*/\n    203, 203, 203, 203, 204, 205, 206, 207, 208, 208, 208, 208, 209, 210, 211, 212, 203, 203, 203, 203, 207, 213, 214, 215, 208, 208, 208, 208, 212, 216, 217, 218, 203, 203, 203, 203, 215, 219, 220, 221, 208, 208, 208, 208, 218, 222, 223, 224, 203, 203, 203, 203, 221, 225, 226, 204, 208, 208, 208, 208, 224, 227, 228, 209, 209, 210, 211, 212, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 212, 216, 217, 218, 232, 241, 242, 243, 236, 244, 245, 246, 240, 247, 248, 249, 218, 222, 223, 224, 243, 250, 251, 252, 246, 253, 254, 255, 249, 256, 257, 258, 224, 227, 228, 209, 252, 259, 260, 229, 255, 261, 262, 233, 258, 263, 264, 237, /*bottom*/\n    265, 265, 265, 265, 266, 267, 268, 269, 270, 271, 272, 273, 92, 119, 118, 113, 265, 265, 265, 265, 269, 274, 275, 276, 273, 277, 278, 279, 113, 112, 111, 104, 265, 265, 265, 265, 276, 280, 281, 282, 279, 283, 284, 285, 104, 103, 102, 95, 265, 265, 265, 265, 282, 286, 287, 266, 285, 288, 289, 270, 95, 94, 93, 92];\n    const teapotVertices = [1.4, 0, 2.4, 1.4, -0.784, 2.4, 0.784, -1.4, 2.4, 0, -1.4, 2.4, 1.3375, 0, 2.53125, 1.3375, -0.749, 2.53125, 0.749, -1.3375, 2.53125, 0, -1.3375, 2.53125, 1.4375, 0, 2.53125, 1.4375, -0.805, 2.53125, 0.805, -1.4375, 2.53125, 0, -1.4375, 2.53125, 1.5, 0, 2.4, 1.5, -0.84, 2.4, 0.84, -1.5, 2.4, 0, -1.5, 2.4, -0.784, -1.4, 2.4, -1.4, -0.784, 2.4, -1.4, 0, 2.4, -0.749, -1.3375, 2.53125, -1.3375, -0.749, 2.53125, -1.3375, 0, 2.53125, -0.805, -1.4375, 2.53125, -1.4375, -0.805, 2.53125, -1.4375, 0, 2.53125, -0.84, -1.5, 2.4, -1.5, -0.84, 2.4, -1.5, 0, 2.4, -1.4, 0.784, 2.4, -0.784, 1.4, 2.4, 0, 1.4, 2.4, -1.3375, 0.749, 2.53125, -0.749, 1.3375, 2.53125, 0, 1.3375, 2.53125, -1.4375, 0.805, 2.53125, -0.805, 1.4375, 2.53125, 0, 1.4375, 2.53125, -1.5, 0.84, 2.4, -0.84, 1.5, 2.4, 0, 1.5, 2.4, 0.784, 1.4, 2.4, 1.4, 0.784, 2.4, 0.749, 1.3375, 2.53125, 1.3375, 0.749, 2.53125, 0.805, 1.4375, 2.53125, 1.4375, 0.805, 2.53125, 0.84, 1.5, 2.4, 1.5, 0.84, 2.4, 1.75, 0, 1.875, 1.75, -0.98, 1.875, 0.98, -1.75, 1.875, 0, -1.75, 1.875, 2, 0, 1.35, 2, -1.12, 1.35, 1.12, -2, 1.35, 0, -2, 1.35, 2, 0, 0.9, 2, -1.12, 0.9, 1.12, -2, 0.9, 0, -2, 0.9, -0.98, -1.75, 1.875, -1.75, -0.98, 1.875, -1.75, 0, 1.875, -1.12, -2, 1.35, -2, -1.12, 1.35, -2, 0, 1.35, -1.12, -2, 0.9, -2, -1.12, 0.9, -2, 0, 0.9, -1.75, 0.98, 1.875, -0.98, 1.75, 1.875, 0, 1.75, 1.875, -2, 1.12, 1.35, -1.12, 2, 1.35, 0, 2, 1.35, -2, 1.12, 0.9, -1.12, 2, 0.9, 0, 2, 0.9, 0.98, 1.75, 1.875, 1.75, 0.98, 1.875, 1.12, 2, 1.35, 2, 1.12, 1.35, 1.12, 2, 0.9, 2, 1.12, 0.9, 2, 0, 0.45, 2, -1.12, 0.45, 1.12, -2, 0.45, 0, -2, 0.45, 1.5, 0, 0.225, 1.5, -0.84, 0.225, 0.84, -1.5, 0.225, 0, -1.5, 0.225, 1.5, 0, 0.15, 1.5, -0.84, 0.15, 0.84, -1.5, 0.15, 0, -1.5, 0.15, -1.12, -2, 0.45, -2, -1.12, 0.45, -2, 0, 0.45, -0.84, -1.5, 0.225, -1.5, -0.84, 0.225, -1.5, 0, 0.225, -0.84, -1.5, 0.15, -1.5, -0.84, 0.15, -1.5, 0, 0.15, -2, 1.12, 0.45, -1.12, 2, 0.45, 0, 2, 0.45, -1.5, 0.84, 0.225, -0.84, 1.5, 0.225, 0, 1.5, 0.225, -1.5, 0.84, 0.15, -0.84, 1.5, 0.15, 0, 1.5, 0.15, 1.12, 2, 0.45, 2, 1.12, 0.45, 0.84, 1.5, 0.225, 1.5, 0.84, 0.225, 0.84, 1.5, 0.15, 1.5, 0.84, 0.15, -1.6, 0, 2.025, -1.6, -0.3, 2.025, -1.5, -0.3, 2.25, -1.5, 0, 2.25, -2.3, 0, 2.025, -2.3, -0.3, 2.025, -2.5, -0.3, 2.25, -2.5, 0, 2.25, -2.7, 0, 2.025, -2.7, -0.3, 2.025, -3, -0.3, 2.25, -3, 0, 2.25, -2.7, 0, 1.8, -2.7, -0.3, 1.8, -3, -0.3, 1.8, -3, 0, 1.8, -1.5, 0.3, 2.25, -1.6, 0.3, 2.025, -2.5, 0.3, 2.25, -2.3, 0.3, 2.025, -3, 0.3, 2.25, -2.7, 0.3, 2.025, -3, 0.3, 1.8, -2.7, 0.3, 1.8, -2.7, 0, 1.575, -2.7, -0.3, 1.575, -3, -0.3, 1.35, -3, 0, 1.35, -2.5, 0, 1.125, -2.5, -0.3, 1.125, -2.65, -0.3, 0.9375, -2.65, 0, 0.9375, -2, -0.3, 0.9, -1.9, -0.3, 0.6, -1.9, 0, 0.6, -3, 0.3, 1.35, -2.7, 0.3, 1.575, -2.65, 0.3, 0.9375, -2.5, 0.3, 1.125, -1.9, 0.3, 0.6, -2, 0.3, 0.9, 1.7, 0, 1.425, 1.7, -0.66, 1.425, 1.7, -0.66, 0.6, 1.7, 0, 0.6, 2.6, 0, 1.425, 2.6, -0.66, 1.425, 3.1, -0.66, 0.825, 3.1, 0, 0.825, 2.3, 0, 2.1, 2.3, -0.25, 2.1, 2.4, -0.25, 2.025, 2.4, 0, 2.025, 2.7, 0, 2.4, 2.7, -0.25, 2.4, 3.3, -0.25, 2.4, 3.3, 0, 2.4, 1.7, 0.66, 0.6, 1.7, 0.66, 1.425, 3.1, 0.66, 0.825, 2.6, 0.66, 1.425, 2.4, 0.25, 2.025, 2.3, 0.25, 2.1, 3.3, 0.25, 2.4, 2.7, 0.25, 2.4, 2.8, 0, 2.475, 2.8, -0.25, 2.475, 3.525, -0.25, 2.49375, 3.525, 0, 2.49375, 2.9, 0, 2.475, 2.9, -0.15, 2.475, 3.45, -0.15, 2.5125, 3.45, 0, 2.5125, 2.8, 0, 2.4, 2.8, -0.15, 2.4, 3.2, -0.15, 2.4, 3.2, 0, 2.4, 3.525, 0.25, 2.49375, 2.8, 0.25, 2.475, 3.45, 0.15, 2.5125, 2.9, 0.15, 2.475, 3.2, 0.15, 2.4, 2.8, 0.15, 2.4, 0, 0, 3.15, 0.8, 0, 3.15, 0.8, -0.45, 3.15, 0.45, -0.8, 3.15, 0, -0.8, 3.15, 0, 0, 2.85, 0.2, 0, 2.7, 0.2, -0.112, 2.7, 0.112, -0.2, 2.7, 0, -0.2, 2.7, -0.45, -0.8, 3.15, -0.8, -0.45, 3.15, -0.8, 0, 3.15, -0.112, -0.2, 2.7, -0.2, -0.112, 2.7, -0.2, 0, 2.7, -0.8, 0.45, 3.15, -0.45, 0.8, 3.15, 0, 0.8, 3.15, -0.2, 0.112, 2.7, -0.112, 0.2, 2.7, 0, 0.2, 2.7, 0.45, 0.8, 3.15, 0.8, 0.45, 3.15, 0.112, 0.2, 2.7, 0.2, 0.112, 2.7, 0.4, 0, 2.55, 0.4, -0.224, 2.55, 0.224, -0.4, 2.55, 0, -0.4, 2.55, 1.3, 0, 2.55, 1.3, -0.728, 2.55, 0.728, -1.3, 2.55, 0, -1.3, 2.55, 1.3, 0, 2.4, 1.3, -0.728, 2.4, 0.728, -1.3, 2.4, 0, -1.3, 2.4, -0.224, -0.4, 2.55, -0.4, -0.224, 2.55, -0.4, 0, 2.55, -0.728, -1.3, 2.55, -1.3, -0.728, 2.55, -1.3, 0, 2.55, -0.728, -1.3, 2.4, -1.3, -0.728, 2.4, -1.3, 0, 2.4, -0.4, 0.224, 2.55, -0.224, 0.4, 2.55, 0, 0.4, 2.55, -1.3, 0.728, 2.55, -0.728, 1.3, 2.55, 0, 1.3, 2.55, -1.3, 0.728, 2.4, -0.728, 1.3, 2.4, 0, 1.3, 2.4, 0.224, 0.4, 2.55, 0.4, 0.224, 2.55, 0.728, 1.3, 2.55, 1.3, 0.728, 2.55, 0.728, 1.3, 2.4, 1.3, 0.728, 2.4, 0, 0, 0, 1.425, 0, 0, 1.425, 0.798, 0, 0.798, 1.425, 0, 0, 1.425, 0, 1.5, 0, 0.075, 1.5, 0.84, 0.075, 0.84, 1.5, 0.075, 0, 1.5, 0.075, -0.798, 1.425, 0, -1.425, 0.798, 0, -1.425, 0, 0, -0.84, 1.5, 0.075, -1.5, 0.84, 0.075, -1.5, 0, 0.075, -1.425, -0.798, 0, -0.798, -1.425, 0, 0, -1.425, 0, -1.5, -0.84, 0.075, -0.84, -1.5, 0.075, 0, -1.5, 0.075, 0.798, -1.425, 0, 1.425, -0.798, 0, 0.84, -1.5, 0.075, 1.5, -0.84, 0.075];\n    super();\n\n    // number of segments per patch\n    segments = Math.max(2, Math.floor(segments));\n\n    // Jim Blinn scaled the teapot down in size by about 1.3 for\n    // some rendering tests. He liked the new proportions that he kept\n    // the data in this form. The model was distributed with these new\n    // proportions and became the norm. Trivia: comparing images of the\n    // real teapot and the computer model, the ratio for the bowl of the\n    // real teapot is more like 1.25, but since 1.3 is the traditional\n    // value given, we use it here.\n    const blinnScale = 1.3;\n\n    // scale the size to be the real scaling factor\n    const maxHeight = 3.15 * (blinn ? 1 : blinnScale);\n    const maxHeight2 = maxHeight / 2;\n    const trueSize = size / maxHeight2;\n\n    // Number of elements depends on what is needed. Subtract degenerate\n    // triangles at tip of bottom and lid out in advance.\n    let numTriangles = bottom ? (8 * segments - 4) * segments : 0;\n    numTriangles += lid ? (16 * segments - 4) * segments : 0;\n    numTriangles += body ? 40 * segments * segments : 0;\n    const indices = new Uint32Array(numTriangles * 3);\n    let numVertices = bottom ? 4 : 0;\n    numVertices += lid ? 8 : 0;\n    numVertices += body ? 20 : 0;\n    numVertices *= (segments + 1) * (segments + 1);\n    const vertices = new Float32Array(numVertices * 3);\n    const normals = new Float32Array(numVertices * 3);\n    const uvs = new Float32Array(numVertices * 2);\n\n    // Bezier form\n    const ms = new Matrix4();\n    ms.set(-1.0, 3.0, -3.0, 1.0, 3.0, -6.0, 3.0, 0.0, -3.0, 3.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0);\n    const g = [];\n    const sp = [];\n    const tp = [];\n    const dsp = [];\n    const dtp = [];\n\n    // M * G * M matrix, sort of see\n    // http://www.cs.helsinki.fi/group/goa/mallinnus/curves/surfaces.html\n    const mgm = [];\n    const vert = [];\n    const sdir = [];\n    const tdir = [];\n    const norm = new Vector3();\n    let tcoord;\n    let sval;\n    let tval;\n    let p;\n    let dsval = 0;\n    let dtval = 0;\n    const normOut = new Vector3();\n    const gmx = new Matrix4();\n    const tmtx = new Matrix4();\n    const vsp = new Vector4();\n    const vtp = new Vector4();\n    const vdsp = new Vector4();\n    const vdtp = new Vector4();\n    const vsdir = new Vector3();\n    const vtdir = new Vector3();\n    const mst = ms.clone();\n    mst.transpose();\n\n    // internal function: test if triangle has any matching vertices;\n    // if so, don't save triangle, since it won't display anything.\n    const notDegenerate = (vtx1, vtx2, vtx3) =>\n    // if any vertex matches, return false\n    !(vertices[vtx1 * 3] === vertices[vtx2 * 3] && vertices[vtx1 * 3 + 1] === vertices[vtx2 * 3 + 1] && vertices[vtx1 * 3 + 2] === vertices[vtx2 * 3 + 2] || vertices[vtx1 * 3] === vertices[vtx3 * 3] && vertices[vtx1 * 3 + 1] === vertices[vtx3 * 3 + 1] && vertices[vtx1 * 3 + 2] === vertices[vtx3 * 3 + 2] || vertices[vtx2 * 3] === vertices[vtx3 * 3] && vertices[vtx2 * 3 + 1] === vertices[vtx3 * 3 + 1] && vertices[vtx2 * 3 + 2] === vertices[vtx3 * 3 + 2]);\n    for (let i = 0; i < 3; i++) {\n      mgm[i] = new Matrix4();\n    }\n    const minPatches = body ? 0 : 20;\n    const maxPatches = bottom ? 32 : 28;\n    const vertPerRow = segments + 1;\n    let surfCount = 0;\n    let vertCount = 0;\n    let normCount = 0;\n    let uvCount = 0;\n    let indexCount = 0;\n    for (let surf = minPatches; surf < maxPatches; surf++) {\n      // lid is in the middle of the data, patches 20-27,\n      // so ignore it for this part of the loop if the lid is not desired\n      if (lid || surf < 20 || surf >= 28) {\n        // get M * G * M matrix for x,y,z\n        for (let i = 0; i < 3; i++) {\n          // get control patches\n          for (let r = 0; r < 4; r++) {\n            for (let c = 0; c < 4; c++) {\n              // transposed\n              g[c * 4 + r] = teapotVertices[teapotPatches[surf * 16 + r * 4 + c] * 3 + i];\n\n              // is the lid to be made larger, and is this a point on the lid\n              // that is X or Y?\n              if (fitLid && surf >= 20 && surf < 28 && i !== 2) {\n                // increase XY size by 7.7%, found empirically. I don't\n                // increase Z so that the teapot will continue to fit in the\n                // space -1 to 1 for Y (Y is up for the final model).\n                g[c * 4 + r] *= 1.077;\n              }\n\n              // Blinn \"fixed\" the teapot by dividing Z by blinnScale, and that's the\n              // data we now use. The original teapot is taller. Fix it:\n              if (!blinn && i === 2) {\n                g[c * 4 + r] *= blinnScale;\n              }\n            }\n          }\n          gmx.set(g[0], g[1], g[2], g[3], g[4], g[5], g[6], g[7], g[8], g[9], g[10], g[11], g[12], g[13], g[14], g[15]);\n          tmtx.multiplyMatrices(gmx, ms);\n          mgm[i].multiplyMatrices(mst, tmtx);\n        }\n\n        // step along, get points, and output\n        for (let sstep = 0; sstep <= segments; sstep++) {\n          const s = sstep / segments;\n          for (let tstep = 0; tstep <= segments; tstep++) {\n            const t = tstep / segments;\n\n            // point from basis\n            // get power vectors and their derivatives\n            for (p = 4, sval = tval = 1.0; p--;) {\n              sp[p] = sval;\n              tp[p] = tval;\n              sval *= s;\n              tval *= t;\n              if (p === 3) {\n                dsp[p] = dtp[p] = 0.0;\n                dsval = dtval = 1.0;\n              } else {\n                dsp[p] = dsval * (3 - p);\n                dtp[p] = dtval * (3 - p);\n                dsval *= s;\n                dtval *= t;\n              }\n            }\n            vsp.fromArray(sp);\n            vtp.fromArray(tp);\n            vdsp.fromArray(dsp);\n            vdtp.fromArray(dtp);\n\n            // do for x,y,z\n            for (let i = 0; i < 3; i++) {\n              // multiply power vectors times matrix to get value\n              tcoord = vsp.clone();\n              tcoord.applyMatrix4(mgm[i]);\n              vert[i] = tcoord.dot(vtp);\n\n              // get s and t tangent vectors\n              tcoord = vdsp.clone();\n              tcoord.applyMatrix4(mgm[i]);\n              sdir[i] = tcoord.dot(vtp);\n              tcoord = vsp.clone();\n              tcoord.applyMatrix4(mgm[i]);\n              tdir[i] = tcoord.dot(vdtp);\n            }\n\n            // find normal\n            vsdir.fromArray(sdir);\n            vtdir.fromArray(tdir);\n            norm.crossVectors(vtdir, vsdir);\n            norm.normalize();\n\n            // if X and Z length is 0, at the cusp, so point the normal up or down, depending on patch number\n            if (vert[0] === 0 && vert[1] === 0) {\n              // if above the middle of the teapot, normal points up, else down\n              normOut.set(0, vert[2] > maxHeight2 ? 1 : -1, 0);\n            } else {\n              // standard output: rotate on X axis\n              normOut.set(norm.x, norm.z, -norm.y);\n            }\n\n            // store it all\n            vertices[vertCount++] = trueSize * vert[0];\n            vertices[vertCount++] = trueSize * (vert[2] - maxHeight2);\n            vertices[vertCount++] = -trueSize * vert[1];\n            normals[normCount++] = normOut.x;\n            normals[normCount++] = normOut.y;\n            normals[normCount++] = normOut.z;\n            uvs[uvCount++] = 1 - t;\n            uvs[uvCount++] = 1 - s;\n          }\n        }\n\n        // save the faces\n        for (let sstep = 0; sstep < segments; sstep++) {\n          for (let tstep = 0; tstep < segments; tstep++) {\n            const v1 = surfCount * vertPerRow * vertPerRow + sstep * vertPerRow + tstep;\n            const v2 = v1 + 1;\n            const v3 = v2 + vertPerRow;\n            const v4 = v1 + vertPerRow;\n\n            // Normals and UVs cannot be shared. Without clone(), you can see the consequences\n            // of sharing if you call geometry.applyMatrix4( matrix ).\n            if (notDegenerate(v1, v2, v3)) {\n              indices[indexCount++] = v1;\n              indices[indexCount++] = v2;\n              indices[indexCount++] = v3;\n            }\n            if (notDegenerate(v1, v3, v4)) {\n              indices[indexCount++] = v1;\n              indices[indexCount++] = v3;\n              indices[indexCount++] = v4;\n            }\n          }\n        }\n\n        // increment only if a surface was used\n        surfCount++;\n      }\n    }\n    this.setIndex(new BufferAttribute(indices, 1));\n    this.setAttribute('position', new BufferAttribute(vertices, 3));\n    this.setAttribute('normal', new BufferAttribute(normals, 3));\n    this.setAttribute('uv', new BufferAttribute(uvs, 2));\n    this.computeBoundingSphere();\n  }\n}\nexport { TeapotGeometry };","map":{"version":3,"names":["BufferAttribute","BufferGeometry","Matrix4","Vector3","Vector4","TeapotGeometry","constructor","size","segments","bottom","lid","body","fitLid","blinn","teapotPatches","teapotVertices","Math","max","floor","blinnScale","maxHeight","maxHeight2","trueSize","numTriangles","indices","Uint32Array","numVertices","vertices","Float32Array","normals","uvs","ms","set","g","sp","tp","dsp","dtp","mgm","vert","sdir","tdir","norm","tcoord","sval","tval","p","dsval","dtval","normOut","gmx","tmtx","vsp","vtp","vdsp","vdtp","vsdir","vtdir","mst","clone","transpose","notDegenerate","vtx1","vtx2","vtx3","i","minPatches","maxPatches","vertPerRow","surfCount","vertCount","normCount","uvCount","indexCount","surf","r","c","multiplyMatrices","sstep","s","tstep","t","fromArray","applyMatrix4","dot","crossVectors","normalize","x","z","y","v1","v2","v3","v4","setIndex","setAttribute","computeBoundingSphere"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/geometries/TeapotGeometry.js"],"sourcesContent":["import {\n\tBufferAttribute,\n\tBufferGeometry,\n\tMatrix4,\n\tVector3,\n\tVector4\n} from 'three';\n\n/**\n * Tessellates the famous Utah teapot database by Martin Newell into triangles.\n *\n * The teapot should normally be rendered as a double sided object, since for some\n * patches both sides can be seen, e.g., the gap around the lid and inside the spout.\n *\n * Segments 'n' determines the number of triangles output. Total triangles = 32*2*n*n - 8*n\n * (degenerates at the top and bottom cusps are deleted).\n *\n * Code based on [SPD software]{@link http://tog.acm.org/resources/SPD/}\n * Created for the Udacity course [Interactive Rendering]{@link http://bit.ly/ericity}\n *\n * ```js\n * const geometry = new TeapotGeometry( 50, 18 );\n * const material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n * const teapot = new THREE.Mesh( geometry, material );\n * scene.add( teapot );\n * ```\n *\n * @augments BufferGeometry\n * @three_import import { TeapotGeometry } from 'three/addons/geometries/TeapotGeometry.js';\n */\nclass TeapotGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new teapot geometry.\n\t *\n\t * @param {number} [size=50] - Relative scale of the teapot.\n\t * @param {number} [segments=10] - Number of line segments to subdivide each patch edge.\n\t * @param {boolean} [bottom=true] - Whether the bottom of the teapot is generated or not.\n\t * @param {boolean} [lid=true] - Whether the lid is generated or not.\n\t * @param {boolean} [body=true] - Whether the body is generated or not.\n\t * @param {boolean} [fitLid=true] - Whether the lid is slightly stretched to prevent gaps between the body and lid or not.\n\t * @param {boolean} [blinn=true] -  Whether the teapot is scaled vertically for better aesthetics or not.\n\t */\n\tconstructor( size = 50, segments = 10, bottom = true, lid = true, body = true, fitLid = true, blinn = true ) {\n\n\t\t// 32 * 4 * 4 Bezier spline patches\n\t\tconst teapotPatches = [\n\t\t\t/*rim*/\n\t\t\t0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n\t\t\t3, 16, 17, 18, 7, 19, 20, 21, 11, 22, 23, 24, 15, 25, 26, 27,\n\t\t\t18, 28, 29, 30, 21, 31, 32, 33, 24, 34, 35, 36, 27, 37, 38, 39,\n\t\t\t30, 40, 41, 0, 33, 42, 43, 4, 36, 44, 45, 8, 39, 46, 47, 12,\n\t\t\t/*body*/\n\t\t\t12, 13, 14, 15, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n\t\t\t15, 25, 26, 27, 51, 60, 61, 62, 55, 63, 64, 65, 59, 66, 67, 68,\n\t\t\t27, 37, 38, 39, 62, 69, 70, 71, 65, 72, 73, 74, 68, 75, 76, 77,\n\t\t\t39, 46, 47, 12, 71, 78, 79, 48, 74, 80, 81, 52, 77, 82, 83, 56,\n\t\t\t56, 57, 58, 59, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95,\n\t\t\t59, 66, 67, 68, 87, 96, 97, 98, 91, 99, 100, 101, 95, 102, 103, 104,\n\t\t\t68, 75, 76, 77, 98, 105, 106, 107, 101, 108, 109, 110, 104, 111, 112, 113,\n\t\t\t77, 82, 83, 56, 107, 114, 115, 84, 110, 116, 117, 88, 113, 118, 119, 92,\n\t\t\t/*handle*/\n\t\t\t120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135,\n\t\t\t123, 136, 137, 120, 127, 138, 139, 124, 131, 140, 141, 128, 135, 142, 143, 132,\n\t\t\t132, 133, 134, 135, 144, 145, 146, 147, 148, 149, 150, 151, 68, 152, 153, 154,\n\t\t\t135, 142, 143, 132, 147, 155, 156, 144, 151, 157, 158, 148, 154, 159, 160, 68,\n\t\t\t/*spout*/\n\t\t\t161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176,\n\t\t\t164, 177, 178, 161, 168, 179, 180, 165, 172, 181, 182, 169, 176, 183, 184, 173,\n\t\t\t173, 174, 175, 176, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196,\n\t\t\t176, 183, 184, 173, 188, 197, 198, 185, 192, 199, 200, 189, 196, 201, 202, 193,\n\t\t\t/*lid*/\n\t\t\t203, 203, 203, 203, 204, 205, 206, 207, 208, 208, 208, 208, 209, 210, 211, 212,\n\t\t\t203, 203, 203, 203, 207, 213, 214, 215, 208, 208, 208, 208, 212, 216, 217, 218,\n\t\t\t203, 203, 203, 203, 215, 219, 220, 221, 208, 208, 208, 208, 218, 222, 223, 224,\n\t\t\t203, 203, 203, 203, 221, 225, 226, 204, 208, 208, 208, 208, 224, 227, 228, 209,\n\t\t\t209, 210, 211, 212, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240,\n\t\t\t212, 216, 217, 218, 232, 241, 242, 243, 236, 244, 245, 246, 240, 247, 248, 249,\n\t\t\t218, 222, 223, 224, 243, 250, 251, 252, 246, 253, 254, 255, 249, 256, 257, 258,\n\t\t\t224, 227, 228, 209, 252, 259, 260, 229, 255, 261, 262, 233, 258, 263, 264, 237,\n\t\t\t/*bottom*/\n\t\t\t265, 265, 265, 265, 266, 267, 268, 269, 270, 271, 272, 273, 92, 119, 118, 113,\n\t\t\t265, 265, 265, 265, 269, 274, 275, 276, 273, 277, 278, 279, 113, 112, 111, 104,\n\t\t\t265, 265, 265, 265, 276, 280, 281, 282, 279, 283, 284, 285, 104, 103, 102, 95,\n\t\t\t265, 265, 265, 265, 282, 286, 287, 266, 285, 288, 289, 270, 95, 94, 93, 92\n\t\t];\n\n\t\tconst teapotVertices = [\n\t\t\t1.4, 0, 2.4,\n\t\t\t1.4, - 0.784, 2.4,\n\t\t\t0.784, - 1.4, 2.4,\n\t\t\t0, - 1.4, 2.4,\n\t\t\t1.3375, 0, 2.53125,\n\t\t\t1.3375, - 0.749, 2.53125,\n\t\t\t0.749, - 1.3375, 2.53125,\n\t\t\t0, - 1.3375, 2.53125,\n\t\t\t1.4375, 0, 2.53125,\n\t\t\t1.4375, - 0.805, 2.53125,\n\t\t\t0.805, - 1.4375, 2.53125,\n\t\t\t0, - 1.4375, 2.53125,\n\t\t\t1.5, 0, 2.4,\n\t\t\t1.5, - 0.84, 2.4,\n\t\t\t0.84, - 1.5, 2.4,\n\t\t\t0, - 1.5, 2.4,\n\t\t\t- 0.784, - 1.4, 2.4,\n\t\t\t- 1.4, - 0.784, 2.4,\n\t\t\t- 1.4, 0, 2.4,\n\t\t\t- 0.749, - 1.3375, 2.53125,\n\t\t\t- 1.3375, - 0.749, 2.53125,\n\t\t\t- 1.3375, 0, 2.53125,\n\t\t\t- 0.805, - 1.4375, 2.53125,\n\t\t\t- 1.4375, - 0.805, 2.53125,\n\t\t\t- 1.4375, 0, 2.53125,\n\t\t\t- 0.84, - 1.5, 2.4,\n\t\t\t- 1.5, - 0.84, 2.4,\n\t\t\t- 1.5, 0, 2.4,\n\t\t\t- 1.4, 0.784, 2.4,\n\t\t\t- 0.784, 1.4, 2.4,\n\t\t\t0, 1.4, 2.4,\n\t\t\t- 1.3375, 0.749, 2.53125,\n\t\t\t- 0.749, 1.3375, 2.53125,\n\t\t\t0, 1.3375, 2.53125,\n\t\t\t- 1.4375, 0.805, 2.53125,\n\t\t\t- 0.805, 1.4375, 2.53125,\n\t\t\t0, 1.4375, 2.53125,\n\t\t\t- 1.5, 0.84, 2.4,\n\t\t\t- 0.84, 1.5, 2.4,\n\t\t\t0, 1.5, 2.4,\n\t\t\t0.784, 1.4, 2.4,\n\t\t\t1.4, 0.784, 2.4,\n\t\t\t0.749, 1.3375, 2.53125,\n\t\t\t1.3375, 0.749, 2.53125,\n\t\t\t0.805, 1.4375, 2.53125,\n\t\t\t1.4375, 0.805, 2.53125,\n\t\t\t0.84, 1.5, 2.4,\n\t\t\t1.5, 0.84, 2.4,\n\t\t\t1.75, 0, 1.875,\n\t\t\t1.75, - 0.98, 1.875,\n\t\t\t0.98, - 1.75, 1.875,\n\t\t\t0, - 1.75, 1.875,\n\t\t\t2, 0, 1.35,\n\t\t\t2, - 1.12, 1.35,\n\t\t\t1.12, - 2, 1.35,\n\t\t\t0, - 2, 1.35,\n\t\t\t2, 0, 0.9,\n\t\t\t2, - 1.12, 0.9,\n\t\t\t1.12, - 2, 0.9,\n\t\t\t0, - 2, 0.9,\n\t\t\t- 0.98, - 1.75, 1.875,\n\t\t\t- 1.75, - 0.98, 1.875,\n\t\t\t- 1.75, 0, 1.875,\n\t\t\t- 1.12, - 2, 1.35,\n\t\t\t- 2, - 1.12, 1.35,\n\t\t\t- 2, 0, 1.35,\n\t\t\t- 1.12, - 2, 0.9,\n\t\t\t- 2, - 1.12, 0.9,\n\t\t\t- 2, 0, 0.9,\n\t\t\t- 1.75, 0.98, 1.875,\n\t\t\t- 0.98, 1.75, 1.875,\n\t\t\t0, 1.75, 1.875,\n\t\t\t- 2, 1.12, 1.35,\n\t\t\t- 1.12, 2, 1.35,\n\t\t\t0, 2, 1.35,\n\t\t\t- 2, 1.12, 0.9,\n\t\t\t- 1.12, 2, 0.9,\n\t\t\t0, 2, 0.9,\n\t\t\t0.98, 1.75, 1.875,\n\t\t\t1.75, 0.98, 1.875,\n\t\t\t1.12, 2, 1.35,\n\t\t\t2, 1.12, 1.35,\n\t\t\t1.12, 2, 0.9,\n\t\t\t2, 1.12, 0.9,\n\t\t\t2, 0, 0.45,\n\t\t\t2, - 1.12, 0.45,\n\t\t\t1.12, - 2, 0.45,\n\t\t\t0, - 2, 0.45,\n\t\t\t1.5, 0, 0.225,\n\t\t\t1.5, - 0.84, 0.225,\n\t\t\t0.84, - 1.5, 0.225,\n\t\t\t0, - 1.5, 0.225,\n\t\t\t1.5, 0, 0.15,\n\t\t\t1.5, - 0.84, 0.15,\n\t\t\t0.84, - 1.5, 0.15,\n\t\t\t0, - 1.5, 0.15,\n\t\t\t- 1.12, - 2, 0.45,\n\t\t\t- 2, - 1.12, 0.45,\n\t\t\t- 2, 0, 0.45,\n\t\t\t- 0.84, - 1.5, 0.225,\n\t\t\t- 1.5, - 0.84, 0.225,\n\t\t\t- 1.5, 0, 0.225,\n\t\t\t- 0.84, - 1.5, 0.15,\n\t\t\t- 1.5, - 0.84, 0.15,\n\t\t\t- 1.5, 0, 0.15,\n\t\t\t- 2, 1.12, 0.45,\n\t\t\t- 1.12, 2, 0.45,\n\t\t\t0, 2, 0.45,\n\t\t\t- 1.5, 0.84, 0.225,\n\t\t\t- 0.84, 1.5, 0.225,\n\t\t\t0, 1.5, 0.225,\n\t\t\t- 1.5, 0.84, 0.15,\n\t\t\t- 0.84, 1.5, 0.15,\n\t\t\t0, 1.5, 0.15,\n\t\t\t1.12, 2, 0.45,\n\t\t\t2, 1.12, 0.45,\n\t\t\t0.84, 1.5, 0.225,\n\t\t\t1.5, 0.84, 0.225,\n\t\t\t0.84, 1.5, 0.15,\n\t\t\t1.5, 0.84, 0.15,\n\t\t\t- 1.6, 0, 2.025,\n\t\t\t- 1.6, - 0.3, 2.025,\n\t\t\t- 1.5, - 0.3, 2.25,\n\t\t\t- 1.5, 0, 2.25,\n\t\t\t- 2.3, 0, 2.025,\n\t\t\t- 2.3, - 0.3, 2.025,\n\t\t\t- 2.5, - 0.3, 2.25,\n\t\t\t- 2.5, 0, 2.25,\n\t\t\t- 2.7, 0, 2.025,\n\t\t\t- 2.7, - 0.3, 2.025,\n\t\t\t- 3, - 0.3, 2.25,\n\t\t\t- 3, 0, 2.25,\n\t\t\t- 2.7, 0, 1.8,\n\t\t\t- 2.7, - 0.3, 1.8,\n\t\t\t- 3, - 0.3, 1.8,\n\t\t\t- 3, 0, 1.8,\n\t\t\t- 1.5, 0.3, 2.25,\n\t\t\t- 1.6, 0.3, 2.025,\n\t\t\t- 2.5, 0.3, 2.25,\n\t\t\t- 2.3, 0.3, 2.025,\n\t\t\t- 3, 0.3, 2.25,\n\t\t\t- 2.7, 0.3, 2.025,\n\t\t\t- 3, 0.3, 1.8,\n\t\t\t- 2.7, 0.3, 1.8,\n\t\t\t- 2.7, 0, 1.575,\n\t\t\t- 2.7, - 0.3, 1.575,\n\t\t\t- 3, - 0.3, 1.35,\n\t\t\t- 3, 0, 1.35,\n\t\t\t- 2.5, 0, 1.125,\n\t\t\t- 2.5, - 0.3, 1.125,\n\t\t\t- 2.65, - 0.3, 0.9375,\n\t\t\t- 2.65, 0, 0.9375,\n\t\t\t- 2, - 0.3, 0.9,\n\t\t\t- 1.9, - 0.3, 0.6,\n\t\t\t- 1.9, 0, 0.6,\n\t\t\t- 3, 0.3, 1.35,\n\t\t\t- 2.7, 0.3, 1.575,\n\t\t\t- 2.65, 0.3, 0.9375,\n\t\t\t- 2.5, 0.3, 1.125,\n\t\t\t- 1.9, 0.3, 0.6,\n\t\t\t- 2, 0.3, 0.9,\n\t\t\t1.7, 0, 1.425,\n\t\t\t1.7, - 0.66, 1.425,\n\t\t\t1.7, - 0.66, 0.6,\n\t\t\t1.7, 0, 0.6,\n\t\t\t2.6, 0, 1.425,\n\t\t\t2.6, - 0.66, 1.425,\n\t\t\t3.1, - 0.66, 0.825,\n\t\t\t3.1, 0, 0.825,\n\t\t\t2.3, 0, 2.1,\n\t\t\t2.3, - 0.25, 2.1,\n\t\t\t2.4, - 0.25, 2.025,\n\t\t\t2.4, 0, 2.025,\n\t\t\t2.7, 0, 2.4,\n\t\t\t2.7, - 0.25, 2.4,\n\t\t\t3.3, - 0.25, 2.4,\n\t\t\t3.3, 0, 2.4,\n\t\t\t1.7, 0.66, 0.6,\n\t\t\t1.7, 0.66, 1.425,\n\t\t\t3.1, 0.66, 0.825,\n\t\t\t2.6, 0.66, 1.425,\n\t\t\t2.4, 0.25, 2.025,\n\t\t\t2.3, 0.25, 2.1,\n\t\t\t3.3, 0.25, 2.4,\n\t\t\t2.7, 0.25, 2.4,\n\t\t\t2.8, 0, 2.475,\n\t\t\t2.8, - 0.25, 2.475,\n\t\t\t3.525, - 0.25, 2.49375,\n\t\t\t3.525, 0, 2.49375,\n\t\t\t2.9, 0, 2.475,\n\t\t\t2.9, - 0.15, 2.475,\n\t\t\t3.45, - 0.15, 2.5125,\n\t\t\t3.45, 0, 2.5125,\n\t\t\t2.8, 0, 2.4,\n\t\t\t2.8, - 0.15, 2.4,\n\t\t\t3.2, - 0.15, 2.4,\n\t\t\t3.2, 0, 2.4,\n\t\t\t3.525, 0.25, 2.49375,\n\t\t\t2.8, 0.25, 2.475,\n\t\t\t3.45, 0.15, 2.5125,\n\t\t\t2.9, 0.15, 2.475,\n\t\t\t3.2, 0.15, 2.4,\n\t\t\t2.8, 0.15, 2.4,\n\t\t\t0, 0, 3.15,\n\t\t\t0.8, 0, 3.15,\n\t\t\t0.8, - 0.45, 3.15,\n\t\t\t0.45, - 0.8, 3.15,\n\t\t\t0, - 0.8, 3.15,\n\t\t\t0, 0, 2.85,\n\t\t\t0.2, 0, 2.7,\n\t\t\t0.2, - 0.112, 2.7,\n\t\t\t0.112, - 0.2, 2.7,\n\t\t\t0, - 0.2, 2.7,\n\t\t\t- 0.45, - 0.8, 3.15,\n\t\t\t- 0.8, - 0.45, 3.15,\n\t\t\t- 0.8, 0, 3.15,\n\t\t\t- 0.112, - 0.2, 2.7,\n\t\t\t- 0.2, - 0.112, 2.7,\n\t\t\t- 0.2, 0, 2.7,\n\t\t\t- 0.8, 0.45, 3.15,\n\t\t\t- 0.45, 0.8, 3.15,\n\t\t\t0, 0.8, 3.15,\n\t\t\t- 0.2, 0.112, 2.7,\n\t\t\t- 0.112, 0.2, 2.7,\n\t\t\t0, 0.2, 2.7,\n\t\t\t0.45, 0.8, 3.15,\n\t\t\t0.8, 0.45, 3.15,\n\t\t\t0.112, 0.2, 2.7,\n\t\t\t0.2, 0.112, 2.7,\n\t\t\t0.4, 0, 2.55,\n\t\t\t0.4, - 0.224, 2.55,\n\t\t\t0.224, - 0.4, 2.55,\n\t\t\t0, - 0.4, 2.55,\n\t\t\t1.3, 0, 2.55,\n\t\t\t1.3, - 0.728, 2.55,\n\t\t\t0.728, - 1.3, 2.55,\n\t\t\t0, - 1.3, 2.55,\n\t\t\t1.3, 0, 2.4,\n\t\t\t1.3, - 0.728, 2.4,\n\t\t\t0.728, - 1.3, 2.4,\n\t\t\t0, - 1.3, 2.4,\n\t\t\t- 0.224, - 0.4, 2.55,\n\t\t\t- 0.4, - 0.224, 2.55,\n\t\t\t- 0.4, 0, 2.55,\n\t\t\t- 0.728, - 1.3, 2.55,\n\t\t\t- 1.3, - 0.728, 2.55,\n\t\t\t- 1.3, 0, 2.55,\n\t\t\t- 0.728, - 1.3, 2.4,\n\t\t\t- 1.3, - 0.728, 2.4,\n\t\t\t- 1.3, 0, 2.4,\n\t\t\t- 0.4, 0.224, 2.55,\n\t\t\t- 0.224, 0.4, 2.55,\n\t\t\t0, 0.4, 2.55,\n\t\t\t- 1.3, 0.728, 2.55,\n\t\t\t- 0.728, 1.3, 2.55,\n\t\t\t0, 1.3, 2.55,\n\t\t\t- 1.3, 0.728, 2.4,\n\t\t\t- 0.728, 1.3, 2.4,\n\t\t\t0, 1.3, 2.4,\n\t\t\t0.224, 0.4, 2.55,\n\t\t\t0.4, 0.224, 2.55,\n\t\t\t0.728, 1.3, 2.55,\n\t\t\t1.3, 0.728, 2.55,\n\t\t\t0.728, 1.3, 2.4,\n\t\t\t1.3, 0.728, 2.4,\n\t\t\t0, 0, 0,\n\t\t\t1.425, 0, 0,\n\t\t\t1.425, 0.798, 0,\n\t\t\t0.798, 1.425, 0,\n\t\t\t0, 1.425, 0,\n\t\t\t1.5, 0, 0.075,\n\t\t\t1.5, 0.84, 0.075,\n\t\t\t0.84, 1.5, 0.075,\n\t\t\t0, 1.5, 0.075,\n\t\t\t- 0.798, 1.425, 0,\n\t\t\t- 1.425, 0.798, 0,\n\t\t\t- 1.425, 0, 0,\n\t\t\t- 0.84, 1.5, 0.075,\n\t\t\t- 1.5, 0.84, 0.075,\n\t\t\t- 1.5, 0, 0.075,\n\t\t\t- 1.425, - 0.798, 0,\n\t\t\t- 0.798, - 1.425, 0,\n\t\t\t0, - 1.425, 0,\n\t\t\t- 1.5, - 0.84, 0.075,\n\t\t\t- 0.84, - 1.5, 0.075,\n\t\t\t0, - 1.5, 0.075,\n\t\t\t0.798, - 1.425, 0,\n\t\t\t1.425, - 0.798, 0,\n\t\t\t0.84, - 1.5, 0.075,\n\t\t\t1.5, - 0.84, 0.075\n\t\t];\n\n\t\tsuper();\n\n\t\t// number of segments per patch\n\t\tsegments = Math.max( 2, Math.floor( segments ) );\n\n\t\t// Jim Blinn scaled the teapot down in size by about 1.3 for\n\t\t// some rendering tests. He liked the new proportions that he kept\n\t\t// the data in this form. The model was distributed with these new\n\t\t// proportions and became the norm. Trivia: comparing images of the\n\t\t// real teapot and the computer model, the ratio for the bowl of the\n\t\t// real teapot is more like 1.25, but since 1.3 is the traditional\n\t\t// value given, we use it here.\n\t\tconst blinnScale = 1.3;\n\n\t\t// scale the size to be the real scaling factor\n\t\tconst maxHeight = 3.15 * ( blinn ? 1 : blinnScale );\n\n\t\tconst maxHeight2 = maxHeight / 2;\n\t\tconst trueSize = size / maxHeight2;\n\n\t\t// Number of elements depends on what is needed. Subtract degenerate\n\t\t// triangles at tip of bottom and lid out in advance.\n\t\tlet numTriangles = bottom ? ( 8 * segments - 4 ) * segments : 0;\n\t\tnumTriangles += lid ? ( 16 * segments - 4 ) * segments : 0;\n\t\tnumTriangles += body ? 40 * segments * segments : 0;\n\n\t\tconst indices = new Uint32Array( numTriangles * 3 );\n\n\t\tlet numVertices = bottom ? 4 : 0;\n\t\tnumVertices += lid ? 8 : 0;\n\t\tnumVertices += body ? 20 : 0;\n\t\tnumVertices *= ( segments + 1 ) * ( segments + 1 );\n\n\t\tconst vertices = new Float32Array( numVertices * 3 );\n\t\tconst normals = new Float32Array( numVertices * 3 );\n\t\tconst uvs = new Float32Array( numVertices * 2 );\n\n\t\t// Bezier form\n\t\tconst ms = new Matrix4();\n\t\tms.set(\n\t\t\t- 1.0, 3.0, - 3.0, 1.0,\n\t\t\t3.0, - 6.0, 3.0, 0.0,\n\t\t\t- 3.0, 3.0, 0.0, 0.0,\n\t\t\t1.0, 0.0, 0.0, 0.0 );\n\n\t\tconst g = [];\n\n\t\tconst sp = [];\n\t\tconst tp = [];\n\t\tconst dsp = [];\n\t\tconst dtp = [];\n\n\t\t// M * G * M matrix, sort of see\n\t\t// http://www.cs.helsinki.fi/group/goa/mallinnus/curves/surfaces.html\n\t\tconst mgm = [];\n\n\t\tconst vert = [];\n\t\tconst sdir = [];\n\t\tconst tdir = [];\n\n\t\tconst norm = new Vector3();\n\n\t\tlet tcoord;\n\n\t\tlet sval;\n\t\tlet tval;\n\t\tlet p;\n\t\tlet dsval = 0;\n\t\tlet dtval = 0;\n\n\t\tconst normOut = new Vector3();\n\n\t\tconst gmx = new Matrix4();\n\t\tconst tmtx = new Matrix4();\n\n\t\tconst vsp = new Vector4();\n\t\tconst vtp = new Vector4();\n\t\tconst vdsp = new Vector4();\n\t\tconst vdtp = new Vector4();\n\n\t\tconst vsdir = new Vector3();\n\t\tconst vtdir = new Vector3();\n\n\t\tconst mst = ms.clone();\n\t\tmst.transpose();\n\n\t\t// internal function: test if triangle has any matching vertices;\n\t\t// if so, don't save triangle, since it won't display anything.\n\t\tconst notDegenerate = ( vtx1, vtx2, vtx3 ) => // if any vertex matches, return false\n\t\t\t! ( ( ( vertices[ vtx1 * 3 ] === vertices[ vtx2 * 3 ] ) &&\n\t\t\t\t\t( vertices[ vtx1 * 3 + 1 ] === vertices[ vtx2 * 3 + 1 ] ) &&\n\t\t\t\t\t( vertices[ vtx1 * 3 + 2 ] === vertices[ vtx2 * 3 + 2 ] ) ) ||\n\t\t\t\t\t( ( vertices[ vtx1 * 3 ] === vertices[ vtx3 * 3 ] ) &&\n\t\t\t\t\t( vertices[ vtx1 * 3 + 1 ] === vertices[ vtx3 * 3 + 1 ] ) &&\n\t\t\t\t\t( vertices[ vtx1 * 3 + 2 ] === vertices[ vtx3 * 3 + 2 ] ) ) || ( vertices[ vtx2 * 3 ] === vertices[ vtx3 * 3 ] ) &&\n\t\t\t\t\t( vertices[ vtx2 * 3 + 1 ] === vertices[ vtx3 * 3 + 1 ] ) &&\n\t\t\t\t\t( vertices[ vtx2 * 3 + 2 ] === vertices[ vtx3 * 3 + 2 ] ) );\n\n\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tmgm[ i ] = new Matrix4();\n\n\t\t}\n\n\t\tconst minPatches = body ? 0 : 20;\n\t\tconst maxPatches = bottom ? 32 : 28;\n\n\t\tconst vertPerRow = segments + 1;\n\n\t\tlet surfCount = 0;\n\n\t\tlet vertCount = 0;\n\t\tlet normCount = 0;\n\t\tlet uvCount = 0;\n\n\t\tlet indexCount = 0;\n\n\t\tfor ( let surf = minPatches; surf < maxPatches; surf ++ ) {\n\n\t\t\t// lid is in the middle of the data, patches 20-27,\n\t\t\t// so ignore it for this part of the loop if the lid is not desired\n\t\t\tif ( lid || ( surf < 20 || surf >= 28 ) ) {\n\n\t\t\t\t// get M * G * M matrix for x,y,z\n\t\t\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\t// get control patches\n\t\t\t\t\tfor ( let r = 0; r < 4; r ++ ) {\n\n\t\t\t\t\t\tfor ( let c = 0; c < 4; c ++ ) {\n\n\t\t\t\t\t\t\t// transposed\n\t\t\t\t\t\t\tg[ c * 4 + r ] = teapotVertices[ teapotPatches[ surf * 16 + r * 4 + c ] * 3 + i ];\n\n\t\t\t\t\t\t\t// is the lid to be made larger, and is this a point on the lid\n\t\t\t\t\t\t\t// that is X or Y?\n\t\t\t\t\t\t\tif ( fitLid && ( surf >= 20 && surf < 28 ) && ( i !== 2 ) ) {\n\n\t\t\t\t\t\t\t\t// increase XY size by 7.7%, found empirically. I don't\n\t\t\t\t\t\t\t\t// increase Z so that the teapot will continue to fit in the\n\t\t\t\t\t\t\t\t// space -1 to 1 for Y (Y is up for the final model).\n\t\t\t\t\t\t\t\tg[ c * 4 + r ] *= 1.077;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Blinn \"fixed\" the teapot by dividing Z by blinnScale, and that's the\n\t\t\t\t\t\t\t// data we now use. The original teapot is taller. Fix it:\n\t\t\t\t\t\t\tif ( ! blinn && ( i === 2 ) ) {\n\n\t\t\t\t\t\t\t\tg[ c * 4 + r ] *= blinnScale;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgmx.set( g[ 0 ], g[ 1 ], g[ 2 ], g[ 3 ], g[ 4 ], g[ 5 ], g[ 6 ], g[ 7 ], g[ 8 ], g[ 9 ], g[ 10 ], g[ 11 ], g[ 12 ], g[ 13 ], g[ 14 ], g[ 15 ] );\n\n\t\t\t\t\ttmtx.multiplyMatrices( gmx, ms );\n\t\t\t\t\tmgm[ i ].multiplyMatrices( mst, tmtx );\n\n\t\t\t\t}\n\n\t\t\t\t// step along, get points, and output\n\t\t\t\tfor ( let sstep = 0; sstep <= segments; sstep ++ ) {\n\n\t\t\t\t\tconst s = sstep / segments;\n\n\t\t\t\t\tfor ( let tstep = 0; tstep <= segments; tstep ++ ) {\n\n\t\t\t\t\t\tconst t = tstep / segments;\n\n\t\t\t\t\t\t// point from basis\n\t\t\t\t\t\t// get power vectors and their derivatives\n\t\t\t\t\t\tfor ( p = 4, sval = tval = 1.0; p --; ) {\n\n\t\t\t\t\t\t\tsp[ p ] = sval;\n\t\t\t\t\t\t\ttp[ p ] = tval;\n\t\t\t\t\t\t\tsval *= s;\n\t\t\t\t\t\t\ttval *= t;\n\n\t\t\t\t\t\t\tif ( p === 3 ) {\n\n\t\t\t\t\t\t\t\tdsp[ p ] = dtp[ p ] = 0.0;\n\t\t\t\t\t\t\t\tdsval = dtval = 1.0;\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tdsp[ p ] = dsval * ( 3 - p );\n\t\t\t\t\t\t\t\tdtp[ p ] = dtval * ( 3 - p );\n\t\t\t\t\t\t\t\tdsval *= s;\n\t\t\t\t\t\t\t\tdtval *= t;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvsp.fromArray( sp );\n\t\t\t\t\t\tvtp.fromArray( tp );\n\t\t\t\t\t\tvdsp.fromArray( dsp );\n\t\t\t\t\t\tvdtp.fromArray( dtp );\n\n\t\t\t\t\t\t// do for x,y,z\n\t\t\t\t\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\t\t\t// multiply power vectors times matrix to get value\n\t\t\t\t\t\t\ttcoord = vsp.clone();\n\t\t\t\t\t\t\ttcoord.applyMatrix4( mgm[ i ] );\n\t\t\t\t\t\t\tvert[ i ] = tcoord.dot( vtp );\n\n\t\t\t\t\t\t\t// get s and t tangent vectors\n\t\t\t\t\t\t\ttcoord = vdsp.clone();\n\t\t\t\t\t\t\ttcoord.applyMatrix4( mgm[ i ] );\n\t\t\t\t\t\t\tsdir[ i ] = tcoord.dot( vtp );\n\n\t\t\t\t\t\t\ttcoord = vsp.clone();\n\t\t\t\t\t\t\ttcoord.applyMatrix4( mgm[ i ] );\n\t\t\t\t\t\t\ttdir[ i ] = tcoord.dot( vdtp );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// find normal\n\t\t\t\t\t\tvsdir.fromArray( sdir );\n\t\t\t\t\t\tvtdir.fromArray( tdir );\n\t\t\t\t\t\tnorm.crossVectors( vtdir, vsdir );\n\t\t\t\t\t\tnorm.normalize();\n\n\t\t\t\t\t\t// if X and Z length is 0, at the cusp, so point the normal up or down, depending on patch number\n\t\t\t\t\t\tif ( vert[ 0 ] === 0 && vert[ 1 ] === 0 ) {\n\n\t\t\t\t\t\t\t// if above the middle of the teapot, normal points up, else down\n\t\t\t\t\t\t\tnormOut.set( 0, vert[ 2 ] > maxHeight2 ? 1 : - 1, 0 );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// standard output: rotate on X axis\n\t\t\t\t\t\t\tnormOut.set( norm.x, norm.z, - norm.y );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// store it all\n\t\t\t\t\t\tvertices[ vertCount ++ ] = trueSize * vert[ 0 ];\n\t\t\t\t\t\tvertices[ vertCount ++ ] = trueSize * ( vert[ 2 ] - maxHeight2 );\n\t\t\t\t\t\tvertices[ vertCount ++ ] = - trueSize * vert[ 1 ];\n\n\t\t\t\t\t\tnormals[ normCount ++ ] = normOut.x;\n\t\t\t\t\t\tnormals[ normCount ++ ] = normOut.y;\n\t\t\t\t\t\tnormals[ normCount ++ ] = normOut.z;\n\n\t\t\t\t\t\tuvs[ uvCount ++ ] = 1 - t;\n\t\t\t\t\t\tuvs[ uvCount ++ ] = 1 - s;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// save the faces\n\t\t\t\tfor ( let sstep = 0; sstep < segments; sstep ++ ) {\n\n\t\t\t\t\tfor ( let tstep = 0; tstep < segments; tstep ++ ) {\n\n\t\t\t\t\t\tconst v1 = surfCount * vertPerRow * vertPerRow + sstep * vertPerRow + tstep;\n\t\t\t\t\t\tconst v2 = v1 + 1;\n\t\t\t\t\t\tconst v3 = v2 + vertPerRow;\n\t\t\t\t\t\tconst v4 = v1 + vertPerRow;\n\n\t\t\t\t\t\t// Normals and UVs cannot be shared. Without clone(), you can see the consequences\n\t\t\t\t\t\t// of sharing if you call geometry.applyMatrix4( matrix ).\n\t\t\t\t\t\tif ( notDegenerate( v1, v2, v3 ) ) {\n\n\t\t\t\t\t\t\tindices[ indexCount ++ ] = v1;\n\t\t\t\t\t\t\tindices[ indexCount ++ ] = v2;\n\t\t\t\t\t\t\tindices[ indexCount ++ ] = v3;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( notDegenerate( v1, v3, v4 ) ) {\n\n\t\t\t\t\t\t\tindices[ indexCount ++ ] = v1;\n\t\t\t\t\t\t\tindices[ indexCount ++ ] = v3;\n\t\t\t\t\t\t\tindices[ indexCount ++ ] = v4;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// increment only if a surface was used\n\t\t\t\tsurfCount ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.setIndex( new BufferAttribute( indices, 1 ) );\n\t\tthis.setAttribute( 'position', new BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new BufferAttribute( uvs, 2 ) );\n\n\t\tthis.computeBoundingSphere();\n\n\t}\n\n}\n\nexport { TeapotGeometry };\n"],"mappings":"AAAA,SACCA,eAAe,EACfC,cAAc,EACdC,OAAO,EACPC,OAAO,EACPC,OAAO,QACD,OAAO;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,cAAc,SAASJ,cAAc,CAAC;EAE3C;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCK,WAAWA,CAAEC,IAAI,GAAG,EAAE,EAAEC,QAAQ,GAAG,EAAE,EAAEC,MAAM,GAAG,IAAI,EAAEC,GAAG,GAAG,IAAI,EAAEC,IAAI,GAAG,IAAI,EAAEC,MAAM,GAAG,IAAI,EAAEC,KAAK,GAAG,IAAI,EAAG;IAE5G;IACA,MAAMC,aAAa,GAAG,CACrB;IACA,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EACpD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC5D,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9D,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC3D;IACA,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9D,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9D,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9D,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9D,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9D,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EACnE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EACzE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EACvE;IACA,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAC9E,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAC9E,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAC7E,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAC7E;IACA,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAC9E,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAC9E,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAC9E,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAC9E;IACA,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAC9E,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAC9E,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAC9E,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAC9E,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAC9E,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAC9E,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}