{"ast":null,"code":"import { AddEquation, Color, CustomBlending, DataTexture, DepthTexture, DepthStencilFormat, DstAlphaFactor, DstColorFactor, HalfFloatType, MeshNormalMaterial, NearestFilter, NoBlending, RepeatWrapping, RGBAFormat, ShaderMaterial, UniformsUtils, UnsignedByteType, UnsignedInt248Type, WebGLRenderTarget, ZeroFactor } from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { generateMagicSquareNoise, GTAOShader, GTAODepthShader, GTAOBlendShader } from '../shaders/GTAOShader.js';\nimport { generatePdSamplePointInitializer, PoissonDenoiseShader } from '../shaders/PoissonDenoiseShader.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { SimplexNoise } from '../math/SimplexNoise.js';\n\n/**\n * A pass for an GTAO effect.\n *\n * `GTAOPass` provides better quality than {@link SSAOPass} but is also more expensive.\n *\n * ```js\n * const gtaoPass = new GTAOPass( scene, camera, width, height );\n * gtaoPass.output = GTAOPass.OUTPUT.Denoise;\n * composer.addPass( gtaoPass );\n * ```\n *\n * @augments Pass\n * @three_import import { GTAOPass } from 'three/addons/postprocessing/GTAOPass.js';\n */\nclass GTAOPass extends Pass {\n  /**\n   * Constructs a new GTAO pass.\n   *\n   * @param {Scene} scene - The scene to compute the AO for.\n   * @param {Camera} camera - The camera.\n   * @param {number} [width=512] - The width of the effect.\n   * @param {number} [height=512] - The height of the effect.\n   * @param {Object} [parameters] - The pass parameters.\n   * @param {Object} [aoParameters] - The AO parameters.\n   * @param {Object} [pdParameters] - The denoise parameters.\n   */\n  constructor(scene, camera, width = 512, height = 512, parameters, aoParameters, pdParameters) {\n    super();\n\n    /**\n     * The width of the effect.\n     *\n     * @type {number}\n     * @default 512\n     */\n    this.width = width;\n\n    /**\n     * The height of the effect.\n     *\n     * @type {number}\n     * @default 512\n     */\n    this.height = height;\n\n    /**\n     * Overwritten to perform a clear operation by default.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.clear = true;\n\n    /**\n     * The camera.\n     *\n     * @type {Camera}\n     */\n    this.camera = camera;\n\n    /**\n     * The scene to render the AO for.\n     *\n     * @type {Scene}\n     */\n    this.scene = scene;\n\n    /**\n     * The output configuration.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.output = 0;\n    this._renderGBuffer = true;\n    this._visibilityCache = new Map();\n\n    /**\n     * The AO blend intensity.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.blendIntensity = 1.;\n\n    /**\n     * The number of Poisson Denoise rings.\n     *\n     * @type {number}\n     * @default 2\n     */\n    this.pdRings = 2.;\n\n    /**\n     * The Poisson Denoise radius exponent.\n     *\n     * @type {number}\n     * @default 2\n     */\n    this.pdRadiusExponent = 2.;\n\n    /**\n     * The Poisson Denoise sample count.\n     *\n     * @type {number}\n     * @default 16\n     */\n    this.pdSamples = 16;\n    this.gtaoNoiseTexture = generateMagicSquareNoise();\n    this.pdNoiseTexture = this._generateNoise();\n    this.gtaoRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      type: HalfFloatType\n    });\n    this.pdRenderTarget = this.gtaoRenderTarget.clone();\n    this.gtaoMaterial = new ShaderMaterial({\n      defines: Object.assign({}, GTAOShader.defines),\n      uniforms: UniformsUtils.clone(GTAOShader.uniforms),\n      vertexShader: GTAOShader.vertexShader,\n      fragmentShader: GTAOShader.fragmentShader,\n      blending: NoBlending,\n      depthTest: false,\n      depthWrite: false\n    });\n    this.gtaoMaterial.defines.PERSPECTIVE_CAMERA = this.camera.isPerspectiveCamera ? 1 : 0;\n    this.gtaoMaterial.uniforms.tNoise.value = this.gtaoNoiseTexture;\n    this.gtaoMaterial.uniforms.resolution.value.set(this.width, this.height);\n    this.gtaoMaterial.uniforms.cameraNear.value = this.camera.near;\n    this.gtaoMaterial.uniforms.cameraFar.value = this.camera.far;\n    this.normalMaterial = new MeshNormalMaterial();\n    this.normalMaterial.blending = NoBlending;\n    this.pdMaterial = new ShaderMaterial({\n      defines: Object.assign({}, PoissonDenoiseShader.defines),\n      uniforms: UniformsUtils.clone(PoissonDenoiseShader.uniforms),\n      vertexShader: PoissonDenoiseShader.vertexShader,\n      fragmentShader: PoissonDenoiseShader.fragmentShader,\n      depthTest: false,\n      depthWrite: false\n    });\n    this.pdMaterial.uniforms.tDiffuse.value = this.gtaoRenderTarget.texture;\n    this.pdMaterial.uniforms.tNoise.value = this.pdNoiseTexture;\n    this.pdMaterial.uniforms.resolution.value.set(this.width, this.height);\n    this.pdMaterial.uniforms.lumaPhi.value = 10;\n    this.pdMaterial.uniforms.depthPhi.value = 2;\n    this.pdMaterial.uniforms.normalPhi.value = 3;\n    this.pdMaterial.uniforms.radius.value = 8;\n    this.depthRenderMaterial = new ShaderMaterial({\n      defines: Object.assign({}, GTAODepthShader.defines),\n      uniforms: UniformsUtils.clone(GTAODepthShader.uniforms),\n      vertexShader: GTAODepthShader.vertexShader,\n      fragmentShader: GTAODepthShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.depthRenderMaterial.uniforms.cameraNear.value = this.camera.near;\n    this.depthRenderMaterial.uniforms.cameraFar.value = this.camera.far;\n    this.copyMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      transparent: true,\n      depthTest: false,\n      depthWrite: false,\n      blendSrc: DstColorFactor,\n      blendDst: ZeroFactor,\n      blendEquation: AddEquation,\n      blendSrcAlpha: DstAlphaFactor,\n      blendDstAlpha: ZeroFactor,\n      blendEquationAlpha: AddEquation\n    });\n    this.blendMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(GTAOBlendShader.uniforms),\n      vertexShader: GTAOBlendShader.vertexShader,\n      fragmentShader: GTAOBlendShader.fragmentShader,\n      transparent: true,\n      depthTest: false,\n      depthWrite: false,\n      blending: CustomBlending,\n      blendSrc: DstColorFactor,\n      blendDst: ZeroFactor,\n      blendEquation: AddEquation,\n      blendSrcAlpha: DstAlphaFactor,\n      blendDstAlpha: ZeroFactor,\n      blendEquationAlpha: AddEquation\n    });\n    this._fsQuad = new FullScreenQuad(null);\n    this._originalClearColor = new Color();\n    this.setGBuffer(parameters ? parameters.depthTexture : undefined, parameters ? parameters.normalTexture : undefined);\n    if (aoParameters !== undefined) {\n      this.updateGtaoMaterial(aoParameters);\n    }\n    if (pdParameters !== undefined) {\n      this.updatePdMaterial(pdParameters);\n    }\n  }\n\n  /**\n   * Sets the size of the pass.\n   *\n   * @param {number} width - The width to set.\n   * @param {number} height - The height to set.\n   */\n  setSize(width, height) {\n    this.width = width;\n    this.height = height;\n    this.gtaoRenderTarget.setSize(width, height);\n    this.normalRenderTarget.setSize(width, height);\n    this.pdRenderTarget.setSize(width, height);\n    this.gtaoMaterial.uniforms.resolution.value.set(width, height);\n    this.gtaoMaterial.uniforms.cameraProjectionMatrix.value.copy(this.camera.projectionMatrix);\n    this.gtaoMaterial.uniforms.cameraProjectionMatrixInverse.value.copy(this.camera.projectionMatrixInverse);\n    this.pdMaterial.uniforms.resolution.value.set(width, height);\n    this.pdMaterial.uniforms.cameraProjectionMatrixInverse.value.copy(this.camera.projectionMatrixInverse);\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever the pass is no longer used in your app.\n   */\n  dispose() {\n    this.gtaoNoiseTexture.dispose();\n    this.pdNoiseTexture.dispose();\n    this.normalRenderTarget.dispose();\n    this.gtaoRenderTarget.dispose();\n    this.pdRenderTarget.dispose();\n    this.normalMaterial.dispose();\n    this.pdMaterial.dispose();\n    this.copyMaterial.dispose();\n    this.depthRenderMaterial.dispose();\n    this._fsQuad.dispose();\n  }\n\n  /**\n   * A texture holding the computed AO.\n   *\n   * @type {Texture}\n   * @readonly\n   */\n  get gtaoMap() {\n    return this.pdRenderTarget.texture;\n  }\n\n  /**\n   * Configures the GBuffer of this pass. If no arguments are passed,\n   * the pass creates an internal render target for holding depth\n   * and normal data.\n   *\n   * @param {DepthTexture} [depthTexture] - The depth texture.\n   * @param {DepthTexture} [normalTexture] - The normal texture.\n   */\n  setGBuffer(depthTexture, normalTexture) {\n    if (depthTexture !== undefined) {\n      this.depthTexture = depthTexture;\n      this.normalTexture = normalTexture;\n      this._renderGBuffer = false;\n    } else {\n      this.depthTexture = new DepthTexture();\n      this.depthTexture.format = DepthStencilFormat;\n      this.depthTexture.type = UnsignedInt248Type;\n      this.normalRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n        minFilter: NearestFilter,\n        magFilter: NearestFilter,\n        type: HalfFloatType,\n        depthTexture: this.depthTexture\n      });\n      this.normalTexture = this.normalRenderTarget.texture;\n      this._renderGBuffer = true;\n    }\n    const normalVectorType = this.normalTexture ? 1 : 0;\n    const depthValueSource = this.depthTexture === this.normalTexture ? 'w' : 'x';\n    this.gtaoMaterial.defines.NORMAL_VECTOR_TYPE = normalVectorType;\n    this.gtaoMaterial.defines.DEPTH_SWIZZLING = depthValueSource;\n    this.gtaoMaterial.uniforms.tNormal.value = this.normalTexture;\n    this.gtaoMaterial.uniforms.tDepth.value = this.depthTexture;\n    this.pdMaterial.defines.NORMAL_VECTOR_TYPE = normalVectorType;\n    this.pdMaterial.defines.DEPTH_SWIZZLING = depthValueSource;\n    this.pdMaterial.uniforms.tNormal.value = this.normalTexture;\n    this.pdMaterial.uniforms.tDepth.value = this.depthTexture;\n    this.depthRenderMaterial.uniforms.tDepth.value = this.normalRenderTarget.depthTexture;\n  }\n\n  /**\n   * Configures the clip box of the GTAO shader with the given AABB.\n   *\n   * @param {?Box3} box - The AABB enclosing the scene that should receive AO. When passing\n   * `null`, to clip box is used.\n   */\n  setSceneClipBox(box) {\n    if (box) {\n      this.gtaoMaterial.needsUpdate = this.gtaoMaterial.defines.SCENE_CLIP_BOX !== 1;\n      this.gtaoMaterial.defines.SCENE_CLIP_BOX = 1;\n      this.gtaoMaterial.uniforms.sceneBoxMin.value.copy(box.min);\n      this.gtaoMaterial.uniforms.sceneBoxMax.value.copy(box.max);\n    } else {\n      this.gtaoMaterial.needsUpdate = this.gtaoMaterial.defines.SCENE_CLIP_BOX === 0;\n      this.gtaoMaterial.defines.SCENE_CLIP_BOX = 0;\n    }\n  }\n\n  /**\n   * Updates the GTAO material from the given parameter object.\n   *\n   * @param {Object} parameters - The GTAO material parameters.\n   */\n  updateGtaoMaterial(parameters) {\n    if (parameters.radius !== undefined) {\n      this.gtaoMaterial.uniforms.radius.value = parameters.radius;\n    }\n    if (parameters.distanceExponent !== undefined) {\n      this.gtaoMaterial.uniforms.distanceExponent.value = parameters.distanceExponent;\n    }\n    if (parameters.thickness !== undefined) {\n      this.gtaoMaterial.uniforms.thickness.value = parameters.thickness;\n    }\n    if (parameters.distanceFallOff !== undefined) {\n      this.gtaoMaterial.uniforms.distanceFallOff.value = parameters.distanceFallOff;\n      this.gtaoMaterial.needsUpdate = true;\n    }\n    if (parameters.scale !== undefined) {\n      this.gtaoMaterial.uniforms.scale.value = parameters.scale;\n    }\n    if (parameters.samples !== undefined && parameters.samples !== this.gtaoMaterial.defines.SAMPLES) {\n      this.gtaoMaterial.defines.SAMPLES = parameters.samples;\n      this.gtaoMaterial.needsUpdate = true;\n    }\n    if (parameters.screenSpaceRadius !== undefined && (parameters.screenSpaceRadius ? 1 : 0) !== this.gtaoMaterial.defines.SCREEN_SPACE_RADIUS) {\n      this.gtaoMaterial.defines.SCREEN_SPACE_RADIUS = parameters.screenSpaceRadius ? 1 : 0;\n      this.gtaoMaterial.needsUpdate = true;\n    }\n  }\n\n  /**\n   * Updates the Denoise material from the given parameter object.\n   *\n   * @param {Object} parameters - The denoise parameters.\n   */\n  updatePdMaterial(parameters) {\n    let updateShader = false;\n    if (parameters.lumaPhi !== undefined) {\n      this.pdMaterial.uniforms.lumaPhi.value = parameters.lumaPhi;\n    }\n    if (parameters.depthPhi !== undefined) {\n      this.pdMaterial.uniforms.depthPhi.value = parameters.depthPhi;\n    }\n    if (parameters.normalPhi !== undefined) {\n      this.pdMaterial.uniforms.normalPhi.value = parameters.normalPhi;\n    }\n    if (parameters.radius !== undefined && parameters.radius !== this.radius) {\n      this.pdMaterial.uniforms.radius.value = parameters.radius;\n    }\n    if (parameters.radiusExponent !== undefined && parameters.radiusExponent !== this.pdRadiusExponent) {\n      this.pdRadiusExponent = parameters.radiusExponent;\n      updateShader = true;\n    }\n    if (parameters.rings !== undefined && parameters.rings !== this.pdRings) {\n      this.pdRings = parameters.rings;\n      updateShader = true;\n    }\n    if (parameters.samples !== undefined && parameters.samples !== this.pdSamples) {\n      this.pdSamples = parameters.samples;\n      updateShader = true;\n    }\n    if (updateShader) {\n      this.pdMaterial.defines.SAMPLES = this.pdSamples;\n      this.pdMaterial.defines.SAMPLE_VECTORS = generatePdSamplePointInitializer(this.pdSamples, this.pdRings, this.pdRadiusExponent);\n      this.pdMaterial.needsUpdate = true;\n    }\n  }\n\n  /**\n   * Performs the GTAO pass.\n   *\n   * @param {WebGLRenderer} renderer - The renderer.\n   * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\n   * destination for the pass.\n   * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\n   * previous pass from this buffer.\n   * @param {number} deltaTime - The delta time in seconds.\n   * @param {boolean} maskActive - Whether masking is active or not.\n   */\n  render(renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */) {\n    // render normals and depth (honor only meshes, points and lines do not contribute to AO)\n\n    if (this._renderGBuffer) {\n      this._overrideVisibility();\n      this._renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0);\n      this._restoreVisibility();\n    }\n\n    // render AO\n\n    this.gtaoMaterial.uniforms.cameraNear.value = this.camera.near;\n    this.gtaoMaterial.uniforms.cameraFar.value = this.camera.far;\n    this.gtaoMaterial.uniforms.cameraProjectionMatrix.value.copy(this.camera.projectionMatrix);\n    this.gtaoMaterial.uniforms.cameraProjectionMatrixInverse.value.copy(this.camera.projectionMatrixInverse);\n    this.gtaoMaterial.uniforms.cameraWorldMatrix.value.copy(this.camera.matrixWorld);\n    this._renderPass(renderer, this.gtaoMaterial, this.gtaoRenderTarget, 0xffffff, 1.0);\n\n    // render poisson denoise\n\n    this.pdMaterial.uniforms.cameraProjectionMatrixInverse.value.copy(this.camera.projectionMatrixInverse);\n    this._renderPass(renderer, this.pdMaterial, this.pdRenderTarget, 0xffffff, 1.0);\n\n    // output result to screen\n\n    switch (this.output) {\n      case GTAOPass.OUTPUT.Off:\n        break;\n      case GTAOPass.OUTPUT.Diffuse:\n        this.copyMaterial.uniforms.tDiffuse.value = readBuffer.texture;\n        this.copyMaterial.blending = NoBlending;\n        this._renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case GTAOPass.OUTPUT.AO:\n        this.copyMaterial.uniforms.tDiffuse.value = this.gtaoRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this._renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case GTAOPass.OUTPUT.Denoise:\n        this.copyMaterial.uniforms.tDiffuse.value = this.pdRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this._renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case GTAOPass.OUTPUT.Depth:\n        this.depthRenderMaterial.uniforms.cameraNear.value = this.camera.near;\n        this.depthRenderMaterial.uniforms.cameraFar.value = this.camera.far;\n        this._renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case GTAOPass.OUTPUT.Normal:\n        this.copyMaterial.uniforms.tDiffuse.value = this.normalRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this._renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case GTAOPass.OUTPUT.Default:\n        this.copyMaterial.uniforms.tDiffuse.value = readBuffer.texture;\n        this.copyMaterial.blending = NoBlending;\n        this._renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        this.blendMaterial.uniforms.intensity.value = this.blendIntensity;\n        this.blendMaterial.uniforms.tDiffuse.value = this.pdRenderTarget.texture;\n        this._renderPass(renderer, this.blendMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      default:\n        console.warn('THREE.GTAOPass: Unknown output type.');\n    }\n  }\n\n  // internals\n\n  _renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    // save original state\n    renderer.getClearColor(this._originalClearColor);\n    const originalClearAlpha = renderer.getClearAlpha();\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n\n    // setup pass state\n    renderer.autoClear = false;\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n    this._fsQuad.material = passMaterial;\n    this._fsQuad.render(renderer);\n\n    // restore original state\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this._originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  _renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this._originalClearColor);\n    const originalClearAlpha = renderer.getClearAlpha();\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n    this.scene.overrideMaterial = overrideMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = null;\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this._originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  _overrideVisibility() {\n    const scene = this.scene;\n    const cache = this._visibilityCache;\n    scene.traverse(function (object) {\n      cache.set(object, object.visible);\n      if (object.isPoints || object.isLine) object.visible = false;\n    });\n  }\n  _restoreVisibility() {\n    const scene = this.scene;\n    const cache = this._visibilityCache;\n    scene.traverse(function (object) {\n      const visible = cache.get(object);\n      object.visible = visible;\n    });\n    cache.clear();\n  }\n  _generateNoise(size = 64) {\n    const simplex = new SimplexNoise();\n    const arraySize = size * size * 4;\n    const data = new Uint8Array(arraySize);\n    for (let i = 0; i < size; i++) {\n      for (let j = 0; j < size; j++) {\n        const x = i;\n        const y = j;\n        data[(i * size + j) * 4] = (simplex.noise(x, y) * 0.5 + 0.5) * 255;\n        data[(i * size + j) * 4 + 1] = (simplex.noise(x + size, y) * 0.5 + 0.5) * 255;\n        data[(i * size + j) * 4 + 2] = (simplex.noise(x, y + size) * 0.5 + 0.5) * 255;\n        data[(i * size + j) * 4 + 3] = (simplex.noise(x + size, y + size) * 0.5 + 0.5) * 255;\n      }\n    }\n    const noiseTexture = new DataTexture(data, size, size, RGBAFormat, UnsignedByteType);\n    noiseTexture.wrapS = RepeatWrapping;\n    noiseTexture.wrapT = RepeatWrapping;\n    noiseTexture.needsUpdate = true;\n    return noiseTexture;\n  }\n}\nGTAOPass.OUTPUT = {\n  'Off': -1,\n  'Default': 0,\n  'Diffuse': 1,\n  'Depth': 2,\n  'Normal': 3,\n  'AO': 4,\n  'Denoise': 5\n};\nexport { GTAOPass };","map":{"version":3,"names":["AddEquation","Color","CustomBlending","DataTexture","DepthTexture","DepthStencilFormat","DstAlphaFactor","DstColorFactor","HalfFloatType","MeshNormalMaterial","NearestFilter","NoBlending","RepeatWrapping","RGBAFormat","ShaderMaterial","UniformsUtils","UnsignedByteType","UnsignedInt248Type","WebGLRenderTarget","ZeroFactor","Pass","FullScreenQuad","generateMagicSquareNoise","GTAOShader","GTAODepthShader","GTAOBlendShader","generatePdSamplePointInitializer","PoissonDenoiseShader","CopyShader","SimplexNoise","GTAOPass","constructor","scene","camera","width","height","parameters","aoParameters","pdParameters","clear","output","_renderGBuffer","_visibilityCache","Map","blendIntensity","pdRings","pdRadiusExponent","pdSamples","gtaoNoiseTexture","pdNoiseTexture","_generateNoise","gtaoRenderTarget","type","pdRenderTarget","clone","gtaoMaterial","defines","Object","assign","uniforms","vertexShader","fragmentShader","blending","depthTest","depthWrite","PERSPECTIVE_CAMERA","isPerspectiveCamera","tNoise","value","resolution","set","cameraNear","near","cameraFar","far","normalMaterial","pdMaterial","tDiffuse","texture","lumaPhi","depthPhi","normalPhi","radius","depthRenderMaterial","copyMaterial","transparent","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","blendMaterial","_fsQuad","_originalClearColor","setGBuffer","depthTexture","undefined","normalTexture","updateGtaoMaterial","updatePdMaterial","setSize","normalRenderTarget","cameraProjectionMatrix","copy","projectionMatrix","cameraProjectionMatrixInverse","projectionMatrixInverse","dispose","gtaoMap","format","minFilter","magFilter","normalVectorType","depthValueSource","NORMAL_VECTOR_TYPE","DEPTH_SWIZZLING","tNormal","tDepth","setSceneClipBox","box","needsUpdate","SCENE_CLIP_BOX","sceneBoxMin","min","sceneBoxMax","max","distanceExponent","thickness","distanceFallOff","scale","samples","SAMPLES","screenSpaceRadius","SCREEN_SPACE_RADIUS","updateShader","radiusExponent","rings","SAMPLE_VECTORS","render","renderer","writeBuffer","readBuffer","_overrideVisibility","_renderOverride","_restoreVisibility","cameraWorldMatrix","matrixWorld","_renderPass","OUTPUT","Off","Diffuse","renderToScreen","AO","Denoise","Depth","Normal","Default","intensity","console","warn","passMaterial","renderTarget","clearColor","clearAlpha","getClearColor","originalClearAlpha","getClearAlpha","originalAutoClear","autoClear","setRenderTarget","setClearColor","setClearAlpha","material","overrideMaterial","cache","traverse","object","visible","isPoints","isLine","get","size","simplex","arraySize","data","Uint8Array","i","j","x","y","noise","noiseTexture","wrapS","wrapT"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/postprocessing/GTAOPass.js"],"sourcesContent":["import {\n\tAddEquation,\n\tColor,\n\tCustomBlending,\n\tDataTexture,\n\tDepthTexture,\n\tDepthStencilFormat,\n\tDstAlphaFactor,\n\tDstColorFactor,\n\tHalfFloatType,\n\tMeshNormalMaterial,\n\tNearestFilter,\n\tNoBlending,\n\tRepeatWrapping,\n\tRGBAFormat,\n\tShaderMaterial,\n\tUniformsUtils,\n\tUnsignedByteType,\n\tUnsignedInt248Type,\n\tWebGLRenderTarget,\n\tZeroFactor\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { generateMagicSquareNoise, GTAOShader, GTAODepthShader, GTAOBlendShader } from '../shaders/GTAOShader.js';\nimport { generatePdSamplePointInitializer, PoissonDenoiseShader } from '../shaders/PoissonDenoiseShader.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { SimplexNoise } from '../math/SimplexNoise.js';\n\n/**\n * A pass for an GTAO effect.\n *\n * `GTAOPass` provides better quality than {@link SSAOPass} but is also more expensive.\n *\n * ```js\n * const gtaoPass = new GTAOPass( scene, camera, width, height );\n * gtaoPass.output = GTAOPass.OUTPUT.Denoise;\n * composer.addPass( gtaoPass );\n * ```\n *\n * @augments Pass\n * @three_import import { GTAOPass } from 'three/addons/postprocessing/GTAOPass.js';\n */\nclass GTAOPass extends Pass {\n\n\t/**\n\t * Constructs a new GTAO pass.\n\t *\n\t * @param {Scene} scene - The scene to compute the AO for.\n\t * @param {Camera} camera - The camera.\n\t * @param {number} [width=512] - The width of the effect.\n\t * @param {number} [height=512] - The height of the effect.\n\t * @param {Object} [parameters] - The pass parameters.\n\t * @param {Object} [aoParameters] - The AO parameters.\n\t * @param {Object} [pdParameters] - The denoise parameters.\n\t */\n\tconstructor( scene, camera, width = 512, height = 512, parameters, aoParameters, pdParameters ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The width of the effect.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 512\n\t\t */\n\t\tthis.width = width;\n\n\t\t/**\n\t\t * The height of the effect.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 512\n\t\t */\n\t\tthis.height = height;\n\n\t\t/**\n\t\t * Overwritten to perform a clear operation by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.clear = true;\n\n\t\t/**\n\t\t * The camera.\n\t\t *\n\t\t * @type {Camera}\n\t\t */\n\t\tthis.camera = camera;\n\n\t\t/**\n\t\t * The scene to render the AO for.\n\t\t *\n\t\t * @type {Scene}\n\t\t */\n\t\tthis.scene = scene;\n\n\t\t/**\n\t\t * The output configuration.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.output = 0;\n\t\tthis._renderGBuffer = true;\n\t\tthis._visibilityCache = new Map();\n\n\t\t/**\n\t\t * The AO blend intensity.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.blendIntensity = 1.;\n\n\t\t/**\n\t\t * The number of Poisson Denoise rings.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 2\n\t\t */\n\t\tthis.pdRings = 2.;\n\n\t\t/**\n\t\t * The Poisson Denoise radius exponent.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 2\n\t\t */\n\t\tthis.pdRadiusExponent = 2.;\n\n\t\t/**\n\t\t * The Poisson Denoise sample count.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 16\n\t\t */\n\t\tthis.pdSamples = 16;\n\n\t\tthis.gtaoNoiseTexture = generateMagicSquareNoise();\n\t\tthis.pdNoiseTexture = this._generateNoise();\n\n\t\tthis.gtaoRenderTarget = new WebGLRenderTarget( this.width, this.height, { type: HalfFloatType } );\n\t\tthis.pdRenderTarget = this.gtaoRenderTarget.clone();\n\n\t\tthis.gtaoMaterial = new ShaderMaterial( {\n\t\t\tdefines: Object.assign( {}, GTAOShader.defines ),\n\t\t\tuniforms: UniformsUtils.clone( GTAOShader.uniforms ),\n\t\t\tvertexShader: GTAOShader.vertexShader,\n\t\t\tfragmentShader: GTAOShader.fragmentShader,\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t} );\n\t\tthis.gtaoMaterial.defines.PERSPECTIVE_CAMERA = this.camera.isPerspectiveCamera ? 1 : 0;\n\t\tthis.gtaoMaterial.uniforms.tNoise.value = this.gtaoNoiseTexture;\n\t\tthis.gtaoMaterial.uniforms.resolution.value.set( this.width, this.height );\n\t\tthis.gtaoMaterial.uniforms.cameraNear.value = this.camera.near;\n\t\tthis.gtaoMaterial.uniforms.cameraFar.value = this.camera.far;\n\n\t\tthis.normalMaterial = new MeshNormalMaterial();\n\t\tthis.normalMaterial.blending = NoBlending;\n\n\t\tthis.pdMaterial = new ShaderMaterial( {\n\t\t\tdefines: Object.assign( {}, PoissonDenoiseShader.defines ),\n\t\t\tuniforms: UniformsUtils.clone( PoissonDenoiseShader.uniforms ),\n\t\t\tvertexShader: PoissonDenoiseShader.vertexShader,\n\t\t\tfragmentShader: PoissonDenoiseShader.fragmentShader,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t} );\n\t\tthis.pdMaterial.uniforms.tDiffuse.value = this.gtaoRenderTarget.texture;\n\t\tthis.pdMaterial.uniforms.tNoise.value = this.pdNoiseTexture;\n\t\tthis.pdMaterial.uniforms.resolution.value.set( this.width, this.height );\n\t\tthis.pdMaterial.uniforms.lumaPhi.value = 10;\n\t\tthis.pdMaterial.uniforms.depthPhi.value = 2;\n\t\tthis.pdMaterial.uniforms.normalPhi.value = 3;\n\t\tthis.pdMaterial.uniforms.radius.value = 8;\n\n\t\tthis.depthRenderMaterial = new ShaderMaterial( {\n\t\t\tdefines: Object.assign( {}, GTAODepthShader.defines ),\n\t\t\tuniforms: UniformsUtils.clone( GTAODepthShader.uniforms ),\n\t\t\tvertexShader: GTAODepthShader.vertexShader,\n\t\t\tfragmentShader: GTAODepthShader.fragmentShader,\n\t\t\tblending: NoBlending\n\t\t} );\n\t\tthis.depthRenderMaterial.uniforms.cameraNear.value = this.camera.near;\n\t\tthis.depthRenderMaterial.uniforms.cameraFar.value = this.camera.far;\n\n\t\tthis.copyMaterial = new ShaderMaterial( {\n\t\t\tuniforms: UniformsUtils.clone( CopyShader.uniforms ),\n\t\t\tvertexShader: CopyShader.vertexShader,\n\t\t\tfragmentShader: CopyShader.fragmentShader,\n\t\t\ttransparent: true,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\tblendSrc: DstColorFactor,\n\t\t\tblendDst: ZeroFactor,\n\t\t\tblendEquation: AddEquation,\n\t\t\tblendSrcAlpha: DstAlphaFactor,\n\t\t\tblendDstAlpha: ZeroFactor,\n\t\t\tblendEquationAlpha: AddEquation\n\t\t} );\n\n\t\tthis.blendMaterial = new ShaderMaterial( {\n\t\t\tuniforms: UniformsUtils.clone( GTAOBlendShader.uniforms ),\n\t\t\tvertexShader: GTAOBlendShader.vertexShader,\n\t\t\tfragmentShader: GTAOBlendShader.fragmentShader,\n\t\t\ttransparent: true,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\tblending: CustomBlending,\n\t\t\tblendSrc: DstColorFactor,\n\t\t\tblendDst: ZeroFactor,\n\t\t\tblendEquation: AddEquation,\n\t\t\tblendSrcAlpha: DstAlphaFactor,\n\t\t\tblendDstAlpha: ZeroFactor,\n\t\t\tblendEquationAlpha: AddEquation\n\t\t} );\n\n\t\tthis._fsQuad = new FullScreenQuad( null );\n\n\t\tthis._originalClearColor = new Color();\n\n\t\tthis.setGBuffer( parameters ? parameters.depthTexture : undefined, parameters ? parameters.normalTexture : undefined );\n\n\t\tif ( aoParameters !== undefined ) {\n\n\t\t\tthis.updateGtaoMaterial( aoParameters );\n\n\t\t}\n\n\t\tif ( pdParameters !== undefined ) {\n\n\t\t\tthis.updatePdMaterial( pdParameters );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Sets the size of the pass.\n\t *\n\t * @param {number} width - The width to set.\n\t * @param {number} height - The height to set.\n\t */\n\tsetSize( width, height ) {\n\n\t\tthis.width = width;\n\t\tthis.height = height;\n\n\t\tthis.gtaoRenderTarget.setSize( width, height );\n\t\tthis.normalRenderTarget.setSize( width, height );\n\t\tthis.pdRenderTarget.setSize( width, height );\n\n\t\tthis.gtaoMaterial.uniforms.resolution.value.set( width, height );\n\t\tthis.gtaoMaterial.uniforms.cameraProjectionMatrix.value.copy( this.camera.projectionMatrix );\n\t\tthis.gtaoMaterial.uniforms.cameraProjectionMatrixInverse.value.copy( this.camera.projectionMatrixInverse );\n\n\t\tthis.pdMaterial.uniforms.resolution.value.set( width, height );\n\t\tthis.pdMaterial.uniforms.cameraProjectionMatrixInverse.value.copy( this.camera.projectionMatrixInverse );\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever the pass is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.gtaoNoiseTexture.dispose();\n\t\tthis.pdNoiseTexture.dispose();\n\t\tthis.normalRenderTarget.dispose();\n\t\tthis.gtaoRenderTarget.dispose();\n\t\tthis.pdRenderTarget.dispose();\n\t\tthis.normalMaterial.dispose();\n\t\tthis.pdMaterial.dispose();\n\t\tthis.copyMaterial.dispose();\n\t\tthis.depthRenderMaterial.dispose();\n\t\tthis._fsQuad.dispose();\n\n\t}\n\n\t/**\n\t * A texture holding the computed AO.\n\t *\n\t * @type {Texture}\n\t * @readonly\n\t */\n\tget gtaoMap() {\n\n\t\treturn this.pdRenderTarget.texture;\n\n\t}\n\n\t/**\n\t * Configures the GBuffer of this pass. If no arguments are passed,\n\t * the pass creates an internal render target for holding depth\n\t * and normal data.\n\t *\n\t * @param {DepthTexture} [depthTexture] - The depth texture.\n\t * @param {DepthTexture} [normalTexture] - The normal texture.\n\t */\n\tsetGBuffer( depthTexture, normalTexture ) {\n\n\t\tif ( depthTexture !== undefined ) {\n\n\t\t\tthis.depthTexture = depthTexture;\n\t\t\tthis.normalTexture = normalTexture;\n\t\t\tthis._renderGBuffer = false;\n\n\t\t} else {\n\n\t\t\tthis.depthTexture = new DepthTexture();\n\t\t\tthis.depthTexture.format = DepthStencilFormat;\n\t\t\tthis.depthTexture.type = UnsignedInt248Type;\n\t\t\tthis.normalRenderTarget = new WebGLRenderTarget( this.width, this.height, {\n\t\t\t\tminFilter: NearestFilter,\n\t\t\t\tmagFilter: NearestFilter,\n\t\t\t\ttype: HalfFloatType,\n\t\t\t\tdepthTexture: this.depthTexture\n\t\t\t} );\n\t\t\tthis.normalTexture = this.normalRenderTarget.texture;\n\t\t\tthis._renderGBuffer = true;\n\n\t\t}\n\n\t\tconst normalVectorType = ( this.normalTexture ) ? 1 : 0;\n\t\tconst depthValueSource = ( this.depthTexture === this.normalTexture ) ? 'w' : 'x';\n\n\t\tthis.gtaoMaterial.defines.NORMAL_VECTOR_TYPE = normalVectorType;\n\t\tthis.gtaoMaterial.defines.DEPTH_SWIZZLING = depthValueSource;\n\t\tthis.gtaoMaterial.uniforms.tNormal.value = this.normalTexture;\n\t\tthis.gtaoMaterial.uniforms.tDepth.value = this.depthTexture;\n\n\t\tthis.pdMaterial.defines.NORMAL_VECTOR_TYPE = normalVectorType;\n\t\tthis.pdMaterial.defines.DEPTH_SWIZZLING = depthValueSource;\n\t\tthis.pdMaterial.uniforms.tNormal.value = this.normalTexture;\n\t\tthis.pdMaterial.uniforms.tDepth.value = this.depthTexture;\n\n\t\tthis.depthRenderMaterial.uniforms.tDepth.value = this.normalRenderTarget.depthTexture;\n\n\t}\n\n\t/**\n\t * Configures the clip box of the GTAO shader with the given AABB.\n\t *\n\t * @param {?Box3} box - The AABB enclosing the scene that should receive AO. When passing\n\t * `null`, to clip box is used.\n\t */\n\tsetSceneClipBox( box ) {\n\n\t\tif ( box ) {\n\n\t\t\tthis.gtaoMaterial.needsUpdate = this.gtaoMaterial.defines.SCENE_CLIP_BOX !== 1;\n\t\t\tthis.gtaoMaterial.defines.SCENE_CLIP_BOX = 1;\n\t\t\tthis.gtaoMaterial.uniforms.sceneBoxMin.value.copy( box.min );\n\t\t\tthis.gtaoMaterial.uniforms.sceneBoxMax.value.copy( box.max );\n\n\t\t} else {\n\n\t\t\tthis.gtaoMaterial.needsUpdate = this.gtaoMaterial.defines.SCENE_CLIP_BOX === 0;\n\t\t\tthis.gtaoMaterial.defines.SCENE_CLIP_BOX = 0;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Updates the GTAO material from the given parameter object.\n\t *\n\t * @param {Object} parameters - The GTAO material parameters.\n\t */\n\tupdateGtaoMaterial( parameters ) {\n\n\t\tif ( parameters.radius !== undefined ) {\n\n\t\t\tthis.gtaoMaterial.uniforms.radius.value = parameters.radius;\n\n\t\t}\n\n\t\tif ( parameters.distanceExponent !== undefined ) {\n\n\t\t\tthis.gtaoMaterial.uniforms.distanceExponent.value = parameters.distanceExponent;\n\n\t\t}\n\n\t\tif ( parameters.thickness !== undefined ) {\n\n\t\t\tthis.gtaoMaterial.uniforms.thickness.value = parameters.thickness;\n\n\t\t}\n\n\t\tif ( parameters.distanceFallOff !== undefined ) {\n\n\t\t\tthis.gtaoMaterial.uniforms.distanceFallOff.value = parameters.distanceFallOff;\n\t\t\tthis.gtaoMaterial.needsUpdate = true;\n\n\t\t}\n\n\t\tif ( parameters.scale !== undefined ) {\n\n\t\t\tthis.gtaoMaterial.uniforms.scale.value = parameters.scale;\n\n\t\t}\n\n\t\tif ( parameters.samples !== undefined && parameters.samples !== this.gtaoMaterial.defines.SAMPLES ) {\n\n\t\t\tthis.gtaoMaterial.defines.SAMPLES = parameters.samples;\n\t\t\tthis.gtaoMaterial.needsUpdate = true;\n\n\t\t}\n\n\t\tif ( parameters.screenSpaceRadius !== undefined && ( parameters.screenSpaceRadius ? 1 : 0 ) !== this.gtaoMaterial.defines.SCREEN_SPACE_RADIUS ) {\n\n\t\t\tthis.gtaoMaterial.defines.SCREEN_SPACE_RADIUS = parameters.screenSpaceRadius ? 1 : 0;\n\t\t\tthis.gtaoMaterial.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Updates the Denoise material from the given parameter object.\n\t *\n\t * @param {Object} parameters - The denoise parameters.\n\t */\n\tupdatePdMaterial( parameters ) {\n\n\t\tlet updateShader = false;\n\n\t\tif ( parameters.lumaPhi !== undefined ) {\n\n\t\t\tthis.pdMaterial.uniforms.lumaPhi.value = parameters.lumaPhi;\n\n\t\t}\n\n\t\tif ( parameters.depthPhi !== undefined ) {\n\n\t\t\tthis.pdMaterial.uniforms.depthPhi.value = parameters.depthPhi;\n\n\t\t}\n\n\t\tif ( parameters.normalPhi !== undefined ) {\n\n\t\t\tthis.pdMaterial.uniforms.normalPhi.value = parameters.normalPhi;\n\n\t\t}\n\n\t\tif ( parameters.radius !== undefined && parameters.radius !== this.radius ) {\n\n\t\t\tthis.pdMaterial.uniforms.radius.value = parameters.radius;\n\n\t\t}\n\n\t\tif ( parameters.radiusExponent !== undefined && parameters.radiusExponent !== this.pdRadiusExponent ) {\n\n\t\t\tthis.pdRadiusExponent = parameters.radiusExponent;\n\t\t\tupdateShader = true;\n\n\t\t}\n\n\t\tif ( parameters.rings !== undefined && parameters.rings !== this.pdRings ) {\n\n\t\t\tthis.pdRings = parameters.rings;\n\t\t\tupdateShader = true;\n\n\t\t}\n\n\t\tif ( parameters.samples !== undefined && parameters.samples !== this.pdSamples ) {\n\n\t\t\tthis.pdSamples = parameters.samples;\n\t\t\tupdateShader = true;\n\n\t\t}\n\n\t\tif ( updateShader ) {\n\n\t\t\tthis.pdMaterial.defines.SAMPLES = this.pdSamples;\n\t\t\tthis.pdMaterial.defines.SAMPLE_VECTORS = generatePdSamplePointInitializer( this.pdSamples, this.pdRings, this.pdRadiusExponent );\n\t\t\tthis.pdMaterial.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Performs the GTAO pass.\n\t *\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\n\t * destination for the pass.\n\t * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\n\t * previous pass from this buffer.\n\t * @param {number} deltaTime - The delta time in seconds.\n\t * @param {boolean} maskActive - Whether masking is active or not.\n\t */\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\t// render normals and depth (honor only meshes, points and lines do not contribute to AO)\n\n\t\tif ( this._renderGBuffer ) {\n\n\t\t\tthis._overrideVisibility();\n\t\t\tthis._renderOverride( renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0 );\n\t\t\tthis._restoreVisibility();\n\n\t\t}\n\n\t\t// render AO\n\n\t\tthis.gtaoMaterial.uniforms.cameraNear.value = this.camera.near;\n\t\tthis.gtaoMaterial.uniforms.cameraFar.value = this.camera.far;\n\t\tthis.gtaoMaterial.uniforms.cameraProjectionMatrix.value.copy( this.camera.projectionMatrix );\n\t\tthis.gtaoMaterial.uniforms.cameraProjectionMatrixInverse.value.copy( this.camera.projectionMatrixInverse );\n\t\tthis.gtaoMaterial.uniforms.cameraWorldMatrix.value.copy( this.camera.matrixWorld );\n\t\tthis._renderPass( renderer, this.gtaoMaterial, this.gtaoRenderTarget, 0xffffff, 1.0 );\n\n\t\t// render poisson denoise\n\n\t\tthis.pdMaterial.uniforms.cameraProjectionMatrixInverse.value.copy( this.camera.projectionMatrixInverse );\n\t\tthis._renderPass( renderer, this.pdMaterial, this.pdRenderTarget, 0xffffff, 1.0 );\n\n\t\t// output result to screen\n\n\t\tswitch ( this.output ) {\n\n\t\t\tcase GTAOPass.OUTPUT.Off:\n\t\t\t\tbreak;\n\n\t\t\tcase GTAOPass.OUTPUT.Diffuse:\n\n\t\t\t\tthis.copyMaterial.uniforms.tDiffuse.value = readBuffer.texture;\n\t\t\t\tthis.copyMaterial.blending = NoBlending;\n\t\t\t\tthis._renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tbreak;\n\n\t\t\tcase GTAOPass.OUTPUT.AO:\n\n\t\t\t\tthis.copyMaterial.uniforms.tDiffuse.value = this.gtaoRenderTarget.texture;\n\t\t\t\tthis.copyMaterial.blending = NoBlending;\n\t\t\t\tthis._renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tbreak;\n\n\t\t\tcase GTAOPass.OUTPUT.Denoise:\n\n\t\t\t\tthis.copyMaterial.uniforms.tDiffuse.value = this.pdRenderTarget.texture;\n\t\t\t\tthis.copyMaterial.blending = NoBlending;\n\t\t\t\tthis._renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tbreak;\n\n\t\t\tcase GTAOPass.OUTPUT.Depth:\n\n\t\t\t\tthis.depthRenderMaterial.uniforms.cameraNear.value = this.camera.near;\n\t\t\t\tthis.depthRenderMaterial.uniforms.cameraFar.value = this.camera.far;\n\t\t\t\tthis._renderPass( renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tbreak;\n\n\t\t\tcase GTAOPass.OUTPUT.Normal:\n\n\t\t\t\tthis.copyMaterial.uniforms.tDiffuse.value = this.normalRenderTarget.texture;\n\t\t\t\tthis.copyMaterial.blending = NoBlending;\n\t\t\t\tthis._renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tbreak;\n\n\t\t\tcase GTAOPass.OUTPUT.Default:\n\n\t\t\t\tthis.copyMaterial.uniforms.tDiffuse.value = readBuffer.texture;\n\t\t\t\tthis.copyMaterial.blending = NoBlending;\n\t\t\t\tthis._renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tthis.blendMaterial.uniforms.intensity.value = this.blendIntensity;\n\t\t\t\tthis.blendMaterial.uniforms.tDiffuse.value = this.pdRenderTarget.texture;\n\t\t\t\tthis._renderPass( renderer, this.blendMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn( 'THREE.GTAOPass: Unknown output type.' );\n\n\t\t}\n\n\t}\n\n\t// internals\n\n\t_renderPass( renderer, passMaterial, renderTarget, clearColor, clearAlpha ) {\n\n\t\t// save original state\n\t\trenderer.getClearColor( this._originalClearColor );\n\t\tconst originalClearAlpha = renderer.getClearAlpha();\n\t\tconst originalAutoClear = renderer.autoClear;\n\n\t\trenderer.setRenderTarget( renderTarget );\n\n\t\t// setup pass state\n\t\trenderer.autoClear = false;\n\t\tif ( ( clearColor !== undefined ) && ( clearColor !== null ) ) {\n\n\t\t\trenderer.setClearColor( clearColor );\n\t\t\trenderer.setClearAlpha( clearAlpha || 0.0 );\n\t\t\trenderer.clear();\n\n\t\t}\n\n\t\tthis._fsQuad.material = passMaterial;\n\t\tthis._fsQuad.render( renderer );\n\n\t\t// restore original state\n\t\trenderer.autoClear = originalAutoClear;\n\t\trenderer.setClearColor( this._originalClearColor );\n\t\trenderer.setClearAlpha( originalClearAlpha );\n\n\t}\n\n\t_renderOverride( renderer, overrideMaterial, renderTarget, clearColor, clearAlpha ) {\n\n\t\trenderer.getClearColor( this._originalClearColor );\n\t\tconst originalClearAlpha = renderer.getClearAlpha();\n\t\tconst originalAutoClear = renderer.autoClear;\n\n\t\trenderer.setRenderTarget( renderTarget );\n\t\trenderer.autoClear = false;\n\n\t\tclearColor = overrideMaterial.clearColor || clearColor;\n\t\tclearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n\n\t\tif ( ( clearColor !== undefined ) && ( clearColor !== null ) ) {\n\n\t\t\trenderer.setClearColor( clearColor );\n\t\t\trenderer.setClearAlpha( clearAlpha || 0.0 );\n\t\t\trenderer.clear();\n\n\t\t}\n\n\t\tthis.scene.overrideMaterial = overrideMaterial;\n\t\trenderer.render( this.scene, this.camera );\n\t\tthis.scene.overrideMaterial = null;\n\n\t\trenderer.autoClear = originalAutoClear;\n\t\trenderer.setClearColor( this._originalClearColor );\n\t\trenderer.setClearAlpha( originalClearAlpha );\n\n\t}\n\n\t_overrideVisibility() {\n\n\t\tconst scene = this.scene;\n\t\tconst cache = this._visibilityCache;\n\n\t\tscene.traverse( function ( object ) {\n\n\t\t\tcache.set( object, object.visible );\n\n\t\t\tif ( object.isPoints || object.isLine ) object.visible = false;\n\n\t\t} );\n\n\t}\n\n\t_restoreVisibility() {\n\n\t\tconst scene = this.scene;\n\t\tconst cache = this._visibilityCache;\n\n\t\tscene.traverse( function ( object ) {\n\n\t\t\tconst visible = cache.get( object );\n\t\t\tobject.visible = visible;\n\n\t\t} );\n\n\t\tcache.clear();\n\n\t}\n\n\t_generateNoise( size = 64 ) {\n\n\t\tconst simplex = new SimplexNoise();\n\n\t\tconst arraySize = size * size * 4;\n\t\tconst data = new Uint8Array( arraySize );\n\n\t\tfor ( let i = 0; i < size; i ++ ) {\n\n\t\t\tfor ( let j = 0; j < size; j ++ ) {\n\n\t\t\t\tconst x = i;\n\t\t\t\tconst y = j;\n\n\t\t\t\tdata[ ( i * size + j ) * 4 ] = ( simplex.noise( x, y ) * 0.5 + 0.5 ) * 255;\n\t\t\t\tdata[ ( i * size + j ) * 4 + 1 ] = ( simplex.noise( x + size, y ) * 0.5 + 0.5 ) * 255;\n\t\t\t\tdata[ ( i * size + j ) * 4 + 2 ] = ( simplex.noise( x, y + size ) * 0.5 + 0.5 ) * 255;\n\t\t\t\tdata[ ( i * size + j ) * 4 + 3 ] = ( simplex.noise( x + size, y + size ) * 0.5 + 0.5 ) * 255;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst noiseTexture = new DataTexture( data, size, size, RGBAFormat, UnsignedByteType );\n\t\tnoiseTexture.wrapS = RepeatWrapping;\n\t\tnoiseTexture.wrapT = RepeatWrapping;\n\t\tnoiseTexture.needsUpdate = true;\n\n\t\treturn noiseTexture;\n\n\t}\n\n}\n\nGTAOPass.OUTPUT = {\n\t'Off': - 1,\n\t'Default': 0,\n\t'Diffuse': 1,\n\t'Depth': 2,\n\t'Normal': 3,\n\t'AO': 4,\n\t'Denoise': 5,\n};\n\nexport { GTAOPass };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}