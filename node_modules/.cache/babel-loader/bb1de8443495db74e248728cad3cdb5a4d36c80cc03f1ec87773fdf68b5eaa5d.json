{"ast":null,"code":"import { Vector3 } from 'three';\n\n/**\n * @module ColorCorrectionShader\n * @three_import import { ColorCorrectionShader } from 'three/addons/shaders/ColorCorrectionShader.js';\n */\n\n/**\n * Color correction shader.\n *\n * @constant\n * @type {ShaderMaterial~Shader}\n */\nconst ColorCorrectionShader = {\n  name: 'ColorCorrectionShader',\n  uniforms: {\n    'tDiffuse': {\n      value: null\n    },\n    'powRGB': {\n      value: new Vector3(2, 2, 2)\n    },\n    'mulRGB': {\n      value: new Vector3(1, 1, 1)\n    },\n    'addRGB': {\n      value: new Vector3(0, 0, 0)\n    }\n  },\n  vertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n  fragmentShader: /* glsl */`\n\n\t\tuniform sampler2D tDiffuse;\n\t\tuniform vec3 powRGB;\n\t\tuniform vec3 mulRGB;\n\t\tuniform vec3 addRGB;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tgl_FragColor = texture2D( tDiffuse, vUv );\n\t\t\tgl_FragColor.rgb = mulRGB * pow( ( gl_FragColor.rgb + addRGB ), powRGB );\n\n\t\t}`\n};\nexport { ColorCorrectionShader };","map":{"version":3,"names":["Vector3","ColorCorrectionShader","name","uniforms","value","vertexShader","fragmentShader"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/shaders/ColorCorrectionShader.js"],"sourcesContent":["import {\n\tVector3\n} from 'three';\n\n/**\n * @module ColorCorrectionShader\n * @three_import import { ColorCorrectionShader } from 'three/addons/shaders/ColorCorrectionShader.js';\n */\n\n/**\n * Color correction shader.\n *\n * @constant\n * @type {ShaderMaterial~Shader}\n */\nconst ColorCorrectionShader = {\n\n\tname: 'ColorCorrectionShader',\n\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null },\n\t\t'powRGB': { value: new Vector3( 2, 2, 2 ) },\n\t\t'mulRGB': { value: new Vector3( 1, 1, 1 ) },\n\t\t'addRGB': { value: new Vector3( 0, 0, 0 ) }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform sampler2D tDiffuse;\n\t\tuniform vec3 powRGB;\n\t\tuniform vec3 mulRGB;\n\t\tuniform vec3 addRGB;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tgl_FragColor = texture2D( tDiffuse, vUv );\n\t\t\tgl_FragColor.rgb = mulRGB * pow( ( gl_FragColor.rgb + addRGB ), powRGB );\n\n\t\t}`\n\n};\n\nexport { ColorCorrectionShader };\n"],"mappings":"AAAA,SACCA,OAAO,QACD,OAAO;;AAEd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,qBAAqB,GAAG;EAE7BC,IAAI,EAAE,uBAAuB;EAE7BC,QAAQ,EAAE;IAET,UAAU,EAAE;MAAEC,KAAK,EAAE;IAAK,CAAC;IAC3B,QAAQ,EAAE;MAAEA,KAAK,EAAE,IAAIJ,OAAO,CAAE,CAAC,EAAE,CAAC,EAAE,CAAE;IAAE,CAAC;IAC3C,QAAQ,EAAE;MAAEI,KAAK,EAAE,IAAIJ,OAAO,CAAE,CAAC,EAAE,CAAC,EAAE,CAAE;IAAE,CAAC;IAC3C,QAAQ,EAAE;MAAEI,KAAK,EAAE,IAAIJ,OAAO,CAAE,CAAC,EAAE,CAAC,EAAE,CAAE;IAAE;EAE3C,CAAC;EAEDK,YAAY,EAAE,UAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;EAEHC,cAAc,EAAE,UAAU;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,CAAC;AAED,SAASL,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}