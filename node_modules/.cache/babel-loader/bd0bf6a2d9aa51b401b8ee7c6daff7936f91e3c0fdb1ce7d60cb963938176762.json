{"ast":null,"code":"var _jsxFileName = \"/home/powqy/Desktop/Design/solar-system-orbits/src/App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$();\nimport React from \"react\";\nimport { useState, useRef } from \"react\";\nimport { Canvas, useLoader, useFrame } from \"@react-three/fiber\";\nimport { OrbitControls, Stars, stars } from \"@react-three/drei\";\nimport { TextureLoader } from \"three\";\nimport styled from \"styled-components\";\nimport sun from '../src/textures/2k_sun.jpg';\nimport mars from '../src/textures/2k_mars.jpg';\n\n// a -> semi major axis\n// e -> eccentricity\n// I -> inclination\n// L -> mean longitue\n// beta -> longitude of perihelion\n// omega -> longitude of the ascending node\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst planetOribitalData = {\n  mars: {\n    a: 1.52371034,\n    e: 0.09339410,\n    I: 1.84969142,\n    L: -4.55343205,\n    omegaBar: -23.94362959,\n    omega: 49.55953891\n  },\n  earth: {\n    a: 1.00000261,\n    e: 0.01671123,\n    I: -0.00001531,\n    L: 100.46457166,\n    omegaBar: 102.93768193,\n    omega: 0.0\n  }\n};\nconst planetEntry = Object.entries(planetOribitalData).map(([name, data]) => {\n  return {\n    name,\n    elements: new OrbitalElements(data.a, data.e, data.I, data.L, data.omegaBar, data.omega)\n  };\n});\nfunction OrbitingPlanet({\n  elements,\n  textureFile,\n  jd,\n  radius,\n  scale = 2\n}) {\n  _s();\n  const planetRef = useRef();\n  const texture = useLoader(TextureLoader, textureFile);\n  useFrame(() => {\n    const position = elements.to3Dspace(jd);\n    if (planetRef.current) {\n      planetRef.current.position.set(position.x * scale, position.y * scale, position.z * scale);\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    ref: planetRef,\n    children: [/*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n      args: [radius, 32, 32]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n      map: texture\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n_s(OrbitingPlanet, \"QyPtIYh8FYySgLRhOyqIJN7/whw=\", false, function () {\n  return [useLoader, useFrame];\n});\n_c = OrbitingPlanet;\nfunction toJulianDate(date = new Date()) {\n  const time = date.getTime();\n  return time / 86400000 + 2440587.5; // ms in day + Unix epoch (Jan 1, 1970)\n}\nfunction fromJulianDate(jd) {\n  return new Date((jd - 2440587.5) * 86400000);\n}\nfunction Planet({\n  textureFile,\n  position = [0, 0, 0],\n  radius\n}) {\n  _s2();\n  const texture = useLoader(TextureLoader, textureFile);\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    position: position,\n    children: [/*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n      args: [radius, 64, 64]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n      map: texture\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n}\n_s2(Planet, \"DPn9Ts0h3TXc07M7VbzN9xij6Hs=\", false, function () {\n  return [useLoader];\n});\n_c2 = Planet;\nfunction SimulateTime({\n  onUpdate,\n  paused\n}) {\n  _s3();\n  const [simdT, setSimdT] = useState(toJulianDate());\n  const speed = 10;\n  useFrame((_, delta) => {\n    if (paused) return;\n    const newSimdT = simdT + delta * speed;\n    setSimdT(newSimdT);\n    onUpdate(newSimdT);\n  });\n  return null;\n}\n_s3(SimulateTime, \"bhUGHI4iiunKrEpszQfOR5VCivI=\", false, function () {\n  return [useFrame];\n});\n_c3 = SimulateTime;\nexport default function App() {\n  _s4();\n  const [gregDate, setGregDate] = useState(new Date());\n  const [paused, setPaused] = useState(false);\n  const [currentJD, setCurrentJD] = useState(toJulianDate());\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Canvas, {\n      camera: {\n        position: [0, 0, 10]\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {\n        intensity: 0.5\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n        position: [10, 10, 10]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Stars, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SimulateTime, {\n        paused: paused,\n        onUpdate: jd => {\n          setGregDate(fromJulianDate(jd));\n          setCurrentJD(jd);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Planet, {\n        textureFile: sun,\n        position: [0, 0, 0],\n        radius: 2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(OrbitingPlanet, {\n        elements: planetEntry[0].elements,\n        jd: currentJD,\n        textureFile: mars\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(OrbitControls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DateDisplay, {\n      children: [gregDate.toDateString(), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 35\n      }, this), gregDate.toLocaleDateString()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Controls, {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setPaused(true),\n        children: \"pause\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s4(App, \"Xugab/4O/jC/hQLZaem0quhf3jI=\");\n_c4 = App;\nconst DateDisplay = styled.div`\n  position: absolute;\n  top: 20px;\n  left: 20px;\n  color: black;\n  font-family: monospace;\n  background: white;\n`;\n_c5 = DateDisplay;\nconst Controls = styled.div`\n  position: absolute;\n  top: 60px;\n  left: 20px\n`;\n_c6 = Controls;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"OrbitingPlanet\");\n$RefreshReg$(_c2, \"Planet\");\n$RefreshReg$(_c3, \"SimulateTime\");\n$RefreshReg$(_c4, \"App\");\n$RefreshReg$(_c5, \"DateDisplay\");\n$RefreshReg$(_c6, \"Controls\");","map":{"version":3,"names":["React","useState","useRef","Canvas","useLoader","useFrame","OrbitControls","Stars","stars","TextureLoader","styled","sun","mars","jsxDEV","_jsxDEV","Fragment","_Fragment","planetOribitalData","a","e","I","L","omegaBar","omega","earth","planetEntry","Object","entries","map","name","data","elements","OrbitalElements","OrbitingPlanet","textureFile","jd","radius","scale","_s","planetRef","texture","position","to3Dspace","current","set","x","y","z","ref","children","args","fileName","_jsxFileName","lineNumber","columnNumber","_c","toJulianDate","date","Date","time","getTime","fromJulianDate","Planet","_s2","_c2","SimulateTime","onUpdate","paused","_s3","simdT","setSimdT","speed","_","delta","newSimdT","_c3","App","_s4","gregDate","setGregDate","setPaused","currentJD","setCurrentJD","camera","intensity","DateDisplay","toDateString","toLocaleDateString","Controls","onClick","_c4","div","_c5","_c6","$RefreshReg$"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/src/App.js"],"sourcesContent":["import React from \"react\";\nimport { useState, useRef } from \"react\";\nimport { Canvas, useLoader, useFrame } from \"@react-three/fiber\";\nimport { OrbitControls, Stars, stars} from \"@react-three/drei\";\nimport { TextureLoader } from \"three\";\nimport styled from \"styled-components\";\n\nimport sun from '../src/textures/2k_sun.jpg'\nimport mars from '../src/textures/2k_mars.jpg'\n\n// a -> semi major axis\n// e -> eccentricity\n// I -> inclination\n// L -> mean longitue\n// beta -> longitude of perihelion\n// omega -> longitude of the ascending node\n\nconst planetOribitalData = {\n  mars: {\n    a: 1.52371034,\n    e: 0.09339410,\n    I: 1.84969142,\n    L: -4.55343205,\n    omegaBar: -23.94362959,\n    omega: 49.55953891\n  },\n\n  earth: {\n    a: 1.00000261,\n    e: 0.01671123,\n    I: -0.00001531,\n    L: 100.46457166,\n    omegaBar: 102.93768193,\n    omega: 0.0\n  }\n}\n\nconst planetEntry = Object.entries(planetOribitalData).map(([name, data]) => {\n  return {\n    name, \n    elements: new OrbitalElements(\n      data.a,\n      data.e,\n      data.I,\n      data.L,\n      data.omegaBar,\n      data.omega\n    )\n  };\n});\n\nfunction OrbitingPlanet({ elements, textureFile, jd, radius, scale = 2}) {\n  const planetRef = useRef();\n  const texture = useLoader(TextureLoader, textureFile);\n\n  useFrame(() => {\n    const position = elements.to3Dspace(jd);\n    if (planetRef.current) {\n      planetRef.current.position.set(position.x * scale, position.y * scale, position.z * scale)\n    }\n  });\n\n  return (\n    <mesh ref={planetRef}>\n      <sphereGeometry args={[radius, 32, 32]} />\n      <meshStandardMaterial map={texture} />\n    </mesh>\n  );\n}\n\n\nfunction toJulianDate(date = new Date()) {\n  const time = date.getTime();\n  return time / 86400000 + 2440587.5 // ms in day + Unix epoch (Jan 1, 1970)\n}\n\nfunction fromJulianDate(jd) {\n  return new Date((jd - 2440587.5) * 86400000);\n}\n\nfunction Planet({ textureFile, position = [0, 0, 0], radius}) {\n  const texture = useLoader(TextureLoader, textureFile);\n  return (\n    <mesh position={position}>\n      <sphereGeometry args = {[radius, 64, 64]} />\n      <meshStandardMaterial map={texture} />\n    </mesh>\n  );\n}\n\nfunction SimulateTime({ onUpdate, paused }) {\n  const [simdT, setSimdT] = useState(toJulianDate());\n  const speed = 10;\n\n  useFrame((_, delta) => {\n    if (paused) return;\n    const newSimdT = simdT + delta * speed;\n    setSimdT(newSimdT);\n    onUpdate(newSimdT);\n  })\n  return null;\n}\n\nexport default function App() {\n  const [gregDate, setGregDate] = useState(new Date());\n  const [paused, setPaused] = useState(false);\n  const [currentJD, setCurrentJD] = useState(toJulianDate());\n\n  return (\n    <>\n      <Canvas camera={{ position : [0, 0, 10] }}>\n        <ambientLight intensity={0.5} />\n        <pointLight position={[10, 10, 10]} />\n        <Stars />\n        <SimulateTime \n          paused={paused}\n          onUpdate={(jd) => {\n            setGregDate(fromJulianDate(jd));\n            setCurrentJD(jd);\n          }} \n        />\n        <Planet textureFile={sun} position={[0, 0, 0]} radius={2} />\n        <OrbitingPlanet elements={planetEntry[0].elements} jd={currentJD} textureFile={mars} />\n        <OrbitControls />\n      </Canvas>\n\n      <DateDisplay>\n        {gregDate.toDateString()} <br />\n        {gregDate.toLocaleDateString()}\n      </DateDisplay>\n      <Controls>\n        <button onClick={() => setPaused(true)}>pause</button>\n      </Controls>\n    </>\n  )\n}\n\n\nconst DateDisplay = styled.div`\n  position: absolute;\n  top: 20px;\n  left: 20px;\n  color: black;\n  font-family: monospace;\n  background: white;\n`\n\nconst Controls = styled.div`\n  position: absolute;\n  top: 60px;\n  left: 20px\n`"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}