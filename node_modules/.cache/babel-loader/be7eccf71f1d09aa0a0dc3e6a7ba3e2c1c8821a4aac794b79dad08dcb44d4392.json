{"ast":null,"code":"import { ShaderMaterial, UniformsUtils } from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { HalftoneShader } from '../shaders/HalftoneShader.js';\n\n/**\n * Pass for creating a RGB halftone effect.\n *\n * ```js\n * const params = {\n * \tshape: 1,\n * \tradius: 4,\n * \trotateR: Math.PI / 12,\n * \trotateB: Math.PI / 12 * 2,\n * \trotateG: Math.PI / 12 * 3,\n * \tscatter: 0,\n * \tblending: 1,\n * \tblendingMode: 1,\n * \tgreyscale: false,\n * \tdisable: false\n * };\n * const halftonePass = new HalftonePass( params );\n * composer.addPass( halftonePass );\n * ```\n *\n * @augments Pass\n * @three_import import { HalftonePass } from 'three/addons/postprocessing/HalftonePass.js';\n */\nclass HalftonePass extends Pass {\n  /**\n   * Constructs a new halftone pass.\n   *\n   * @param {Object} params - The halftone shader parameter.\n   */\n  constructor(params) {\n    super();\n\n    /**\n     * The pass uniforms.\n     *\n     * @type {Object}\n     */\n    this.uniforms = UniformsUtils.clone(HalftoneShader.uniforms);\n\n    /**\n     * The pass material.\n     *\n     * @type {ShaderMaterial}\n     */\n    this.material = new ShaderMaterial({\n      uniforms: this.uniforms,\n      fragmentShader: HalftoneShader.fragmentShader,\n      vertexShader: HalftoneShader.vertexShader\n    });\n    for (const key in params) {\n      if (params.hasOwnProperty(key) && this.uniforms.hasOwnProperty(key)) {\n        this.uniforms[key].value = params[key];\n      }\n    }\n\n    // internals\n\n    this._fsQuad = new FullScreenQuad(this.material);\n  }\n\n  /**\n   * Performs the halftone pass.\n   *\n   * @param {WebGLRenderer} renderer - The renderer.\n   * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\n   * destination for the pass.\n   * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\n   * previous pass from this buffer.\n   * @param {number} deltaTime - The delta time in seconds.\n   * @param {boolean} maskActive - Whether masking is active or not.\n   */\n  render(renderer, writeBuffer, readBuffer /*, deltaTime, maskActive*/) {\n    this.material.uniforms['tDiffuse'].value = readBuffer.texture;\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this._fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      this._fsQuad.render(renderer);\n    }\n  }\n\n  /**\n   * Sets the size of the pass.\n   *\n   * @param {number} width - The width to set.\n   * @param {number} height - The height to set.\n   */\n  setSize(width, height) {\n    this.uniforms.width.value = width;\n    this.uniforms.height.value = height;\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever the pass is no longer used in your app.\n   */\n  dispose() {\n    this.material.dispose();\n    this._fsQuad.dispose();\n  }\n}\nexport { HalftonePass };","map":{"version":3,"names":["ShaderMaterial","UniformsUtils","Pass","FullScreenQuad","HalftoneShader","HalftonePass","constructor","params","uniforms","clone","material","fragmentShader","vertexShader","key","hasOwnProperty","value","_fsQuad","render","renderer","writeBuffer","readBuffer","texture","renderToScreen","setRenderTarget","clear","setSize","width","height","dispose"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/postprocessing/HalftonePass.js"],"sourcesContent":["import {\n\tShaderMaterial,\n\tUniformsUtils\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { HalftoneShader } from '../shaders/HalftoneShader.js';\n\n/**\n * Pass for creating a RGB halftone effect.\n *\n * ```js\n * const params = {\n * \tshape: 1,\n * \tradius: 4,\n * \trotateR: Math.PI / 12,\n * \trotateB: Math.PI / 12 * 2,\n * \trotateG: Math.PI / 12 * 3,\n * \tscatter: 0,\n * \tblending: 1,\n * \tblendingMode: 1,\n * \tgreyscale: false,\n * \tdisable: false\n * };\n * const halftonePass = new HalftonePass( params );\n * composer.addPass( halftonePass );\n * ```\n *\n * @augments Pass\n * @three_import import { HalftonePass } from 'three/addons/postprocessing/HalftonePass.js';\n */\nclass HalftonePass extends Pass {\n\n\t/**\n\t * Constructs a new halftone pass.\n\t *\n\t * @param {Object} params - The halftone shader parameter.\n\t */\n\tconstructor( params ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The pass uniforms.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t \tthis.uniforms = UniformsUtils.clone( HalftoneShader.uniforms );\n\n\t\t/**\n\t\t * The pass material.\n\t\t *\n\t\t * @type {ShaderMaterial}\n\t\t */\n\t \tthis.material = new ShaderMaterial( {\n\t \t\tuniforms: this.uniforms,\n\t \t\tfragmentShader: HalftoneShader.fragmentShader,\n\t \t\tvertexShader: HalftoneShader.vertexShader\n\t \t} );\n\n\n\t\tfor ( const key in params ) {\n\n\t\t\tif ( params.hasOwnProperty( key ) && this.uniforms.hasOwnProperty( key ) ) {\n\n\t\t\t\tthis.uniforms[ key ].value = params[ key ];\n\n\t\t\t}\n\n\t\t}\n\n\t\t// internals\n\n\t\tthis._fsQuad = new FullScreenQuad( this.material );\n\n\t}\n\n\t/**\n\t * Performs the halftone pass.\n\t *\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\n\t * destination for the pass.\n\t * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\n\t * previous pass from this buffer.\n\t * @param {number} deltaTime - The delta time in seconds.\n\t * @param {boolean} maskActive - Whether masking is active or not.\n\t */\n\trender( renderer, writeBuffer, readBuffer/*, deltaTime, maskActive*/ ) {\n\n \t\tthis.material.uniforms[ 'tDiffuse' ].value = readBuffer.texture;\n\n \t\tif ( this.renderToScreen ) {\n\n \t\t\trenderer.setRenderTarget( null );\n \t\t\tthis._fsQuad.render( renderer );\n\n\t\t} else {\n\n \t\t\trenderer.setRenderTarget( writeBuffer );\n \t\t\tif ( this.clear ) renderer.clear();\n\t\t\tthis._fsQuad.render( renderer );\n\n\t\t}\n\n \t}\n\n\t/**\n\t * Sets the size of the pass.\n\t *\n\t * @param {number} width - The width to set.\n\t * @param {number} height - The height to set.\n\t */\n \tsetSize( width, height ) {\n\n \t\tthis.uniforms.width.value = width;\n \t\tthis.uniforms.height.value = height;\n\n \t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever the pass is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.material.dispose();\n\n\t\tthis._fsQuad.dispose();\n\n\t}\n\n}\n\nexport { HalftonePass };\n"],"mappings":"AAAA,SACCA,cAAc,EACdC,aAAa,QACP,OAAO;AACd,SAASC,IAAI,EAAEC,cAAc,QAAQ,WAAW;AAChD,SAASC,cAAc,QAAQ,8BAA8B;;AAE7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,SAASH,IAAI,CAAC;EAE/B;AACD;AACA;AACA;AACA;EACCI,WAAWA,CAAEC,MAAM,EAAG;IAErB,KAAK,CAAC,CAAC;;IAEP;AACF;AACA;AACA;AACA;IACG,IAAI,CAACC,QAAQ,GAAGP,aAAa,CAACQ,KAAK,CAAEL,cAAc,CAACI,QAAS,CAAC;;IAE/D;AACF;AACA;AACA;AACA;IACG,IAAI,CAACE,QAAQ,GAAG,IAAIV,cAAc,CAAE;MACnCQ,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBG,cAAc,EAAEP,cAAc,CAACO,cAAc;MAC7CC,YAAY,EAAER,cAAc,CAACQ;IAC9B,CAAE,CAAC;IAGJ,KAAM,MAAMC,GAAG,IAAIN,MAAM,EAAG;MAE3B,IAAKA,MAAM,CAACO,cAAc,CAAED,GAAI,CAAC,IAAI,IAAI,CAACL,QAAQ,CAACM,cAAc,CAAED,GAAI,CAAC,EAAG;QAE1E,IAAI,CAACL,QAAQ,CAAEK,GAAG,CAAE,CAACE,KAAK,GAAGR,MAAM,CAAEM,GAAG,CAAE;MAE3C;IAED;;IAEA;;IAEA,IAAI,CAACG,OAAO,GAAG,IAAIb,cAAc,CAAE,IAAI,CAACO,QAAS,CAAC;EAEnD;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCO,MAAMA,CAAEC,QAAQ,EAAEC,WAAW,EAAEC,UAAU,8BAA8B;IAErE,IAAI,CAACV,QAAQ,CAACF,QAAQ,CAAE,UAAU,CAAE,CAACO,KAAK,GAAGK,UAAU,CAACC,OAAO;IAE/D,IAAK,IAAI,CAACC,cAAc,EAAG;MAE1BJ,QAAQ,CAACK,eAAe,CAAE,IAAK,CAAC;MAChC,IAAI,CAACP,OAAO,CAACC,MAAM,CAAEC,QAAS,CAAC;IAEjC,CAAC,MAAM;MAELA,QAAQ,CAACK,eAAe,CAAEJ,WAAY,CAAC;MACvC,IAAK,IAAI,CAACK,KAAK,EAAGN,QAAQ,CAACM,KAAK,CAAC,CAAC;MACnC,IAAI,CAACR,OAAO,CAACC,MAAM,CAAEC,QAAS,CAAC;IAEhC;EAEA;;EAED;AACD;AACA;AACA;AACA;AACA;EACEO,OAAOA,CAAEC,KAAK,EAAEC,MAAM,EAAG;IAExB,IAAI,CAACnB,QAAQ,CAACkB,KAAK,CAACX,KAAK,GAAGW,KAAK;IACjC,IAAI,CAAClB,QAAQ,CAACmB,MAAM,CAACZ,KAAK,GAAGY,MAAM;EAEpC;;EAED;AACD;AACA;AACA;EACCC,OAAOA,CAAA,EAAG;IAET,IAAI,CAAClB,QAAQ,CAACkB,OAAO,CAAC,CAAC;IAEvB,IAAI,CAACZ,OAAO,CAACY,OAAO,CAAC,CAAC;EAEvB;AAED;AAEA,SAASvB,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}