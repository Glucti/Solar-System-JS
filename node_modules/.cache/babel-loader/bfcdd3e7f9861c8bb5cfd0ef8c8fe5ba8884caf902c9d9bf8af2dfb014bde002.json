{"ast":null,"code":"import { ShaderMaterial, UniformsUtils } from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\n\n/**\n * This pass can be used to render a texture over the entire screen.\n *\n * ```js\n * const texture = new THREE.TextureLoader().load( 'textures/2294472375_24a3b8ef46_o.jpg' );\n * texture.colorSpace = THREE.SRGBColorSpace;\n *\n * const texturePass = new TexturePass( texture );\n * composer.addPass( texturePass );\n * ```\n *\n * @augments Pass\n * @three_import import { TexturePass } from 'three/addons/postprocessing/TexturePass.js';\n */\nclass TexturePass extends Pass {\n  /**\n   * Constructs a new texture pass.\n   *\n   * @param {Texture} map - The texture to render.\n   * @param {number} [opacity=1] - The opacity.\n   */\n  constructor(map, opacity = 1) {\n    super();\n    const shader = CopyShader;\n\n    /**\n     * The texture to render.\n     *\n     * @type {Texture}\n     */\n    this.map = map;\n\n    /**\n     * The opacity.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.opacity = opacity;\n\n    /**\n     * Overwritten to disable the swap.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.needsSwap = false;\n\n    /**\n     * The pass uniforms.\n     *\n     * @type {Object}\n     */\n    this.uniforms = UniformsUtils.clone(shader.uniforms);\n\n    /**\n     * The pass material.\n     *\n     * @type {ShaderMaterial}\n     */\n    this.material = new ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader,\n      depthTest: false,\n      depthWrite: false,\n      premultipliedAlpha: true\n    });\n\n    // internals\n\n    this._fsQuad = new FullScreenQuad(null);\n  }\n\n  /**\n   * Performs the texture pass.\n   *\n   * @param {WebGLRenderer} renderer - The renderer.\n   * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\n   * destination for the pass.\n   * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\n   * previous pass from this buffer.\n   * @param {number} deltaTime - The delta time in seconds.\n   * @param {boolean} maskActive - Whether masking is active or not.\n   */\n  render(renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */) {\n    const oldAutoClear = renderer.autoClear;\n    renderer.autoClear = false;\n    this._fsQuad.material = this.material;\n    this.uniforms['opacity'].value = this.opacity;\n    this.uniforms['tDiffuse'].value = this.map;\n    this.material.transparent = this.opacity < 1.0;\n    renderer.setRenderTarget(this.renderToScreen ? null : readBuffer);\n    if (this.clear) renderer.clear();\n    this._fsQuad.render(renderer);\n    renderer.autoClear = oldAutoClear;\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever the pass is no longer used in your app.\n   */\n  dispose() {\n    this.material.dispose();\n    this._fsQuad.dispose();\n  }\n}\nexport { TexturePass };","map":{"version":3,"names":["ShaderMaterial","UniformsUtils","Pass","FullScreenQuad","CopyShader","TexturePass","constructor","map","opacity","shader","needsSwap","uniforms","clone","material","vertexShader","fragmentShader","depthTest","depthWrite","premultipliedAlpha","_fsQuad","render","renderer","writeBuffer","readBuffer","oldAutoClear","autoClear","value","transparent","setRenderTarget","renderToScreen","clear","dispose"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/postprocessing/TexturePass.js"],"sourcesContent":["import {\n\tShaderMaterial,\n\tUniformsUtils\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\n\n/**\n * This pass can be used to render a texture over the entire screen.\n *\n * ```js\n * const texture = new THREE.TextureLoader().load( 'textures/2294472375_24a3b8ef46_o.jpg' );\n * texture.colorSpace = THREE.SRGBColorSpace;\n *\n * const texturePass = new TexturePass( texture );\n * composer.addPass( texturePass );\n * ```\n *\n * @augments Pass\n * @three_import import { TexturePass } from 'three/addons/postprocessing/TexturePass.js';\n */\nclass TexturePass extends Pass {\n\n\t/**\n\t * Constructs a new texture pass.\n\t *\n\t * @param {Texture} map - The texture to render.\n\t * @param {number} [opacity=1] - The opacity.\n\t */\n\tconstructor( map, opacity = 1 ) {\n\n\t\tsuper();\n\n\t\tconst shader = CopyShader;\n\n\t\t/**\n\t\t * The texture to render.\n\t\t *\n\t\t * @type {Texture}\n\t\t */\n\t\tthis.map = map;\n\n\t\t/**\n\t\t * The opacity.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.opacity = opacity;\n\n\t\t/**\n\t\t * Overwritten to disable the swap.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.needsSwap = false;\n\n\t\t/**\n\t\t * The pass uniforms.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.uniforms = UniformsUtils.clone( shader.uniforms );\n\n\t\t/**\n\t\t * The pass material.\n\t\t *\n\t\t * @type {ShaderMaterial}\n\t\t */\n\t\tthis.material = new ShaderMaterial( {\n\n\t\t\tuniforms: this.uniforms,\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\tpremultipliedAlpha: true\n\n\t\t} );\n\n\t\t// internals\n\n\t\tthis._fsQuad = new FullScreenQuad( null );\n\n\t}\n\n\t/**\n\t * Performs the texture pass.\n\t *\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\n\t * destination for the pass.\n\t * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\n\t * previous pass from this buffer.\n\t * @param {number} deltaTime - The delta time in seconds.\n\t * @param {boolean} maskActive - Whether masking is active or not.\n\t */\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tconst oldAutoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\tthis._fsQuad.material = this.material;\n\n\t\tthis.uniforms[ 'opacity' ].value = this.opacity;\n\t\tthis.uniforms[ 'tDiffuse' ].value = this.map;\n\t\tthis.material.transparent = ( this.opacity < 1.0 );\n\n\t\trenderer.setRenderTarget( this.renderToScreen ? null : readBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\tthis._fsQuad.render( renderer );\n\n\t\trenderer.autoClear = oldAutoClear;\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever the pass is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.material.dispose();\n\t\tthis._fsQuad.dispose();\n\n\t}\n\n}\n\nexport { TexturePass };\n"],"mappings":"AAAA,SACCA,cAAc,EACdC,aAAa,QACP,OAAO;AACd,SAASC,IAAI,EAAEC,cAAc,QAAQ,WAAW;AAChD,SAASC,UAAU,QAAQ,0BAA0B;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,WAAW,SAASH,IAAI,CAAC;EAE9B;AACD;AACA;AACA;AACA;AACA;EACCI,WAAWA,CAAEC,GAAG,EAAEC,OAAO,GAAG,CAAC,EAAG;IAE/B,KAAK,CAAC,CAAC;IAEP,MAAMC,MAAM,GAAGL,UAAU;;IAEzB;AACF;AACA;AACA;AACA;IACE,IAAI,CAACG,GAAG,GAAGA,GAAG;;IAEd;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,OAAO,GAAGA,OAAO;;IAEtB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACE,SAAS,GAAG,KAAK;;IAEtB;AACF;AACA;AACA;AACA;IACE,IAAI,CAACC,QAAQ,GAAGV,aAAa,CAACW,KAAK,CAAEH,MAAM,CAACE,QAAS,CAAC;;IAEtD;AACF;AACA;AACA;AACA;IACE,IAAI,CAACE,QAAQ,GAAG,IAAIb,cAAc,CAAE;MAEnCW,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBG,YAAY,EAAEL,MAAM,CAACK,YAAY;MACjCC,cAAc,EAAEN,MAAM,CAACM,cAAc;MACrCC,SAAS,EAAE,KAAK;MAChBC,UAAU,EAAE,KAAK;MACjBC,kBAAkB,EAAE;IAErB,CAAE,CAAC;;IAEH;;IAEA,IAAI,CAACC,OAAO,GAAG,IAAIhB,cAAc,CAAE,IAAK,CAAC;EAE1C;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCiB,MAAMA,CAAEC,QAAQ,EAAEC,WAAW,EAAEC,UAAU,CAAC,8BAA+B;IAExE,MAAMC,YAAY,GAAGH,QAAQ,CAACI,SAAS;IACvCJ,QAAQ,CAACI,SAAS,GAAG,KAAK;IAE1B,IAAI,CAACN,OAAO,CAACN,QAAQ,GAAG,IAAI,CAACA,QAAQ;IAErC,IAAI,CAACF,QAAQ,CAAE,SAAS,CAAE,CAACe,KAAK,GAAG,IAAI,CAAClB,OAAO;IAC/C,IAAI,CAACG,QAAQ,CAAE,UAAU,CAAE,CAACe,KAAK,GAAG,IAAI,CAACnB,GAAG;IAC5C,IAAI,CAACM,QAAQ,CAACc,WAAW,GAAK,IAAI,CAACnB,OAAO,GAAG,GAAK;IAElDa,QAAQ,CAACO,eAAe,CAAE,IAAI,CAACC,cAAc,GAAG,IAAI,GAAGN,UAAW,CAAC;IACnE,IAAK,IAAI,CAACO,KAAK,EAAGT,QAAQ,CAACS,KAAK,CAAC,CAAC;IAClC,IAAI,CAACX,OAAO,CAACC,MAAM,CAAEC,QAAS,CAAC;IAE/BA,QAAQ,CAACI,SAAS,GAAGD,YAAY;EAElC;;EAEA;AACD;AACA;AACA;EACCO,OAAOA,CAAA,EAAG;IAET,IAAI,CAAClB,QAAQ,CAACkB,OAAO,CAAC,CAAC;IACvB,IAAI,CAACZ,OAAO,CAACY,OAAO,CAAC,CAAC;EAEvB;AAED;AAEA,SAAS1B,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}