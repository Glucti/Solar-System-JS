{"ast":null,"code":"import { ShaderMaterial, UniformsUtils } from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { FilmShader } from '../shaders/FilmShader.js';\n\n/**\n * This pass can be used to create a film grain effect.\n *\n * ```js\n * const filmPass = new FilmPass();\n * composer.addPass( filmPass );\n * ```\n *\n * @augments Pass\n * @three_import import { FilmPass } from 'three/addons/postprocessing/FilmPass.js';\n */\nclass FilmPass extends Pass {\n  /**\n   * Constructs a new film pass.\n   *\n   * @param {number} [intensity=0.5] - The grain intensity in the range `[0,1]` (0 = no effect, 1 = full effect).\n   * @param {boolean} [grayscale=false] - Whether to apply a grayscale effect or not.\n   */\n  constructor(intensity = 0.5, grayscale = false) {\n    super();\n    const shader = FilmShader;\n\n    /**\n     * The pass uniforms. Use this object if you want to update the\n     * `intensity` or `grayscale` values at runtime.\n     * ```js\n     * pass.uniforms.intensity.value = 1;\n     * pass.uniforms.grayscale.value = true;\n     * ```\n     *\n     * @type {Object}\n     */\n    this.uniforms = UniformsUtils.clone(shader.uniforms);\n\n    /**\n     * The pass material.\n     *\n     * @type {ShaderMaterial}\n     */\n    this.material = new ShaderMaterial({\n      name: shader.name,\n      uniforms: this.uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader\n    });\n    this.uniforms.intensity.value = intensity;\n    this.uniforms.grayscale.value = grayscale;\n\n    // internals\n\n    this._fsQuad = new FullScreenQuad(this.material);\n  }\n\n  /**\n   * Performs the film pass.\n   *\n   * @param {WebGLRenderer} renderer - The renderer.\n   * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\n   * destination for the pass.\n   * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\n   * previous pass from this buffer.\n   * @param {number} deltaTime - The delta time in seconds.\n   * @param {boolean} maskActive - Whether masking is active or not.\n   */\n  render(renderer, writeBuffer, readBuffer, deltaTime /*, maskActive */) {\n    this.uniforms['tDiffuse'].value = readBuffer.texture;\n    this.uniforms['time'].value += deltaTime;\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this._fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      this._fsQuad.render(renderer);\n    }\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever the pass is no longer used in your app.\n   */\n  dispose() {\n    this.material.dispose();\n    this._fsQuad.dispose();\n  }\n}\nexport { FilmPass };","map":{"version":3,"names":["ShaderMaterial","UniformsUtils","Pass","FullScreenQuad","FilmShader","FilmPass","constructor","intensity","grayscale","shader","uniforms","clone","material","name","vertexShader","fragmentShader","value","_fsQuad","render","renderer","writeBuffer","readBuffer","deltaTime","texture","renderToScreen","setRenderTarget","clear","dispose"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/postprocessing/FilmPass.js"],"sourcesContent":["import {\n\tShaderMaterial,\n\tUniformsUtils\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { FilmShader } from '../shaders/FilmShader.js';\n\n/**\n * This pass can be used to create a film grain effect.\n *\n * ```js\n * const filmPass = new FilmPass();\n * composer.addPass( filmPass );\n * ```\n *\n * @augments Pass\n * @three_import import { FilmPass } from 'three/addons/postprocessing/FilmPass.js';\n */\nclass FilmPass extends Pass {\n\n\t/**\n\t * Constructs a new film pass.\n\t *\n\t * @param {number} [intensity=0.5] - The grain intensity in the range `[0,1]` (0 = no effect, 1 = full effect).\n\t * @param {boolean} [grayscale=false] - Whether to apply a grayscale effect or not.\n\t */\n\tconstructor( intensity = 0.5, grayscale = false ) {\n\n\t\tsuper();\n\n\t\tconst shader = FilmShader;\n\n\t\t/**\n\t\t * The pass uniforms. Use this object if you want to update the\n\t\t * `intensity` or `grayscale` values at runtime.\n\t\t * ```js\n\t\t * pass.uniforms.intensity.value = 1;\n\t\t * pass.uniforms.grayscale.value = true;\n\t\t * ```\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.uniforms = UniformsUtils.clone( shader.uniforms );\n\n\t\t/**\n\t\t * The pass material.\n\t\t *\n\t\t * @type {ShaderMaterial}\n\t\t */\n\t\tthis.material = new ShaderMaterial( {\n\n\t\t\tname: shader.name,\n\t\t\tuniforms: this.uniforms,\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader\n\n\t\t} );\n\n\t\tthis.uniforms.intensity.value = intensity;\n\t\tthis.uniforms.grayscale.value = grayscale;\n\n\t\t// internals\n\n\t\tthis._fsQuad = new FullScreenQuad( this.material );\n\n\t}\n\n\t/**\n\t * Performs the film pass.\n\t *\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\n\t * destination for the pass.\n\t * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\n\t * previous pass from this buffer.\n\t * @param {number} deltaTime - The delta time in seconds.\n\t * @param {boolean} maskActive - Whether masking is active or not.\n\t */\n\trender( renderer, writeBuffer, readBuffer, deltaTime /*, maskActive */ ) {\n\n\t\tthis.uniforms[ 'tDiffuse' ].value = readBuffer.texture;\n\t\tthis.uniforms[ 'time' ].value += deltaTime;\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis._fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\tif ( this.clear ) renderer.clear();\n\t\t\tthis._fsQuad.render( renderer );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever the pass is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.material.dispose();\n\n\t\tthis._fsQuad.dispose();\n\n\t}\n\n}\n\nexport { FilmPass };\n"],"mappings":"AAAA,SACCA,cAAc,EACdC,aAAa,QACP,OAAO;AACd,SAASC,IAAI,EAAEC,cAAc,QAAQ,WAAW;AAChD,SAASC,UAAU,QAAQ,0BAA0B;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,QAAQ,SAASH,IAAI,CAAC;EAE3B;AACD;AACA;AACA;AACA;AACA;EACCI,WAAWA,CAAEC,SAAS,GAAG,GAAG,EAAEC,SAAS,GAAG,KAAK,EAAG;IAEjD,KAAK,CAAC,CAAC;IAEP,MAAMC,MAAM,GAAGL,UAAU;;IAEzB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACM,QAAQ,GAAGT,aAAa,CAACU,KAAK,CAAEF,MAAM,CAACC,QAAS,CAAC;;IAEtD;AACF;AACA;AACA;AACA;IACE,IAAI,CAACE,QAAQ,GAAG,IAAIZ,cAAc,CAAE;MAEnCa,IAAI,EAAEJ,MAAM,CAACI,IAAI;MACjBH,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBI,YAAY,EAAEL,MAAM,CAACK,YAAY;MACjCC,cAAc,EAAEN,MAAM,CAACM;IAExB,CAAE,CAAC;IAEH,IAAI,CAACL,QAAQ,CAACH,SAAS,CAACS,KAAK,GAAGT,SAAS;IACzC,IAAI,CAACG,QAAQ,CAACF,SAAS,CAACQ,KAAK,GAAGR,SAAS;;IAEzC;;IAEA,IAAI,CAACS,OAAO,GAAG,IAAId,cAAc,CAAE,IAAI,CAACS,QAAS,CAAC;EAEnD;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCM,MAAMA,CAAEC,QAAQ,EAAEC,WAAW,EAAEC,UAAU,EAAEC,SAAS,CAAC,mBAAoB;IAExE,IAAI,CAACZ,QAAQ,CAAE,UAAU,CAAE,CAACM,KAAK,GAAGK,UAAU,CAACE,OAAO;IACtD,IAAI,CAACb,QAAQ,CAAE,MAAM,CAAE,CAACM,KAAK,IAAIM,SAAS;IAE1C,IAAK,IAAI,CAACE,cAAc,EAAG;MAE1BL,QAAQ,CAACM,eAAe,CAAE,IAAK,CAAC;MAChC,IAAI,CAACR,OAAO,CAACC,MAAM,CAAEC,QAAS,CAAC;IAEhC,CAAC,MAAM;MAENA,QAAQ,CAACM,eAAe,CAAEL,WAAY,CAAC;MACvC,IAAK,IAAI,CAACM,KAAK,EAAGP,QAAQ,CAACO,KAAK,CAAC,CAAC;MAClC,IAAI,CAACT,OAAO,CAACC,MAAM,CAAEC,QAAS,CAAC;IAEhC;EAED;;EAEA;AACD;AACA;AACA;EACCQ,OAAOA,CAAA,EAAG;IAET,IAAI,CAACf,QAAQ,CAACe,OAAO,CAAC,CAAC;IAEvB,IAAI,CAACV,OAAO,CAACU,OAAO,CAAC,CAAC;EAEvB;AAED;AAEA,SAAStB,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}