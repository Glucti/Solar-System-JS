{"ast":null,"code":"import { Curve, Vector3 } from 'three';\n\n/**\n * A bunch of parametric curves\n *\n * Formulas collected from various sources\n * http://mathworld.wolfram.com/HeartCurve.html\n * http://en.wikipedia.org/wiki/Viviani%27s_curve\n * http://www.mi.sanu.ac.rs/vismath/taylorapril2011/Taylor.pdf\n * https://prideout.net/blog/old/blog/index.html@p=44.html\n */\n\n/**\n * A Granny Knot curve.\n *\n * @augments Curve\n * @three_import import { GrannyKnot } from 'three/addons/curves/CurveExtras.js';\n */\nclass GrannyKnot extends Curve {\n  /**\n   * This method returns a vector in 3D space for the given interpolation factor.\n   *\n   * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n   * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n   * @return {Vector3} The position on the curve.\n   */\n  getPoint(t, optionalTarget = new Vector3()) {\n    const point = optionalTarget;\n    t = 2 * Math.PI * t;\n    const x = -0.22 * Math.cos(t) - 1.28 * Math.sin(t) - 0.44 * Math.cos(3 * t) - 0.78 * Math.sin(3 * t);\n    const y = -0.1 * Math.cos(2 * t) - 0.27 * Math.sin(2 * t) + 0.38 * Math.cos(4 * t) + 0.46 * Math.sin(4 * t);\n    const z = 0.7 * Math.cos(3 * t) - 0.4 * Math.sin(3 * t);\n    return point.set(x, y, z).multiplyScalar(20);\n  }\n}\n\n/**\n * A heart curve.\n *\n * @augments Curve\n * @three_import import { HeartCurve } from 'three/addons/curves/CurveExtras.js';\n */\nclass HeartCurve extends Curve {\n  /**\n   * Constructs a new heart curve.\n   *\n   * @param {number} [scale=5] - The curve's scale.\n   */\n  constructor(scale = 5) {\n    super();\n\n    /**\n     * The curve's scale.\n     *\n     * @type {number}\n     * @default 5\n     */\n    this.scale = scale;\n  }\n\n  /**\n   * This method returns a vector in 3D space for the given interpolation factor.\n   *\n   * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n   * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n   * @return {Vector3} The position on the curve.\n   */\n  getPoint(t, optionalTarget = new Vector3()) {\n    const point = optionalTarget;\n    t *= 2 * Math.PI;\n    const x = 16 * Math.pow(Math.sin(t), 3);\n    const y = 13 * Math.cos(t) - 5 * Math.cos(2 * t) - 2 * Math.cos(3 * t) - Math.cos(4 * t);\n    const z = 0;\n    return point.set(x, y, z).multiplyScalar(this.scale);\n  }\n}\n\n/**\n * A Viviani curve.\n *\n * @augments Curve\n * @three_import import { VivianiCurve } from 'three/addons/curves/CurveExtras.js';\n */\nclass VivianiCurve extends Curve {\n  /**\n   * Constructs a new Viviani curve.\n   *\n   * @param {number} [scale=70] - The curve's scale.\n   */\n  constructor(scale = 70) {\n    super();\n\n    /**\n     * The curve's scale.\n     *\n     * @type {number}\n     * @default 70\n     */\n    this.scale = scale;\n  }\n\n  /**\n   * This method returns a vector in 3D space for the given interpolation factor.\n   *\n   * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n   * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n   * @return {Vector3} The position on the curve.\n   */\n  getPoint(t, optionalTarget = new Vector3()) {\n    const point = optionalTarget;\n    t = t * 4 * Math.PI; // normalized to 0..1\n    const a = this.scale / 2;\n    const x = a * (1 + Math.cos(t));\n    const y = a * Math.sin(t);\n    const z = 2 * a * Math.sin(t / 2);\n    return point.set(x, y, z);\n  }\n}\n\n/**\n * A knot curve.\n *\n * @augments Curve\n * @three_import import { KnotCurve } from 'three/addons/curves/CurveExtras.js';\n */\nclass KnotCurve extends Curve {\n  /**\n   * This method returns a vector in 3D space for the given interpolation factor.\n   *\n   * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n   * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n   * @return {Vector3} The position on the curve.\n   */\n  getPoint(t, optionalTarget = new Vector3()) {\n    const point = optionalTarget;\n    t *= 2 * Math.PI;\n    const R = 10;\n    const s = 50;\n    const x = s * Math.sin(t);\n    const y = Math.cos(t) * (R + s * Math.cos(t));\n    const z = Math.sin(t) * (R + s * Math.cos(t));\n    return point.set(x, y, z);\n  }\n}\n\n/**\n * A helix curve.\n *\n * @augments Curve\n * @three_import import { HelixCurve } from 'three/addons/curves/CurveExtras.js';\n */\nclass HelixCurve extends Curve {\n  /**\n   * This method returns a vector in 3D space for the given interpolation factor.\n   *\n   * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n   * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n   * @return {Vector3} The position on the curve.\n   */\n  getPoint(t, optionalTarget = new Vector3()) {\n    const point = optionalTarget;\n    const a = 30; // radius\n    const b = 150; // height\n\n    const t2 = 2 * Math.PI * t * b / 30;\n    const x = Math.cos(t2) * a;\n    const y = Math.sin(t2) * a;\n    const z = b * t;\n    return point.set(x, y, z);\n  }\n}\n\n/**\n * A Trefoil Knot.\n *\n * @augments Curve\n * @three_import import { TrefoilKnot } from 'three/addons/curves/CurveExtras.js';\n */\nclass TrefoilKnot extends Curve {\n  /**\n   * Constructs a new Trefoil Knot.\n   *\n   * @param {number} [scale=10] - The curve's scale.\n   */\n  constructor(scale = 10) {\n    super();\n\n    /**\n     * The curve's scale.\n     *\n     * @type {number}\n     * @default 10\n     */\n    this.scale = scale;\n  }\n\n  /**\n   * This method returns a vector in 3D space for the given interpolation factor.\n   *\n   * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n   * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n   * @return {Vector3} The position on the curve.\n   */\n  getPoint(t, optionalTarget = new Vector3()) {\n    const point = optionalTarget;\n    t *= Math.PI * 2;\n    const x = (2 + Math.cos(3 * t)) * Math.cos(2 * t);\n    const y = (2 + Math.cos(3 * t)) * Math.sin(2 * t);\n    const z = Math.sin(3 * t);\n    return point.set(x, y, z).multiplyScalar(this.scale);\n  }\n}\n\n/**\n * A torus knot.\n *\n * @augments Curve\n * @three_import import { TorusKnot } from 'three/addons/curves/CurveExtras.js';\n */\nclass TorusKnot extends Curve {\n  /**\n   * Constructs a new torus knot.\n   *\n   * @param {number} [scale=10] - The curve's scale.\n   */\n  constructor(scale = 10) {\n    super();\n\n    /**\n     * The curve's scale.\n     *\n     * @type {number}\n     * @default 10\n     */\n    this.scale = scale;\n  }\n\n  /**\n   * This method returns a vector in 3D space for the given interpolation factor.\n   *\n   * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n   * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n   * @return {Vector3} The position on the curve.\n   */\n  getPoint(t, optionalTarget = new Vector3()) {\n    const point = optionalTarget;\n    const p = 3;\n    const q = 4;\n    t *= Math.PI * 2;\n    const x = (2 + Math.cos(q * t)) * Math.cos(p * t);\n    const y = (2 + Math.cos(q * t)) * Math.sin(p * t);\n    const z = Math.sin(q * t);\n    return point.set(x, y, z).multiplyScalar(this.scale);\n  }\n}\n\n/**\n * A Cinquefoil Knot.\n *\n * @augments Curve\n * @three_import import { CinquefoilKnot } from 'three/addons/curves/CurveExtras.js';\n */\nclass CinquefoilKnot extends Curve {\n  /**\n   * Constructs a new Cinquefoil Knot.\n   *\n   * @param {number} [scale=10] - The curve's scale.\n   */\n  constructor(scale = 10) {\n    super();\n\n    /**\n     * The curve's scale.\n     *\n     * @type {number}\n     * @default 10\n     */\n    this.scale = scale;\n  }\n\n  /**\n   * This method returns a vector in 3D space for the given interpolation factor.\n   *\n   * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n   * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n   * @return {Vector3} The position on the curve.\n   */\n  getPoint(t, optionalTarget = new Vector3()) {\n    const point = optionalTarget;\n    const p = 2;\n    const q = 5;\n    t *= Math.PI * 2;\n    const x = (2 + Math.cos(q * t)) * Math.cos(p * t);\n    const y = (2 + Math.cos(q * t)) * Math.sin(p * t);\n    const z = Math.sin(q * t);\n    return point.set(x, y, z).multiplyScalar(this.scale);\n  }\n}\n\n/**\n * A Trefoil Polynomial Knot.\n *\n * @augments Curve\n * @three_import import { TrefoilPolynomialKnot } from 'three/addons/curves/CurveExtras.js';\n */\nclass TrefoilPolynomialKnot extends Curve {\n  /**\n   * Constructs a new Trefoil Polynomial Knot.\n   *\n   * @param {number} [scale=10] - The curve's scale.\n   */\n  constructor(scale = 10) {\n    super();\n\n    /**\n     * The curve's scale.\n     *\n     * @type {number}\n     * @default 10\n     */\n    this.scale = scale;\n  }\n\n  /**\n   * This method returns a vector in 3D space for the given interpolation factor.\n   *\n   * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n   * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n   * @return {Vector3} The position on the curve.\n   */\n  getPoint(t, optionalTarget = new Vector3()) {\n    const point = optionalTarget;\n    t = t * 4 - 2;\n    const x = Math.pow(t, 3) - 3 * t;\n    const y = Math.pow(t, 4) - 4 * t * t;\n    const z = 1 / 5 * Math.pow(t, 5) - 2 * t;\n    return point.set(x, y, z).multiplyScalar(this.scale);\n  }\n}\nfunction scaleTo(x, y, t) {\n  const r = y - x;\n  return t * r + x;\n}\n\n/**\n * A Figure Eight Polynomial Knot.\n *\n * @augments Curve\n * @three_import import { FigureEightPolynomialKnot } from 'three/addons/curves/CurveExtras.js';\n */\nclass FigureEightPolynomialKnot extends Curve {\n  /**\n   * Constructs a new Figure Eight Polynomial Knot.\n   *\n   * @param {number} [scale=1] - The curve's scale.\n   */\n  constructor(scale = 1) {\n    super();\n\n    /**\n     * The curve's scale.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.scale = scale;\n  }\n\n  /**\n   * This method returns a vector in 3D space for the given interpolation factor.\n   *\n   * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n   * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n   * @return {Vector3} The position on the curve.\n   */\n  getPoint(t, optionalTarget = new Vector3()) {\n    const point = optionalTarget;\n    t = scaleTo(-4, 4, t);\n    const x = 2 / 5 * t * (t * t - 7) * (t * t - 10);\n    const y = Math.pow(t, 4) - 13 * t * t;\n    const z = 1 / 10 * t * (t * t - 4) * (t * t - 9) * (t * t - 12);\n    return point.set(x, y, z).multiplyScalar(this.scale);\n  }\n}\n\n/**\n * A Decorated Torus Knot 4a.\n *\n * @augments Curve\n * @three_import import { DecoratedTorusKnot4a } from 'three/addons/curves/CurveExtras.js';\n */\nclass DecoratedTorusKnot4a extends Curve {\n  /**\n   * Constructs a new Decorated Torus Knot 4a.\n   *\n   * @param {number} [scale=1] - The curve's scale.\n   */\n  constructor(scale = 40) {\n    super();\n\n    /**\n     * The curve's scale.\n     *\n     * @type {number}\n     * @default 40\n     */\n    this.scale = scale;\n  }\n\n  /**\n   * This method returns a vector in 3D space for the given interpolation factor.\n   *\n   * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n   * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n   * @return {Vector3} The position on the curve.\n   */\n  getPoint(t, optionalTarget = new Vector3()) {\n    const point = optionalTarget;\n    t *= Math.PI * 2;\n    const x = Math.cos(2 * t) * (1 + 0.6 * (Math.cos(5 * t) + 0.75 * Math.cos(10 * t)));\n    const y = Math.sin(2 * t) * (1 + 0.6 * (Math.cos(5 * t) + 0.75 * Math.cos(10 * t)));\n    const z = 0.35 * Math.sin(5 * t);\n    return point.set(x, y, z).multiplyScalar(this.scale);\n  }\n}\n\n/**\n * A Decorated Torus Knot 4b.\n *\n * @augments Curve\n * @three_import import { DecoratedTorusKnot4b } from 'three/addons/curves/CurveExtras.js';\n */\nclass DecoratedTorusKnot4b extends Curve {\n  /**\n   * Constructs a new Decorated Torus Knot 4b.\n   *\n   * @param {number} [scale=1] - The curve's scale.\n   */\n  constructor(scale = 40) {\n    super();\n\n    /**\n     * The curve's scale.\n     *\n     * @type {number}\n     * @default 40\n     */\n    this.scale = scale;\n  }\n\n  /**\n   * This method returns a vector in 3D space for the given interpolation factor.\n   *\n   * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n   * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n   * @return {Vector3} The position on the curve.\n   */\n  getPoint(t, optionalTarget = new Vector3()) {\n    const point = optionalTarget;\n    const fi = t * Math.PI * 2;\n    const x = Math.cos(2 * fi) * (1 + 0.45 * Math.cos(3 * fi) + 0.4 * Math.cos(9 * fi));\n    const y = Math.sin(2 * fi) * (1 + 0.45 * Math.cos(3 * fi) + 0.4 * Math.cos(9 * fi));\n    const z = 0.2 * Math.sin(9 * fi);\n    return point.set(x, y, z).multiplyScalar(this.scale);\n  }\n}\n\n/**\n * A Decorated Torus Knot 5a.\n *\n * @augments Curve\n * @three_import import { DecoratedTorusKnot5a } from 'three/addons/curves/CurveExtras.js';\n */\nclass DecoratedTorusKnot5a extends Curve {\n  /**\n   * Constructs a new Decorated Torus Knot 5a.\n   *\n   * @param {number} [scale=1] - The curve's scale.\n   */\n  constructor(scale = 40) {\n    super();\n\n    /**\n     * The curve's scale.\n     *\n     * @type {number}\n     * @default 40\n     */\n    this.scale = scale;\n  }\n\n  /**\n   * This method returns a vector in 3D space for the given interpolation factor.\n   *\n   * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n   * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n   * @return {Vector3} The position on the curve.\n   */\n  getPoint(t, optionalTarget = new Vector3()) {\n    const point = optionalTarget;\n    const fi = t * Math.PI * 2;\n    const x = Math.cos(3 * fi) * (1 + 0.3 * Math.cos(5 * fi) + 0.5 * Math.cos(10 * fi));\n    const y = Math.sin(3 * fi) * (1 + 0.3 * Math.cos(5 * fi) + 0.5 * Math.cos(10 * fi));\n    const z = 0.2 * Math.sin(20 * fi);\n    return point.set(x, y, z).multiplyScalar(this.scale);\n  }\n}\n\n/**\n * A Decorated Torus Knot 5c.\n *\n * @augments Curve\n * @three_import import { DecoratedTorusKnot5c } from 'three/addons/curves/CurveExtras.js';\n */\nclass DecoratedTorusKnot5c extends Curve {\n  /**\n   * Constructs a new Decorated Torus Knot 5c.\n   *\n   * @param {number} [scale=1] - The curve's scale.\n   */\n  constructor(scale = 40) {\n    super();\n\n    /**\n     * The curve's scale.\n     *\n     * @type {number}\n     * @default 40\n     */\n    this.scale = scale;\n  }\n\n  /**\n   * This method returns a vector in 3D space for the given interpolation factor.\n   *\n   * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n   * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n   * @return {Vector3} The position on the curve.\n   */\n  getPoint(t, optionalTarget = new Vector3()) {\n    const point = optionalTarget;\n    const fi = t * Math.PI * 2;\n    const x = Math.cos(4 * fi) * (1 + 0.5 * (Math.cos(5 * fi) + 0.4 * Math.cos(20 * fi)));\n    const y = Math.sin(4 * fi) * (1 + 0.5 * (Math.cos(5 * fi) + 0.4 * Math.cos(20 * fi)));\n    const z = 0.35 * Math.sin(15 * fi);\n    return point.set(x, y, z).multiplyScalar(this.scale);\n  }\n}\nexport { GrannyKnot, HeartCurve, VivianiCurve, KnotCurve, HelixCurve, TrefoilKnot, TorusKnot, CinquefoilKnot, TrefoilPolynomialKnot, FigureEightPolynomialKnot, DecoratedTorusKnot4a, DecoratedTorusKnot4b, DecoratedTorusKnot5a, DecoratedTorusKnot5c };","map":{"version":3,"names":["Curve","Vector3","GrannyKnot","getPoint","t","optionalTarget","point","Math","PI","x","cos","sin","y","z","set","multiplyScalar","HeartCurve","constructor","scale","pow","VivianiCurve","a","KnotCurve","R","s","HelixCurve","b","t2","TrefoilKnot","TorusKnot","p","q","CinquefoilKnot","TrefoilPolynomialKnot","scaleTo","r","FigureEightPolynomialKnot","DecoratedTorusKnot4a","DecoratedTorusKnot4b","fi","DecoratedTorusKnot5a","DecoratedTorusKnot5c"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/curves/CurveExtras.js"],"sourcesContent":["import {\n\tCurve,\n\tVector3\n} from 'three';\n\n/**\n * A bunch of parametric curves\n *\n * Formulas collected from various sources\n * http://mathworld.wolfram.com/HeartCurve.html\n * http://en.wikipedia.org/wiki/Viviani%27s_curve\n * http://www.mi.sanu.ac.rs/vismath/taylorapril2011/Taylor.pdf\n * https://prideout.net/blog/old/blog/index.html@p=44.html\n */\n\n/**\n * A Granny Knot curve.\n *\n * @augments Curve\n * @three_import import { GrannyKnot } from 'three/addons/curves/CurveExtras.js';\n */\nclass GrannyKnot extends Curve {\n\n\t/**\n\t * This method returns a vector in 3D space for the given interpolation factor.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector3} The position on the curve.\n\t */\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tt = 2 * Math.PI * t;\n\n\t\tconst x = - 0.22 * Math.cos( t ) - 1.28 * Math.sin( t ) - 0.44 * Math.cos( 3 * t ) - 0.78 * Math.sin( 3 * t );\n\t\tconst y = - 0.1 * Math.cos( 2 * t ) - 0.27 * Math.sin( 2 * t ) + 0.38 * Math.cos( 4 * t ) + 0.46 * Math.sin( 4 * t );\n\t\tconst z = 0.7 * Math.cos( 3 * t ) - 0.4 * Math.sin( 3 * t );\n\n\t\treturn point.set( x, y, z ).multiplyScalar( 20 );\n\n\t}\n\n}\n\n/**\n * A heart curve.\n *\n * @augments Curve\n * @three_import import { HeartCurve } from 'three/addons/curves/CurveExtras.js';\n */\nclass HeartCurve extends Curve {\n\n\t/**\n\t * Constructs a new heart curve.\n\t *\n\t * @param {number} [scale=5] - The curve's scale.\n\t */\n\tconstructor( scale = 5 ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The curve's scale.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 5\n\t\t */\n\t\tthis.scale = scale;\n\n\t}\n\n\t/**\n\t * This method returns a vector in 3D space for the given interpolation factor.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector3} The position on the curve.\n\t */\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tt *= 2 * Math.PI;\n\n\t\tconst x = 16 * Math.pow( Math.sin( t ), 3 );\n\t\tconst y = 13 * Math.cos( t ) - 5 * Math.cos( 2 * t ) - 2 * Math.cos( 3 * t ) - Math.cos( 4 * t );\n\t\tconst z = 0;\n\n\t\treturn point.set( x, y, z ).multiplyScalar( this.scale );\n\n\t}\n\n}\n\n/**\n * A Viviani curve.\n *\n * @augments Curve\n * @three_import import { VivianiCurve } from 'three/addons/curves/CurveExtras.js';\n */\nclass VivianiCurve extends Curve {\n\n\t/**\n\t * Constructs a new Viviani curve.\n\t *\n\t * @param {number} [scale=70] - The curve's scale.\n\t */\n\tconstructor( scale = 70 ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The curve's scale.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 70\n\t\t */\n\t\tthis.scale = scale;\n\n\t}\n\n\t/**\n\t * This method returns a vector in 3D space for the given interpolation factor.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector3} The position on the curve.\n\t */\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tt = t * 4 * Math.PI; // normalized to 0..1\n\t\tconst a = this.scale / 2;\n\n\t\tconst x = a * ( 1 + Math.cos( t ) );\n\t\tconst y = a * Math.sin( t );\n\t\tconst z = 2 * a * Math.sin( t / 2 );\n\n\t\treturn point.set( x, y, z );\n\n\t}\n\n}\n\n/**\n * A knot curve.\n *\n * @augments Curve\n * @three_import import { KnotCurve } from 'three/addons/curves/CurveExtras.js';\n */\nclass KnotCurve extends Curve {\n\n\t/**\n\t * This method returns a vector in 3D space for the given interpolation factor.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector3} The position on the curve.\n\t */\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tt *= 2 * Math.PI;\n\n\t\tconst R = 10;\n\t\tconst s = 50;\n\n\t\tconst x = s * Math.sin( t );\n\t\tconst y = Math.cos( t ) * ( R + s * Math.cos( t ) );\n\t\tconst z = Math.sin( t ) * ( R + s * Math.cos( t ) );\n\n\t\treturn point.set( x, y, z );\n\n\t}\n\n}\n\n/**\n * A helix curve.\n *\n * @augments Curve\n * @three_import import { HelixCurve } from 'three/addons/curves/CurveExtras.js';\n */\nclass HelixCurve extends Curve {\n\n\t/**\n\t * This method returns a vector in 3D space for the given interpolation factor.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector3} The position on the curve.\n\t */\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst a = 30; // radius\n\t\tconst b = 150; // height\n\n\t\tconst t2 = 2 * Math.PI * t * b / 30;\n\n\t\tconst x = Math.cos( t2 ) * a;\n\t\tconst y = Math.sin( t2 ) * a;\n\t\tconst z = b * t;\n\n\t\treturn point.set( x, y, z );\n\n\t}\n\n}\n\n/**\n * A Trefoil Knot.\n *\n * @augments Curve\n * @three_import import { TrefoilKnot } from 'three/addons/curves/CurveExtras.js';\n */\nclass TrefoilKnot extends Curve {\n\n\t/**\n\t * Constructs a new Trefoil Knot.\n\t *\n\t * @param {number} [scale=10] - The curve's scale.\n\t */\n\tconstructor( scale = 10 ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The curve's scale.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 10\n\t\t */\n\t\tthis.scale = scale;\n\n\t}\n\n\t/**\n\t * This method returns a vector in 3D space for the given interpolation factor.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector3} The position on the curve.\n\t */\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tt *= Math.PI * 2;\n\n\t\tconst x = ( 2 + Math.cos( 3 * t ) ) * Math.cos( 2 * t );\n\t\tconst y = ( 2 + Math.cos( 3 * t ) ) * Math.sin( 2 * t );\n\t\tconst z = Math.sin( 3 * t );\n\n\t\treturn point.set( x, y, z ).multiplyScalar( this.scale );\n\n\t}\n\n}\n\n/**\n * A torus knot.\n *\n * @augments Curve\n * @three_import import { TorusKnot } from 'three/addons/curves/CurveExtras.js';\n */\nclass TorusKnot extends Curve {\n\n\t/**\n\t * Constructs a new torus knot.\n\t *\n\t * @param {number} [scale=10] - The curve's scale.\n\t */\n\tconstructor( scale = 10 ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The curve's scale.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 10\n\t\t */\n\t\tthis.scale = scale;\n\n\t}\n\n\t/**\n\t * This method returns a vector in 3D space for the given interpolation factor.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector3} The position on the curve.\n\t */\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst p = 3;\n\t\tconst q = 4;\n\n\t\tt *= Math.PI * 2;\n\n\t\tconst x = ( 2 + Math.cos( q * t ) ) * Math.cos( p * t );\n\t\tconst y = ( 2 + Math.cos( q * t ) ) * Math.sin( p * t );\n\t\tconst z = Math.sin( q * t );\n\n\t\treturn point.set( x, y, z ).multiplyScalar( this.scale );\n\n\t}\n\n}\n\n/**\n * A Cinquefoil Knot.\n *\n * @augments Curve\n * @three_import import { CinquefoilKnot } from 'three/addons/curves/CurveExtras.js';\n */\nclass CinquefoilKnot extends Curve {\n\n\t/**\n\t * Constructs a new Cinquefoil Knot.\n\t *\n\t * @param {number} [scale=10] - The curve's scale.\n\t */\n\tconstructor( scale = 10 ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The curve's scale.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 10\n\t\t */\n\t\tthis.scale = scale;\n\n\t}\n\n\t/**\n\t * This method returns a vector in 3D space for the given interpolation factor.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector3} The position on the curve.\n\t */\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst p = 2;\n\t\tconst q = 5;\n\n\t\tt *= Math.PI * 2;\n\n\t\tconst x = ( 2 + Math.cos( q * t ) ) * Math.cos( p * t );\n\t\tconst y = ( 2 + Math.cos( q * t ) ) * Math.sin( p * t );\n\t\tconst z = Math.sin( q * t );\n\n\t\treturn point.set( x, y, z ).multiplyScalar( this.scale );\n\n\t}\n\n}\n\n/**\n * A Trefoil Polynomial Knot.\n *\n * @augments Curve\n * @three_import import { TrefoilPolynomialKnot } from 'three/addons/curves/CurveExtras.js';\n */\nclass TrefoilPolynomialKnot extends Curve {\n\n\t/**\n\t * Constructs a new Trefoil Polynomial Knot.\n\t *\n\t * @param {number} [scale=10] - The curve's scale.\n\t */\n\tconstructor( scale = 10 ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The curve's scale.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 10\n\t\t */\n\t\tthis.scale = scale;\n\n\t}\n\n\t/**\n\t * This method returns a vector in 3D space for the given interpolation factor.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector3} The position on the curve.\n\t */\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tt = t * 4 - 2;\n\n\t\tconst x = Math.pow( t, 3 ) - 3 * t;\n\t\tconst y = Math.pow( t, 4 ) - 4 * t * t;\n\t\tconst z = 1 / 5 * Math.pow( t, 5 ) - 2 * t;\n\n\t\treturn point.set( x, y, z ).multiplyScalar( this.scale );\n\n\t}\n\n}\n\nfunction scaleTo( x, y, t ) {\n\n\tconst r = y - x;\n\treturn t * r + x;\n\n}\n\n/**\n * A Figure Eight Polynomial Knot.\n *\n * @augments Curve\n * @three_import import { FigureEightPolynomialKnot } from 'three/addons/curves/CurveExtras.js';\n */\nclass FigureEightPolynomialKnot extends Curve {\n\n\t/**\n\t * Constructs a new Figure Eight Polynomial Knot.\n\t *\n\t * @param {number} [scale=1] - The curve's scale.\n\t */\n\tconstructor( scale = 1 ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The curve's scale.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.scale = scale;\n\n\t}\n\n\t/**\n\t * This method returns a vector in 3D space for the given interpolation factor.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector3} The position on the curve.\n\t */\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tt = scaleTo( - 4, 4, t );\n\n\t\tconst x = 2 / 5 * t * ( t * t - 7 ) * ( t * t - 10 );\n\t\tconst y = Math.pow( t, 4 ) - 13 * t * t;\n\t\tconst z = 1 / 10 * t * ( t * t - 4 ) * ( t * t - 9 ) * ( t * t - 12 );\n\n\t\treturn point.set( x, y, z ).multiplyScalar( this.scale );\n\n\t}\n\n}\n\n/**\n * A Decorated Torus Knot 4a.\n *\n * @augments Curve\n * @three_import import { DecoratedTorusKnot4a } from 'three/addons/curves/CurveExtras.js';\n */\nclass DecoratedTorusKnot4a extends Curve {\n\n\t/**\n\t * Constructs a new Decorated Torus Knot 4a.\n\t *\n\t * @param {number} [scale=1] - The curve's scale.\n\t */\n\tconstructor( scale = 40 ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The curve's scale.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 40\n\t\t */\n\t\tthis.scale = scale;\n\n\t}\n\n\t/**\n\t * This method returns a vector in 3D space for the given interpolation factor.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector3} The position on the curve.\n\t */\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tt *= Math.PI * 2;\n\n\t\tconst x = Math.cos( 2 * t ) * ( 1 + 0.6 * ( Math.cos( 5 * t ) + 0.75 * Math.cos( 10 * t ) ) );\n\t\tconst y = Math.sin( 2 * t ) * ( 1 + 0.6 * ( Math.cos( 5 * t ) + 0.75 * Math.cos( 10 * t ) ) );\n\t\tconst z = 0.35 * Math.sin( 5 * t );\n\n\t\treturn point.set( x, y, z ).multiplyScalar( this.scale );\n\n\t}\n\n}\n\n/**\n * A Decorated Torus Knot 4b.\n *\n * @augments Curve\n * @three_import import { DecoratedTorusKnot4b } from 'three/addons/curves/CurveExtras.js';\n */\nclass DecoratedTorusKnot4b extends Curve {\n\n\t/**\n\t * Constructs a new Decorated Torus Knot 4b.\n\t *\n\t * @param {number} [scale=1] - The curve's scale.\n\t */\n\tconstructor( scale = 40 ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The curve's scale.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 40\n\t\t */\n\t\tthis.scale = scale;\n\n\t}\n\n\t/**\n\t * This method returns a vector in 3D space for the given interpolation factor.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector3} The position on the curve.\n\t */\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst fi = t * Math.PI * 2;\n\n\t\tconst x = Math.cos( 2 * fi ) * ( 1 + 0.45 * Math.cos( 3 * fi ) + 0.4 * Math.cos( 9 * fi ) );\n\t\tconst y = Math.sin( 2 * fi ) * ( 1 + 0.45 * Math.cos( 3 * fi ) + 0.4 * Math.cos( 9 * fi ) );\n\t\tconst z = 0.2 * Math.sin( 9 * fi );\n\n\t\treturn point.set( x, y, z ).multiplyScalar( this.scale );\n\n\t}\n\n}\n\n/**\n * A Decorated Torus Knot 5a.\n *\n * @augments Curve\n * @three_import import { DecoratedTorusKnot5a } from 'three/addons/curves/CurveExtras.js';\n */\nclass DecoratedTorusKnot5a extends Curve {\n\n\t/**\n\t * Constructs a new Decorated Torus Knot 5a.\n\t *\n\t * @param {number} [scale=1] - The curve's scale.\n\t */\n\tconstructor( scale = 40 ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The curve's scale.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 40\n\t\t */\n\t\tthis.scale = scale;\n\n\t}\n\n\t/**\n\t * This method returns a vector in 3D space for the given interpolation factor.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector3} The position on the curve.\n\t */\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst fi = t * Math.PI * 2;\n\n\t\tconst x = Math.cos( 3 * fi ) * ( 1 + 0.3 * Math.cos( 5 * fi ) + 0.5 * Math.cos( 10 * fi ) );\n\t\tconst y = Math.sin( 3 * fi ) * ( 1 + 0.3 * Math.cos( 5 * fi ) + 0.5 * Math.cos( 10 * fi ) );\n\t\tconst z = 0.2 * Math.sin( 20 * fi );\n\n\t\treturn point.set( x, y, z ).multiplyScalar( this.scale );\n\n\t}\n\n}\n\n/**\n * A Decorated Torus Knot 5c.\n *\n * @augments Curve\n * @three_import import { DecoratedTorusKnot5c } from 'three/addons/curves/CurveExtras.js';\n */\nclass DecoratedTorusKnot5c extends Curve {\n\n\t/**\n\t * Constructs a new Decorated Torus Knot 5c.\n\t *\n\t * @param {number} [scale=1] - The curve's scale.\n\t */\n\tconstructor( scale = 40 ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The curve's scale.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 40\n\t\t */\n\t\tthis.scale = scale;\n\n\t}\n\n\t/**\n\t * This method returns a vector in 3D space for the given interpolation factor.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector3} The position on the curve.\n\t */\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst fi = t * Math.PI * 2;\n\n\t\tconst x = Math.cos( 4 * fi ) * ( 1 + 0.5 * ( Math.cos( 5 * fi ) + 0.4 * Math.cos( 20 * fi ) ) );\n\t\tconst y = Math.sin( 4 * fi ) * ( 1 + 0.5 * ( Math.cos( 5 * fi ) + 0.4 * Math.cos( 20 * fi ) ) );\n\t\tconst z = 0.35 * Math.sin( 15 * fi );\n\n\t\treturn point.set( x, y, z ).multiplyScalar( this.scale );\n\n\t}\n\n}\n\nexport {\n\tGrannyKnot,\n\tHeartCurve,\n\tVivianiCurve,\n\tKnotCurve,\n\tHelixCurve,\n\tTrefoilKnot,\n\tTorusKnot,\n\tCinquefoilKnot,\n\tTrefoilPolynomialKnot,\n\tFigureEightPolynomialKnot,\n\tDecoratedTorusKnot4a,\n\tDecoratedTorusKnot4b,\n\tDecoratedTorusKnot5a,\n\tDecoratedTorusKnot5c\n};\n"],"mappings":"AAAA,SACCA,KAAK,EACLC,OAAO,QACD,OAAO;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,SAASF,KAAK,CAAC;EAE9B;AACD;AACA;AACA;AACA;AACA;AACA;EACCG,QAAQA,CAAEC,CAAC,EAAEC,cAAc,GAAG,IAAIJ,OAAO,CAAC,CAAC,EAAG;IAE7C,MAAMK,KAAK,GAAGD,cAAc;IAE5BD,CAAC,GAAG,CAAC,GAAGG,IAAI,CAACC,EAAE,GAAGJ,CAAC;IAEnB,MAAMK,CAAC,GAAG,CAAE,IAAI,GAAGF,IAAI,CAACG,GAAG,CAAEN,CAAE,CAAC,GAAG,IAAI,GAAGG,IAAI,CAACI,GAAG,CAAEP,CAAE,CAAC,GAAG,IAAI,GAAGG,IAAI,CAACG,GAAG,CAAE,CAAC,GAAGN,CAAE,CAAC,GAAG,IAAI,GAAGG,IAAI,CAACI,GAAG,CAAE,CAAC,GAAGP,CAAE,CAAC;IAC7G,MAAMQ,CAAC,GAAG,CAAE,GAAG,GAAGL,IAAI,CAACG,GAAG,CAAE,CAAC,GAAGN,CAAE,CAAC,GAAG,IAAI,GAAGG,IAAI,CAACI,GAAG,CAAE,CAAC,GAAGP,CAAE,CAAC,GAAG,IAAI,GAAGG,IAAI,CAACG,GAAG,CAAE,CAAC,GAAGN,CAAE,CAAC,GAAG,IAAI,GAAGG,IAAI,CAACI,GAAG,CAAE,CAAC,GAAGP,CAAE,CAAC;IACpH,MAAMS,CAAC,GAAG,GAAG,GAAGN,IAAI,CAACG,GAAG,CAAE,CAAC,GAAGN,CAAE,CAAC,GAAG,GAAG,GAAGG,IAAI,CAACI,GAAG,CAAE,CAAC,GAAGP,CAAE,CAAC;IAE3D,OAAOE,KAAK,CAACQ,GAAG,CAAEL,CAAC,EAAEG,CAAC,EAAEC,CAAE,CAAC,CAACE,cAAc,CAAE,EAAG,CAAC;EAEjD;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,SAAShB,KAAK,CAAC;EAE9B;AACD;AACA;AACA;AACA;EACCiB,WAAWA,CAAEC,KAAK,GAAG,CAAC,EAAG;IAExB,KAAK,CAAC,CAAC;;IAEP;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACA,KAAK,GAAGA,KAAK;EAEnB;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;EACCf,QAAQA,CAAEC,CAAC,EAAEC,cAAc,GAAG,IAAIJ,OAAO,CAAC,CAAC,EAAG;IAE7C,MAAMK,KAAK,GAAGD,cAAc;IAE5BD,CAAC,IAAI,CAAC,GAAGG,IAAI,CAACC,EAAE;IAEhB,MAAMC,CAAC,GAAG,EAAE,GAAGF,IAAI,CAACY,GAAG,CAAEZ,IAAI,CAACI,GAAG,CAAEP,CAAE,CAAC,EAAE,CAAE,CAAC;IAC3C,MAAMQ,CAAC,GAAG,EAAE,GAAGL,IAAI,CAACG,GAAG,CAAEN,CAAE,CAAC,GAAG,CAAC,GAAGG,IAAI,CAACG,GAAG,CAAE,CAAC,GAAGN,CAAE,CAAC,GAAG,CAAC,GAAGG,IAAI,CAACG,GAAG,CAAE,CAAC,GAAGN,CAAE,CAAC,GAAGG,IAAI,CAACG,GAAG,CAAE,CAAC,GAAGN,CAAE,CAAC;IAChG,MAAMS,CAAC,GAAG,CAAC;IAEX,OAAOP,KAAK,CAACQ,GAAG,CAAEL,CAAC,EAAEG,CAAC,EAAEC,CAAE,CAAC,CAACE,cAAc,CAAE,IAAI,CAACG,KAAM,CAAC;EAEzD;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,YAAY,SAASpB,KAAK,CAAC;EAEhC;AACD;AACA;AACA;AACA;EACCiB,WAAWA,CAAEC,KAAK,GAAG,EAAE,EAAG;IAEzB,KAAK,CAAC,CAAC;;IAEP;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACA,KAAK,GAAGA,KAAK;EAEnB;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;EACCf,QAAQA,CAAEC,CAAC,EAAEC,cAAc,GAAG,IAAIJ,OAAO,CAAC,CAAC,EAAG;IAE7C,MAAMK,KAAK,GAAGD,cAAc;IAE5BD,CAAC,GAAGA,CAAC,GAAG,CAAC,GAAGG,IAAI,CAACC,EAAE,CAAC,CAAC;IACrB,MAAMa,CAAC,GAAG,IAAI,CAACH,KAAK,GAAG,CAAC;IAExB,MAAMT,CAAC,GAAGY,CAAC,IAAK,CAAC,GAAGd,IAAI,CAACG,GAAG,CAAEN,CAAE,CAAC,CAAE;IACnC,MAAMQ,CAAC,GAAGS,CAAC,GAAGd,IAAI,CAACI,GAAG,CAAEP,CAAE,CAAC;IAC3B,MAAMS,CAAC,GAAG,CAAC,GAAGQ,CAAC,GAAGd,IAAI,CAACI,GAAG,CAAEP,CAAC,GAAG,CAAE,CAAC;IAEnC,OAAOE,KAAK,CAACQ,GAAG,CAAEL,CAAC,EAAEG,CAAC,EAAEC,CAAE,CAAC;EAE5B;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMS,SAAS,SAAStB,KAAK,CAAC;EAE7B;AACD;AACA;AACA;AACA;AACA;AACA;EACCG,QAAQA,CAAEC,CAAC,EAAEC,cAAc,GAAG,IAAIJ,OAAO,CAAC,CAAC,EAAG;IAE7C,MAAMK,KAAK,GAAGD,cAAc;IAE5BD,CAAC,IAAI,CAAC,GAAGG,IAAI,CAACC,EAAE;IAEhB,MAAMe,CAAC,GAAG,EAAE;IACZ,MAAMC,CAAC,GAAG,EAAE;IAEZ,MAAMf,CAAC,GAAGe,CAAC,GAAGjB,IAAI,CAACI,GAAG,CAAEP,CAAE,CAAC;IAC3B,MAAMQ,CAAC,GAAGL,IAAI,CAACG,GAAG,CAAEN,CAAE,CAAC,IAAKmB,CAAC,GAAGC,CAAC,GAAGjB,IAAI,CAACG,GAAG,CAAEN,CAAE,CAAC,CAAE;IACnD,MAAMS,CAAC,GAAGN,IAAI,CAACI,GAAG,CAAEP,CAAE,CAAC,IAAKmB,CAAC,GAAGC,CAAC,GAAGjB,IAAI,CAACG,GAAG,CAAEN,CAAE,CAAC,CAAE;IAEnD,OAAOE,KAAK,CAACQ,GAAG,CAAEL,CAAC,EAAEG,CAAC,EAAEC,CAAE,CAAC;EAE5B;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMY,UAAU,SAASzB,KAAK,CAAC;EAE9B;AACD;AACA;AACA;AACA;AACA;AACA;EACCG,QAAQA,CAAEC,CAAC,EAAEC,cAAc,GAAG,IAAIJ,OAAO,CAAC,CAAC,EAAG;IAE7C,MAAMK,KAAK,GAAGD,cAAc;IAE5B,MAAMgB,CAAC,GAAG,EAAE,CAAC,CAAC;IACd,MAAMK,CAAC,GAAG,GAAG,CAAC,CAAC;;IAEf,MAAMC,EAAE,GAAG,CAAC,GAAGpB,IAAI,CAACC,EAAE,GAAGJ,CAAC,GAAGsB,CAAC,GAAG,EAAE;IAEnC,MAAMjB,CAAC,GAAGF,IAAI,CAACG,GAAG,CAAEiB,EAAG,CAAC,GAAGN,CAAC;IAC5B,MAAMT,CAAC,GAAGL,IAAI,CAACI,GAAG,CAAEgB,EAAG,CAAC,GAAGN,CAAC;IAC5B,MAAMR,CAAC,GAAGa,CAAC,GAAGtB,CAAC;IAEf,OAAOE,KAAK,CAACQ,GAAG,CAAEL,CAAC,EAAEG,CAAC,EAAEC,CAAE,CAAC;EAE5B;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMe,WAAW,SAAS5B,KAAK,CAAC;EAE/B;AACD;AACA;AACA;AACA;EACCiB,WAAWA,CAAEC,KAAK,GAAG,EAAE,EAAG;IAEzB,KAAK,CAAC,CAAC;;IAEP;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACA,KAAK,GAAGA,KAAK;EAEnB;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;EACCf,QAAQA,CAAEC,CAAC,EAAEC,cAAc,GAAG,IAAIJ,OAAO,CAAC,CAAC,EAAG;IAE7C,MAAMK,KAAK,GAAGD,cAAc;IAE5BD,CAAC,IAAIG,IAAI,CAACC,EAAE,GAAG,CAAC;IAEhB,MAAMC,CAAC,GAAG,CAAE,CAAC,GAAGF,IAAI,CAACG,GAAG,CAAE,CAAC,GAAGN,CAAE,CAAC,IAAKG,IAAI,CAACG,GAAG,CAAE,CAAC,GAAGN,CAAE,CAAC;IACvD,MAAMQ,CAAC,GAAG,CAAE,CAAC,GAAGL,IAAI,CAACG,GAAG,CAAE,CAAC,GAAGN,CAAE,CAAC,IAAKG,IAAI,CAACI,GAAG,CAAE,CAAC,GAAGP,CAAE,CAAC;IACvD,MAAMS,CAAC,GAAGN,IAAI,CAACI,GAAG,CAAE,CAAC,GAAGP,CAAE,CAAC;IAE3B,OAAOE,KAAK,CAACQ,GAAG,CAAEL,CAAC,EAAEG,CAAC,EAAEC,CAAE,CAAC,CAACE,cAAc,CAAE,IAAI,CAACG,KAAM,CAAC;EAEzD;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMW,SAAS,SAAS7B,KAAK,CAAC;EAE7B;AACD;AACA;AACA;AACA;EACCiB,WAAWA,CAAEC,KAAK,GAAG,EAAE,EAAG;IAEzB,KAAK,CAAC,CAAC;;IAEP;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACA,KAAK,GAAGA,KAAK;EAEnB;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;EACCf,QAAQA,CAAEC,CAAC,EAAEC,cAAc,GAAG,IAAIJ,OAAO,CAAC,CAAC,EAAG;IAE7C,MAAMK,KAAK,GAAGD,cAAc;IAE5B,MAAMyB,CAAC,GAAG,CAAC;IACX,MAAMC,CAAC,GAAG,CAAC;IAEX3B,CAAC,IAAIG,IAAI,CAACC,EAAE,GAAG,CAAC;IAEhB,MAAMC,CAAC,GAAG,CAAE,CAAC,GAAGF,IAAI,CAACG,GAAG,CAAEqB,CAAC,GAAG3B,CAAE,CAAC,IAAKG,IAAI,CAACG,GAAG,CAAEoB,CAAC,GAAG1B,CAAE,CAAC;IACvD,MAAMQ,CAAC,GAAG,CAAE,CAAC,GAAGL,IAAI,CAACG,GAAG,CAAEqB,CAAC,GAAG3B,CAAE,CAAC,IAAKG,IAAI,CAACI,GAAG,CAAEmB,CAAC,GAAG1B,CAAE,CAAC;IACvD,MAAMS,CAAC,GAAGN,IAAI,CAACI,GAAG,CAAEoB,CAAC,GAAG3B,CAAE,CAAC;IAE3B,OAAOE,KAAK,CAACQ,GAAG,CAAEL,CAAC,EAAEG,CAAC,EAAEC,CAAE,CAAC,CAACE,cAAc,CAAE,IAAI,CAACG,KAAM,CAAC;EAEzD;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMc,cAAc,SAAShC,KAAK,CAAC;EAElC;AACD;AACA;AACA;AACA;EACCiB,WAAWA,CAAEC,KAAK,GAAG,EAAE,EAAG;IAEzB,KAAK,CAAC,CAAC;;IAEP;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACA,KAAK,GAAGA,KAAK;EAEnB;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;EACCf,QAAQA,CAAEC,CAAC,EAAEC,cAAc,GAAG,IAAIJ,OAAO,CAAC,CAAC,EAAG;IAE7C,MAAMK,KAAK,GAAGD,cAAc;IAE5B,MAAMyB,CAAC,GAAG,CAAC;IACX,MAAMC,CAAC,GAAG,CAAC;IAEX3B,CAAC,IAAIG,IAAI,CAACC,EAAE,GAAG,CAAC;IAEhB,MAAMC,CAAC,GAAG,CAAE,CAAC,GAAGF,IAAI,CAACG,GAAG,CAAEqB,CAAC,GAAG3B,CAAE,CAAC,IAAKG,IAAI,CAACG,GAAG,CAAEoB,CAAC,GAAG1B,CAAE,CAAC;IACvD,MAAMQ,CAAC,GAAG,CAAE,CAAC,GAAGL,IAAI,CAACG,GAAG,CAAEqB,CAAC,GAAG3B,CAAE,CAAC,IAAKG,IAAI,CAACI,GAAG,CAAEmB,CAAC,GAAG1B,CAAE,CAAC;IACvD,MAAMS,CAAC,GAAGN,IAAI,CAACI,GAAG,CAAEoB,CAAC,GAAG3B,CAAE,CAAC;IAE3B,OAAOE,KAAK,CAACQ,GAAG,CAAEL,CAAC,EAAEG,CAAC,EAAEC,CAAE,CAAC,CAACE,cAAc,CAAE,IAAI,CAACG,KAAM,CAAC;EAEzD;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMe,qBAAqB,SAASjC,KAAK,CAAC;EAEzC;AACD;AACA;AACA;AACA;EACCiB,WAAWA,CAAEC,KAAK,GAAG,EAAE,EAAG;IAEzB,KAAK,CAAC,CAAC;;IAEP;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACA,KAAK,GAAGA,KAAK;EAEnB;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;EACCf,QAAQA,CAAEC,CAAC,EAAEC,cAAc,GAAG,IAAIJ,OAAO,CAAC,CAAC,EAAG;IAE7C,MAAMK,KAAK,GAAGD,cAAc;IAE5BD,CAAC,GAAGA,CAAC,GAAG,CAAC,GAAG,CAAC;IAEb,MAAMK,CAAC,GAAGF,IAAI,CAACY,GAAG,CAAEf,CAAC,EAAE,CAAE,CAAC,GAAG,CAAC,GAAGA,CAAC;IAClC,MAAMQ,CAAC,GAAGL,IAAI,CAACY,GAAG,CAAEf,CAAC,EAAE,CAAE,CAAC,GAAG,CAAC,GAAGA,CAAC,GAAGA,CAAC;IACtC,MAAMS,CAAC,GAAG,CAAC,GAAG,CAAC,GAAGN,IAAI,CAACY,GAAG,CAAEf,CAAC,EAAE,CAAE,CAAC,GAAG,CAAC,GAAGA,CAAC;IAE1C,OAAOE,KAAK,CAACQ,GAAG,CAAEL,CAAC,EAAEG,CAAC,EAAEC,CAAE,CAAC,CAACE,cAAc,CAAE,IAAI,CAACG,KAAM,CAAC;EAEzD;AAED;AAEA,SAASgB,OAAOA,CAAEzB,CAAC,EAAEG,CAAC,EAAER,CAAC,EAAG;EAE3B,MAAM+B,CAAC,GAAGvB,CAAC,GAAGH,CAAC;EACf,OAAOL,CAAC,GAAG+B,CAAC,GAAG1B,CAAC;AAEjB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM2B,yBAAyB,SAASpC,KAAK,CAAC;EAE7C;AACD;AACA;AACA;AACA;EACCiB,WAAWA,CAAEC,KAAK,GAAG,CAAC,EAAG;IAExB,KAAK,CAAC,CAAC;;IAEP;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACA,KAAK,GAAGA,KAAK;EAEnB;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;EACCf,QAAQA,CAAEC,CAAC,EAAEC,cAAc,GAAG,IAAIJ,OAAO,CAAC,CAAC,EAAG;IAE7C,MAAMK,KAAK,GAAGD,cAAc;IAE5BD,CAAC,GAAG8B,OAAO,CAAE,CAAE,CAAC,EAAE,CAAC,EAAE9B,CAAE,CAAC;IAExB,MAAMK,CAAC,GAAG,CAAC,GAAG,CAAC,GAAGL,CAAC,IAAKA,CAAC,GAAGA,CAAC,GAAG,CAAC,CAAE,IAAKA,CAAC,GAAGA,CAAC,GAAG,EAAE,CAAE;IACpD,MAAMQ,CAAC,GAAGL,IAAI,CAACY,GAAG,CAAEf,CAAC,EAAE,CAAE,CAAC,GAAG,EAAE,GAAGA,CAAC,GAAGA,CAAC;IACvC,MAAMS,CAAC,GAAG,CAAC,GAAG,EAAE,GAAGT,CAAC,IAAKA,CAAC,GAAGA,CAAC,GAAG,CAAC,CAAE,IAAKA,CAAC,GAAGA,CAAC,GAAG,CAAC,CAAE,IAAKA,CAAC,GAAGA,CAAC,GAAG,EAAE,CAAE;IAErE,OAAOE,KAAK,CAACQ,GAAG,CAAEL,CAAC,EAAEG,CAAC,EAAEC,CAAE,CAAC,CAACE,cAAc,CAAE,IAAI,CAACG,KAAM,CAAC;EAEzD;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMmB,oBAAoB,SAASrC,KAAK,CAAC;EAExC;AACD;AACA;AACA;AACA;EACCiB,WAAWA,CAAEC,KAAK,GAAG,EAAE,EAAG;IAEzB,KAAK,CAAC,CAAC;;IAEP;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACA,KAAK,GAAGA,KAAK;EAEnB;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;EACCf,QAAQA,CAAEC,CAAC,EAAEC,cAAc,GAAG,IAAIJ,OAAO,CAAC,CAAC,EAAG;IAE7C,MAAMK,KAAK,GAAGD,cAAc;IAE5BD,CAAC,IAAIG,IAAI,CAACC,EAAE,GAAG,CAAC;IAEhB,MAAMC,CAAC,GAAGF,IAAI,CAACG,GAAG,CAAE,CAAC,GAAGN,CAAE,CAAC,IAAK,CAAC,GAAG,GAAG,IAAKG,IAAI,CAACG,GAAG,CAAE,CAAC,GAAGN,CAAE,CAAC,GAAG,IAAI,GAAGG,IAAI,CAACG,GAAG,CAAE,EAAE,GAAGN,CAAE,CAAC,CAAE,CAAE;IAC7F,MAAMQ,CAAC,GAAGL,IAAI,CAACI,GAAG,CAAE,CAAC,GAAGP,CAAE,CAAC,IAAK,CAAC,GAAG,GAAG,IAAKG,IAAI,CAACG,GAAG,CAAE,CAAC,GAAGN,CAAE,CAAC,GAAG,IAAI,GAAGG,IAAI,CAACG,GAAG,CAAE,EAAE,GAAGN,CAAE,CAAC,CAAE,CAAE;IAC7F,MAAMS,CAAC,GAAG,IAAI,GAAGN,IAAI,CAACI,GAAG,CAAE,CAAC,GAAGP,CAAE,CAAC;IAElC,OAAOE,KAAK,CAACQ,GAAG,CAAEL,CAAC,EAAEG,CAAC,EAAEC,CAAE,CAAC,CAACE,cAAc,CAAE,IAAI,CAACG,KAAM,CAAC;EAEzD;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMoB,oBAAoB,SAAStC,KAAK,CAAC;EAExC;AACD;AACA;AACA;AACA;EACCiB,WAAWA,CAAEC,KAAK,GAAG,EAAE,EAAG;IAEzB,KAAK,CAAC,CAAC;;IAEP;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACA,KAAK,GAAGA,KAAK;EAEnB;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;EACCf,QAAQA,CAAEC,CAAC,EAAEC,cAAc,GAAG,IAAIJ,OAAO,CAAC,CAAC,EAAG;IAE7C,MAAMK,KAAK,GAAGD,cAAc;IAE5B,MAAMkC,EAAE,GAAGnC,CAAC,GAAGG,IAAI,CAACC,EAAE,GAAG,CAAC;IAE1B,MAAMC,CAAC,GAAGF,IAAI,CAACG,GAAG,CAAE,CAAC,GAAG6B,EAAG,CAAC,IAAK,CAAC,GAAG,IAAI,GAAGhC,IAAI,CAACG,GAAG,CAAE,CAAC,GAAG6B,EAAG,CAAC,GAAG,GAAG,GAAGhC,IAAI,CAACG,GAAG,CAAE,CAAC,GAAG6B,EAAG,CAAC,CAAE;IAC3F,MAAM3B,CAAC,GAAGL,IAAI,CAACI,GAAG,CAAE,CAAC,GAAG4B,EAAG,CAAC,IAAK,CAAC,GAAG,IAAI,GAAGhC,IAAI,CAACG,GAAG,CAAE,CAAC,GAAG6B,EAAG,CAAC,GAAG,GAAG,GAAGhC,IAAI,CAACG,GAAG,CAAE,CAAC,GAAG6B,EAAG,CAAC,CAAE;IAC3F,MAAM1B,CAAC,GAAG,GAAG,GAAGN,IAAI,CAACI,GAAG,CAAE,CAAC,GAAG4B,EAAG,CAAC;IAElC,OAAOjC,KAAK,CAACQ,GAAG,CAAEL,CAAC,EAAEG,CAAC,EAAEC,CAAE,CAAC,CAACE,cAAc,CAAE,IAAI,CAACG,KAAM,CAAC;EAEzD;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMsB,oBAAoB,SAASxC,KAAK,CAAC;EAExC;AACD;AACA;AACA;AACA;EACCiB,WAAWA,CAAEC,KAAK,GAAG,EAAE,EAAG;IAEzB,KAAK,CAAC,CAAC;;IAEP;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACA,KAAK,GAAGA,KAAK;EAEnB;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;EACCf,QAAQA,CAAEC,CAAC,EAAEC,cAAc,GAAG,IAAIJ,OAAO,CAAC,CAAC,EAAG;IAE7C,MAAMK,KAAK,GAAGD,cAAc;IAE5B,MAAMkC,EAAE,GAAGnC,CAAC,GAAGG,IAAI,CAACC,EAAE,GAAG,CAAC;IAE1B,MAAMC,CAAC,GAAGF,IAAI,CAACG,GAAG,CAAE,CAAC,GAAG6B,EAAG,CAAC,IAAK,CAAC,GAAG,GAAG,GAAGhC,IAAI,CAACG,GAAG,CAAE,CAAC,GAAG6B,EAAG,CAAC,GAAG,GAAG,GAAGhC,IAAI,CAACG,GAAG,CAAE,EAAE,GAAG6B,EAAG,CAAC,CAAE;IAC3F,MAAM3B,CAAC,GAAGL,IAAI,CAACI,GAAG,CAAE,CAAC,GAAG4B,EAAG,CAAC,IAAK,CAAC,GAAG,GAAG,GAAGhC,IAAI,CAACG,GAAG,CAAE,CAAC,GAAG6B,EAAG,CAAC,GAAG,GAAG,GAAGhC,IAAI,CAACG,GAAG,CAAE,EAAE,GAAG6B,EAAG,CAAC,CAAE;IAC3F,MAAM1B,CAAC,GAAG,GAAG,GAAGN,IAAI,CAACI,GAAG,CAAE,EAAE,GAAG4B,EAAG,CAAC;IAEnC,OAAOjC,KAAK,CAACQ,GAAG,CAAEL,CAAC,EAAEG,CAAC,EAAEC,CAAE,CAAC,CAACE,cAAc,CAAE,IAAI,CAACG,KAAM,CAAC;EAEzD;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMuB,oBAAoB,SAASzC,KAAK,CAAC;EAExC;AACD;AACA;AACA;AACA;EACCiB,WAAWA,CAAEC,KAAK,GAAG,EAAE,EAAG;IAEzB,KAAK,CAAC,CAAC;;IAEP;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACA,KAAK,GAAGA,KAAK;EAEnB;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;EACCf,QAAQA,CAAEC,CAAC,EAAEC,cAAc,GAAG,IAAIJ,OAAO,CAAC,CAAC,EAAG;IAE7C,MAAMK,KAAK,GAAGD,cAAc;IAE5B,MAAMkC,EAAE,GAAGnC,CAAC,GAAGG,IAAI,CAACC,EAAE,GAAG,CAAC;IAE1B,MAAMC,CAAC,GAAGF,IAAI,CAACG,GAAG,CAAE,CAAC,GAAG6B,EAAG,CAAC,IAAK,CAAC,GAAG,GAAG,IAAKhC,IAAI,CAACG,GAAG,CAAE,CAAC,GAAG6B,EAAG,CAAC,GAAG,GAAG,GAAGhC,IAAI,CAACG,GAAG,CAAE,EAAE,GAAG6B,EAAG,CAAC,CAAE,CAAE;IAC/F,MAAM3B,CAAC,GAAGL,IAAI,CAACI,GAAG,CAAE,CAAC,GAAG4B,EAAG,CAAC,IAAK,CAAC,GAAG,GAAG,IAAKhC,IAAI,CAACG,GAAG,CAAE,CAAC,GAAG6B,EAAG,CAAC,GAAG,GAAG,GAAGhC,IAAI,CAACG,GAAG,CAAE,EAAE,GAAG6B,EAAG,CAAC,CAAE,CAAE;IAC/F,MAAM1B,CAAC,GAAG,IAAI,GAAGN,IAAI,CAACI,GAAG,CAAE,EAAE,GAAG4B,EAAG,CAAC;IAEpC,OAAOjC,KAAK,CAACQ,GAAG,CAAEL,CAAC,EAAEG,CAAC,EAAEC,CAAE,CAAC,CAACE,cAAc,CAAE,IAAI,CAACG,KAAM,CAAC;EAEzD;AAED;AAEA,SACChB,UAAU,EACVc,UAAU,EACVI,YAAY,EACZE,SAAS,EACTG,UAAU,EACVG,WAAW,EACXC,SAAS,EACTG,cAAc,EACdC,qBAAqB,EACrBG,yBAAyB,EACzBC,oBAAoB,EACpBC,oBAAoB,EACpBE,oBAAoB,EACpBC,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}