{"ast":null,"code":"var _jsxFileName = \"/home/powqy/Desktop/Design/solar-system-orbits/src/App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { useMemo } from \"react\";\nimport { useState, useRef } from \"react\";\nimport { Canvas, useLoader, useFrame } from \"@react-three/fiber\";\nimport { OrbitControls, Plane, Stars, Line } from \"@react-three/drei\";\nimport { MeshBasicMaterial, SphereGeometry, TextureLoader } from \"three\";\nimport styled from \"styled-components\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst nasaPlanetData = {\n  mercury: {\n    a: [0.38709927, 0.00000037],\n    e: [0.20563593, 0.00001906],\n    I: [7.00497902, -0.00594749],\n    L: [252.25032350, 149472.67411175],\n    varpi: [77.45779628, 0.16047689],\n    Omega: [48.33076593, -0.12534081]\n  },\n  venus: {\n    a: [0.72333566, 0.00000390],\n    e: [0.00677672, -0.00004107],\n    I: [3.39467605, -0.00078890],\n    L: [181.97909950, 58517.81538729],\n    varpi: [131.60246718, 0.00268329],\n    Omega: [76.67984255, -0.27769418]\n  },\n  earth: {\n    a: [1.00000261, 0.00000562],\n    e: [0.01671123, -0.00004392],\n    I: [-0.00001531, -0.01294668],\n    L: [100.46457166, 35999.37244981],\n    varpi: [102.93768193, 0.32327364],\n    Omega: [0.0, 0.0]\n  },\n  mars: {\n    a: [1.52371034, 0.00001847],\n    e: [0.09339410, 0.00007882],\n    I: [1.84969142, -0.00813131],\n    L: [-4.55343205, 19140.30268499],\n    varpi: [-23.94362959, 0.44441088],\n    Omega: [49.55953891, -0.29257343]\n  },\n  jupiter: {\n    a: [5.20288700, -0.00011607],\n    e: [0.04838624, -0.00013253],\n    I: [1.30439695, -0.00183714],\n    L: [34.39644051, 3034.74612775],\n    varpi: [14.72847983, 0.21252668],\n    Omega: [100.47390909, 0.20469106]\n  },\n  saturn: {\n    a: [9.53667594, -0.00125060],\n    e: [0.05386179, -0.00050991],\n    I: [2.48599187, 0.00193609],\n    L: [49.95424423, 1222.49362201],\n    varpi: [92.59887831, -0.41897216],\n    Omega: [113.66242448, -0.28867794]\n  },\n  uranus: {\n    a: [19.18916464, -0.00196176],\n    e: [0.04725744, -0.00004397],\n    I: [0.77263783, -0.00242939],\n    L: [313.23810451, 428.48202785],\n    varpi: [170.95427630, 0.40805281],\n    Omega: [74.01692503, 0.04240589]\n  },\n  neptune: {\n    a: [30.06992276, 0.00026291],\n    e: [0.00859048, 0.00005105],\n    I: [1.77004347, 0.00035372],\n    L: [-55.12002969, 218.45945325],\n    varpi: [44.96476227, -0.32241464],\n    Omega: [131.78422574, -0.00508664]\n  }\n};\nclass OrbitalElements {\n  constructor(name) {\n    this.coeffs = nasaPlanetData[name];\n  }\n  positionJD(JD) {\n    let deg2rad = Math.PI / 180;\n    const Epoch = 2451545.0; // Epoch in Julian Date\n\n    const T = (JD - Epoch) / 36525; // secnturies from J2000\n    const c = this.coeffs;\n\n    // a -> semi major axis\n    // e -> eccentricity\n    // I -> inclination\n    // L -> mean longitue\n    // varpi -> longitude of perihelion\n    // omega -> longitude of the ascending node\n\n    // compute the planets six elements\n    const a = c.a[0] + c.a[1] * T;\n    const e = c.e[0] + c.e[1] * T;\n    const I = c.I[0] + c.I[1] * T;\n    const L = c.L[0] + c.L[1] * T;\n    const varpi = c.varpi[0] + c.varpi[1] * T;\n    const OMEGA = c.Omega[0] + c.Omega[1] * T;\n\n    // compute the arguement of parihelion omega and mean anomaly M\n    const omega = varpi - OMEGA;\n    const M = L - varpi;\n    const normalizeAngle = angle => (angle % 360 + 360) % 360;\n    const M_deg = normalizeAngle(M);\n    const M_rad = M_deg * deg2rad;\n    function solveKepler(M, e, tolerance = 1e-6) {\n      let E = M;\n      let delta = 1;\n      while (Math.abs(delta) > tolerance) {\n        delta = (E - e * Math.sin(E) - M) / (1 - e * Math.cos(E));\n        E -= delta;\n      }\n      return E;\n    }\n    const E = solveKepler(M_rad, e);\n\n    // compute the true anomaly\n    const v = 2 * Math.atan2(Math.sqrt(1 + e) * Math.sin(E / 2), Math.sqrt(1 - e) * Math.cos(E / 2));\n\n    // distance from sun\n    const r = a * (1 - e * Math.cos(E));\n\n    // position in orbital plane\n    const x_orb = r * Math.cos(v);\n    const y_orb = r * Math.sin(v);\n\n    // convert to 3D coords \n    const cos = Math.cos,\n      sin = Math.sin;\n    const x = r * (cos(OMEGA * deg2rad) * cos(omega * deg2rad + v) - sin(OMEGA * deg2rad) * sin(omega * deg2rad + v) * cos(I * deg2rad));\n    const y = r * (sin(OMEGA * deg2rad) * cos(omega * deg2rad + v) + cos(OMEGA * deg2rad) * sin(omega * deg2rad + v) * cos(I * deg2rad));\n    const z = r * (sin(omega * deg2rad + v) * sin(I * deg2rad));\n    return {\n      x,\n      y,\n      z\n    };\n  }\n}\nfunction toJulianDate(date = new Date()) {\n  const time = date.getTime();\n  return time / 86400000 + 2440587.5; // ms in day + Unix epoch (Jan 1, 1970)\n}\nfunction fromJulianDate(jd) {\n  return new Date((jd - 2440587.5) * 86400000);\n}\nfunction Planet({\n  name,\n  JD,\n  color,\n  size\n}) {\n  const orbitalElement = new OrbitalElements(name);\n  const {\n    x,\n    y,\n    z\n  } = orbitalElement.positionJD(JD);\n  const SUN_PADDING = 10;\n  const distanceAU = Math.sqrt(x * x + y * y, z * z);\n  const compressDistance = Math.log10(distanceAU + 1) * 50 + SUN_PADDING;\n  const scaleFac = compressDistance / distanceAU;\n  const posX = x * scaleFac;\n  const posY = y * scaleFac;\n  const posZ = z * scaleFac;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [posX, posY, posZ],\n      children: [/*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n        args: [size * 1.8, 32, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n        color: color\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n_c = Planet;\nconst planetVisuals = {\n  mercury: {\n    color: \"gray\",\n    size: 0.5\n  },\n  venus: {\n    color: \"orange\",\n    size: 0.8\n  },\n  earth: {\n    color: \"blue\",\n    size: 0.9\n  },\n  mars: {\n    color: \"pink\",\n    size: 0.6\n  },\n  jupiter: {\n    color: \"purple\",\n    size: 1.8\n  },\n  saturn: {\n    color: \"khaki\",\n    size: 1.5\n  },\n  uranus: {\n    color: \"lightblue\",\n    size: 1.2\n  },\n  neptune: {\n    color: \"darkblue\",\n    size: 1.1\n  }\n};\nfunction SolarSytem({\n  JD,\n  setJD\n}) {\n  _s();\n  const speed = 20;\n  const JDref = useRef(JD);\n  useFrame((_, delta) => {\n    JDref.current += speed * delta;\n    setJD(JDref.current);\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: Object.keys(nasaPlanetData).map(name => {\n      const {\n        color,\n        size\n      } = planetVisuals[name];\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(Planet, {\n          name: name,\n          JD: JD,\n          color: color,\n          size: size\n        }, name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }, this)\n      }, void 0, false);\n    })\n  }, void 0, false);\n}\n_s(SolarSytem, \"zmmhNEbJkuiiICtZU9fbrAv2m7U=\", false, function () {\n  return [useFrame];\n});\n_c2 = SolarSytem;\nfunction OrbitPath({\n  name\n}) {\n  _s2();\n  const points = useMemo(() => {\n    const orbitalElement = new OrbitalElements(name);\n    const points = [];\n    for (let i = 0; i <= 60000; i++) {\n      let projectionJD = 2451545.0 + i;\n      const {\n        x,\n        y,\n        z\n      } = orbitalElement.positionJD(projectionJD);\n      const SUN_PADDING = 10;\n      const distanceAU = Math.sqrt(x * x + y * y, z * z);\n      const compressDistance = Math.log10(distanceAU + 1) * 50 + SUN_PADDING;\n      const scaleFac = compressDistance / distanceAU;\n      const posX = x * scaleFac;\n      const posY = y * scaleFac;\n      const posZ = z * scaleFac;\n      points.push([posX, posY, posZ]);\n    }\n    return points;\n  }, [name]);\n  return /*#__PURE__*/_jsxDEV(Line, {\n    points: points,\n    color: \"grey\",\n    lineWidth: 0.5,\n    dashed: false\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 254,\n    columnNumber: 5\n  }, this);\n}\n_s2(OrbitPath, \"G95GpPLhY4BpTJPrFAeCtZA4AeI=\");\n_c3 = OrbitPath;\nexport default function App() {\n  _s3();\n  const [JD, setJD] = useState(toJulianDate());\n  const dateStr = fromJulianDate(JD).toLocaleDateString();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(DateDisplay, {\n      children: dateStr\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Canvas, {\n      camera: {\n        position: [0, 0, 150],\n        fov: 80\n      },\n      style: {\n        background: \"black\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {\n        intensity: 0.6\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n        position: [10, 10, 10],\n        intensity: 100\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(OrbitControls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Stars, {\n        radius: 400,\n        count: 10000,\n        depth: 50,\n        factor: 2,\n        saturation: 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n        castShadow: true,\n        receiveShadow: true,\n        children: [/*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n          args: [6, 64, 64]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n          color: \"yellow\",\n          roughness: 0,\n          metalness: 0.3\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(SolarSytem, {\n        JD: JD,\n        setJD: setJD\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 7\n      }, this), Object.keys(nasaPlanetData).map(name => {\n        return /*#__PURE__*/_jsxDEV(OrbitPath, {\n          name: name\n        }, name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 11\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n_s3(App, \"wFFIC27Q9U8/H31hFmaVRNqvbJM=\");\n_c4 = App;\nconst DateDisplay = styled.div`\n  position: absolute;\n  top: 20px;\n  bottom: 20px;\n  padding-left: 20px;\n  font-size: 25px;\n`;\n_c5 = DateDisplay;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"Planet\");\n$RefreshReg$(_c2, \"SolarSytem\");\n$RefreshReg$(_c3, \"OrbitPath\");\n$RefreshReg$(_c4, \"App\");\n$RefreshReg$(_c5, \"DateDisplay\");","map":{"version":3,"names":["React","useMemo","useState","useRef","Canvas","useLoader","useFrame","OrbitControls","Plane","Stars","Line","MeshBasicMaterial","SphereGeometry","TextureLoader","styled","jsxDEV","_jsxDEV","Fragment","_Fragment","nasaPlanetData","mercury","a","e","I","L","varpi","Omega","venus","earth","mars","jupiter","saturn","uranus","neptune","OrbitalElements","constructor","name","coeffs","positionJD","JD","deg2rad","Math","PI","Epoch","T","c","OMEGA","omega","M","normalizeAngle","angle","M_deg","M_rad","solveKepler","tolerance","E","delta","abs","sin","cos","v","atan2","sqrt","r","x_orb","y_orb","x","y","z","toJulianDate","date","Date","time","getTime","fromJulianDate","jd","Planet","color","size","orbitalElement","SUN_PADDING","distanceAU","compressDistance","log10","scaleFac","posX","posY","posZ","children","position","args","fileName","_jsxFileName","lineNumber","columnNumber","_c","planetVisuals","SolarSytem","setJD","_s","speed","JDref","_","current","Object","keys","map","_c2","OrbitPath","_s2","points","i","projectionJD","push","lineWidth","dashed","_c3","App","_s3","dateStr","toLocaleDateString","DateDisplay","camera","fov","style","background","intensity","radius","count","depth","factor","saturation","castShadow","receiveShadow","roughness","metalness","_c4","div","_c5","$RefreshReg$"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/src/App.js"],"sourcesContent":["import React, { useMemo } from \"react\";\nimport { useState, useRef } from \"react\";\nimport { Canvas, useLoader, useFrame } from \"@react-three/fiber\";\nimport { OrbitControls, Plane, Stars, Line} from \"@react-three/drei\";\nimport { MeshBasicMaterial, SphereGeometry, TextureLoader } from \"three\";\nimport styled from \"styled-components\";\n\n\nconst nasaPlanetData = {\n  mercury: {\n    a: [0.38709927, 0.00000037],\n    e: [0.20563593, 0.00001906],\n    I: [7.00497902, -0.00594749],\n    L: [252.25032350, 149472.67411175],\n    varpi: [77.45779628, 0.16047689],\n    Omega: [48.33076593, -0.12534081],\n  },\n  venus: {\n    a: [0.72333566, 0.00000390],\n    e: [0.00677672, -0.00004107],\n    I: [3.39467605, -0.00078890],\n    L: [181.97909950, 58517.81538729],\n    varpi: [131.60246718, 0.00268329],\n    Omega: [76.67984255, -0.27769418],\n  },\n  earth: {\n    a: [1.00000261, 0.00000562],\n    e: [0.01671123, -0.00004392],\n    I: [-0.00001531, -0.01294668],\n    L: [100.46457166, 35999.37244981],\n    varpi: [102.93768193, 0.32327364],\n    Omega: [0.0, 0.0],\n  },\n  mars: {\n    a: [1.52371034, 0.00001847],\n    e: [0.09339410, 0.00007882],\n    I: [1.84969142, -0.00813131],\n    L: [-4.55343205, 19140.30268499],\n    varpi: [-23.94362959, 0.44441088],\n    Omega: [49.55953891, -0.29257343],\n  },\n  jupiter: {\n    a: [5.20288700, -0.00011607],\n    e: [0.04838624, -0.00013253],\n    I: [1.30439695, -0.00183714],\n    L: [34.39644051, 3034.74612775],\n    varpi: [14.72847983, 0.21252668],\n    Omega: [100.47390909, 0.20469106],\n  },\n  saturn: {\n    a: [9.53667594, -0.00125060],\n    e: [0.05386179, -0.00050991],\n    I: [2.48599187, 0.00193609],\n    L: [49.95424423, 1222.49362201],\n    varpi: [92.59887831, -0.41897216],\n    Omega: [113.66242448, -0.28867794],\n  },\n  uranus: {\n    a: [19.18916464, -0.00196176],\n    e: [0.04725744, -0.00004397],\n    I: [0.77263783, -0.00242939],\n    L: [313.23810451, 428.48202785],\n    varpi: [170.95427630, 0.40805281],\n    Omega: [74.01692503, 0.04240589],\n  },\n  neptune: {\n    a: [30.06992276, 0.00026291],\n    e: [0.00859048, 0.00005105],\n    I: [1.77004347, 0.00035372],\n    L: [-55.12002969, 218.45945325],\n    varpi: [44.96476227, -0.32241464],\n    Omega: [131.78422574, -0.00508664],\n  },\n};\n\n\nclass OrbitalElements {\n  constructor (name) {\n    this.coeffs = nasaPlanetData[name]\n  }\n\n  positionJD(JD) {\n\n    let deg2rad = Math.PI / 180;\n    const Epoch = 2451545.0; // Epoch in Julian Date\n\n    const T = (JD - Epoch) / 36525; // secnturies from J2000\n    const c = this.coeffs;\n\n    // a -> semi major axis\n    // e -> eccentricity\n    // I -> inclination\n    // L -> mean longitue\n    // varpi -> longitude of perihelion\n    // omega -> longitude of the ascending node\n\n    // compute the planets six elements\n    const a = c.a[0] + c.a[1] * T;\n    const e = c.e[0] + c.e[1] * T;\n    const I = c.I[0] + c.I[1] * T;\n    const L = c.L[0] + c.L[1] * T;\n    const varpi = c.varpi[0] + c.varpi[1] * T;\n    const OMEGA = c.Omega[0] + c.Omega[1] * T;\n\n    // compute the arguement of parihelion omega and mean anomaly M\n    const omega = varpi - OMEGA;\n    const M = L - varpi;\n\n    const normalizeAngle = angle => ((angle % 360) + 360) % 360;\n    const M_deg = normalizeAngle(M);\n    const M_rad = M_deg * deg2rad;\n\n\n    function solveKepler(M, e, tolerance = 1e-6) {\n      let E = M; \n      let delta = 1;\n\n      while (Math.abs(delta) > tolerance) {\n        delta = (E - e * Math.sin(E) - M) / (1 - e * Math.cos(E));\n        E -= delta;\n      }\n      return E;\n    }\n\n    const E = solveKepler(M_rad, e);\n\n    // compute the true anomaly\n    const v = 2 * Math.atan2(\n      Math.sqrt(1 + e) * Math.sin(E / 2),\n      Math.sqrt(1 - e) * Math.cos(E / 2)\n    );\n\n    // distance from sun\n    const r = a * (1 - e * Math.cos(E));\n    \n    // position in orbital plane\n    const x_orb = r * Math.cos(v);\n    const y_orb = r * Math.sin(v);\n\n\n    // convert to 3D coords \n    const cos = Math.cos, sin = Math.sin;\n\n    const x = r * (cos(OMEGA * deg2rad) * cos(omega * deg2rad + v) - sin(OMEGA * deg2rad) * sin(omega * deg2rad + v) * cos(I * deg2rad));\n    const y = r * (sin(OMEGA * deg2rad) * cos(omega * deg2rad + v) + cos(OMEGA * deg2rad) * sin(omega * deg2rad + v) * cos(I * deg2rad));\n    const z = r * (sin(omega * deg2rad + v) * sin(I * deg2rad));\n    \n    return { x, y, z };\n  }\n}\n\n\n\nfunction toJulianDate(date = new Date()) {\n  const time = date.getTime();\n  return time / 86400000 + 2440587.5 // ms in day + Unix epoch (Jan 1, 1970)\n}\n\nfunction fromJulianDate(jd) {\n  return new Date((jd - 2440587.5) * 86400000);\n}\n\n\n\nfunction Planet({ name, JD, color, size}) {\n  const orbitalElement = new OrbitalElements(name);\n  const { x, y, z } = orbitalElement.positionJD(JD);\n\n  const SUN_PADDING = 10;\n\n  const distanceAU = Math.sqrt(x * x + y * y, z * z);\n  const compressDistance = Math.log10(distanceAU + 1) * 50 + SUN_PADDING;\n  const scaleFac = compressDistance / distanceAU;\n\n  const posX = x * scaleFac;\n  const posY = y * scaleFac;\n  const posZ = z * scaleFac;\n\n  return (\n    <>\n    <mesh position={[ posX, posY, posZ ]}>\n      <sphereGeometry args={[size * 1.8, 32, 32]} />\n      <meshStandardMaterial color={color} />\n    </mesh>\n    </>\n  )\n}\n\nconst planetVisuals = {\n  mercury: { color: \"gray\", size: 0.5 },\n  venus: { color: \"orange\", size: 0.8 },\n  earth: { color: \"blue\", size: 0.9 },\n  mars: { color: \"pink\", size: 0.6 },\n  jupiter: { color: \"purple\", size: 1.8 },\n  saturn: { color: \"khaki\", size: 1.5 },\n  uranus: { color: \"lightblue\", size: 1.2 },\n  neptune: { color: \"darkblue\", size: 1.1 },\n};\n\n\nfunction SolarSytem({ JD, setJD }) {\n  const speed = 20;\n\n  const JDref = useRef(JD);\n\n  useFrame((_, delta) => {\n    JDref.current += speed * delta;\n    setJD(JDref.current);\n  })\n\n  return ( \n    <>\n      {Object.keys(nasaPlanetData).map((name) => {\n        const {color, size} = planetVisuals[name];\n\n        return (\n          <>\n          <Planet key={name} name={name} JD={JD} color={color} size={size} />\n          </>\n        )\n      })}\n\n    </>\n  )\n}\n\nfunction OrbitPath({ name }) {\n\n  const points = useMemo(() => {\n    const orbitalElement = new OrbitalElements(name);\n    const points = [];\n\n    for (let i = 0; i <= 60000; i++) {\n      let projectionJD = 2451545.0 + i;\n      const { x, y, z } = orbitalElement.positionJD(projectionJD);\n\n      const SUN_PADDING = 10;\n\n      const distanceAU = Math.sqrt(x * x + y * y, z * z);\n      const compressDistance = Math.log10(distanceAU + 1) * 50 + SUN_PADDING;\n      const scaleFac = compressDistance / distanceAU; \n      \n      const posX = x * scaleFac;\n      const posY = y * scaleFac;\n      const posZ = z * scaleFac;\n\n      points.push([ posX, posY, posZ ]);\n    }\n    return points;\n\n  }, [name]);\n\n  return (\n    <Line\n      points={points}\n      color=\"grey\"\n      lineWidth={0.5}\n      dashed={false}\n    />\n  )\n}\n\n\nexport default function App() {\n  const [JD, setJD] = useState(toJulianDate());\n  const dateStr = fromJulianDate(JD).toLocaleDateString();\n\n  return (\n    <>\n\n    <DateDisplay>\n      {dateStr}\n    </DateDisplay>\n    <Canvas camera={{ position: [0, 0, 150], fov: 80 }}\n            style={{ background: \"black\" }}>\n      <ambientLight intensity={0.6}/>\n      <pointLight position={[10, 10, 10]} intensity={100} />\n      <OrbitControls />\n\n      <Stars\n        radius={400}\n        count={10000}\n        depth={50}\n        factor={2}\n        saturation={1} />\n\n      <mesh castShadow receiveShadow>\n        <sphereGeometry args={[6, 64, 64]} />\n        <meshStandardMaterial color=\"yellow\" roughness={0} metalness={0.3}/>\n      </mesh>\n\n      <SolarSytem JD={JD} setJD={setJD}/>\n      {Object.keys(nasaPlanetData).map((name) => {\n        return (\n          <OrbitPath key={name} name={name} />\n        )\n      })}\n\n\n    </Canvas>\n    </>\n  );\n}\n\nconst DateDisplay = styled.div`\n  position: absolute;\n  top: 20px;\n  bottom: 20px;\n  padding-left: 20px;\n  font-size: 25px;\n`\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}