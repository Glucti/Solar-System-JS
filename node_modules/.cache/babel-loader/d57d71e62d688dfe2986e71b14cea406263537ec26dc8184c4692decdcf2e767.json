{"ast":null,"code":"import { BufferAttribute, Matrix3, Matrix4, Vector3 } from 'three';\n\n/**\n * @module GeometryCompressionUtils\n * @three_import import * as GeometryCompressionUtils from 'three/addons/utils/GeometryCompressionUtils.js';\n */\n\n// Octahedron and Quantization encodings based on work by: https://github.com/tsherif/mesh-quantization-example\n\n/**\n * Compressed the given geometry's `normal` attribute by the selected encode method.\n *\n * @param {BufferGeometry} geometry - The geometry whose normals should be compressed.\n * @param {('DEFAULT'|'OCT1Byte'|'OCT2Byte'|'ANGLES')} encodeMethod - The compression method.\n */\nfunction compressNormals(geometry, encodeMethod) {\n  const normal = geometry.attributes.normal;\n  if (!normal) {\n    console.error('THREE.GeometryCompressionUtils.compressNormals(): Geometry must contain normal attribute.');\n  }\n  if (normal.isPacked) return;\n  if (normal.itemSize != 3) {\n    console.error('THREE.GeometryCompressionUtils.compressNormals(): normal.itemSize is not 3, which cannot be encoded.');\n  }\n  const array = normal.array;\n  const count = normal.count;\n  let result;\n  if (encodeMethod == 'DEFAULT') {\n    // TODO: Add 1 byte to the result, making the encoded length to be 4 bytes.\n    result = new Uint8Array(count * 3);\n    for (let idx = 0; idx < array.length; idx += 3) {\n      const encoded = defaultEncode(array[idx], array[idx + 1], array[idx + 2], 1);\n      result[idx + 0] = encoded[0];\n      result[idx + 1] = encoded[1];\n      result[idx + 2] = encoded[2];\n    }\n    geometry.setAttribute('normal', new BufferAttribute(result, 3, true));\n    geometry.attributes.normal.bytes = result.length * 1;\n  } else if (encodeMethod == 'OCT1Byte') {\n    // It is not recommended to use 1-byte octahedron normals encoding unless you want to extremely reduce the memory usage\n    // As it makes vertex data not aligned to a 4 byte boundary which may harm some WebGL implementations and sometimes the normal distortion is visible\n    // Please refer to @zeux 's comments in https://github.com/mrdoob/three.js/pull/18208\n\n    result = new Int8Array(count * 2);\n    for (let idx = 0; idx < array.length; idx += 3) {\n      const encoded = octEncodeBest(array[idx], array[idx + 1], array[idx + 2], 1);\n      result[idx / 3 * 2 + 0] = encoded[0];\n      result[idx / 3 * 2 + 1] = encoded[1];\n    }\n    geometry.setAttribute('normal', new BufferAttribute(result, 2, true));\n    geometry.attributes.normal.bytes = result.length * 1;\n  } else if (encodeMethod == 'OCT2Byte') {\n    result = new Int16Array(count * 2);\n    for (let idx = 0; idx < array.length; idx += 3) {\n      const encoded = octEncodeBest(array[idx], array[idx + 1], array[idx + 2], 2);\n      result[idx / 3 * 2 + 0] = encoded[0];\n      result[idx / 3 * 2 + 1] = encoded[1];\n    }\n    geometry.setAttribute('normal', new BufferAttribute(result, 2, true));\n    geometry.attributes.normal.bytes = result.length * 2;\n  } else if (encodeMethod == 'ANGLES') {\n    result = new Uint16Array(count * 2);\n    for (let idx = 0; idx < array.length; idx += 3) {\n      const encoded = anglesEncode(array[idx], array[idx + 1], array[idx + 2]);\n      result[idx / 3 * 2 + 0] = encoded[0];\n      result[idx / 3 * 2 + 1] = encoded[1];\n    }\n    geometry.setAttribute('normal', new BufferAttribute(result, 2, true));\n    geometry.attributes.normal.bytes = result.length * 2;\n  } else {\n    console.error('Unrecognized encoding method, should be `DEFAULT` or `ANGLES` or `OCT`. ');\n  }\n  geometry.attributes.normal.needsUpdate = true;\n  geometry.attributes.normal.isPacked = true;\n  geometry.attributes.normal.packingMethod = encodeMethod;\n}\n\n/**\n * Compressed the given geometry's `position` attribute.\n *\n * @param {BufferGeometry} geometry - The geometry whose position values should be compressed.\n */\nfunction compressPositions(geometry) {\n  const position = geometry.attributes.position;\n  if (!position) {\n    console.error('THREE.GeometryCompressionUtils.compressPositions(): Geometry must contain position attribute.');\n  }\n  if (position.isPacked) return;\n  if (position.itemSize != 3) {\n    console.error('THREE.GeometryCompressionUtils.compressPositions(): position.itemSize is not 3, which cannot be packed.');\n  }\n  const array = position.array;\n  const encodingBytes = 2;\n  const result = quantizedEncode(array, encodingBytes);\n  const quantized = result.quantized;\n\n  // IMPORTANT: calculate original geometry bounding info first, before updating packed positions\n  if (geometry.boundingBox == null) geometry.computeBoundingBox();\n  if (geometry.boundingSphere == null) geometry.computeBoundingSphere();\n  geometry.setAttribute('position', new BufferAttribute(quantized, 3));\n  geometry.attributes.position.isPacked = true;\n  geometry.attributes.position.needsUpdate = true;\n  geometry.attributes.position.bytes = quantized.length * encodingBytes;\n}\n\n/**\n * Compressed the given geometry's `uv` attribute.\n *\n * @param {BufferGeometry} geometry - The geometry whose texture coordinates should be compressed.\n */\nfunction compressUvs(geometry) {\n  const uvs = geometry.attributes.uv;\n  if (!uvs) {\n    console.error('THREE.GeometryCompressionUtils.compressUvs(): Geometry must contain uv attribute.');\n  }\n  if (uvs.isPacked) return;\n  const range = {\n    min: Infinity,\n    max: -Infinity\n  };\n  const array = uvs.array;\n  for (let i = 0; i < array.length; i++) {\n    range.min = Math.min(range.min, array[i]);\n    range.max = Math.max(range.max, array[i]);\n  }\n  let result;\n  if (range.min >= -1.0 && range.max <= 1.0) {\n    // use default encoding method\n    result = new Uint16Array(array.length);\n    for (let i = 0; i < array.length; i += 2) {\n      const encoded = defaultEncode(array[i], array[i + 1], 0, 2);\n      result[i] = encoded[0];\n      result[i + 1] = encoded[1];\n    }\n    geometry.setAttribute('uv', new BufferAttribute(result, 2, true));\n    geometry.attributes.uv.isPacked = true;\n    geometry.attributes.uv.needsUpdate = true;\n    geometry.attributes.uv.bytes = result.length * 2;\n  } else {\n    // use quantized encoding method\n    result = quantizedEncodeUV(array, 2);\n    geometry.setAttribute('uv', new BufferAttribute(result.quantized, 2));\n    geometry.attributes.uv.isPacked = true;\n    geometry.attributes.uv.needsUpdate = true;\n    geometry.attributes.uv.bytes = result.quantized.length * 2;\n  }\n}\n\n// Encoding functions\n\nfunction defaultEncode(x, y, z, bytes) {\n  if (bytes == 1) {\n    const tmpx = Math.round((x + 1) * 0.5 * 255);\n    const tmpy = Math.round((y + 1) * 0.5 * 255);\n    const tmpz = Math.round((z + 1) * 0.5 * 255);\n    return new Uint8Array([tmpx, tmpy, tmpz]);\n  } else if (bytes == 2) {\n    const tmpx = Math.round((x + 1) * 0.5 * 65535);\n    const tmpy = Math.round((y + 1) * 0.5 * 65535);\n    const tmpz = Math.round((z + 1) * 0.5 * 65535);\n    return new Uint16Array([tmpx, tmpy, tmpz]);\n  } else {\n    console.error('number of bytes must be 1 or 2');\n  }\n}\n\n// for `Angles` encoding\nfunction anglesEncode(x, y, z) {\n  const normal0 = parseInt(0.5 * (1.0 + Math.atan2(y, x) / Math.PI) * 65535);\n  const normal1 = parseInt(0.5 * (1.0 + z) * 65535);\n  return new Uint16Array([normal0, normal1]);\n}\n\n// for `Octahedron` encoding\nfunction octEncodeBest(x, y, z, bytes) {\n  let oct, dec, best, currentCos, bestCos;\n\n  // Test various combinations of ceil and floor\n  // to minimize rounding errors\n  best = oct = octEncodeVec3(x, y, z, 'floor', 'floor');\n  dec = octDecodeVec2(oct);\n  bestCos = dot(x, y, z, dec);\n  oct = octEncodeVec3(x, y, z, 'ceil', 'floor');\n  dec = octDecodeVec2(oct);\n  currentCos = dot(x, y, z, dec);\n  if (currentCos > bestCos) {\n    best = oct;\n    bestCos = currentCos;\n  }\n  oct = octEncodeVec3(x, y, z, 'floor', 'ceil');\n  dec = octDecodeVec2(oct);\n  currentCos = dot(x, y, z, dec);\n  if (currentCos > bestCos) {\n    best = oct;\n    bestCos = currentCos;\n  }\n  oct = octEncodeVec3(x, y, z, 'ceil', 'ceil');\n  dec = octDecodeVec2(oct);\n  currentCos = dot(x, y, z, dec);\n  if (currentCos > bestCos) {\n    best = oct;\n  }\n  return best;\n  function octEncodeVec3(x0, y0, z0, xfunc, yfunc) {\n    let x = x0 / (Math.abs(x0) + Math.abs(y0) + Math.abs(z0));\n    let y = y0 / (Math.abs(x0) + Math.abs(y0) + Math.abs(z0));\n    if (z < 0) {\n      const tempx = (1 - Math.abs(y)) * (x >= 0 ? 1 : -1);\n      const tempy = (1 - Math.abs(x)) * (y >= 0 ? 1 : -1);\n      x = tempx;\n      y = tempy;\n      let diff = 1 - Math.abs(x) - Math.abs(y);\n      if (diff > 0) {\n        diff += 0.001;\n        x += x > 0 ? diff / 2 : -diff / 2;\n        y += y > 0 ? diff / 2 : -diff / 2;\n      }\n    }\n    if (bytes == 1) {\n      return new Int8Array([Math[xfunc](x * 127.5 + (x < 0 ? 1 : 0)), Math[yfunc](y * 127.5 + (y < 0 ? 1 : 0))]);\n    }\n    if (bytes == 2) {\n      return new Int16Array([Math[xfunc](x * 32767.5 + (x < 0 ? 1 : 0)), Math[yfunc](y * 32767.5 + (y < 0 ? 1 : 0))]);\n    }\n  }\n  function octDecodeVec2(oct) {\n    let x = oct[0];\n    let y = oct[1];\n    if (bytes == 1) {\n      x /= x < 0 ? 127 : 128;\n      y /= y < 0 ? 127 : 128;\n    } else if (bytes == 2) {\n      x /= x < 0 ? 32767 : 32768;\n      y /= y < 0 ? 32767 : 32768;\n    }\n    const z = 1 - Math.abs(x) - Math.abs(y);\n    if (z < 0) {\n      const tmpx = x;\n      x = (1 - Math.abs(y)) * (x >= 0 ? 1 : -1);\n      y = (1 - Math.abs(tmpx)) * (y >= 0 ? 1 : -1);\n    }\n    const length = Math.sqrt(x * x + y * y + z * z);\n    return [x / length, y / length, z / length];\n  }\n  function dot(x, y, z, vec3) {\n    return x * vec3[0] + y * vec3[1] + z * vec3[2];\n  }\n}\nfunction quantizedEncode(array, bytes) {\n  let quantized, segments;\n  if (bytes == 1) {\n    quantized = new Uint8Array(array.length);\n    segments = 255;\n  } else if (bytes == 2) {\n    quantized = new Uint16Array(array.length);\n    segments = 65535;\n  } else {\n    console.error('number of bytes error! ');\n  }\n  const decodeMat = new Matrix4();\n  const min = new Float32Array(3);\n  const max = new Float32Array(3);\n  min[0] = min[1] = min[2] = Number.MAX_VALUE;\n  max[0] = max[1] = max[2] = -Number.MAX_VALUE;\n  for (let i = 0; i < array.length; i += 3) {\n    min[0] = Math.min(min[0], array[i + 0]);\n    min[1] = Math.min(min[1], array[i + 1]);\n    min[2] = Math.min(min[2], array[i + 2]);\n    max[0] = Math.max(max[0], array[i + 0]);\n    max[1] = Math.max(max[1], array[i + 1]);\n    max[2] = Math.max(max[2], array[i + 2]);\n  }\n  decodeMat.scale(new Vector3((max[0] - min[0]) / segments, (max[1] - min[1]) / segments, (max[2] - min[2]) / segments));\n  decodeMat.elements[12] = min[0];\n  decodeMat.elements[13] = min[1];\n  decodeMat.elements[14] = min[2];\n  decodeMat.transpose();\n  const multiplier = new Float32Array([max[0] !== min[0] ? segments / (max[0] - min[0]) : 0, max[1] !== min[1] ? segments / (max[1] - min[1]) : 0, max[2] !== min[2] ? segments / (max[2] - min[2]) : 0]);\n  for (let i = 0; i < array.length; i += 3) {\n    quantized[i + 0] = Math.floor((array[i + 0] - min[0]) * multiplier[0]);\n    quantized[i + 1] = Math.floor((array[i + 1] - min[1]) * multiplier[1]);\n    quantized[i + 2] = Math.floor((array[i + 2] - min[2]) * multiplier[2]);\n  }\n  return {\n    quantized: quantized,\n    decodeMat: decodeMat\n  };\n}\nfunction quantizedEncodeUV(array, bytes) {\n  let quantized, segments;\n  if (bytes == 1) {\n    quantized = new Uint8Array(array.length);\n    segments = 255;\n  } else if (bytes == 2) {\n    quantized = new Uint16Array(array.length);\n    segments = 65535;\n  } else {\n    console.error('number of bytes error! ');\n  }\n  const decodeMat = new Matrix3();\n  const min = new Float32Array(2);\n  const max = new Float32Array(2);\n  min[0] = min[1] = Number.MAX_VALUE;\n  max[0] = max[1] = -Number.MAX_VALUE;\n  for (let i = 0; i < array.length; i += 2) {\n    min[0] = Math.min(min[0], array[i + 0]);\n    min[1] = Math.min(min[1], array[i + 1]);\n    max[0] = Math.max(max[0], array[i + 0]);\n    max[1] = Math.max(max[1], array[i + 1]);\n  }\n  decodeMat.scale((max[0] - min[0]) / segments, (max[1] - min[1]) / segments);\n  decodeMat.elements[6] = min[0];\n  decodeMat.elements[7] = min[1];\n  decodeMat.transpose();\n  const multiplier = new Float32Array([max[0] !== min[0] ? segments / (max[0] - min[0]) : 0, max[1] !== min[1] ? segments / (max[1] - min[1]) : 0]);\n  for (let i = 0; i < array.length; i += 2) {\n    quantized[i + 0] = Math.floor((array[i + 0] - min[0]) * multiplier[0]);\n    quantized[i + 1] = Math.floor((array[i + 1] - min[1]) * multiplier[1]);\n  }\n  return {\n    quantized: quantized,\n    decodeMat: decodeMat\n  };\n}\nexport { compressNormals, compressPositions, compressUvs };","map":{"version":3,"names":["BufferAttribute","Matrix3","Matrix4","Vector3","compressNormals","geometry","encodeMethod","normal","attributes","console","error","isPacked","itemSize","array","count","result","Uint8Array","idx","length","encoded","defaultEncode","setAttribute","bytes","Int8Array","octEncodeBest","Int16Array","Uint16Array","anglesEncode","needsUpdate","packingMethod","compressPositions","position","encodingBytes","quantizedEncode","quantized","boundingBox","computeBoundingBox","boundingSphere","computeBoundingSphere","compressUvs","uvs","uv","range","min","Infinity","max","i","Math","quantizedEncodeUV","x","y","z","tmpx","round","tmpy","tmpz","normal0","parseInt","atan2","PI","normal1","oct","dec","best","currentCos","bestCos","octEncodeVec3","octDecodeVec2","dot","x0","y0","z0","xfunc","yfunc","abs","tempx","tempy","diff","sqrt","vec3","segments","decodeMat","Float32Array","Number","MAX_VALUE","scale","elements","transpose","multiplier","floor"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/utils/GeometryCompressionUtils.js"],"sourcesContent":["import {\n\tBufferAttribute,\n\tMatrix3,\n\tMatrix4,\n\tVector3\n} from 'three';\n\n/**\n * @module GeometryCompressionUtils\n * @three_import import * as GeometryCompressionUtils from 'three/addons/utils/GeometryCompressionUtils.js';\n */\n\n// Octahedron and Quantization encodings based on work by: https://github.com/tsherif/mesh-quantization-example\n\n/**\n * Compressed the given geometry's `normal` attribute by the selected encode method.\n *\n * @param {BufferGeometry} geometry - The geometry whose normals should be compressed.\n * @param {('DEFAULT'|'OCT1Byte'|'OCT2Byte'|'ANGLES')} encodeMethod - The compression method.\n */\nfunction compressNormals( geometry, encodeMethod ) {\n\n\tconst normal = geometry.attributes.normal;\n\n\tif ( ! normal ) {\n\n\t\tconsole.error( 'THREE.GeometryCompressionUtils.compressNormals(): Geometry must contain normal attribute.' );\n\n\t}\n\n\tif ( normal.isPacked ) return;\n\n\tif ( normal.itemSize != 3 ) {\n\n\t\tconsole.error( 'THREE.GeometryCompressionUtils.compressNormals(): normal.itemSize is not 3, which cannot be encoded.' );\n\n\t}\n\n\tconst array = normal.array;\n\tconst count = normal.count;\n\n\tlet result;\n\tif ( encodeMethod == 'DEFAULT' ) {\n\n\t\t// TODO: Add 1 byte to the result, making the encoded length to be 4 bytes.\n\t\tresult = new Uint8Array( count * 3 );\n\n\t\tfor ( let idx = 0; idx < array.length; idx += 3 ) {\n\n\t\t\tconst encoded = defaultEncode( array[ idx ], array[ idx + 1 ], array[ idx + 2 ], 1 );\n\n\t\t\tresult[ idx + 0 ] = encoded[ 0 ];\n\t\t\tresult[ idx + 1 ] = encoded[ 1 ];\n\t\t\tresult[ idx + 2 ] = encoded[ 2 ];\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'normal', new BufferAttribute( result, 3, true ) );\n\t\tgeometry.attributes.normal.bytes = result.length * 1;\n\n\t} else if ( encodeMethod == 'OCT1Byte' ) {\n\n\n\t\t// It is not recommended to use 1-byte octahedron normals encoding unless you want to extremely reduce the memory usage\n\t\t// As it makes vertex data not aligned to a 4 byte boundary which may harm some WebGL implementations and sometimes the normal distortion is visible\n\t\t// Please refer to @zeux 's comments in https://github.com/mrdoob/three.js/pull/18208\n\n\t\tresult = new Int8Array( count * 2 );\n\n\t\tfor ( let idx = 0; idx < array.length; idx += 3 ) {\n\n\t\t\tconst encoded = octEncodeBest( array[ idx ], array[ idx + 1 ], array[ idx + 2 ], 1 );\n\n\t\t\tresult[ idx / 3 * 2 + 0 ] = encoded[ 0 ];\n\t\t\tresult[ idx / 3 * 2 + 1 ] = encoded[ 1 ];\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'normal', new BufferAttribute( result, 2, true ) );\n\t\tgeometry.attributes.normal.bytes = result.length * 1;\n\n\t} else if ( encodeMethod == 'OCT2Byte' ) {\n\n\t\tresult = new Int16Array( count * 2 );\n\n\t\tfor ( let idx = 0; idx < array.length; idx += 3 ) {\n\n\t\t\tconst encoded = octEncodeBest( array[ idx ], array[ idx + 1 ], array[ idx + 2 ], 2 );\n\n\t\t\tresult[ idx / 3 * 2 + 0 ] = encoded[ 0 ];\n\t\t\tresult[ idx / 3 * 2 + 1 ] = encoded[ 1 ];\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'normal', new BufferAttribute( result, 2, true ) );\n\t\tgeometry.attributes.normal.bytes = result.length * 2;\n\n\t} else if ( encodeMethod == 'ANGLES' ) {\n\n\t\tresult = new Uint16Array( count * 2 );\n\n\t\tfor ( let idx = 0; idx < array.length; idx += 3 ) {\n\n\t\t\tconst encoded = anglesEncode( array[ idx ], array[ idx + 1 ], array[ idx + 2 ] );\n\n\t\t\tresult[ idx / 3 * 2 + 0 ] = encoded[ 0 ];\n\t\t\tresult[ idx / 3 * 2 + 1 ] = encoded[ 1 ];\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'normal', new BufferAttribute( result, 2, true ) );\n\t\tgeometry.attributes.normal.bytes = result.length * 2;\n\n\t} else {\n\n\t\tconsole.error( 'Unrecognized encoding method, should be `DEFAULT` or `ANGLES` or `OCT`. ' );\n\n\t}\n\n\tgeometry.attributes.normal.needsUpdate = true;\n\tgeometry.attributes.normal.isPacked = true;\n\tgeometry.attributes.normal.packingMethod = encodeMethod;\n\n}\n\n/**\n * Compressed the given geometry's `position` attribute.\n *\n * @param {BufferGeometry} geometry - The geometry whose position values should be compressed.\n */\nfunction compressPositions( geometry ) {\n\n\tconst position = geometry.attributes.position;\n\n\tif ( ! position ) {\n\n\t\tconsole.error( 'THREE.GeometryCompressionUtils.compressPositions(): Geometry must contain position attribute.' );\n\n\t}\n\n\tif ( position.isPacked ) return;\n\n\tif ( position.itemSize != 3 ) {\n\n\t\tconsole.error( 'THREE.GeometryCompressionUtils.compressPositions(): position.itemSize is not 3, which cannot be packed.' );\n\n\t}\n\n\tconst array = position.array;\n\tconst encodingBytes = 2;\n\n\tconst result = quantizedEncode( array, encodingBytes );\n\n\tconst quantized = result.quantized;\n\n\t// IMPORTANT: calculate original geometry bounding info first, before updating packed positions\n\tif ( geometry.boundingBox == null ) geometry.computeBoundingBox();\n\tif ( geometry.boundingSphere == null ) geometry.computeBoundingSphere();\n\n\tgeometry.setAttribute( 'position', new BufferAttribute( quantized, 3 ) );\n\tgeometry.attributes.position.isPacked = true;\n\tgeometry.attributes.position.needsUpdate = true;\n\tgeometry.attributes.position.bytes = quantized.length * encodingBytes;\n\n}\n\n/**\n * Compressed the given geometry's `uv` attribute.\n *\n * @param {BufferGeometry} geometry - The geometry whose texture coordinates should be compressed.\n */\nfunction compressUvs( geometry ) {\n\n\tconst uvs = geometry.attributes.uv;\n\n\tif ( ! uvs ) {\n\n\t\tconsole.error( 'THREE.GeometryCompressionUtils.compressUvs(): Geometry must contain uv attribute.' );\n\n\t}\n\n\tif ( uvs.isPacked ) return;\n\n\tconst range = { min: Infinity, max: - Infinity };\n\n\tconst array = uvs.array;\n\n\tfor ( let i = 0; i < array.length; i ++ ) {\n\n\t\trange.min = Math.min( range.min, array[ i ] );\n\t\trange.max = Math.max( range.max, array[ i ] );\n\n\t}\n\n\tlet result;\n\n\tif ( range.min >= - 1.0 && range.max <= 1.0 ) {\n\n\t\t// use default encoding method\n\t\tresult = new Uint16Array( array.length );\n\n\t\tfor ( let i = 0; i < array.length; i += 2 ) {\n\n\t\t\tconst encoded = defaultEncode( array[ i ], array[ i + 1 ], 0, 2 );\n\n\t\t\tresult[ i ] = encoded[ 0 ];\n\t\t\tresult[ i + 1 ] = encoded[ 1 ];\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'uv', new BufferAttribute( result, 2, true ) );\n\t\tgeometry.attributes.uv.isPacked = true;\n\t\tgeometry.attributes.uv.needsUpdate = true;\n\t\tgeometry.attributes.uv.bytes = result.length * 2;\n\n\t} else {\n\n\t\t// use quantized encoding method\n\t\tresult = quantizedEncodeUV( array, 2 );\n\n\t\tgeometry.setAttribute( 'uv', new BufferAttribute( result.quantized, 2 ) );\n\t\tgeometry.attributes.uv.isPacked = true;\n\t\tgeometry.attributes.uv.needsUpdate = true;\n\t\tgeometry.attributes.uv.bytes = result.quantized.length * 2;\n\n\t}\n\n}\n\n\n// Encoding functions\n\nfunction defaultEncode( x, y, z, bytes ) {\n\n\tif ( bytes == 1 ) {\n\n\t\tconst tmpx = Math.round( ( x + 1 ) * 0.5 * 255 );\n\t\tconst tmpy = Math.round( ( y + 1 ) * 0.5 * 255 );\n\t\tconst tmpz = Math.round( ( z + 1 ) * 0.5 * 255 );\n\t\treturn new Uint8Array( [ tmpx, tmpy, tmpz ] );\n\n\t} else if ( bytes == 2 ) {\n\n\t\tconst tmpx = Math.round( ( x + 1 ) * 0.5 * 65535 );\n\t\tconst tmpy = Math.round( ( y + 1 ) * 0.5 * 65535 );\n\t\tconst tmpz = Math.round( ( z + 1 ) * 0.5 * 65535 );\n\t\treturn new Uint16Array( [ tmpx, tmpy, tmpz ] );\n\n\t} else {\n\n\t\tconsole.error( 'number of bytes must be 1 or 2' );\n\n\t}\n\n}\n\n// for `Angles` encoding\nfunction anglesEncode( x, y, z ) {\n\n\tconst normal0 = parseInt( 0.5 * ( 1.0 + Math.atan2( y, x ) / Math.PI ) * 65535 );\n\tconst normal1 = parseInt( 0.5 * ( 1.0 + z ) * 65535 );\n\treturn new Uint16Array( [ normal0, normal1 ] );\n\n}\n\n// for `Octahedron` encoding\nfunction octEncodeBest( x, y, z, bytes ) {\n\n\tlet oct, dec, best, currentCos, bestCos;\n\n\t// Test various combinations of ceil and floor\n\t// to minimize rounding errors\n\tbest = oct = octEncodeVec3( x, y, z, 'floor', 'floor' );\n\tdec = octDecodeVec2( oct );\n\tbestCos = dot( x, y, z, dec );\n\n\toct = octEncodeVec3( x, y, z, 'ceil', 'floor' );\n\tdec = octDecodeVec2( oct );\n\tcurrentCos = dot( x, y, z, dec );\n\n\tif ( currentCos > bestCos ) {\n\n\t\tbest = oct;\n\t\tbestCos = currentCos;\n\n\t}\n\n\toct = octEncodeVec3( x, y, z, 'floor', 'ceil' );\n\tdec = octDecodeVec2( oct );\n\tcurrentCos = dot( x, y, z, dec );\n\n\tif ( currentCos > bestCos ) {\n\n\t\tbest = oct;\n\t\tbestCos = currentCos;\n\n\t}\n\n\toct = octEncodeVec3( x, y, z, 'ceil', 'ceil' );\n\tdec = octDecodeVec2( oct );\n\tcurrentCos = dot( x, y, z, dec );\n\n\tif ( currentCos > bestCos ) {\n\n\t\tbest = oct;\n\n\t}\n\n\treturn best;\n\n\tfunction octEncodeVec3( x0, y0, z0, xfunc, yfunc ) {\n\n\t\tlet x = x0 / ( Math.abs( x0 ) + Math.abs( y0 ) + Math.abs( z0 ) );\n\t\tlet y = y0 / ( Math.abs( x0 ) + Math.abs( y0 ) + Math.abs( z0 ) );\n\n\t\tif ( z < 0 ) {\n\n\t\t\tconst tempx = ( 1 - Math.abs( y ) ) * ( x >= 0 ? 1 : - 1 );\n\t\t\tconst tempy = ( 1 - Math.abs( x ) ) * ( y >= 0 ? 1 : - 1 );\n\n\t\t\tx = tempx;\n\t\t\ty = tempy;\n\n\t\t\tlet diff = 1 - Math.abs( x ) - Math.abs( y );\n\t\t\tif ( diff > 0 ) {\n\n\t\t\t\tdiff += 0.001;\n\t\t\t\tx += x > 0 ? diff / 2 : - diff / 2;\n\t\t\t\ty += y > 0 ? diff / 2 : - diff / 2;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( bytes == 1 ) {\n\n\t\t\treturn new Int8Array( [\n\t\t\t\tMath[ xfunc ]( x * 127.5 + ( x < 0 ? 1 : 0 ) ),\n\t\t\t\tMath[ yfunc ]( y * 127.5 + ( y < 0 ? 1 : 0 ) )\n\t\t\t] );\n\n\t\t}\n\n\t\tif ( bytes == 2 ) {\n\n\t\t\treturn new Int16Array( [\n\t\t\t\tMath[ xfunc ]( x * 32767.5 + ( x < 0 ? 1 : 0 ) ),\n\t\t\t\tMath[ yfunc ]( y * 32767.5 + ( y < 0 ? 1 : 0 ) )\n\t\t\t] );\n\n\t\t}\n\n\n\t}\n\n\tfunction octDecodeVec2( oct ) {\n\n\t\tlet x = oct[ 0 ];\n\t\tlet y = oct[ 1 ];\n\n\t\tif ( bytes == 1 ) {\n\n\t\t\tx /= x < 0 ? 127 : 128;\n\t\t\ty /= y < 0 ? 127 : 128;\n\n\t\t} else if ( bytes == 2 ) {\n\n\t\t\tx /= x < 0 ? 32767 : 32768;\n\t\t\ty /= y < 0 ? 32767 : 32768;\n\n\t\t}\n\n\n\t\tconst z = 1 - Math.abs( x ) - Math.abs( y );\n\n\t\tif ( z < 0 ) {\n\n\t\t\tconst tmpx = x;\n\t\t\tx = ( 1 - Math.abs( y ) ) * ( x >= 0 ? 1 : - 1 );\n\t\t\ty = ( 1 - Math.abs( tmpx ) ) * ( y >= 0 ? 1 : - 1 );\n\n\t\t}\n\n\t\tconst length = Math.sqrt( x * x + y * y + z * z );\n\n\t\treturn [\n\t\t\tx / length,\n\t\t\ty / length,\n\t\t\tz / length\n\t\t];\n\n\t}\n\n\tfunction dot( x, y, z, vec3 ) {\n\n\t\treturn x * vec3[ 0 ] + y * vec3[ 1 ] + z * vec3[ 2 ];\n\n\t}\n\n}\n\nfunction quantizedEncode( array, bytes ) {\n\n\tlet quantized, segments;\n\n\tif ( bytes == 1 ) {\n\n\t\tquantized = new Uint8Array( array.length );\n\t\tsegments = 255;\n\n\t} else if ( bytes == 2 ) {\n\n\t\tquantized = new Uint16Array( array.length );\n\t\tsegments = 65535;\n\n\t} else {\n\n\t\tconsole.error( 'number of bytes error! ' );\n\n\t}\n\n\tconst decodeMat = new Matrix4();\n\n\tconst min = new Float32Array( 3 );\n\tconst max = new Float32Array( 3 );\n\n\tmin[ 0 ] = min[ 1 ] = min[ 2 ] = Number.MAX_VALUE;\n\tmax[ 0 ] = max[ 1 ] = max[ 2 ] = - Number.MAX_VALUE;\n\n\tfor ( let i = 0; i < array.length; i += 3 ) {\n\n\t\tmin[ 0 ] = Math.min( min[ 0 ], array[ i + 0 ] );\n\t\tmin[ 1 ] = Math.min( min[ 1 ], array[ i + 1 ] );\n\t\tmin[ 2 ] = Math.min( min[ 2 ], array[ i + 2 ] );\n\t\tmax[ 0 ] = Math.max( max[ 0 ], array[ i + 0 ] );\n\t\tmax[ 1 ] = Math.max( max[ 1 ], array[ i + 1 ] );\n\t\tmax[ 2 ] = Math.max( max[ 2 ], array[ i + 2 ] );\n\n\t}\n\n\tdecodeMat.scale( new Vector3(\n\t\t( max[ 0 ] - min[ 0 ] ) / segments,\n\t\t( max[ 1 ] - min[ 1 ] ) / segments,\n\t\t( max[ 2 ] - min[ 2 ] ) / segments\n\t) );\n\n\tdecodeMat.elements[ 12 ] = min[ 0 ];\n\tdecodeMat.elements[ 13 ] = min[ 1 ];\n\tdecodeMat.elements[ 14 ] = min[ 2 ];\n\n\tdecodeMat.transpose();\n\n\n\tconst multiplier = new Float32Array( [\n\t\tmax[ 0 ] !== min[ 0 ] ? segments / ( max[ 0 ] - min[ 0 ] ) : 0,\n\t\tmax[ 1 ] !== min[ 1 ] ? segments / ( max[ 1 ] - min[ 1 ] ) : 0,\n\t\tmax[ 2 ] !== min[ 2 ] ? segments / ( max[ 2 ] - min[ 2 ] ) : 0\n\t] );\n\n\tfor ( let i = 0; i < array.length; i += 3 ) {\n\n\t\tquantized[ i + 0 ] = Math.floor( ( array[ i + 0 ] - min[ 0 ] ) * multiplier[ 0 ] );\n\t\tquantized[ i + 1 ] = Math.floor( ( array[ i + 1 ] - min[ 1 ] ) * multiplier[ 1 ] );\n\t\tquantized[ i + 2 ] = Math.floor( ( array[ i + 2 ] - min[ 2 ] ) * multiplier[ 2 ] );\n\n\t}\n\n\treturn {\n\t\tquantized: quantized,\n\t\tdecodeMat: decodeMat\n\t};\n\n}\n\nfunction quantizedEncodeUV( array, bytes ) {\n\n\tlet quantized, segments;\n\n\tif ( bytes == 1 ) {\n\n\t\tquantized = new Uint8Array( array.length );\n\t\tsegments = 255;\n\n\t} else if ( bytes == 2 ) {\n\n\t\tquantized = new Uint16Array( array.length );\n\t\tsegments = 65535;\n\n\t} else {\n\n\t\tconsole.error( 'number of bytes error! ' );\n\n\t}\n\n\tconst decodeMat = new Matrix3();\n\n\tconst min = new Float32Array( 2 );\n\tconst max = new Float32Array( 2 );\n\n\tmin[ 0 ] = min[ 1 ] = Number.MAX_VALUE;\n\tmax[ 0 ] = max[ 1 ] = - Number.MAX_VALUE;\n\n\tfor ( let i = 0; i < array.length; i += 2 ) {\n\n\t\tmin[ 0 ] = Math.min( min[ 0 ], array[ i + 0 ] );\n\t\tmin[ 1 ] = Math.min( min[ 1 ], array[ i + 1 ] );\n\t\tmax[ 0 ] = Math.max( max[ 0 ], array[ i + 0 ] );\n\t\tmax[ 1 ] = Math.max( max[ 1 ], array[ i + 1 ] );\n\n\t}\n\n\tdecodeMat.scale(\n\t\t( max[ 0 ] - min[ 0 ] ) / segments,\n\t\t( max[ 1 ] - min[ 1 ] ) / segments\n\t);\n\n\tdecodeMat.elements[ 6 ] = min[ 0 ];\n\tdecodeMat.elements[ 7 ] = min[ 1 ];\n\n\tdecodeMat.transpose();\n\n\tconst multiplier = new Float32Array( [\n\t\tmax[ 0 ] !== min[ 0 ] ? segments / ( max[ 0 ] - min[ 0 ] ) : 0,\n\t\tmax[ 1 ] !== min[ 1 ] ? segments / ( max[ 1 ] - min[ 1 ] ) : 0\n\t] );\n\n\tfor ( let i = 0; i < array.length; i += 2 ) {\n\n\t\tquantized[ i + 0 ] = Math.floor( ( array[ i + 0 ] - min[ 0 ] ) * multiplier[ 0 ] );\n\t\tquantized[ i + 1 ] = Math.floor( ( array[ i + 1 ] - min[ 1 ] ) * multiplier[ 1 ] );\n\n\t}\n\n\treturn {\n\t\tquantized: quantized,\n\t\tdecodeMat: decodeMat\n\t};\n\n}\n\n\n\nexport {\n\tcompressNormals,\n\tcompressPositions,\n\tcompressUvs,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}