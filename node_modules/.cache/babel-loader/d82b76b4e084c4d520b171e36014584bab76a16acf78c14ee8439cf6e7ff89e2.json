{"ast":null,"code":"import { Object3D, Quaternion, Vector3 } from 'three';\nconst _translationObject = new Vector3();\nconst _quaternionObject = new Quaternion();\nconst _scaleObject = new Vector3();\nconst _translationWorld = new Vector3();\nconst _quaternionWorld = new Quaternion();\nconst _scaleWorld = new Vector3();\n\n/**\n * A special type of 3D object that takes a position from the scene graph hierarchy\n * but uses its local rotation as world rotation. It works like real-world gyroscope -\n * you can move it around using hierarchy while its orientation stays fixed with\n * respect to the world.\n *\n * @augments Object3D\n * @three_import import { Gyroscope } from 'three/addons/misc/Gyroscope.js';\n */\nclass Gyroscope extends Object3D {\n  /**\n   * Constructs a new gyroscope.\n   */\n  constructor() {\n    super();\n  }\n  updateMatrixWorld(force) {\n    this.matrixAutoUpdate && this.updateMatrix();\n\n    // update matrixWorld\n\n    if (this.matrixWorldNeedsUpdate || force) {\n      if (this.parent !== null) {\n        this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);\n        this.matrixWorld.decompose(_translationWorld, _quaternionWorld, _scaleWorld);\n        this.matrix.decompose(_translationObject, _quaternionObject, _scaleObject);\n        this.matrixWorld.compose(_translationWorld, _quaternionObject, _scaleWorld);\n      } else {\n        this.matrixWorld.copy(this.matrix);\n      }\n      this.matrixWorldNeedsUpdate = false;\n      force = true;\n    }\n\n    // update children\n\n    for (let i = 0, l = this.children.length; i < l; i++) {\n      this.children[i].updateMatrixWorld(force);\n    }\n  }\n}\nexport { Gyroscope };","map":{"version":3,"names":["Object3D","Quaternion","Vector3","_translationObject","_quaternionObject","_scaleObject","_translationWorld","_quaternionWorld","_scaleWorld","Gyroscope","constructor","updateMatrixWorld","force","matrixAutoUpdate","updateMatrix","matrixWorldNeedsUpdate","parent","matrixWorld","multiplyMatrices","matrix","decompose","compose","copy","i","l","children","length"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/misc/Gyroscope.js"],"sourcesContent":["import {\n\tObject3D,\n\tQuaternion,\n\tVector3\n} from 'three';\n\nconst _translationObject = new Vector3();\nconst _quaternionObject = new Quaternion();\nconst _scaleObject = new Vector3();\n\nconst _translationWorld = new Vector3();\nconst _quaternionWorld = new Quaternion();\nconst _scaleWorld = new Vector3();\n\n/**\n * A special type of 3D object that takes a position from the scene graph hierarchy\n * but uses its local rotation as world rotation. It works like real-world gyroscope -\n * you can move it around using hierarchy while its orientation stays fixed with\n * respect to the world.\n *\n * @augments Object3D\n * @three_import import { Gyroscope } from 'three/addons/misc/Gyroscope.js';\n */\nclass Gyroscope extends Object3D {\n\n\t/**\n\t * Constructs a new gyroscope.\n\t */\n\tconstructor() {\n\n\t\tsuper();\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tthis.matrixAutoUpdate && this.updateMatrix();\n\n\t\t// update matrixWorld\n\n\t\tif ( this.matrixWorldNeedsUpdate || force ) {\n\n\t\t\tif ( this.parent !== null ) {\n\n\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t\t\tthis.matrixWorld.decompose( _translationWorld, _quaternionWorld, _scaleWorld );\n\t\t\t\tthis.matrix.decompose( _translationObject, _quaternionObject, _scaleObject );\n\n\t\t\t\tthis.matrixWorld.compose( _translationWorld, _quaternionObject, _scaleWorld );\n\n\n\t\t\t} else {\n\n\t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t\t}\n\n\n\t\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\t\tforce = true;\n\n\t\t}\n\n\t\t// update children\n\n\t\tfor ( let i = 0, l = this.children.length; i < l; i ++ ) {\n\n\t\t\tthis.children[ i ].updateMatrixWorld( force );\n\n\t\t}\n\n\t}\n\n}\n\nexport { Gyroscope };\n"],"mappings":"AAAA,SACCA,QAAQ,EACRC,UAAU,EACVC,OAAO,QACD,OAAO;AAEd,MAAMC,kBAAkB,GAAG,IAAID,OAAO,CAAC,CAAC;AACxC,MAAME,iBAAiB,GAAG,IAAIH,UAAU,CAAC,CAAC;AAC1C,MAAMI,YAAY,GAAG,IAAIH,OAAO,CAAC,CAAC;AAElC,MAAMI,iBAAiB,GAAG,IAAIJ,OAAO,CAAC,CAAC;AACvC,MAAMK,gBAAgB,GAAG,IAAIN,UAAU,CAAC,CAAC;AACzC,MAAMO,WAAW,GAAG,IAAIN,OAAO,CAAC,CAAC;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMO,SAAS,SAAST,QAAQ,CAAC;EAEhC;AACD;AACA;EACCU,WAAWA,CAAA,EAAG;IAEb,KAAK,CAAC,CAAC;EAER;EAEAC,iBAAiBA,CAAEC,KAAK,EAAG;IAE1B,IAAI,CAACC,gBAAgB,IAAI,IAAI,CAACC,YAAY,CAAC,CAAC;;IAE5C;;IAEA,IAAK,IAAI,CAACC,sBAAsB,IAAIH,KAAK,EAAG;MAE3C,IAAK,IAAI,CAACI,MAAM,KAAK,IAAI,EAAG;QAE3B,IAAI,CAACC,WAAW,CAACC,gBAAgB,CAAE,IAAI,CAACF,MAAM,CAACC,WAAW,EAAE,IAAI,CAACE,MAAO,CAAC;QAEzE,IAAI,CAACF,WAAW,CAACG,SAAS,CAAEd,iBAAiB,EAAEC,gBAAgB,EAAEC,WAAY,CAAC;QAC9E,IAAI,CAACW,MAAM,CAACC,SAAS,CAAEjB,kBAAkB,EAAEC,iBAAiB,EAAEC,YAAa,CAAC;QAE5E,IAAI,CAACY,WAAW,CAACI,OAAO,CAAEf,iBAAiB,EAAEF,iBAAiB,EAAEI,WAAY,CAAC;MAG9E,CAAC,MAAM;QAEN,IAAI,CAACS,WAAW,CAACK,IAAI,CAAE,IAAI,CAACH,MAAO,CAAC;MAErC;MAGA,IAAI,CAACJ,sBAAsB,GAAG,KAAK;MAEnCH,KAAK,GAAG,IAAI;IAEb;;IAEA;;IAEA,KAAM,IAAIW,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAG,IAAI,CAACC,QAAQ,CAACC,MAAM,EAAEH,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAG,EAAG;MAExD,IAAI,CAACE,QAAQ,CAAEF,CAAC,CAAE,CAACZ,iBAAiB,CAAEC,KAAM,CAAC;IAE9C;EAED;AAED;AAEA,SAASH,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}