{"ast":null,"code":"import { Color, ShaderChunk, ShaderLib, UniformsUtils } from 'three';\nfunction replaceAll(string, find, replace) {\n  return string.split(find).join(replace);\n}\nconst meshphong_frag_head = ShaderChunk['meshphong_frag'].slice(0, ShaderChunk['meshphong_frag'].indexOf('void main() {'));\nconst meshphong_frag_body = ShaderChunk['meshphong_frag'].slice(ShaderChunk['meshphong_frag'].indexOf('void main() {'));\n\n/**\n * @module SubsurfaceScatteringShader\n * @three_import import { SubsurfaceScatteringShader } from 'three/addons/shaders/SubsurfaceScatteringShader.js';\n */\n\n/**\n * Subsurface Scattering shader.\n *\n * Based on GDC 2011 – [Approximating Translucency for a Fast, Cheap and Convincing Subsurface Scattering Look]{@link https://colinbarrebrisebois.com/2011/03/07/gdc-2011-approximating-translucency-for-a-fast-cheap-and-convincing-subsurface-scattering-look/}\n *\n * @constant\n * @type {ShaderMaterial~Shader}\n */\nconst SubsurfaceScatteringShader = {\n  name: 'SubsurfaceScatteringShader',\n  uniforms: UniformsUtils.merge([ShaderLib['phong'].uniforms, {\n    'thicknessMap': {\n      value: null\n    },\n    'thicknessColor': {\n      value: new Color(0xffffff)\n    },\n    'thicknessDistortion': {\n      value: 0.1\n    },\n    'thicknessAmbient': {\n      value: 0.0\n    },\n    'thicknessAttenuation': {\n      value: 0.1\n    },\n    'thicknessPower': {\n      value: 2.0\n    },\n    'thicknessScale': {\n      value: 10.0\n    }\n  }]),\n  vertexShader: ['#define USE_UV', ShaderChunk['meshphong_vert']].join('\\n'),\n  fragmentShader: ['#define USE_UV', '#define SUBSURFACE', meshphong_frag_head, 'uniform sampler2D thicknessMap;', 'uniform float thicknessPower;', 'uniform float thicknessScale;', 'uniform float thicknessDistortion;', 'uniform float thicknessAmbient;', 'uniform float thicknessAttenuation;', 'uniform vec3 thicknessColor;', 'void RE_Direct_Scattering(const in IncidentLight directLight, const in vec2 uv, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, inout ReflectedLight reflectedLight) {', '\tvec3 thickness = thicknessColor * texture2D(thicknessMap, uv).r;', '\tvec3 scatteringHalf = normalize(directLight.direction + (geometryNormal * thicknessDistortion));', '\tfloat scatteringDot = pow(saturate(dot(geometryViewDir, -scatteringHalf)), thicknessPower) * thicknessScale;', '\tvec3 scatteringIllu = (scatteringDot + thicknessAmbient) * thickness;', '\treflectedLight.directDiffuse += scatteringIllu * thicknessAttenuation * directLight.color;', '}', meshphong_frag_body.replace('#include <lights_fragment_begin>', replaceAll(ShaderChunk['lights_fragment_begin'], 'RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );', ['RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );', '#if defined( SUBSURFACE ) && defined( USE_UV )', ' RE_Direct_Scattering(directLight, vUv, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, reflectedLight);', '#endif'].join('\\n')))].join('\\n')\n};\nexport { SubsurfaceScatteringShader };","map":{"version":3,"names":["Color","ShaderChunk","ShaderLib","UniformsUtils","replaceAll","string","find","replace","split","join","meshphong_frag_head","slice","indexOf","meshphong_frag_body","SubsurfaceScatteringShader","name","uniforms","merge","value","vertexShader","fragmentShader"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/shaders/SubsurfaceScatteringShader.js"],"sourcesContent":["import {\n\tColor,\n\tShaderChunk,\n\tShaderLib,\n\tUniformsUtils\n} from 'three';\n\nfunction replaceAll( string, find, replace ) {\n\n\treturn string.split( find ).join( replace );\n\n}\n\nconst meshphong_frag_head = ShaderChunk[ 'meshphong_frag' ].slice( 0, ShaderChunk[ 'meshphong_frag' ].indexOf( 'void main() {' ) );\nconst meshphong_frag_body = ShaderChunk[ 'meshphong_frag' ].slice( ShaderChunk[ 'meshphong_frag' ].indexOf( 'void main() {' ) );\n\n/**\n * @module SubsurfaceScatteringShader\n * @three_import import { SubsurfaceScatteringShader } from 'three/addons/shaders/SubsurfaceScatteringShader.js';\n */\n\n/**\n * Subsurface Scattering shader.\n *\n * Based on GDC 2011 – [Approximating Translucency for a Fast, Cheap and Convincing Subsurface Scattering Look]{@link https://colinbarrebrisebois.com/2011/03/07/gdc-2011-approximating-translucency-for-a-fast-cheap-and-convincing-subsurface-scattering-look/}\n *\n * @constant\n * @type {ShaderMaterial~Shader}\n */\nconst SubsurfaceScatteringShader = {\n\n\tname: 'SubsurfaceScatteringShader',\n\n\tuniforms: UniformsUtils.merge( [\n\t\tShaderLib[ 'phong' ].uniforms,\n\t\t{\n\t\t\t'thicknessMap': { value: null },\n\t\t\t'thicknessColor': { value: new Color( 0xffffff ) },\n\t\t\t'thicknessDistortion': { value: 0.1 },\n\t\t\t'thicknessAmbient': { value: 0.0 },\n\t\t\t'thicknessAttenuation': { value: 0.1 },\n\t\t\t'thicknessPower': { value: 2.0 },\n\t\t\t'thicknessScale': { value: 10.0 }\n\t\t}\n\n\t] ),\n\n\tvertexShader: [\n\t\t'#define USE_UV',\n\t\tShaderChunk[ 'meshphong_vert' ],\n\t].join( '\\n' ),\n\n\tfragmentShader: [\n\t\t'#define USE_UV',\n\t\t'#define SUBSURFACE',\n\n\t\tmeshphong_frag_head,\n\n\t\t'uniform sampler2D thicknessMap;',\n\t\t'uniform float thicknessPower;',\n\t\t'uniform float thicknessScale;',\n\t\t'uniform float thicknessDistortion;',\n\t\t'uniform float thicknessAmbient;',\n\t\t'uniform float thicknessAttenuation;',\n\t\t'uniform vec3 thicknessColor;',\n\n\t\t'void RE_Direct_Scattering(const in IncidentLight directLight, const in vec2 uv, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, inout ReflectedLight reflectedLight) {',\n\t\t'\tvec3 thickness = thicknessColor * texture2D(thicknessMap, uv).r;',\n\t\t'\tvec3 scatteringHalf = normalize(directLight.direction + (geometryNormal * thicknessDistortion));',\n\t\t'\tfloat scatteringDot = pow(saturate(dot(geometryViewDir, -scatteringHalf)), thicknessPower) * thicknessScale;',\n\t\t'\tvec3 scatteringIllu = (scatteringDot + thicknessAmbient) * thickness;',\n\t\t'\treflectedLight.directDiffuse += scatteringIllu * thicknessAttenuation * directLight.color;',\n\t\t'}',\n\n\t\tmeshphong_frag_body.replace( '#include <lights_fragment_begin>',\n\n\t\t\treplaceAll(\n\t\t\t\tShaderChunk[ 'lights_fragment_begin' ],\n\t\t\t\t'RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );',\n\t\t\t\t[\n\t\t\t\t\t'RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );',\n\n\t\t\t\t\t'#if defined( SUBSURFACE ) && defined( USE_UV )',\n\t\t\t\t\t' RE_Direct_Scattering(directLight, vUv, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, reflectedLight);',\n\t\t\t\t\t'#endif',\n\t\t\t\t].join( '\\n' )\n\t\t\t),\n\n\t\t),\n\n\t].join( '\\n' ),\n\n};\n\nexport { SubsurfaceScatteringShader };\n"],"mappings":"AAAA,SACCA,KAAK,EACLC,WAAW,EACXC,SAAS,EACTC,aAAa,QACP,OAAO;AAEd,SAASC,UAAUA,CAAEC,MAAM,EAAEC,IAAI,EAAEC,OAAO,EAAG;EAE5C,OAAOF,MAAM,CAACG,KAAK,CAAEF,IAAK,CAAC,CAACG,IAAI,CAAEF,OAAQ,CAAC;AAE5C;AAEA,MAAMG,mBAAmB,GAAGT,WAAW,CAAE,gBAAgB,CAAE,CAACU,KAAK,CAAE,CAAC,EAAEV,WAAW,CAAE,gBAAgB,CAAE,CAACW,OAAO,CAAE,eAAgB,CAAE,CAAC;AAClI,MAAMC,mBAAmB,GAAGZ,WAAW,CAAE,gBAAgB,CAAE,CAACU,KAAK,CAAEV,WAAW,CAAE,gBAAgB,CAAE,CAACW,OAAO,CAAE,eAAgB,CAAE,CAAC;;AAE/H;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,0BAA0B,GAAG;EAElCC,IAAI,EAAE,4BAA4B;EAElCC,QAAQ,EAAEb,aAAa,CAACc,KAAK,CAAE,CAC9Bf,SAAS,CAAE,OAAO,CAAE,CAACc,QAAQ,EAC7B;IACC,cAAc,EAAE;MAAEE,KAAK,EAAE;IAAK,CAAC;IAC/B,gBAAgB,EAAE;MAAEA,KAAK,EAAE,IAAIlB,KAAK,CAAE,QAAS;IAAE,CAAC;IAClD,qBAAqB,EAAE;MAAEkB,KAAK,EAAE;IAAI,CAAC;IACrC,kBAAkB,EAAE;MAAEA,KAAK,EAAE;IAAI,CAAC;IAClC,sBAAsB,EAAE;MAAEA,KAAK,EAAE;IAAI,CAAC;IACtC,gBAAgB,EAAE;MAAEA,KAAK,EAAE;IAAI,CAAC;IAChC,gBAAgB,EAAE;MAAEA,KAAK,EAAE;IAAK;EACjC,CAAC,CAEA,CAAC;EAEHC,YAAY,EAAE,CACb,gBAAgB,EAChBlB,WAAW,CAAE,gBAAgB,CAAE,CAC/B,CAACQ,IAAI,CAAE,IAAK,CAAC;EAEdW,cAAc,EAAE,CACf,gBAAgB,EAChB,oBAAoB,EAEpBV,mBAAmB,EAEnB,iCAAiC,EACjC,+BAA+B,EAC/B,+BAA+B,EAC/B,oCAAoC,EACpC,iCAAiC,EACjC,qCAAqC,EACrC,8BAA8B,EAE9B,4PAA4P,EAC5P,mEAAmE,EACnE,mGAAmG,EACnG,+GAA+G,EAC/G,wEAAwE,EACxE,6FAA6F,EAC7F,GAAG,EAEHG,mBAAmB,CAACN,OAAO,CAAE,kCAAkC,EAE9DH,UAAU,CACTH,WAAW,CAAE,uBAAuB,CAAE,EACtC,iIAAiI,EACjI,CACC,iIAAiI,EAEjI,gDAAgD,EAChD,sIAAsI,EACtI,QAAQ,CACR,CAACQ,IAAI,CAAE,IAAK,CACd,CAED,CAAC,CAED,CAACA,IAAI,CAAE,IAAK;AAEd,CAAC;AAED,SAASK,0BAA0B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}