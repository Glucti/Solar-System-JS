{"ast":null,"code":"import { FileLoader, Loader, CanvasTexture, NearestFilter, SRGBColorSpace } from 'three';\nimport lottie from '../libs/lottie_canvas.module.js';\n\n/**\n * A loader for the Lottie texture animation format.\n *\n * The loader returns an instance of {@link CanvasTexture} to represent\n * the animated texture. Two additional properties are added to each texture:\n * - `animation`: The return value of `lottie.loadAnimation()` which is an object\n * with an API for controlling the animation's playback.\n * - `image`: The image container.\n *\n * ```js\n * const loader = new LottieLoader();\n * loader.setQuality( 2 );\n * const texture = await loader.loadAsync( 'textures/lottie/24017-lottie-logo-animation.json' );\n *\n * const geometry = new THREE.BoxGeometry();\n * const material = new THREE.MeshBasicMaterial( { map: texture } );\n * const mesh = new THREE.Mesh( geometry, material );\n * scene.add( mesh );\n * ```\n *\n * @augments Loader\n * @three_import import { LottieLoader } from 'three/addons/loaders/LottieLoader.js';\n */\nclass LottieLoader extends Loader {\n  /**\n   * Constructs a new Lottie loader.\n   *\n   * @deprecated The loader has been deprecated and will be removed with r186. Use lottie-web instead and create your animated texture manually.\n   * @param {LoadingManager} [manager] - The loading manager.\n   */\n  constructor(manager) {\n    super(manager);\n    console.warn('THREE.LottieLoader: The loader has been deprecated and will be removed with r186. Use lottie-web instead and create your animated texture manually.');\n  }\n\n  /**\n   * Sets the texture quality.\n   *\n   * @param {number} value - The texture quality.\n   */\n  setQuality(value) {\n    this._quality = value;\n  }\n\n  /**\n   * Starts loading from the given URL and passes the loaded Lottie asset\n   * to the `onLoad()` callback.\n   *\n   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n   * @param {function(CanvasTexture)} onLoad - Executed when the loading process has been finished.\n   * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n   * @param {onErrorCallback} onError - Executed when errors occur.\n   * @returns {CanvasTexture} The Lottie texture.\n   */\n  load(url, onLoad, onProgress, onError) {\n    const quality = this._quality || 1;\n    const texture = new CanvasTexture();\n    texture.minFilter = NearestFilter;\n    texture.generateMipmaps = false;\n    texture.colorSpace = SRGBColorSpace;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, function (text) {\n      const data = JSON.parse(text);\n\n      // lottie uses container.offsetWidth and offsetHeight\n      // to define width/height\n\n      const container = document.createElement('div');\n      container.style.width = data.w + 'px';\n      container.style.height = data.h + 'px';\n      document.body.appendChild(container);\n      const animation = lottie.loadAnimation({\n        container: container,\n        animType: 'canvas',\n        loop: true,\n        autoplay: true,\n        animationData: data,\n        rendererSettings: {\n          dpr: quality\n        }\n      });\n      texture.animation = animation;\n      texture.image = animation.container;\n      animation.addEventListener('enterFrame', function () {\n        texture.needsUpdate = true;\n      });\n      container.style.display = 'none';\n      if (onLoad !== undefined) {\n        onLoad(texture);\n      }\n    }, onProgress, onError);\n    return texture;\n  }\n}\nexport { LottieLoader };","map":{"version":3,"names":["FileLoader","Loader","CanvasTexture","NearestFilter","SRGBColorSpace","lottie","LottieLoader","constructor","manager","console","warn","setQuality","value","_quality","load","url","onLoad","onProgress","onError","quality","texture","minFilter","generateMipmaps","colorSpace","loader","setPath","path","setWithCredentials","withCredentials","text","data","JSON","parse","container","document","createElement","style","width","w","height","h","body","appendChild","animation","loadAnimation","animType","loop","autoplay","animationData","rendererSettings","dpr","image","addEventListener","needsUpdate","display","undefined"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/loaders/LottieLoader.js"],"sourcesContent":["import {\n\tFileLoader,\n\tLoader,\n\tCanvasTexture,\n\tNearestFilter,\n\tSRGBColorSpace\n} from 'three';\n\nimport lottie from '../libs/lottie_canvas.module.js';\n\n/**\n * A loader for the Lottie texture animation format.\n *\n * The loader returns an instance of {@link CanvasTexture} to represent\n * the animated texture. Two additional properties are added to each texture:\n * - `animation`: The return value of `lottie.loadAnimation()` which is an object\n * with an API for controlling the animation's playback.\n * - `image`: The image container.\n *\n * ```js\n * const loader = new LottieLoader();\n * loader.setQuality( 2 );\n * const texture = await loader.loadAsync( 'textures/lottie/24017-lottie-logo-animation.json' );\n *\n * const geometry = new THREE.BoxGeometry();\n * const material = new THREE.MeshBasicMaterial( { map: texture } );\n * const mesh = new THREE.Mesh( geometry, material );\n * scene.add( mesh );\n * ```\n *\n * @augments Loader\n * @three_import import { LottieLoader } from 'three/addons/loaders/LottieLoader.js';\n */\nclass LottieLoader extends Loader {\n\n\t/**\n\t * Constructs a new Lottie loader.\n\t *\n\t * @deprecated The loader has been deprecated and will be removed with r186. Use lottie-web instead and create your animated texture manually.\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\tconsole.warn( 'THREE.LottieLoader: The loader has been deprecated and will be removed with r186. Use lottie-web instead and create your animated texture manually.' );\n\n\t}\n\n\t/**\n\t * Sets the texture quality.\n\t *\n\t * @param {number} value - The texture quality.\n\t */\n\tsetQuality( value ) {\n\n\t\tthis._quality = value;\n\n\t}\n\n\t/**\n\t * Starts loading from the given URL and passes the loaded Lottie asset\n\t * to the `onLoad()` callback.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(CanvasTexture)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t * @returns {CanvasTexture} The Lottie texture.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst quality = this._quality || 1;\n\n\t\tconst texture = new CanvasTexture();\n\t\ttexture.minFilter = NearestFilter;\n\t\ttexture.generateMipmaps = false;\n\t\ttexture.colorSpace = SRGBColorSpace;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setWithCredentials( this.withCredentials );\n\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tconst data = JSON.parse( text );\n\n\t\t\t// lottie uses container.offsetWidth and offsetHeight\n\t\t\t// to define width/height\n\n\t\t\tconst container = document.createElement( 'div' );\n\t\t\tcontainer.style.width = data.w + 'px';\n\t\t\tcontainer.style.height = data.h + 'px';\n\t\t\tdocument.body.appendChild( container );\n\n\t\t\tconst animation = lottie.loadAnimation( {\n\t\t\t\tcontainer: container,\n\t\t\t\tanimType: 'canvas',\n\t\t\t\tloop: true,\n\t\t\t\tautoplay: true,\n\t\t\t\tanimationData: data,\n\t\t\t\trendererSettings: { dpr: quality }\n\t\t\t} );\n\n\t\t\ttexture.animation = animation;\n\t\t\ttexture.image = animation.container;\n\n\t\t\tanimation.addEventListener( 'enterFrame', function () {\n\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t} );\n\n\t\t\tcontainer.style.display = 'none';\n\n\t\t\tif ( onLoad !== undefined ) {\n\n\t\t\t\tonLoad( texture );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t\treturn texture;\n\n\t}\n\n}\n\nexport { LottieLoader };\n"],"mappings":"AAAA,SACCA,UAAU,EACVC,MAAM,EACNC,aAAa,EACbC,aAAa,EACbC,cAAc,QACR,OAAO;AAEd,OAAOC,MAAM,MAAM,iCAAiC;;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,SAASL,MAAM,CAAC;EAEjC;AACD;AACA;AACA;AACA;AACA;EACCM,WAAWA,CAAEC,OAAO,EAAG;IAEtB,KAAK,CAAEA,OAAQ,CAAC;IAEhBC,OAAO,CAACC,IAAI,CAAE,qJAAsJ,CAAC;EAEtK;;EAEA;AACD;AACA;AACA;AACA;EACCC,UAAUA,CAAEC,KAAK,EAAG;IAEnB,IAAI,CAACC,QAAQ,GAAGD,KAAK;EAEtB;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCE,IAAIA,CAAEC,GAAG,EAAEC,MAAM,EAAEC,UAAU,EAAEC,OAAO,EAAG;IAExC,MAAMC,OAAO,GAAG,IAAI,CAACN,QAAQ,IAAI,CAAC;IAElC,MAAMO,OAAO,GAAG,IAAIlB,aAAa,CAAC,CAAC;IACnCkB,OAAO,CAACC,SAAS,GAAGlB,aAAa;IACjCiB,OAAO,CAACE,eAAe,GAAG,KAAK;IAC/BF,OAAO,CAACG,UAAU,GAAGnB,cAAc;IAEnC,MAAMoB,MAAM,GAAG,IAAIxB,UAAU,CAAE,IAAI,CAACQ,OAAQ,CAAC;IAC7CgB,MAAM,CAACC,OAAO,CAAE,IAAI,CAACC,IAAK,CAAC;IAC3BF,MAAM,CAACG,kBAAkB,CAAE,IAAI,CAACC,eAAgB,CAAC;IAEjDJ,MAAM,CAACV,IAAI,CAAEC,GAAG,EAAE,UAAWc,IAAI,EAAG;MAEnC,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAAEH,IAAK,CAAC;;MAE/B;MACA;;MAEA,MAAMI,SAAS,GAAGC,QAAQ,CAACC,aAAa,CAAE,KAAM,CAAC;MACjDF,SAAS,CAACG,KAAK,CAACC,KAAK,GAAGP,IAAI,CAACQ,CAAC,GAAG,IAAI;MACrCL,SAAS,CAACG,KAAK,CAACG,MAAM,GAAGT,IAAI,CAACU,CAAC,GAAG,IAAI;MACtCN,QAAQ,CAACO,IAAI,CAACC,WAAW,CAAET,SAAU,CAAC;MAEtC,MAAMU,SAAS,GAAGtC,MAAM,CAACuC,aAAa,CAAE;QACvCX,SAAS,EAAEA,SAAS;QACpBY,QAAQ,EAAE,QAAQ;QAClBC,IAAI,EAAE,IAAI;QACVC,QAAQ,EAAE,IAAI;QACdC,aAAa,EAAElB,IAAI;QACnBmB,gBAAgB,EAAE;UAAEC,GAAG,EAAE/B;QAAQ;MAClC,CAAE,CAAC;MAEHC,OAAO,CAACuB,SAAS,GAAGA,SAAS;MAC7BvB,OAAO,CAAC+B,KAAK,GAAGR,SAAS,CAACV,SAAS;MAEnCU,SAAS,CAACS,gBAAgB,CAAE,YAAY,EAAE,YAAY;QAErDhC,OAAO,CAACiC,WAAW,GAAG,IAAI;MAE3B,CAAE,CAAC;MAEHpB,SAAS,CAACG,KAAK,CAACkB,OAAO,GAAG,MAAM;MAEhC,IAAKtC,MAAM,KAAKuC,SAAS,EAAG;QAE3BvC,MAAM,CAAEI,OAAQ,CAAC;MAElB;IAED,CAAC,EAAEH,UAAU,EAAEC,OAAQ,CAAC;IAExB,OAAOE,OAAO;EAEf;AAED;AAEA,SAASd,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}