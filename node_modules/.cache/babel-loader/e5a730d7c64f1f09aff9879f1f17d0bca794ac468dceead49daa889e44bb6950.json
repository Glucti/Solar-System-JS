{"ast":null,"code":"import { LinearFilter, NearestFilter, RGBAFormat, ShaderMaterial, StereoCamera, WebGLRenderTarget } from 'three';\nimport { FullScreenQuad } from '../postprocessing/Pass.js';\n\n/**\n * A class that creates an parallax barrier effect.\n *\n * Note that this class can only be used with {@link WebGLRenderer}.\n * When using {@link WebGPURenderer}, use {@link ParallaxBarrierPassNode}.\n *\n * @three_import import { ParallaxBarrierEffect } from 'three/addons/effects/ParallaxBarrierEffect.js';\n */\nclass ParallaxBarrierEffect {\n  /**\n   * Constructs a new parallax barrier effect.\n   *\n   * @param {WebGLRenderer} renderer - The renderer.\n   */\n  constructor(renderer) {\n    const _stereo = new StereoCamera();\n    const _params = {\n      minFilter: LinearFilter,\n      magFilter: NearestFilter,\n      format: RGBAFormat\n    };\n    const _renderTargetL = new WebGLRenderTarget(512, 512, _params);\n    const _renderTargetR = new WebGLRenderTarget(512, 512, _params);\n    const _material = new ShaderMaterial({\n      uniforms: {\n        'mapLeft': {\n          value: _renderTargetL.texture\n        },\n        'mapRight': {\n          value: _renderTargetR.texture\n        }\n      },\n      vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = vec2( uv.x, uv.y );', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n      fragmentShader: ['uniform sampler2D mapLeft;', 'uniform sampler2D mapRight;', 'varying vec2 vUv;', 'void main() {', '\tvec2 uv = vUv;', '\tif ( ( mod( gl_FragCoord.y, 2.0 ) ) > 1.00 ) {', '\t\tgl_FragColor = texture2D( mapLeft, uv );', '\t} else {', '\t\tgl_FragColor = texture2D( mapRight, uv );', '\t}', '\t#include <tonemapping_fragment>', '\t#include <colorspace_fragment>', '}'].join('\\n')\n    });\n    const _quad = new FullScreenQuad(_material);\n\n    /**\n     * Resizes the effect.\n     *\n     * @param {number} width - The width of the effect in logical pixels.\n     * @param {number} height - The height of the effect in logical pixels.\n     */\n    this.setSize = function (width, height) {\n      renderer.setSize(width, height);\n      const pixelRatio = renderer.getPixelRatio();\n      _renderTargetL.setSize(width * pixelRatio, height * pixelRatio);\n      _renderTargetR.setSize(width * pixelRatio, height * pixelRatio);\n    };\n\n    /**\n     * When using this effect, this method should be called instead of the\n     * default {@link WebGLRenderer#render}.\n     *\n     * @param {Object3D} scene - The scene to render.\n     * @param {Camera} camera - The camera.\n     */\n    this.render = function (scene, camera) {\n      const currentRenderTarget = renderer.getRenderTarget();\n      if (scene.matrixWorldAutoUpdate === true) scene.updateMatrixWorld();\n      if (camera.parent === null && camera.matrixWorldAutoUpdate === true) camera.updateMatrixWorld();\n      _stereo.update(camera);\n      renderer.setRenderTarget(_renderTargetL);\n      renderer.clear();\n      renderer.render(scene, _stereo.cameraL);\n      renderer.setRenderTarget(_renderTargetR);\n      renderer.clear();\n      renderer.render(scene, _stereo.cameraR);\n      renderer.setRenderTarget(null);\n      _quad.render(renderer);\n      renderer.setRenderTarget(currentRenderTarget);\n    };\n\n    /**\n     * Frees internal resources. This method should be called\n     * when the effect is no longer required.\n     */\n    this.dispose = function () {\n      _renderTargetL.dispose();\n      _renderTargetR.dispose();\n      _material.dispose();\n      _quad.dispose();\n    };\n  }\n}\nexport { ParallaxBarrierEffect };","map":{"version":3,"names":["LinearFilter","NearestFilter","RGBAFormat","ShaderMaterial","StereoCamera","WebGLRenderTarget","FullScreenQuad","ParallaxBarrierEffect","constructor","renderer","_stereo","_params","minFilter","magFilter","format","_renderTargetL","_renderTargetR","_material","uniforms","value","texture","vertexShader","join","fragmentShader","_quad","setSize","width","height","pixelRatio","getPixelRatio","render","scene","camera","currentRenderTarget","getRenderTarget","matrixWorldAutoUpdate","updateMatrixWorld","parent","update","setRenderTarget","clear","cameraL","cameraR","dispose"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/effects/ParallaxBarrierEffect.js"],"sourcesContent":["import {\n\tLinearFilter,\n\tNearestFilter,\n\tRGBAFormat,\n\tShaderMaterial,\n\tStereoCamera,\n\tWebGLRenderTarget\n} from 'three';\nimport { FullScreenQuad } from '../postprocessing/Pass.js';\n\n/**\n * A class that creates an parallax barrier effect.\n *\n * Note that this class can only be used with {@link WebGLRenderer}.\n * When using {@link WebGPURenderer}, use {@link ParallaxBarrierPassNode}.\n *\n * @three_import import { ParallaxBarrierEffect } from 'three/addons/effects/ParallaxBarrierEffect.js';\n */\nclass ParallaxBarrierEffect {\n\n\t/**\n\t * Constructs a new parallax barrier effect.\n\t *\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t */\n\tconstructor( renderer ) {\n\n\t\tconst _stereo = new StereoCamera();\n\n\t\tconst _params = { minFilter: LinearFilter, magFilter: NearestFilter, format: RGBAFormat };\n\n\t\tconst _renderTargetL = new WebGLRenderTarget( 512, 512, _params );\n\t\tconst _renderTargetR = new WebGLRenderTarget( 512, 512, _params );\n\n\t\tconst _material = new ShaderMaterial( {\n\n\t\t\tuniforms: {\n\n\t\t\t\t'mapLeft': { value: _renderTargetL.texture },\n\t\t\t\t'mapRight': { value: _renderTargetR.texture }\n\n\t\t\t},\n\n\t\t\tvertexShader: [\n\n\t\t\t\t'varying vec2 vUv;',\n\n\t\t\t\t'void main() {',\n\n\t\t\t\t'\tvUv = vec2( uv.x, uv.y );',\n\t\t\t\t'\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n\n\t\t\t\t'}'\n\n\t\t\t].join( '\\n' ),\n\n\t\t\tfragmentShader: [\n\n\t\t\t\t'uniform sampler2D mapLeft;',\n\t\t\t\t'uniform sampler2D mapRight;',\n\t\t\t\t'varying vec2 vUv;',\n\n\t\t\t\t'void main() {',\n\n\t\t\t\t'\tvec2 uv = vUv;',\n\n\t\t\t\t'\tif ( ( mod( gl_FragCoord.y, 2.0 ) ) > 1.00 ) {',\n\n\t\t\t\t'\t\tgl_FragColor = texture2D( mapLeft, uv );',\n\n\t\t\t\t'\t} else {',\n\n\t\t\t\t'\t\tgl_FragColor = texture2D( mapRight, uv );',\n\n\t\t\t\t'\t}',\n\n\t\t\t\t'\t#include <tonemapping_fragment>',\n\t\t\t\t'\t#include <colorspace_fragment>',\n\n\t\t\t\t'}'\n\n\t\t\t].join( '\\n' )\n\n\t\t} );\n\n\t\tconst _quad = new FullScreenQuad( _material );\n\n\t\t/**\n\t\t * Resizes the effect.\n\t\t *\n\t\t * @param {number} width - The width of the effect in logical pixels.\n\t\t * @param {number} height - The height of the effect in logical pixels.\n\t\t */\n\t\tthis.setSize = function ( width, height ) {\n\n\t\t\trenderer.setSize( width, height );\n\n\t\t\tconst pixelRatio = renderer.getPixelRatio();\n\n\t\t\t_renderTargetL.setSize( width * pixelRatio, height * pixelRatio );\n\t\t\t_renderTargetR.setSize( width * pixelRatio, height * pixelRatio );\n\n\t\t};\n\n\t\t/**\n\t\t * When using this effect, this method should be called instead of the\n\t\t * default {@link WebGLRenderer#render}.\n\t\t *\n\t\t * @param {Object3D} scene - The scene to render.\n\t\t * @param {Camera} camera - The camera.\n\t\t */\n\t\tthis.render = function ( scene, camera ) {\n\n\t\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\tif ( scene.matrixWorldAutoUpdate === true ) scene.updateMatrixWorld();\n\n\t\t\tif ( camera.parent === null && camera.matrixWorldAutoUpdate === true ) camera.updateMatrixWorld();\n\n\t\t\t_stereo.update( camera );\n\n\t\t\trenderer.setRenderTarget( _renderTargetL );\n\t\t\trenderer.clear();\n\t\t\trenderer.render( scene, _stereo.cameraL );\n\n\t\t\trenderer.setRenderTarget( _renderTargetR );\n\t\t\trenderer.clear();\n\t\t\trenderer.render( scene, _stereo.cameraR );\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\t_quad.render( renderer );\n\n\t\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t\t};\n\n\t\t/**\n\t\t * Frees internal resources. This method should be called\n\t\t * when the effect is no longer required.\n\t\t */\n\t\tthis.dispose = function () {\n\n\t\t\t_renderTargetL.dispose();\n\t\t\t_renderTargetR.dispose();\n\n\t\t\t_material.dispose();\n\t\t\t_quad.dispose();\n\n\t\t};\n\n\t}\n\n}\n\nexport { ParallaxBarrierEffect };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}