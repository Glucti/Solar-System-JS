{"ast":null,"code":"import { BufferGeometry, Float32BufferAttribute } from 'three';\n\n/**\n * A special type of box geometry intended for {@link LineSegments}.\n *\n * ```js\n * const geometry = new THREE.BoxLineGeometry();\n * const material = new THREE.LineBasicMaterial( { color: 0x00ff00 } );\n * const lines = new THREE.LineSegments( geometry, material );\n * scene.add( lines );\n * ```\n *\n * @augments BufferGeometry\n * @three_import import { BoxLineGeometry } from 'three/addons/geometries/BoxLineGeometry.js';\n */\nclass BoxLineGeometry extends BufferGeometry {\n  /**\n   * Constructs a new box line geometry.\n   *\n   * @param {number} [width=1] - The width. That is, the length of the edges parallel to the X axis.\n   * @param {number} [height=1] - The height. That is, the length of the edges parallel to the Y axis.\n   * @param {number} [depth=1] - The depth. That is, the length of the edges parallel to the Z axis.\n   * @param {number} [widthSegments=1] - Number of segmented rectangular sections along the width of the sides.\n   * @param {number} [heightSegments=1] - Number of segmented rectangular sections along the height of the sides.\n   * @param {number} [depthSegments=1] - Number of segmented rectangular sections along the depth of the sides.\n   */\n  constructor(width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1) {\n    super();\n    widthSegments = Math.floor(widthSegments);\n    heightSegments = Math.floor(heightSegments);\n    depthSegments = Math.floor(depthSegments);\n    const widthHalf = width / 2;\n    const heightHalf = height / 2;\n    const depthHalf = depth / 2;\n    const segmentWidth = width / widthSegments;\n    const segmentHeight = height / heightSegments;\n    const segmentDepth = depth / depthSegments;\n    const vertices = [];\n    let x = -widthHalf;\n    let y = -heightHalf;\n    let z = -depthHalf;\n    for (let i = 0; i <= widthSegments; i++) {\n      vertices.push(x, -heightHalf, -depthHalf, x, heightHalf, -depthHalf);\n      vertices.push(x, heightHalf, -depthHalf, x, heightHalf, depthHalf);\n      vertices.push(x, heightHalf, depthHalf, x, -heightHalf, depthHalf);\n      vertices.push(x, -heightHalf, depthHalf, x, -heightHalf, -depthHalf);\n      x += segmentWidth;\n    }\n    for (let i = 0; i <= heightSegments; i++) {\n      vertices.push(-widthHalf, y, -depthHalf, widthHalf, y, -depthHalf);\n      vertices.push(widthHalf, y, -depthHalf, widthHalf, y, depthHalf);\n      vertices.push(widthHalf, y, depthHalf, -widthHalf, y, depthHalf);\n      vertices.push(-widthHalf, y, depthHalf, -widthHalf, y, -depthHalf);\n      y += segmentHeight;\n    }\n    for (let i = 0; i <= depthSegments; i++) {\n      vertices.push(-widthHalf, -heightHalf, z, -widthHalf, heightHalf, z);\n      vertices.push(-widthHalf, heightHalf, z, widthHalf, heightHalf, z);\n      vertices.push(widthHalf, heightHalf, z, widthHalf, -heightHalf, z);\n      vertices.push(widthHalf, -heightHalf, z, -widthHalf, -heightHalf, z);\n      z += segmentDepth;\n    }\n    this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n  }\n}\nexport { BoxLineGeometry };","map":{"version":3,"names":["BufferGeometry","Float32BufferAttribute","BoxLineGeometry","constructor","width","height","depth","widthSegments","heightSegments","depthSegments","Math","floor","widthHalf","heightHalf","depthHalf","segmentWidth","segmentHeight","segmentDepth","vertices","x","y","z","i","push","setAttribute"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/geometries/BoxLineGeometry.js"],"sourcesContent":["import {\n\tBufferGeometry,\n\tFloat32BufferAttribute\n} from 'three';\n\n/**\n * A special type of box geometry intended for {@link LineSegments}.\n *\n * ```js\n * const geometry = new THREE.BoxLineGeometry();\n * const material = new THREE.LineBasicMaterial( { color: 0x00ff00 } );\n * const lines = new THREE.LineSegments( geometry, material );\n * scene.add( lines );\n * ```\n *\n * @augments BufferGeometry\n * @three_import import { BoxLineGeometry } from 'three/addons/geometries/BoxLineGeometry.js';\n */\nclass BoxLineGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new box line geometry.\n\t *\n\t * @param {number} [width=1] - The width. That is, the length of the edges parallel to the X axis.\n\t * @param {number} [height=1] - The height. That is, the length of the edges parallel to the Y axis.\n\t * @param {number} [depth=1] - The depth. That is, the length of the edges parallel to the Z axis.\n\t * @param {number} [widthSegments=1] - Number of segmented rectangular sections along the width of the sides.\n\t * @param {number} [heightSegments=1] - Number of segmented rectangular sections along the height of the sides.\n\t * @param {number} [depthSegments=1] - Number of segmented rectangular sections along the depth of the sides.\n\t */\n\tconstructor( width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1 ) {\n\n\t\tsuper();\n\n\t\twidthSegments = Math.floor( widthSegments );\n\t\theightSegments = Math.floor( heightSegments );\n\t\tdepthSegments = Math.floor( depthSegments );\n\n\t\tconst widthHalf = width / 2;\n\t\tconst heightHalf = height / 2;\n\t\tconst depthHalf = depth / 2;\n\n\t\tconst segmentWidth = width / widthSegments;\n\t\tconst segmentHeight = height / heightSegments;\n\t\tconst segmentDepth = depth / depthSegments;\n\n\t\tconst vertices = [];\n\n\t\tlet x = - widthHalf;\n\t\tlet y = - heightHalf;\n\t\tlet z = - depthHalf;\n\n\t\tfor ( let i = 0; i <= widthSegments; i ++ ) {\n\n\t\t\tvertices.push( x, - heightHalf, - depthHalf, x, heightHalf, - depthHalf );\n\t\t\tvertices.push( x, heightHalf, - depthHalf, x, heightHalf, depthHalf );\n\t\t\tvertices.push( x, heightHalf, depthHalf, x, - heightHalf, depthHalf );\n\t\t\tvertices.push( x, - heightHalf, depthHalf, x, - heightHalf, - depthHalf );\n\n\t\t\tx += segmentWidth;\n\n\t\t}\n\n\t\tfor ( let i = 0; i <= heightSegments; i ++ ) {\n\n\t\t\tvertices.push( - widthHalf, y, - depthHalf, widthHalf, y, - depthHalf );\n\t\t\tvertices.push( widthHalf, y, - depthHalf, widthHalf, y, depthHalf );\n\t\t\tvertices.push( widthHalf, y, depthHalf, - widthHalf, y, depthHalf );\n\t\t\tvertices.push( - widthHalf, y, depthHalf, - widthHalf, y, - depthHalf );\n\n\t\t\ty += segmentHeight;\n\n\t\t}\n\n\t\tfor ( let i = 0; i <= depthSegments; i ++ ) {\n\n\t\t\tvertices.push( - widthHalf, - heightHalf, z, - widthHalf, heightHalf, z );\n\t\t\tvertices.push( - widthHalf, heightHalf, z, widthHalf, heightHalf, z );\n\t\t\tvertices.push( widthHalf, heightHalf, z, widthHalf, - heightHalf, z );\n\t\t\tvertices.push( widthHalf, - heightHalf, z, - widthHalf, - heightHalf, z );\n\n\t\t\tz += segmentDepth;\n\n\t\t}\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n\t}\n\n}\n\nexport { BoxLineGeometry };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}