{"ast":null,"code":"import { HalfFloatType, NearestFilter, NoBlending, ShaderMaterial, UniformsUtils, WebGLRenderTarget } from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { AfterimageShader } from '../shaders/AfterimageShader.js';\n\n/**\n * Pass for a basic after image effect.\n *\n * ```js\n * const afterimagePass = new AfterimagePass( 0.9 );\n * composer.addPass( afterimagePass );\n * ```\n *\n * @augments Pass\n * @three_import import { AfterimagePass } from 'three/addons/postprocessing/AfterimagePass.js';\n */\nclass AfterimagePass extends Pass {\n  /**\n   * Constructs a new after image pass.\n   *\n   * @param {number} [damp=0.96] - The damping intensity. A higher value means a stronger after image effect.\n   */\n  constructor(damp = 0.96) {\n    super();\n\n    /**\n     * The pass uniforms. Use this object if you want to update the\n     * `damp` value at runtime.\n     * ```js\n     * pass.uniforms.damp.value = 0.9;\n     * ```\n     *\n     * @type {Object}\n     */\n    this.uniforms = UniformsUtils.clone(AfterimageShader.uniforms);\n    this.damp = damp;\n\n    /**\n     * The composition material.\n     *\n     * @type {ShaderMaterial}\n     */\n    this.compFsMaterial = new ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: AfterimageShader.vertexShader,\n      fragmentShader: AfterimageShader.fragmentShader\n    });\n\n    /**\n     * The copy material.\n     *\n     * @type {ShaderMaterial}\n     */\n    this.copyFsMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      blending: NoBlending,\n      depthTest: false,\n      depthWrite: false\n    });\n\n    // internals\n\n    this._textureComp = new WebGLRenderTarget(window.innerWidth, window.innerHeight, {\n      magFilter: NearestFilter,\n      type: HalfFloatType\n    });\n    this._textureOld = new WebGLRenderTarget(window.innerWidth, window.innerHeight, {\n      magFilter: NearestFilter,\n      type: HalfFloatType\n    });\n    this._compFsQuad = new FullScreenQuad(this.compFsMaterial);\n    this._copyFsQuad = new FullScreenQuad(this.copyFsMaterial);\n  }\n\n  /**\n   * The damping intensity, from 0.0 to 1.0. A higher value means a stronger after image effect.\n   *\n   * @type {number}\n   */\n  get damp() {\n    return this.uniforms['damp'].value;\n  }\n  set damp(value) {\n    this.uniforms['damp'].value = value;\n  }\n\n  /**\n   * Performs the after image pass.\n   *\n   * @param {WebGLRenderer} renderer - The renderer.\n   * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\n   * destination for the pass.\n   * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\n   * previous pass from this buffer.\n   * @param {number} deltaTime - The delta time in seconds.\n   * @param {boolean} maskActive - Whether masking is active or not.\n   */\n  render(renderer, writeBuffer, readBuffer /*, deltaTime, maskActive*/) {\n    this.uniforms['tOld'].value = this._textureOld.texture;\n    this.uniforms['tNew'].value = readBuffer.texture;\n    renderer.setRenderTarget(this._textureComp);\n    this._compFsQuad.render(renderer);\n    this._copyFsQuad.material.uniforms.tDiffuse.value = this._textureComp.texture;\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this._copyFsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      this._copyFsQuad.render(renderer);\n    }\n\n    // Swap buffers.\n    const temp = this._textureOld;\n    this._textureOld = this._textureComp;\n    this._textureComp = temp;\n    // Now textureOld contains the latest image, ready for the next frame.\n  }\n\n  /**\n   * Sets the size of the pass.\n   *\n   * @param {number} width - The width to set.\n   * @param {number} height - The height to set.\n   */\n  setSize(width, height) {\n    this._textureComp.setSize(width, height);\n    this._textureOld.setSize(width, height);\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever the pass is no longer used in your app.\n   */\n  dispose() {\n    this._textureComp.dispose();\n    this._textureOld.dispose();\n    this.compFsMaterial.dispose();\n    this.copyFsMaterial.dispose();\n    this._compFsQuad.dispose();\n    this._copyFsQuad.dispose();\n  }\n}\nexport { AfterimagePass };","map":{"version":3,"names":["HalfFloatType","NearestFilter","NoBlending","ShaderMaterial","UniformsUtils","WebGLRenderTarget","Pass","FullScreenQuad","CopyShader","AfterimageShader","AfterimagePass","constructor","damp","uniforms","clone","compFsMaterial","vertexShader","fragmentShader","copyFsMaterial","blending","depthTest","depthWrite","_textureComp","window","innerWidth","innerHeight","magFilter","type","_textureOld","_compFsQuad","_copyFsQuad","value","render","renderer","writeBuffer","readBuffer","texture","setRenderTarget","material","tDiffuse","renderToScreen","clear","temp","setSize","width","height","dispose"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/postprocessing/AfterimagePass.js"],"sourcesContent":["import {\n\tHalfFloatType,\n\tNearestFilter,\n\tNoBlending,\n\tShaderMaterial,\n\tUniformsUtils,\n\tWebGLRenderTarget\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { AfterimageShader } from '../shaders/AfterimageShader.js';\n\n/**\n * Pass for a basic after image effect.\n *\n * ```js\n * const afterimagePass = new AfterimagePass( 0.9 );\n * composer.addPass( afterimagePass );\n * ```\n *\n * @augments Pass\n * @three_import import { AfterimagePass } from 'three/addons/postprocessing/AfterimagePass.js';\n */\nclass AfterimagePass extends Pass {\n\n\t/**\n\t * Constructs a new after image pass.\n\t *\n\t * @param {number} [damp=0.96] - The damping intensity. A higher value means a stronger after image effect.\n\t */\n\tconstructor( damp = 0.96 ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The pass uniforms. Use this object if you want to update the\n\t\t * `damp` value at runtime.\n\t\t * ```js\n\t\t * pass.uniforms.damp.value = 0.9;\n\t\t * ```\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.uniforms = UniformsUtils.clone( AfterimageShader.uniforms );\n\n\t\tthis.damp = damp;\n\n\t\t/**\n\t\t * The composition material.\n\t\t *\n\t\t * @type {ShaderMaterial}\n\t\t */\n\t\tthis.compFsMaterial = new ShaderMaterial( {\n\n\t\t\tuniforms: this.uniforms,\n\t\t\tvertexShader: AfterimageShader.vertexShader,\n\t\t\tfragmentShader: AfterimageShader.fragmentShader\n\n\t\t} );\n\n\t\t/**\n\t\t * The copy material.\n\t\t *\n\t\t * @type {ShaderMaterial}\n\t\t */\n\t\tthis.copyFsMaterial = new ShaderMaterial( {\n\t\t\tuniforms: UniformsUtils.clone( CopyShader.uniforms ),\n\t\t\tvertexShader: CopyShader.vertexShader,\n\t\t\tfragmentShader: CopyShader.fragmentShader,\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\t\t} );\n\n\t\t// internals\n\n\t\tthis._textureComp = new WebGLRenderTarget( window.innerWidth, window.innerHeight, {\n\t\t\tmagFilter: NearestFilter,\n\t\t\ttype: HalfFloatType\n\t\t} );\n\n\t\tthis._textureOld = new WebGLRenderTarget( window.innerWidth, window.innerHeight, {\n\t\t\tmagFilter: NearestFilter,\n\t\t\ttype: HalfFloatType\n\t\t} );\n\n\t\tthis._compFsQuad = new FullScreenQuad( this.compFsMaterial );\n\t\tthis._copyFsQuad = new FullScreenQuad( this.copyFsMaterial );\n\n\t}\n\n\t/**\n\t * The damping intensity, from 0.0 to 1.0. A higher value means a stronger after image effect.\n\t *\n\t * @type {number}\n\t */\n\tget damp() {\n\n\t\treturn this.uniforms[ 'damp' ].value;\n\n\t}\n\n\tset damp( value ) {\n\n\t\tthis.uniforms[ 'damp' ].value = value;\n\n\t}\n\n\t/**\n\t * Performs the after image pass.\n\t *\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\n\t * destination for the pass.\n\t * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\n\t * previous pass from this buffer.\n\t * @param {number} deltaTime - The delta time in seconds.\n\t * @param {boolean} maskActive - Whether masking is active or not.\n\t */\n\trender( renderer, writeBuffer, readBuffer/*, deltaTime, maskActive*/ ) {\n\n\t\tthis.uniforms[ 'tOld' ].value = this._textureOld.texture;\n\t\tthis.uniforms[ 'tNew' ].value = readBuffer.texture;\n\n\t\trenderer.setRenderTarget( this._textureComp );\n\t\tthis._compFsQuad.render( renderer );\n\n\t\tthis._copyFsQuad.material.uniforms.tDiffuse.value = this._textureComp.texture;\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis._copyFsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\n\t\t\tif ( this.clear ) renderer.clear();\n\n\t\t\tthis._copyFsQuad.render( renderer );\n\n\t\t}\n\n\t\t// Swap buffers.\n\t\tconst temp = this._textureOld;\n\t\tthis._textureOld = this._textureComp;\n\t\tthis._textureComp = temp;\n\t\t// Now textureOld contains the latest image, ready for the next frame.\n\n\t}\n\n\t/**\n\t * Sets the size of the pass.\n\t *\n\t * @param {number} width - The width to set.\n\t * @param {number} height - The height to set.\n\t */\n\tsetSize( width, height ) {\n\n\t\tthis._textureComp.setSize( width, height );\n\t\tthis._textureOld.setSize( width, height );\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever the pass is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis._textureComp.dispose();\n\t\tthis._textureOld.dispose();\n\n\t\tthis.compFsMaterial.dispose();\n\t\tthis.copyFsMaterial.dispose();\n\n\t\tthis._compFsQuad.dispose();\n\t\tthis._copyFsQuad.dispose();\n\n\t}\n\n}\n\nexport { AfterimagePass };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}