{"ast":null,"code":"import { ClampToEdgeWrapping, Data3DTexture, FileLoader, LinearFilter, Loader, RGBAFormat, UnsignedByteType } from 'three';\n\n/**\n * A loader for the 3DL LUT format.\n *\n * References:\n * - [3D LUTs]{@link http://download.autodesk.com/us/systemdocs/help/2011/lustre/index.html?url=./files/WSc4e151a45a3b785a24c3d9a411df9298473-7ffd.htm,topicNumber=d0e9492}\n * - [Format Spec for .3dl]{@link https://community.foundry.com/discuss/topic/103636/format-spec-for-3dl?mode=Post&postID=895258}\n *\n * ```js\n * const loader = new LUT3dlLoader();\n * const map = loader.loadAsync( 'luts/Presetpro-Cinematic.3dl' );\n * ```\n *\n * @augments Loader\n * @three_import import { LUT3dlLoader } from 'three/addons/loaders/LUT3dlLoader.js';\n */\nexport class LUT3dlLoader extends Loader {\n  /**\n   * Constructs a new 3DL LUT loader.\n   *\n   * @param {LoadingManager} [manager] - The loading manager.\n   */\n  constructor(manager) {\n    super(manager);\n\n    /**\n     * The texture type.\n     *\n     * @type {(UnsignedByteType|FloatType)}\n     * @default UnsignedByteType\n     */\n    this.type = UnsignedByteType;\n  }\n\n  /**\n   * Sets the texture type.\n   *\n   * @param {(UnsignedByteType|FloatType)} type - The texture type to set.\n   * @return {LUT3dlLoader} A reference to this loader.\n   */\n  setType(type) {\n    this.type = type;\n    return this;\n  }\n\n  /**\n   * Starts loading from the given URL and passes the loaded 3DL LUT asset\n   * to the `onLoad()` callback.\n   *\n   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n   * @param {function({size:number,texture3D:Data3DTexture})} onLoad - Executed when the loading process has been finished.\n   * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n   * @param {onErrorCallback} onError - Executed when errors occur.\n   */\n  load(url, onLoad, onProgress, onError) {\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType('text');\n    loader.load(url, text => {\n      try {\n        onLoad(this.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        this.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  /**\n   * Parses the given 3DL LUT data and returns the resulting 3D data texture.\n   *\n   * @param {string} input - The raw 3DL LUT data as a string.\n   * @return {{size:number,texture3D:Data3DTexture}} The parsed 3DL LUT.\n   */\n  parse(input) {\n    const regExpGridInfo = /^[\\d ]+$/m;\n    const regExpDataPoints = /^([\\d.e+-]+) +([\\d.e+-]+) +([\\d.e+-]+) *$/gm;\n\n    // The first line describes the positions of values on the LUT grid.\n    let result = regExpGridInfo.exec(input);\n    if (result === null) {\n      throw new Error('LUT3dlLoader: Missing grid information');\n    }\n    const gridLines = result[0].trim().split(/\\s+/g).map(Number);\n    const gridStep = gridLines[1] - gridLines[0];\n    const size = gridLines.length;\n    const sizeSq = size ** 2;\n    for (let i = 1, l = gridLines.length; i < l; ++i) {\n      if (gridStep !== gridLines[i] - gridLines[i - 1]) {\n        throw new Error('LUT3dlLoader: Inconsistent grid size');\n      }\n    }\n    const dataFloat = new Float32Array(size ** 3 * 4);\n    let maxValue = 0.0;\n    let index = 0;\n    while ((result = regExpDataPoints.exec(input)) !== null) {\n      const r = Number(result[1]);\n      const g = Number(result[2]);\n      const b = Number(result[3]);\n      maxValue = Math.max(maxValue, r, g, b);\n      const bLayer = index % size;\n      const gLayer = Math.floor(index / size) % size;\n      const rLayer = Math.floor(index / sizeSq) % size;\n\n      // b grows first, then g, then r.\n      const d4 = (bLayer * sizeSq + gLayer * size + rLayer) * 4;\n      dataFloat[d4 + 0] = r;\n      dataFloat[d4 + 1] = g;\n      dataFloat[d4 + 2] = b;\n      ++index;\n    }\n\n    // Determine the bit depth to scale the values to [0.0, 1.0].\n    const bits = Math.ceil(Math.log2(maxValue));\n    const maxBitValue = Math.pow(2, bits);\n    const data = this.type === UnsignedByteType ? new Uint8Array(dataFloat.length) : dataFloat;\n    const scale = this.type === UnsignedByteType ? 255 : 1;\n    for (let i = 0, l = data.length; i < l; i += 4) {\n      const i1 = i + 1;\n      const i2 = i + 2;\n      const i3 = i + 3;\n\n      // Note: data is dataFloat when type is FloatType.\n      data[i] = dataFloat[i] / maxBitValue * scale;\n      data[i1] = dataFloat[i1] / maxBitValue * scale;\n      data[i2] = dataFloat[i2] / maxBitValue * scale;\n      data[i3] = scale;\n    }\n    const texture3D = new Data3DTexture();\n    texture3D.image.data = data;\n    texture3D.image.width = size;\n    texture3D.image.height = size;\n    texture3D.image.depth = size;\n    texture3D.format = RGBAFormat;\n    texture3D.type = this.type;\n    texture3D.magFilter = LinearFilter;\n    texture3D.minFilter = LinearFilter;\n    texture3D.wrapS = ClampToEdgeWrapping;\n    texture3D.wrapT = ClampToEdgeWrapping;\n    texture3D.wrapR = ClampToEdgeWrapping;\n    texture3D.generateMipmaps = false;\n    texture3D.needsUpdate = true;\n    return {\n      size,\n      texture3D\n    };\n  }\n}","map":{"version":3,"names":["ClampToEdgeWrapping","Data3DTexture","FileLoader","LinearFilter","Loader","RGBAFormat","UnsignedByteType","LUT3dlLoader","constructor","manager","type","setType","load","url","onLoad","onProgress","onError","loader","setPath","path","setResponseType","text","parse","e","console","error","itemError","input","regExpGridInfo","regExpDataPoints","result","exec","Error","gridLines","trim","split","map","Number","gridStep","size","length","sizeSq","i","l","dataFloat","Float32Array","maxValue","index","r","g","b","Math","max","bLayer","gLayer","floor","rLayer","d4","bits","ceil","log2","maxBitValue","pow","data","Uint8Array","scale","i1","i2","i3","texture3D","image","width","height","depth","format","magFilter","minFilter","wrapS","wrapT","wrapR","generateMipmaps","needsUpdate"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/loaders/LUT3dlLoader.js"],"sourcesContent":["import {\n\tClampToEdgeWrapping,\n\tData3DTexture,\n\tFileLoader,\n\tLinearFilter,\n\tLoader,\n\tRGBAFormat,\n\tUnsignedByteType,\n} from 'three';\n\n/**\n * A loader for the 3DL LUT format.\n *\n * References:\n * - [3D LUTs]{@link http://download.autodesk.com/us/systemdocs/help/2011/lustre/index.html?url=./files/WSc4e151a45a3b785a24c3d9a411df9298473-7ffd.htm,topicNumber=d0e9492}\n * - [Format Spec for .3dl]{@link https://community.foundry.com/discuss/topic/103636/format-spec-for-3dl?mode=Post&postID=895258}\n *\n * ```js\n * const loader = new LUT3dlLoader();\n * const map = loader.loadAsync( 'luts/Presetpro-Cinematic.3dl' );\n * ```\n *\n * @augments Loader\n * @three_import import { LUT3dlLoader } from 'three/addons/loaders/LUT3dlLoader.js';\n */\nexport class LUT3dlLoader extends Loader {\n\n\t/**\n\t * Constructs a new 3DL LUT loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\t/**\n\t\t * The texture type.\n\t\t *\n\t\t * @type {(UnsignedByteType|FloatType)}\n\t\t * @default UnsignedByteType\n\t\t */\n\t\tthis.type = UnsignedByteType;\n\n\t}\n\n\t/**\n\t * Sets the texture type.\n\t *\n\t * @param {(UnsignedByteType|FloatType)} type - The texture type to set.\n\t * @return {LUT3dlLoader} A reference to this loader.\n\t */\n\tsetType( type ) {\n\n\t\tthis.type = type;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Starts loading from the given URL and passes the loaded 3DL LUT asset\n\t * to the `onLoad()` callback.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function({size:number,texture3D:Data3DTexture})} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'text' );\n\t\tloader.load( url, text => {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( this.parse( text ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tthis.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\t/**\n\t * Parses the given 3DL LUT data and returns the resulting 3D data texture.\n\t *\n\t * @param {string} input - The raw 3DL LUT data as a string.\n\t * @return {{size:number,texture3D:Data3DTexture}} The parsed 3DL LUT.\n\t */\n\tparse( input ) {\n\n\t\tconst regExpGridInfo = /^[\\d ]+$/m;\n\t\tconst regExpDataPoints = /^([\\d.e+-]+) +([\\d.e+-]+) +([\\d.e+-]+) *$/gm;\n\n\t\t// The first line describes the positions of values on the LUT grid.\n\t\tlet result = regExpGridInfo.exec( input );\n\n\t\tif ( result === null ) {\n\n\t\t\tthrow new Error( 'LUT3dlLoader: Missing grid information' );\n\n\t\t}\n\n\t\tconst gridLines = result[ 0 ].trim().split( /\\s+/g ).map( Number );\n\t\tconst gridStep = gridLines[ 1 ] - gridLines[ 0 ];\n\t\tconst size = gridLines.length;\n\t\tconst sizeSq = size ** 2;\n\n\t\tfor ( let i = 1, l = gridLines.length; i < l; ++ i ) {\n\n\t\t\tif ( gridStep !== ( gridLines[ i ] - gridLines[ i - 1 ] ) ) {\n\n\t\t\t\tthrow new Error( 'LUT3dlLoader: Inconsistent grid size' );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst dataFloat = new Float32Array( size ** 3 * 4 );\n\t\tlet maxValue = 0.0;\n\t\tlet index = 0;\n\n\t\twhile ( ( result = regExpDataPoints.exec( input ) ) !== null ) {\n\n\t\t\tconst r = Number( result[ 1 ] );\n\t\t\tconst g = Number( result[ 2 ] );\n\t\t\tconst b = Number( result[ 3 ] );\n\n\t\t\tmaxValue = Math.max( maxValue, r, g, b );\n\n\t\t\tconst bLayer = index % size;\n\t\t\tconst gLayer = Math.floor( index / size ) % size;\n\t\t\tconst rLayer = Math.floor( index / ( sizeSq ) ) % size;\n\n\t\t\t// b grows first, then g, then r.\n\t\t\tconst d4 = ( bLayer * sizeSq + gLayer * size + rLayer ) * 4;\n\t\t\tdataFloat[ d4 + 0 ] = r;\n\t\t\tdataFloat[ d4 + 1 ] = g;\n\t\t\tdataFloat[ d4 + 2 ] = b;\n\n\t\t\t++ index;\n\n\t\t}\n\n\t\t// Determine the bit depth to scale the values to [0.0, 1.0].\n\t\tconst bits = Math.ceil( Math.log2( maxValue ) );\n\t\tconst maxBitValue = Math.pow( 2, bits );\n\n\t\tconst data = this.type === UnsignedByteType ? new Uint8Array( dataFloat.length ) : dataFloat;\n\t\tconst scale = this.type === UnsignedByteType ? 255 : 1;\n\n\t\tfor ( let i = 0, l = data.length; i < l; i += 4 ) {\n\n\t\t\tconst i1 = i + 1;\n\t\t\tconst i2 = i + 2;\n\t\t\tconst i3 = i + 3;\n\n\t\t\t// Note: data is dataFloat when type is FloatType.\n\t\t\tdata[ i ] = dataFloat[ i ] / maxBitValue * scale;\n\t\t\tdata[ i1 ] = dataFloat[ i1 ] / maxBitValue * scale;\n\t\t\tdata[ i2 ] = dataFloat[ i2 ] / maxBitValue * scale;\n\t\t\tdata[ i3 ] = scale;\n\n\t\t}\n\n\t\tconst texture3D = new Data3DTexture();\n\t\ttexture3D.image.data = data;\n\t\ttexture3D.image.width = size;\n\t\ttexture3D.image.height = size;\n\t\ttexture3D.image.depth = size;\n\t\ttexture3D.format = RGBAFormat;\n\t\ttexture3D.type = this.type;\n\t\ttexture3D.magFilter = LinearFilter;\n\t\ttexture3D.minFilter = LinearFilter;\n\t\ttexture3D.wrapS = ClampToEdgeWrapping;\n\t\ttexture3D.wrapT = ClampToEdgeWrapping;\n\t\ttexture3D.wrapR = ClampToEdgeWrapping;\n\t\ttexture3D.generateMipmaps = false;\n\t\ttexture3D.needsUpdate = true;\n\n\t\treturn {\n\t\t\tsize,\n\t\t\ttexture3D,\n\t\t};\n\n\t}\n\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}