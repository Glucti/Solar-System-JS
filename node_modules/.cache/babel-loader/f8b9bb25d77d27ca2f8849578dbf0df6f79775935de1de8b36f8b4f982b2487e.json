{"ast":null,"code":"class LWO3Parser {\n  constructor(IFFParser) {\n    this.IFF = IFFParser;\n  }\n  parseBlock() {\n    this.IFF.debugger.offset = this.IFF.reader.offset;\n    this.IFF.debugger.closeForms();\n    const blockID = this.IFF.reader.getIDTag();\n    const length = this.IFF.reader.getUint32(); // size of data in bytes\n\n    this.IFF.debugger.dataOffset = this.IFF.reader.offset;\n    this.IFF.debugger.length = length;\n\n    // Data types may be found in either LWO2 OR LWO3 spec\n    switch (blockID) {\n      case 'FORM':\n        // form blocks may consist of sub -chunks or sub-forms\n        this.IFF.parseForm(length);\n        break;\n\n      // SKIPPED CHUNKS\n      // MISC skipped\n      case 'ICON': // Thumbnail Icon Image\n      case 'VMPA': // Vertex Map Parameter\n      case 'BBOX': // bounding box\n      // case 'VMMD':\n      // case 'VTYP':\n\n      // normal maps can be specified, normally on models imported from other applications. Currently ignored\n      case 'NORM':\n\n      // ENVL FORM skipped\n      case 'PRE ': // Pre-loop behavior for the keyframe\n      case 'POST': // Post-loop behavior for the keyframe\n      case 'KEY ':\n      case 'SPAN':\n\n      // CLIP FORM skipped\n      case 'TIME':\n      case 'CLRS':\n      case 'CLRA':\n      case 'FILT':\n      case 'DITH':\n      case 'CONT':\n      case 'BRIT':\n      case 'SATR':\n      case 'HUE ':\n      case 'GAMM':\n      case 'NEGA':\n      case 'IFLT':\n      case 'PFLT':\n\n      // Image Map Layer skipped\n      case 'PROJ':\n      case 'AXIS':\n      case 'AAST':\n      case 'PIXB':\n      case 'STCK':\n\n      // Procedural Textures skipped\n      case 'VALU':\n\n      // Gradient Textures skipped\n      case 'PNAM':\n      case 'INAM':\n      case 'GRST':\n      case 'GREN':\n      case 'GRPT':\n      case 'FKEY':\n      case 'IKEY':\n\n      // Texture Mapping Form skipped\n      case 'CSYS':\n\n      // Surface CHUNKs skipped\n      case 'OPAQ': // top level 'opacity' checkbox\n      case 'CMAP': // clip map\n\n      // Surface node CHUNKS skipped\n      // These mainly specify the node editor setup in LW\n      case 'NLOC':\n      case 'NZOM':\n      case 'NVER':\n      case 'NSRV':\n      case 'NCRD':\n      case 'NMOD':\n      case 'NSEL':\n      case 'NPRW':\n      case 'NPLA':\n      case 'VERS':\n      case 'ENUM':\n      case 'TAG ':\n\n      // Car Material CHUNKS\n      case 'CGMD':\n      case 'CGTY':\n      case 'CGST':\n      case 'CGEN':\n      case 'CGTS':\n      case 'CGTE':\n      case 'OSMP':\n      case 'OMDE':\n      case 'OUTR':\n      case 'FLAG':\n      case 'TRNL':\n      case 'SHRP':\n      case 'RFOP':\n      case 'RSAN':\n      case 'TROP':\n      case 'RBLR':\n      case 'TBLR':\n      case 'CLRH':\n      case 'CLRF':\n      case 'ADTR':\n      case 'GLOW':\n      case 'LINE':\n      case 'ALPH':\n      case 'VCOL':\n      case 'ENAB':\n        this.IFF.debugger.skipped = true;\n        this.IFF.reader.skip(length);\n        break;\n\n      // Texture node chunks (not in spec)\n      case 'IPIX': // usePixelBlending\n      case 'IMIP': // useMipMaps\n      case 'IMOD': // imageBlendingMode\n      case 'AMOD': // unknown\n      case 'IINV': // imageInvertAlpha\n      case 'INCR': // imageInvertColor\n      case 'IAXS': // imageAxis ( for non-UV maps)\n      case 'IFOT': // imageFallofType\n      case 'ITIM': // timing for animated textures\n      case 'IWRL':\n      case 'IUTI':\n      case 'IINX':\n      case 'IINY':\n      case 'IINZ':\n      case 'IREF':\n        // possibly a VX for reused texture nodes\n        if (length === 4) this.IFF.currentNode[blockID] = this.IFF.reader.getInt32();else this.IFF.reader.skip(length);\n        break;\n      case 'OTAG':\n        this.IFF.parseObjectTag();\n        break;\n      case 'LAYR':\n        this.IFF.parseLayer(length);\n        break;\n      case 'PNTS':\n        this.IFF.parsePoints(length);\n        break;\n      case 'VMAP':\n        this.IFF.parseVertexMapping(length);\n        break;\n      case 'POLS':\n        this.IFF.parsePolygonList(length);\n        break;\n      case 'TAGS':\n        this.IFF.parseTagStrings(length);\n        break;\n      case 'PTAG':\n        this.IFF.parsePolygonTagMapping(length);\n        break;\n      case 'VMAD':\n        this.IFF.parseVertexMapping(length, true);\n        break;\n\n      // Misc CHUNKS\n      case 'DESC':\n        // Description Line\n        this.IFF.currentForm.description = this.IFF.reader.getString();\n        break;\n      case 'TEXT':\n      case 'CMNT':\n      case 'NCOM':\n        this.IFF.currentForm.comment = this.IFF.reader.getString();\n        break;\n\n      // Envelope Form\n      case 'NAME':\n        this.IFF.currentForm.channelName = this.IFF.reader.getString();\n        break;\n\n      // Image Map Layer\n      case 'WRAP':\n        this.IFF.currentForm.wrap = {\n          w: this.IFF.reader.getUint16(),\n          h: this.IFF.reader.getUint16()\n        };\n        break;\n      case 'IMAG':\n        const index = this.IFF.reader.getVariableLengthIndex();\n        this.IFF.currentForm.imageIndex = index;\n        break;\n\n      // Texture Mapping Form\n      case 'OREF':\n        this.IFF.currentForm.referenceObject = this.IFF.reader.getString();\n        break;\n      case 'ROID':\n        this.IFF.currentForm.referenceObjectID = this.IFF.reader.getUint32();\n        break;\n\n      // Surface Blocks\n      case 'SSHN':\n        this.IFF.currentSurface.surfaceShaderName = this.IFF.reader.getString();\n        break;\n      case 'AOVN':\n        this.IFF.currentSurface.surfaceCustomAOVName = this.IFF.reader.getString();\n        break;\n\n      // Nodal Blocks\n      case 'NSTA':\n        this.IFF.currentForm.disabled = this.IFF.reader.getUint16();\n        break;\n      case 'NRNM':\n        this.IFF.currentForm.realName = this.IFF.reader.getString();\n        break;\n      case 'NNME':\n        this.IFF.currentForm.refName = this.IFF.reader.getString();\n        this.IFF.currentSurface.nodes[this.IFF.currentForm.refName] = this.IFF.currentForm;\n        break;\n\n      // Nodal Blocks : connections\n      case 'INME':\n        if (!this.IFF.currentForm.nodeName) this.IFF.currentForm.nodeName = [];\n        this.IFF.currentForm.nodeName.push(this.IFF.reader.getString());\n        break;\n      case 'IINN':\n        if (!this.IFF.currentForm.inputNodeName) this.IFF.currentForm.inputNodeName = [];\n        this.IFF.currentForm.inputNodeName.push(this.IFF.reader.getString());\n        break;\n      case 'IINM':\n        if (!this.IFF.currentForm.inputName) this.IFF.currentForm.inputName = [];\n        this.IFF.currentForm.inputName.push(this.IFF.reader.getString());\n        break;\n      case 'IONM':\n        if (!this.IFF.currentForm.inputOutputName) this.IFF.currentForm.inputOutputName = [];\n        this.IFF.currentForm.inputOutputName.push(this.IFF.reader.getString());\n        break;\n      case 'FNAM':\n        this.IFF.currentForm.fileName = this.IFF.reader.getString();\n        break;\n      case 'CHAN':\n        // NOTE: ENVL Forms may also have CHAN chunk, however ENVL is currently ignored\n        if (length === 4) this.IFF.currentForm.textureChannel = this.IFF.reader.getIDTag();else this.IFF.reader.skip(length);\n        break;\n\n      // LWO2 Spec chunks: these are needed since the SURF FORMs are often in LWO2 format\n      case 'SMAN':\n        const maxSmoothingAngle = this.IFF.reader.getFloat32();\n        this.IFF.currentSurface.attributes.smooth = maxSmoothingAngle < 0 ? false : true;\n        break;\n\n      // LWO2: Basic Surface Parameters\n      case 'COLR':\n        this.IFF.currentSurface.attributes.Color = {\n          value: this.IFF.reader.getFloat32Array(3)\n        };\n        this.IFF.reader.skip(2); // VX: envelope\n        break;\n      case 'LUMI':\n        this.IFF.currentSurface.attributes.Luminosity = {\n          value: this.IFF.reader.getFloat32()\n        };\n        this.IFF.reader.skip(2);\n        break;\n      case 'SPEC':\n        this.IFF.currentSurface.attributes.Specular = {\n          value: this.IFF.reader.getFloat32()\n        };\n        this.IFF.reader.skip(2);\n        break;\n      case 'DIFF':\n        this.IFF.currentSurface.attributes.Diffuse = {\n          value: this.IFF.reader.getFloat32()\n        };\n        this.IFF.reader.skip(2);\n        break;\n      case 'REFL':\n        this.IFF.currentSurface.attributes.Reflection = {\n          value: this.IFF.reader.getFloat32()\n        };\n        this.IFF.reader.skip(2);\n        break;\n      case 'GLOS':\n        this.IFF.currentSurface.attributes.Glossiness = {\n          value: this.IFF.reader.getFloat32()\n        };\n        this.IFF.reader.skip(2);\n        break;\n      case 'TRAN':\n        this.IFF.currentSurface.attributes.opacity = this.IFF.reader.getFloat32();\n        this.IFF.reader.skip(2);\n        break;\n      case 'BUMP':\n        this.IFF.currentSurface.attributes.bumpStrength = this.IFF.reader.getFloat32();\n        this.IFF.reader.skip(2);\n        break;\n      case 'SIDE':\n        this.IFF.currentSurface.attributes.side = this.IFF.reader.getUint16();\n        break;\n      case 'RIMG':\n        this.IFF.currentSurface.attributes.reflectionMap = this.IFF.reader.getVariableLengthIndex();\n        break;\n      case 'RIND':\n        this.IFF.currentSurface.attributes.refractiveIndex = this.IFF.reader.getFloat32();\n        this.IFF.reader.skip(2);\n        break;\n      case 'TIMG':\n        this.IFF.currentSurface.attributes.refractionMap = this.IFF.reader.getVariableLengthIndex();\n        break;\n      case 'IMAP':\n        this.IFF.currentSurface.attributes.imageMapIndex = this.IFF.reader.getUint32();\n        break;\n      case 'IUVI':\n        // uv channel name\n        this.IFF.currentNode.UVChannel = this.IFF.reader.getString(length);\n        break;\n      case 'IUTL':\n        // widthWrappingMode: 0 = Reset, 1 = Repeat, 2 = Mirror, 3 = Edge\n        this.IFF.currentNode.widthWrappingMode = this.IFF.reader.getUint32();\n        break;\n      case 'IVTL':\n        // heightWrappingMode\n        this.IFF.currentNode.heightWrappingMode = this.IFF.reader.getUint32();\n        break;\n      default:\n        this.IFF.parseUnknownCHUNK(blockID, length);\n    }\n    if (blockID != 'FORM') {\n      this.IFF.debugger.node = 1;\n      this.IFF.debugger.nodeID = blockID;\n      this.IFF.debugger.log();\n    }\n    if (this.IFF.reader.offset >= this.IFF.currentFormEnd) {\n      this.IFF.currentForm = this.IFF.parentForm;\n    }\n  }\n}\nexport { LWO3Parser };","map":{"version":3,"names":["LWO3Parser","constructor","IFFParser","IFF","parseBlock","debugger","offset","reader","closeForms","blockID","getIDTag","length","getUint32","dataOffset","parseForm","skipped","skip","currentNode","getInt32","parseObjectTag","parseLayer","parsePoints","parseVertexMapping","parsePolygonList","parseTagStrings","parsePolygonTagMapping","currentForm","description","getString","comment","channelName","wrap","w","getUint16","h","index","getVariableLengthIndex","imageIndex","referenceObject","referenceObjectID","currentSurface","surfaceShaderName","surfaceCustomAOVName","disabled","realName","refName","nodes","nodeName","push","inputNodeName","inputName","inputOutputName","fileName","textureChannel","maxSmoothingAngle","getFloat32","attributes","smooth","Color","value","getFloat32Array","Luminosity","Specular","Diffuse","Reflection","Glossiness","opacity","bumpStrength","side","reflectionMap","refractiveIndex","refractionMap","imageMapIndex","UVChannel","widthWrappingMode","heightWrappingMode","parseUnknownCHUNK","node","nodeID","log","currentFormEnd","parentForm"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/loaders/lwo/LWO3Parser.js"],"sourcesContent":["class LWO3Parser {\n\n\tconstructor( IFFParser ) {\n\n\t\tthis.IFF = IFFParser;\n\n\t}\n\n\tparseBlock() {\n\n\t\tthis.IFF.debugger.offset = this.IFF.reader.offset;\n\t\tthis.IFF.debugger.closeForms();\n\n\t\tconst blockID = this.IFF.reader.getIDTag();\n\t\tconst length = this.IFF.reader.getUint32(); // size of data in bytes\n\n\t\tthis.IFF.debugger.dataOffset = this.IFF.reader.offset;\n\t\tthis.IFF.debugger.length = length;\n\n\t\t// Data types may be found in either LWO2 OR LWO3 spec\n\t\tswitch ( blockID ) {\n\n\t\t\tcase 'FORM': // form blocks may consist of sub -chunks or sub-forms\n\t\t\t\tthis.IFF.parseForm( length );\n\t\t\t\tbreak;\n\n\t\t\t// SKIPPED CHUNKS\n\t\t\t// MISC skipped\n\t\t\tcase 'ICON': // Thumbnail Icon Image\n\t\t\tcase 'VMPA': // Vertex Map Parameter\n\t\t\tcase 'BBOX': // bounding box\n\t\t\t// case 'VMMD':\n\t\t\t// case 'VTYP':\n\n\t\t\t// normal maps can be specified, normally on models imported from other applications. Currently ignored\n\t\t\tcase 'NORM':\n\n\t\t\t// ENVL FORM skipped\n\t\t\tcase 'PRE ': // Pre-loop behavior for the keyframe\n\t\t\tcase 'POST': // Post-loop behavior for the keyframe\n\t\t\tcase 'KEY ':\n\t\t\tcase 'SPAN':\n\n\t\t\t// CLIP FORM skipped\n\t\t\tcase 'TIME':\n\t\t\tcase 'CLRS':\n\t\t\tcase 'CLRA':\n\t\t\tcase 'FILT':\n\t\t\tcase 'DITH':\n\t\t\tcase 'CONT':\n\t\t\tcase 'BRIT':\n\t\t\tcase 'SATR':\n\t\t\tcase 'HUE ':\n\t\t\tcase 'GAMM':\n\t\t\tcase 'NEGA':\n\t\t\tcase 'IFLT':\n\t\t\tcase 'PFLT':\n\n\t\t\t// Image Map Layer skipped\n\t\t\tcase 'PROJ':\n\t\t\tcase 'AXIS':\n\t\t\tcase 'AAST':\n\t\t\tcase 'PIXB':\n\t\t\tcase 'STCK':\n\n\t\t\t// Procedural Textures skipped\n\t\t\tcase 'VALU':\n\n\t\t\t// Gradient Textures skipped\n\t\t\tcase 'PNAM':\n\t\t\tcase 'INAM':\n\t\t\tcase 'GRST':\n\t\t\tcase 'GREN':\n\t\t\tcase 'GRPT':\n\t\t\tcase 'FKEY':\n\t\t\tcase 'IKEY':\n\n\t\t\t// Texture Mapping Form skipped\n\t\t\tcase 'CSYS':\n\n\t\t\t\t// Surface CHUNKs skipped\n\t\t\tcase 'OPAQ': // top level 'opacity' checkbox\n\t\t\tcase 'CMAP': // clip map\n\n\t\t\t// Surface node CHUNKS skipped\n\t\t\t// These mainly specify the node editor setup in LW\n\t\t\tcase 'NLOC':\n\t\t\tcase 'NZOM':\n\t\t\tcase 'NVER':\n\t\t\tcase 'NSRV':\n\t\t\tcase 'NCRD':\n\t\t\tcase 'NMOD':\n\t\t\tcase 'NSEL':\n\t\t\tcase 'NPRW':\n\t\t\tcase 'NPLA':\n\t\t\tcase 'VERS':\n\t\t\tcase 'ENUM':\n\t\t\tcase 'TAG ':\n\n\t\t\t// Car Material CHUNKS\n\t\t\tcase 'CGMD':\n\t\t\tcase 'CGTY':\n\t\t\tcase 'CGST':\n\t\t\tcase 'CGEN':\n\t\t\tcase 'CGTS':\n\t\t\tcase 'CGTE':\n\t\t\tcase 'OSMP':\n\t\t\tcase 'OMDE':\n\t\t\tcase 'OUTR':\n\t\t\tcase 'FLAG':\n\n\t\t\tcase 'TRNL':\n\t\t\tcase 'SHRP':\n\t\t\tcase 'RFOP':\n\t\t\tcase 'RSAN':\n\t\t\tcase 'TROP':\n\t\t\tcase 'RBLR':\n\t\t\tcase 'TBLR':\n\t\t\tcase 'CLRH':\n\t\t\tcase 'CLRF':\n\t\t\tcase 'ADTR':\n\t\t\tcase 'GLOW':\n\t\t\tcase 'LINE':\n\t\t\tcase 'ALPH':\n\t\t\tcase 'VCOL':\n\t\t\tcase 'ENAB':\n\t\t\t\tthis.IFF.debugger.skipped = true;\n\t\t\t\tthis.IFF.reader.skip( length );\n\t\t\t\tbreak;\n\n\t\t\t// Texture node chunks (not in spec)\n\t\t\tcase 'IPIX': // usePixelBlending\n\t\t\tcase 'IMIP': // useMipMaps\n\t\t\tcase 'IMOD': // imageBlendingMode\n\t\t\tcase 'AMOD': // unknown\n\t\t\tcase 'IINV': // imageInvertAlpha\n\t\t\tcase 'INCR': // imageInvertColor\n\t\t\tcase 'IAXS': // imageAxis ( for non-UV maps)\n\t\t\tcase 'IFOT': // imageFallofType\n\t\t\tcase 'ITIM': // timing for animated textures\n\t\t\tcase 'IWRL':\n\t\t\tcase 'IUTI':\n\t\t\tcase 'IINX':\n\t\t\tcase 'IINY':\n\t\t\tcase 'IINZ':\n\t\t\tcase 'IREF': // possibly a VX for reused texture nodes\n\t\t\t\tif ( length === 4 ) this.IFF.currentNode[ blockID ] = this.IFF.reader.getInt32();\n\t\t\t\telse this.IFF.reader.skip( length );\n\t\t\t\tbreak;\n\n\t\t\tcase 'OTAG':\n\t\t\t\tthis.IFF.parseObjectTag();\n\t\t\t\tbreak;\n\n\t\t\tcase 'LAYR':\n\t\t\t\tthis.IFF.parseLayer( length );\n\t\t\t\tbreak;\n\n\t\t\tcase 'PNTS':\n\t\t\t\tthis.IFF.parsePoints( length );\n\t\t\t\tbreak;\n\n\t\t\tcase 'VMAP':\n\t\t\t\tthis.IFF.parseVertexMapping( length );\n\t\t\t\tbreak;\n\n\t\t\tcase 'POLS':\n\t\t\t\tthis.IFF.parsePolygonList( length );\n\t\t\t\tbreak;\n\n\t\t\tcase 'TAGS':\n\t\t\t\tthis.IFF.parseTagStrings( length );\n\t\t\t\tbreak;\n\n\t\t\tcase 'PTAG':\n\t\t\t\tthis.IFF.parsePolygonTagMapping( length );\n\t\t\t\tbreak;\n\n\t\t\tcase 'VMAD':\n\t\t\t\tthis.IFF.parseVertexMapping( length, true );\n\t\t\t\tbreak;\n\n\t\t\t// Misc CHUNKS\n\t\t\tcase 'DESC': // Description Line\n\t\t\t\tthis.IFF.currentForm.description = this.IFF.reader.getString();\n\t\t\t\tbreak;\n\n\t\t\tcase 'TEXT':\n\t\t\tcase 'CMNT':\n\t\t\tcase 'NCOM':\n\t\t\t\tthis.IFF.currentForm.comment = this.IFF.reader.getString();\n\t\t\t\tbreak;\n\n\t\t\t// Envelope Form\n\t\t\tcase 'NAME':\n\t\t\t\tthis.IFF.currentForm.channelName = this.IFF.reader.getString();\n\t\t\t\tbreak;\n\n\t\t\t// Image Map Layer\n\t\t\tcase 'WRAP':\n\t\t\t\tthis.IFF.currentForm.wrap = { w: this.IFF.reader.getUint16(), h: this.IFF.reader.getUint16() };\n\t\t\t\tbreak;\n\n\t\t\tcase 'IMAG':\n\t\t\t\tconst index = this.IFF.reader.getVariableLengthIndex();\n\t\t\t\tthis.IFF.currentForm.imageIndex = index;\n\t\t\t\tbreak;\n\n\t\t\t// Texture Mapping Form\n\t\t\tcase 'OREF':\n\t\t\t\tthis.IFF.currentForm.referenceObject = this.IFF.reader.getString();\n\t\t\t\tbreak;\n\n\t\t\tcase 'ROID':\n\t\t\t\tthis.IFF.currentForm.referenceObjectID = this.IFF.reader.getUint32();\n\t\t\t\tbreak;\n\n\t\t\t// Surface Blocks\n\t\t\tcase 'SSHN':\n\t\t\t\tthis.IFF.currentSurface.surfaceShaderName = this.IFF.reader.getString();\n\t\t\t\tbreak;\n\n\t\t\tcase 'AOVN':\n\t\t\t\tthis.IFF.currentSurface.surfaceCustomAOVName = this.IFF.reader.getString();\n\t\t\t\tbreak;\n\n\t\t\t// Nodal Blocks\n\t\t\tcase 'NSTA':\n\t\t\t\tthis.IFF.currentForm.disabled = this.IFF.reader.getUint16();\n\t\t\t\tbreak;\n\n\t\t\tcase 'NRNM':\n\t\t\t\tthis.IFF.currentForm.realName = this.IFF.reader.getString();\n\t\t\t\tbreak;\n\n\t\t\tcase 'NNME':\n\t\t\t\tthis.IFF.currentForm.refName = this.IFF.reader.getString();\n\t\t\t\tthis.IFF.currentSurface.nodes[ this.IFF.currentForm.refName ] = this.IFF.currentForm;\n\t\t\t\tbreak;\n\n\t\t\t// Nodal Blocks : connections\n\t\t\tcase 'INME':\n\t\t\t\tif ( ! this.IFF.currentForm.nodeName ) this.IFF.currentForm.nodeName = [];\n\t\t\t\tthis.IFF.currentForm.nodeName.push( this.IFF.reader.getString() );\n\t\t\t\tbreak;\n\n\t\t\tcase 'IINN':\n\t\t\t\tif ( ! this.IFF.currentForm.inputNodeName ) this.IFF.currentForm.inputNodeName = [];\n\t\t\t\tthis.IFF.currentForm.inputNodeName.push( this.IFF.reader.getString() );\n\t\t\t\tbreak;\n\n\t\t\tcase 'IINM':\n\t\t\t\tif ( ! this.IFF.currentForm.inputName ) this.IFF.currentForm.inputName = [];\n\t\t\t\tthis.IFF.currentForm.inputName.push( this.IFF.reader.getString() );\n\t\t\t\tbreak;\n\n\t\t\tcase 'IONM':\n\t\t\t\tif ( ! this.IFF.currentForm.inputOutputName ) this.IFF.currentForm.inputOutputName = [];\n\t\t\t\tthis.IFF.currentForm.inputOutputName.push( this.IFF.reader.getString() );\n\t\t\t\tbreak;\n\n\t\t\tcase 'FNAM':\n\t\t\t\tthis.IFF.currentForm.fileName = this.IFF.reader.getString();\n\t\t\t\tbreak;\n\n\t\t\tcase 'CHAN': // NOTE: ENVL Forms may also have CHAN chunk, however ENVL is currently ignored\n\t\t\t\tif ( length === 4 ) this.IFF.currentForm.textureChannel = this.IFF.reader.getIDTag();\n\t\t\t\telse this.IFF.reader.skip( length );\n\t\t\t\tbreak;\n\n\t\t\t// LWO2 Spec chunks: these are needed since the SURF FORMs are often in LWO2 format\n\t\t\tcase 'SMAN':\n\t\t\t\tconst maxSmoothingAngle = this.IFF.reader.getFloat32();\n\t\t\t\tthis.IFF.currentSurface.attributes.smooth = ( maxSmoothingAngle < 0 ) ? false : true;\n\t\t\t\tbreak;\n\n\t\t\t// LWO2: Basic Surface Parameters\n\t\t\tcase 'COLR':\n\t\t\t\tthis.IFF.currentSurface.attributes.Color = { value: this.IFF.reader.getFloat32Array( 3 ) };\n\t\t\t\tthis.IFF.reader.skip( 2 ); // VX: envelope\n\t\t\t\tbreak;\n\n\t\t\tcase 'LUMI':\n\t\t\t\tthis.IFF.currentSurface.attributes.Luminosity = { value: this.IFF.reader.getFloat32() };\n\t\t\t\tthis.IFF.reader.skip( 2 );\n\t\t\t\tbreak;\n\n\t\t\tcase 'SPEC':\n\t\t\t\tthis.IFF.currentSurface.attributes.Specular = { value: this.IFF.reader.getFloat32() };\n\t\t\t\tthis.IFF.reader.skip( 2 );\n\t\t\t\tbreak;\n\n\t\t\tcase 'DIFF':\n\t\t\t\tthis.IFF.currentSurface.attributes.Diffuse = { value: this.IFF.reader.getFloat32() };\n\t\t\t\tthis.IFF.reader.skip( 2 );\n\t\t\t\tbreak;\n\n\t\t\tcase 'REFL':\n\t\t\t\tthis.IFF.currentSurface.attributes.Reflection = { value: this.IFF.reader.getFloat32() };\n\t\t\t\tthis.IFF.reader.skip( 2 );\n\t\t\t\tbreak;\n\n\t\t\tcase 'GLOS':\n\t\t\t\tthis.IFF.currentSurface.attributes.Glossiness = { value: this.IFF.reader.getFloat32() };\n\t\t\t\tthis.IFF.reader.skip( 2 );\n\t\t\t\tbreak;\n\n\t\t\tcase 'TRAN':\n\t\t\t\tthis.IFF.currentSurface.attributes.opacity = this.IFF.reader.getFloat32();\n\t\t\t\tthis.IFF.reader.skip( 2 );\n\t\t\t\tbreak;\n\n\t\t\tcase 'BUMP':\n\t\t\t\tthis.IFF.currentSurface.attributes.bumpStrength = this.IFF.reader.getFloat32();\n\t\t\t\tthis.IFF.reader.skip( 2 );\n\t\t\t\tbreak;\n\n\t\t\tcase 'SIDE':\n\t\t\t\tthis.IFF.currentSurface.attributes.side = this.IFF.reader.getUint16();\n\t\t\t\tbreak;\n\n\t\t\tcase 'RIMG':\n\t\t\t\tthis.IFF.currentSurface.attributes.reflectionMap = this.IFF.reader.getVariableLengthIndex();\n\t\t\t\tbreak;\n\n\t\t\tcase 'RIND':\n\t\t\t\tthis.IFF.currentSurface.attributes.refractiveIndex = this.IFF.reader.getFloat32();\n\t\t\t\tthis.IFF.reader.skip( 2 );\n\t\t\t\tbreak;\n\n\t\t\tcase 'TIMG':\n\t\t\t\tthis.IFF.currentSurface.attributes.refractionMap = this.IFF.reader.getVariableLengthIndex();\n\t\t\t\tbreak;\n\n\t\t\tcase 'IMAP':\n\t\t\t\tthis.IFF.currentSurface.attributes.imageMapIndex = this.IFF.reader.getUint32();\n\t\t\t\tbreak;\n\n\t\t\tcase 'IUVI': // uv channel name\n\t\t\t\tthis.IFF.currentNode.UVChannel = this.IFF.reader.getString( length );\n\t\t\t\tbreak;\n\n\t\t\tcase 'IUTL': // widthWrappingMode: 0 = Reset, 1 = Repeat, 2 = Mirror, 3 = Edge\n\t\t\t\tthis.IFF.currentNode.widthWrappingMode = this.IFF.reader.getUint32();\n\t\t\t\tbreak;\n\t\t\tcase 'IVTL': // heightWrappingMode\n\t\t\t\tthis.IFF.currentNode.heightWrappingMode = this.IFF.reader.getUint32();\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthis.IFF.parseUnknownCHUNK( blockID, length );\n\n\t\t}\n\n\t\tif ( blockID != 'FORM' ) {\n\n\t\t\tthis.IFF.debugger.node = 1;\n\t\t\tthis.IFF.debugger.nodeID = blockID;\n\t\t\tthis.IFF.debugger.log();\n\n\t\t}\n\n\t\tif ( this.IFF.reader.offset >= this.IFF.currentFormEnd ) {\n\n\t\t\tthis.IFF.currentForm = this.IFF.parentForm;\n\n\t\t}\n\n\t}\n\n}\n\nexport { LWO3Parser };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}