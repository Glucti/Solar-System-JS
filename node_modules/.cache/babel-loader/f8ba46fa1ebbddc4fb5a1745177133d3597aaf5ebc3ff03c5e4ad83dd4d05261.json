{"ast":null,"code":"/**\n * @classdesc Can be used to include Ammo.js as a Physics engine into\n * `three.js` apps. Make sure to include `ammo.wasm.js` first:\n * ```\n * <script src=\"jsm/libs/ammo.wasm.js\"></script>\n * ```\n * It is then possible to initialize the API via:\n * ```js\n * const physics = await AmmoPhysics();\n * ```\n *\n * @name AmmoPhysics\n * @class\n * @hideconstructor\n * @three_import import { AmmoPhysics } from 'three/addons/physics/AmmoPhysics.js';\n */\nasync function AmmoPhysics() {\n  if ('Ammo' in window === false) {\n    console.error('AmmoPhysics: Couldn\\'t find Ammo.js');\n    return;\n  }\n  const AmmoLib = await Ammo(); // eslint-disable-line no-undef\n\n  const frameRate = 60;\n  const collisionConfiguration = new AmmoLib.btDefaultCollisionConfiguration();\n  const dispatcher = new AmmoLib.btCollisionDispatcher(collisionConfiguration);\n  const broadphase = new AmmoLib.btDbvtBroadphase();\n  const solver = new AmmoLib.btSequentialImpulseConstraintSolver();\n  const world = new AmmoLib.btDiscreteDynamicsWorld(dispatcher, broadphase, solver, collisionConfiguration);\n  world.setGravity(new AmmoLib.btVector3(0, -9.8, 0));\n  const worldTransform = new AmmoLib.btTransform();\n\n  //\n\n  function getShape(geometry) {\n    const parameters = geometry.parameters;\n\n    // TODO change type to is*\n\n    if (geometry.type === 'BoxGeometry') {\n      const sx = parameters.width !== undefined ? parameters.width / 2 : 0.5;\n      const sy = parameters.height !== undefined ? parameters.height / 2 : 0.5;\n      const sz = parameters.depth !== undefined ? parameters.depth / 2 : 0.5;\n      const shape = new AmmoLib.btBoxShape(new AmmoLib.btVector3(sx, sy, sz));\n      shape.setMargin(0.05);\n      return shape;\n    } else if (geometry.type === 'SphereGeometry' || geometry.type === 'IcosahedronGeometry') {\n      const radius = parameters.radius !== undefined ? parameters.radius : 1;\n      const shape = new AmmoLib.btSphereShape(radius);\n      shape.setMargin(0.05);\n      return shape;\n    }\n    return null;\n  }\n  const meshes = [];\n  const meshMap = new WeakMap();\n  function addScene(scene) {\n    scene.traverse(function (child) {\n      if (child.isMesh) {\n        const physics = child.userData.physics;\n        if (physics) {\n          addMesh(child, physics.mass);\n        }\n      }\n    });\n  }\n  function addMesh(mesh, mass = 0) {\n    const shape = getShape(mesh.geometry);\n    if (shape !== null) {\n      if (mesh.isInstancedMesh) {\n        handleInstancedMesh(mesh, mass, shape);\n      } else if (mesh.isMesh) {\n        handleMesh(mesh, mass, shape);\n      }\n    }\n  }\n  function handleMesh(mesh, mass, shape) {\n    const position = mesh.position;\n    const quaternion = mesh.quaternion;\n    const transform = new AmmoLib.btTransform();\n    transform.setIdentity();\n    transform.setOrigin(new AmmoLib.btVector3(position.x, position.y, position.z));\n    transform.setRotation(new AmmoLib.btQuaternion(quaternion.x, quaternion.y, quaternion.z, quaternion.w));\n    const motionState = new AmmoLib.btDefaultMotionState(transform);\n    const localInertia = new AmmoLib.btVector3(0, 0, 0);\n    shape.calculateLocalInertia(mass, localInertia);\n    const rbInfo = new AmmoLib.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n    const body = new AmmoLib.btRigidBody(rbInfo);\n    // body.setFriction( 4 );\n    world.addRigidBody(body);\n    if (mass > 0) {\n      meshes.push(mesh);\n      meshMap.set(mesh, body);\n    }\n  }\n  function handleInstancedMesh(mesh, mass, shape) {\n    const array = mesh.instanceMatrix.array;\n    const bodies = [];\n    for (let i = 0; i < mesh.count; i++) {\n      const index = i * 16;\n      const transform = new AmmoLib.btTransform();\n      transform.setFromOpenGLMatrix(array.slice(index, index + 16));\n      const motionState = new AmmoLib.btDefaultMotionState(transform);\n      const localInertia = new AmmoLib.btVector3(0, 0, 0);\n      shape.calculateLocalInertia(mass, localInertia);\n      const rbInfo = new AmmoLib.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n      const body = new AmmoLib.btRigidBody(rbInfo);\n      world.addRigidBody(body);\n      bodies.push(body);\n    }\n    if (mass > 0) {\n      meshes.push(mesh);\n      meshMap.set(mesh, bodies);\n    }\n  }\n\n  //\n\n  function setMeshPosition(mesh, position, index = 0) {\n    if (mesh.isInstancedMesh) {\n      const bodies = meshMap.get(mesh);\n      const body = bodies[index];\n      body.setAngularVelocity(new AmmoLib.btVector3(0, 0, 0));\n      body.setLinearVelocity(new AmmoLib.btVector3(0, 0, 0));\n      worldTransform.setIdentity();\n      worldTransform.setOrigin(new AmmoLib.btVector3(position.x, position.y, position.z));\n      body.setWorldTransform(worldTransform);\n    } else if (mesh.isMesh) {\n      const body = meshMap.get(mesh);\n      body.setAngularVelocity(new AmmoLib.btVector3(0, 0, 0));\n      body.setLinearVelocity(new AmmoLib.btVector3(0, 0, 0));\n      worldTransform.setIdentity();\n      worldTransform.setOrigin(new AmmoLib.btVector3(position.x, position.y, position.z));\n      body.setWorldTransform(worldTransform);\n    }\n  }\n\n  //\n\n  let lastTime = 0;\n  function step() {\n    const time = performance.now();\n    if (lastTime > 0) {\n      const delta = (time - lastTime) / 1000;\n      world.stepSimulation(delta, 10);\n\n      //\n\n      for (let i = 0, l = meshes.length; i < l; i++) {\n        const mesh = meshes[i];\n        if (mesh.isInstancedMesh) {\n          const array = mesh.instanceMatrix.array;\n          const bodies = meshMap.get(mesh);\n          for (let j = 0; j < bodies.length; j++) {\n            const body = bodies[j];\n            const motionState = body.getMotionState();\n            motionState.getWorldTransform(worldTransform);\n            const position = worldTransform.getOrigin();\n            const quaternion = worldTransform.getRotation();\n            compose(position, quaternion, array, j * 16);\n          }\n          mesh.instanceMatrix.needsUpdate = true;\n          mesh.computeBoundingSphere();\n        } else if (mesh.isMesh) {\n          const body = meshMap.get(mesh);\n          const motionState = body.getMotionState();\n          motionState.getWorldTransform(worldTransform);\n          const position = worldTransform.getOrigin();\n          const quaternion = worldTransform.getRotation();\n          mesh.position.set(position.x(), position.y(), position.z());\n          mesh.quaternion.set(quaternion.x(), quaternion.y(), quaternion.z(), quaternion.w());\n        }\n      }\n    }\n    lastTime = time;\n  }\n\n  // animate\n\n  setInterval(step, 1000 / frameRate);\n  return {\n    /**\n     * Adds the given scene to this physics simulation. Only meshes with a\n     * `physics` object in their {@link Object3D#userData} field will be honored.\n     * The object can be used to store the mass of the mesh. E.g.:\n     * ```js\n     * box.userData.physics = { mass: 1 };\n     * ```\n     *\n     * @method\n     * @name AmmoPhysics#addScene\n     * @param {Object3D} scene The scene or any type of 3D object to add.\n     */\n    addScene: addScene,\n    /**\n     * Adds the given mesh to this physics simulation.\n     *\n     * @method\n     * @name AmmoPhysics#addMesh\n     * @param {Mesh} mesh The mesh to add.\n     * @param {number} [mass=0] The mass in kg of the mesh.\n     */\n    addMesh: addMesh,\n    /**\n     * Set the position of the given mesh which is part of the physics simulation. Calling this\n     * method will reset the current simulated velocity of the mesh.\n     *\n     * @method\n     * @name AmmoPhysics#setMeshPosition\n     * @param {Mesh} mesh The mesh to update the position for.\n     * @param {Vector3} position - The new position.\n     * @param {number} [index=0] - If the mesh is instanced, the index represents the instanced ID.\n     */\n    setMeshPosition: setMeshPosition\n    // addCompoundMesh\n  };\n}\nfunction compose(position, quaternion, array, index) {\n  const x = quaternion.x(),\n    y = quaternion.y(),\n    z = quaternion.z(),\n    w = quaternion.w();\n  const x2 = x + x,\n    y2 = y + y,\n    z2 = z + z;\n  const xx = x * x2,\n    xy = x * y2,\n    xz = x * z2;\n  const yy = y * y2,\n    yz = y * z2,\n    zz = z * z2;\n  const wx = w * x2,\n    wy = w * y2,\n    wz = w * z2;\n  array[index + 0] = 1 - (yy + zz);\n  array[index + 1] = xy + wz;\n  array[index + 2] = xz - wy;\n  array[index + 3] = 0;\n  array[index + 4] = xy - wz;\n  array[index + 5] = 1 - (xx + zz);\n  array[index + 6] = yz + wx;\n  array[index + 7] = 0;\n  array[index + 8] = xz + wy;\n  array[index + 9] = yz - wx;\n  array[index + 10] = 1 - (xx + yy);\n  array[index + 11] = 0;\n  array[index + 12] = position.x();\n  array[index + 13] = position.y();\n  array[index + 14] = position.z();\n  array[index + 15] = 1;\n}\nexport { AmmoPhysics };","map":{"version":3,"names":["AmmoPhysics","window","console","error","AmmoLib","Ammo","frameRate","collisionConfiguration","btDefaultCollisionConfiguration","dispatcher","btCollisionDispatcher","broadphase","btDbvtBroadphase","solver","btSequentialImpulseConstraintSolver","world","btDiscreteDynamicsWorld","setGravity","btVector3","worldTransform","btTransform","getShape","geometry","parameters","type","sx","width","undefined","sy","height","sz","depth","shape","btBoxShape","setMargin","radius","btSphereShape","meshes","meshMap","WeakMap","addScene","scene","traverse","child","isMesh","physics","userData","addMesh","mass","mesh","isInstancedMesh","handleInstancedMesh","handleMesh","position","quaternion","transform","setIdentity","setOrigin","x","y","z","setRotation","btQuaternion","w","motionState","btDefaultMotionState","localInertia","calculateLocalInertia","rbInfo","btRigidBodyConstructionInfo","body","btRigidBody","addRigidBody","push","set","array","instanceMatrix","bodies","i","count","index","setFromOpenGLMatrix","slice","setMeshPosition","get","setAngularVelocity","setLinearVelocity","setWorldTransform","lastTime","step","time","performance","now","delta","stepSimulation","l","length","j","getMotionState","getWorldTransform","getOrigin","getRotation","compose","needsUpdate","computeBoundingSphere","setInterval","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/physics/AmmoPhysics.js"],"sourcesContent":["/**\n * @classdesc Can be used to include Ammo.js as a Physics engine into\n * `three.js` apps. Make sure to include `ammo.wasm.js` first:\n * ```\n * <script src=\"jsm/libs/ammo.wasm.js\"></script>\n * ```\n * It is then possible to initialize the API via:\n * ```js\n * const physics = await AmmoPhysics();\n * ```\n *\n * @name AmmoPhysics\n * @class\n * @hideconstructor\n * @three_import import { AmmoPhysics } from 'three/addons/physics/AmmoPhysics.js';\n */\nasync function AmmoPhysics() {\n\n\tif ( 'Ammo' in window === false ) {\n\n\t\tconsole.error( 'AmmoPhysics: Couldn\\'t find Ammo.js' );\n\t\treturn;\n\n\t}\n\n\tconst AmmoLib = await Ammo(); // eslint-disable-line no-undef\n\n\tconst frameRate = 60;\n\n\tconst collisionConfiguration = new AmmoLib.btDefaultCollisionConfiguration();\n\tconst dispatcher = new AmmoLib.btCollisionDispatcher( collisionConfiguration );\n\tconst broadphase = new AmmoLib.btDbvtBroadphase();\n\tconst solver = new AmmoLib.btSequentialImpulseConstraintSolver();\n\tconst world = new AmmoLib.btDiscreteDynamicsWorld( dispatcher, broadphase, solver, collisionConfiguration );\n\tworld.setGravity( new AmmoLib.btVector3( 0, - 9.8, 0 ) );\n\n\tconst worldTransform = new AmmoLib.btTransform();\n\n\t//\n\n\tfunction getShape( geometry ) {\n\n\t\tconst parameters = geometry.parameters;\n\n\t\t// TODO change type to is*\n\n\t\tif ( geometry.type === 'BoxGeometry' ) {\n\n\t\t\tconst sx = parameters.width !== undefined ? parameters.width / 2 : 0.5;\n\t\t\tconst sy = parameters.height !== undefined ? parameters.height / 2 : 0.5;\n\t\t\tconst sz = parameters.depth !== undefined ? parameters.depth / 2 : 0.5;\n\n\t\t\tconst shape = new AmmoLib.btBoxShape( new AmmoLib.btVector3( sx, sy, sz ) );\n\t\t\tshape.setMargin( 0.05 );\n\n\t\t\treturn shape;\n\n\t\t} else if ( geometry.type === 'SphereGeometry' || geometry.type === 'IcosahedronGeometry' ) {\n\n\t\t\tconst radius = parameters.radius !== undefined ? parameters.radius : 1;\n\n\t\t\tconst shape = new AmmoLib.btSphereShape( radius );\n\t\t\tshape.setMargin( 0.05 );\n\n\t\t\treturn shape;\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\tconst meshes = [];\n\tconst meshMap = new WeakMap();\n\n\tfunction addScene( scene ) {\n\n\t\tscene.traverse( function ( child ) {\n\n\t\t\tif ( child.isMesh ) {\n\n\t\t\t\tconst physics = child.userData.physics;\n\n\t\t\t\tif ( physics ) {\n\n\t\t\t\t\taddMesh( child, physics.mass );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n\tfunction addMesh( mesh, mass = 0 ) {\n\n\t\tconst shape = getShape( mesh.geometry );\n\n\t\tif ( shape !== null ) {\n\n\t\t\tif ( mesh.isInstancedMesh ) {\n\n\t\t\t\thandleInstancedMesh( mesh, mass, shape );\n\n\t\t\t} else if ( mesh.isMesh ) {\n\n\t\t\t\thandleMesh( mesh, mass, shape );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction handleMesh( mesh, mass, shape ) {\n\n\t\tconst position = mesh.position;\n\t\tconst quaternion = mesh.quaternion;\n\n\t\tconst transform = new AmmoLib.btTransform();\n\t\ttransform.setIdentity();\n\t\ttransform.setOrigin( new AmmoLib.btVector3( position.x, position.y, position.z ) );\n\t\ttransform.setRotation( new AmmoLib.btQuaternion( quaternion.x, quaternion.y, quaternion.z, quaternion.w ) );\n\n\t\tconst motionState = new AmmoLib.btDefaultMotionState( transform );\n\n\t\tconst localInertia = new AmmoLib.btVector3( 0, 0, 0 );\n\t\tshape.calculateLocalInertia( mass, localInertia );\n\n\t\tconst rbInfo = new AmmoLib.btRigidBodyConstructionInfo( mass, motionState, shape, localInertia );\n\n\t\tconst body = new AmmoLib.btRigidBody( rbInfo );\n\t\t// body.setFriction( 4 );\n\t\tworld.addRigidBody( body );\n\n\t\tif ( mass > 0 ) {\n\n\t\t\tmeshes.push( mesh );\n\t\t\tmeshMap.set( mesh, body );\n\n\t\t}\n\n\n\t}\n\n\tfunction handleInstancedMesh( mesh, mass, shape ) {\n\n\t\tconst array = mesh.instanceMatrix.array;\n\n\t\tconst bodies = [];\n\n\t\tfor ( let i = 0; i < mesh.count; i ++ ) {\n\n\t\t\tconst index = i * 16;\n\n\t\t\tconst transform = new AmmoLib.btTransform();\n\t\t\ttransform.setFromOpenGLMatrix( array.slice( index, index + 16 ) );\n\n\t\t\tconst motionState = new AmmoLib.btDefaultMotionState( transform );\n\n\t\t\tconst localInertia = new AmmoLib.btVector3( 0, 0, 0 );\n\t\t\tshape.calculateLocalInertia( mass, localInertia );\n\n\t\t\tconst rbInfo = new AmmoLib.btRigidBodyConstructionInfo( mass, motionState, shape, localInertia );\n\n\t\t\tconst body = new AmmoLib.btRigidBody( rbInfo );\n\t\t\tworld.addRigidBody( body );\n\n\t\t\tbodies.push( body );\n\n\t\t}\n\n\t\tif ( mass > 0 ) {\n\n\t\t\tmeshes.push( mesh );\n\n\t\t\tmeshMap.set( mesh, bodies );\n\n\t\t}\n\n\t}\n\n\t//\n\n\tfunction setMeshPosition( mesh, position, index = 0 ) {\n\n\t\tif ( mesh.isInstancedMesh ) {\n\n\t\t\tconst bodies = meshMap.get( mesh );\n\t\t\tconst body = bodies[ index ];\n\n\t\t\tbody.setAngularVelocity( new AmmoLib.btVector3( 0, 0, 0 ) );\n\t\t\tbody.setLinearVelocity( new AmmoLib.btVector3( 0, 0, 0 ) );\n\n\t\t\tworldTransform.setIdentity();\n\t\t\tworldTransform.setOrigin( new AmmoLib.btVector3( position.x, position.y, position.z ) );\n\t\t\tbody.setWorldTransform( worldTransform );\n\n\t\t} else if ( mesh.isMesh ) {\n\n\t\t\tconst body = meshMap.get( mesh );\n\n\t\t\tbody.setAngularVelocity( new AmmoLib.btVector3( 0, 0, 0 ) );\n\t\t\tbody.setLinearVelocity( new AmmoLib.btVector3( 0, 0, 0 ) );\n\n\t\t\tworldTransform.setIdentity();\n\t\t\tworldTransform.setOrigin( new AmmoLib.btVector3( position.x, position.y, position.z ) );\n\t\t\tbody.setWorldTransform( worldTransform );\n\n\t\t}\n\n\t}\n\n\t//\n\n\tlet lastTime = 0;\n\n\tfunction step() {\n\n\t\tconst time = performance.now();\n\n\t\tif ( lastTime > 0 ) {\n\n\t\t\tconst delta = ( time - lastTime ) / 1000;\n\n\t\t\tworld.stepSimulation( delta, 10 );\n\n\t\t\t//\n\n\t\t\tfor ( let i = 0, l = meshes.length; i < l; i ++ ) {\n\n\t\t\t\tconst mesh = meshes[ i ];\n\n\t\t\t\tif ( mesh.isInstancedMesh ) {\n\n\t\t\t\t\tconst array = mesh.instanceMatrix.array;\n\t\t\t\t\tconst bodies = meshMap.get( mesh );\n\n\t\t\t\t\tfor ( let j = 0; j < bodies.length; j ++ ) {\n\n\t\t\t\t\t\tconst body = bodies[ j ];\n\n\t\t\t\t\t\tconst motionState = body.getMotionState();\n\t\t\t\t\t\tmotionState.getWorldTransform( worldTransform );\n\n\t\t\t\t\t\tconst position = worldTransform.getOrigin();\n\t\t\t\t\t\tconst quaternion = worldTransform.getRotation();\n\n\t\t\t\t\t\tcompose( position, quaternion, array, j * 16 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmesh.instanceMatrix.needsUpdate = true;\n\t\t\t\t\tmesh.computeBoundingSphere();\n\n\t\t\t\t} else if ( mesh.isMesh ) {\n\n\t\t\t\t\tconst body = meshMap.get( mesh );\n\n\t\t\t\t\tconst motionState = body.getMotionState();\n\t\t\t\t\tmotionState.getWorldTransform( worldTransform );\n\n\t\t\t\t\tconst position = worldTransform.getOrigin();\n\t\t\t\t\tconst quaternion = worldTransform.getRotation();\n\t\t\t\t\tmesh.position.set( position.x(), position.y(), position.z() );\n\t\t\t\t\tmesh.quaternion.set( quaternion.x(), quaternion.y(), quaternion.z(), quaternion.w() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tlastTime = time;\n\n\t}\n\n\t// animate\n\n\tsetInterval( step, 1000 / frameRate );\n\n\treturn {\n\t\t/**\n\t\t * Adds the given scene to this physics simulation. Only meshes with a\n\t\t * `physics` object in their {@link Object3D#userData} field will be honored.\n\t\t * The object can be used to store the mass of the mesh. E.g.:\n\t\t * ```js\n\t\t * box.userData.physics = { mass: 1 };\n\t\t * ```\n\t\t *\n\t\t * @method\n\t\t * @name AmmoPhysics#addScene\n\t\t * @param {Object3D} scene The scene or any type of 3D object to add.\n\t\t */\n\t\taddScene: addScene,\n\n\t\t/**\n\t\t * Adds the given mesh to this physics simulation.\n\t\t *\n\t\t * @method\n\t\t * @name AmmoPhysics#addMesh\n\t\t * @param {Mesh} mesh The mesh to add.\n\t\t * @param {number} [mass=0] The mass in kg of the mesh.\n\t\t */\n\t\taddMesh: addMesh,\n\n\t\t/**\n\t\t * Set the position of the given mesh which is part of the physics simulation. Calling this\n\t\t * method will reset the current simulated velocity of the mesh.\n\t\t *\n\t\t * @method\n\t\t * @name AmmoPhysics#setMeshPosition\n\t\t * @param {Mesh} mesh The mesh to update the position for.\n\t\t * @param {Vector3} position - The new position.\n\t\t * @param {number} [index=0] - If the mesh is instanced, the index represents the instanced ID.\n\t\t */\n\t\tsetMeshPosition: setMeshPosition\n\t\t// addCompoundMesh\n\t};\n\n}\n\nfunction compose( position, quaternion, array, index ) {\n\n\tconst x = quaternion.x(), y = quaternion.y(), z = quaternion.z(), w = quaternion.w();\n\tconst x2 = x + x, y2 = y + y, z2 = z + z;\n\tconst xx = x * x2, xy = x * y2, xz = x * z2;\n\tconst yy = y * y2, yz = y * z2, zz = z * z2;\n\tconst wx = w * x2, wy = w * y2, wz = w * z2;\n\n\tarray[ index + 0 ] = ( 1 - ( yy + zz ) );\n\tarray[ index + 1 ] = ( xy + wz );\n\tarray[ index + 2 ] = ( xz - wy );\n\tarray[ index + 3 ] = 0;\n\n\tarray[ index + 4 ] = ( xy - wz );\n\tarray[ index + 5 ] = ( 1 - ( xx + zz ) );\n\tarray[ index + 6 ] = ( yz + wx );\n\tarray[ index + 7 ] = 0;\n\n\tarray[ index + 8 ] = ( xz + wy );\n\tarray[ index + 9 ] = ( yz - wx );\n\tarray[ index + 10 ] = ( 1 - ( xx + yy ) );\n\tarray[ index + 11 ] = 0;\n\n\tarray[ index + 12 ] = position.x();\n\tarray[ index + 13 ] = position.y();\n\tarray[ index + 14 ] = position.z();\n\tarray[ index + 15 ] = 1;\n\n}\n\nexport { AmmoPhysics };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}