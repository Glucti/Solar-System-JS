{"ast":null,"code":"import { Vector2 } from 'three';\n\n/**\n * @module DotScreenShader\n * @three_import import { DotScreenShader } from 'three/addons/shaders/DotScreenShader.js';\n */\n\n/**\n * Dot screen shader based on [glfx.js sepia shader]{@link https://github.com/evanw/glfx.js}.\n *\n * @constant\n * @type {ShaderMaterial~Shader}\n */\nconst DotScreenShader = {\n  name: 'DotScreenShader',\n  uniforms: {\n    'tDiffuse': {\n      value: null\n    },\n    'tSize': {\n      value: new Vector2(256, 256)\n    },\n    'center': {\n      value: new Vector2(0.5, 0.5)\n    },\n    'angle': {\n      value: 1.57\n    },\n    'scale': {\n      value: 1.0\n    }\n  },\n  vertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n  fragmentShader: /* glsl */`\n\n\t\tuniform vec2 center;\n\t\tuniform float angle;\n\t\tuniform float scale;\n\t\tuniform vec2 tSize;\n\n\t\tuniform sampler2D tDiffuse;\n\n\t\tvarying vec2 vUv;\n\n\t\tfloat pattern() {\n\n\t\t\tfloat s = sin( angle ), c = cos( angle );\n\n\t\t\tvec2 tex = vUv * tSize - center;\n\t\t\tvec2 point = vec2( c * tex.x - s * tex.y, s * tex.x + c * tex.y ) * scale;\n\n\t\t\treturn ( sin( point.x ) * sin( point.y ) ) * 4.0;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvec4 color = texture2D( tDiffuse, vUv );\n\n\t\t\tfloat average = ( color.r + color.g + color.b ) / 3.0;\n\n\t\t\tgl_FragColor = vec4( vec3( average * 10.0 - 5.0 + pattern() ), color.a );\n\n\t\t}`\n};\nexport { DotScreenShader };","map":{"version":3,"names":["Vector2","DotScreenShader","name","uniforms","value","vertexShader","fragmentShader"],"sources":["/home/powqy/Desktop/Design/solar-system-orbits/node_modules/three/examples/jsm/shaders/DotScreenShader.js"],"sourcesContent":["import {\n\tVector2\n} from 'three';\n\n/**\n * @module DotScreenShader\n * @three_import import { DotScreenShader } from 'three/addons/shaders/DotScreenShader.js';\n */\n\n/**\n * Dot screen shader based on [glfx.js sepia shader]{@link https://github.com/evanw/glfx.js}.\n *\n * @constant\n * @type {ShaderMaterial~Shader}\n */\nconst DotScreenShader = {\n\n\tname: 'DotScreenShader',\n\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null },\n\t\t'tSize': { value: new Vector2( 256, 256 ) },\n\t\t'center': { value: new Vector2( 0.5, 0.5 ) },\n\t\t'angle': { value: 1.57 },\n\t\t'scale': { value: 1.0 }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform vec2 center;\n\t\tuniform float angle;\n\t\tuniform float scale;\n\t\tuniform vec2 tSize;\n\n\t\tuniform sampler2D tDiffuse;\n\n\t\tvarying vec2 vUv;\n\n\t\tfloat pattern() {\n\n\t\t\tfloat s = sin( angle ), c = cos( angle );\n\n\t\t\tvec2 tex = vUv * tSize - center;\n\t\t\tvec2 point = vec2( c * tex.x - s * tex.y, s * tex.x + c * tex.y ) * scale;\n\n\t\t\treturn ( sin( point.x ) * sin( point.y ) ) * 4.0;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvec4 color = texture2D( tDiffuse, vUv );\n\n\t\t\tfloat average = ( color.r + color.g + color.b ) / 3.0;\n\n\t\t\tgl_FragColor = vec4( vec3( average * 10.0 - 5.0 + pattern() ), color.a );\n\n\t\t}`\n\n};\n\nexport { DotScreenShader };\n"],"mappings":"AAAA,SACCA,OAAO,QACD,OAAO;;AAEd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,eAAe,GAAG;EAEvBC,IAAI,EAAE,iBAAiB;EAEvBC,QAAQ,EAAE;IAET,UAAU,EAAE;MAAEC,KAAK,EAAE;IAAK,CAAC;IAC3B,OAAO,EAAE;MAAEA,KAAK,EAAE,IAAIJ,OAAO,CAAE,GAAG,EAAE,GAAI;IAAE,CAAC;IAC3C,QAAQ,EAAE;MAAEI,KAAK,EAAE,IAAIJ,OAAO,CAAE,GAAG,EAAE,GAAI;IAAE,CAAC;IAC5C,OAAO,EAAE;MAAEI,KAAK,EAAE;IAAK,CAAC;IACxB,OAAO,EAAE;MAAEA,KAAK,EAAE;IAAI;EAEvB,CAAC;EAEDC,YAAY,EAAE,UAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;EAEHC,cAAc,EAAE,UAAU;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,CAAC;AAED,SAASL,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}